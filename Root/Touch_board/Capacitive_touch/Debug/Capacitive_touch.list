
Capacitive_touch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004650  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080047e0  080047e0  000147e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004964  08004964  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08004964  08004964  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004964  08004964  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004964  08004964  00014964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800496c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
 10 .bss          00001b58  200000c8  200000c8  000200c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001c20  20001c20  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b45f  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021b1  00000000  00000000  0002b557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  0002d708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000718  00000000  00000000  0002df48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d9b0  00000000  00000000  0002e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bcb4  00000000  00000000  0004c010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0298  00000000  00000000  00057cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00107f5c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000025a8  00000000  00000000  00107fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047c8 	.word	0x080047c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	080047c8 	.word	0x080047c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <enable_clocks>:
#include "board.h"
#include "ptu_definitions.h"
#include "ptu_i2c.h"

// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <enable_clocks+0x1c>)
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <enable_clocks+0x1c>)
 80009a6:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80009aa:	6153      	str	r3, [r2, #20]
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <initialise_board+0x20>)
 80009c4:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f245 5255 	movw	r2, #21845	; 0x5555
 80009cc:	801a      	strh	r2, [r3, #0]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	48001002 	.word	0x48001002

080009e0 <state_handler>:
#include "stm32f303xc.h"
#include "led.h"
#include "main.h"
#include "run_game.h"

void state_handler(char *state, int *game_state){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
	int state_int = atoi(state);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f003 f987 	bl	8003cfe <atoi>
 80009f0:	60f8      	str	r0, [r7, #12]
	*game_state = state_int;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	601a      	str	r2, [r3, #0]
//	else if(state_int == 02){
//		enter_challenge_2();
//	}

	//set_led(0b10101010);
}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <check_state>:

void check_state(int game_state){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

	if (game_state == 3){
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b03      	cmp	r3, #3
 8000a0c:	d101      	bne.n	8000a12 <check_state+0x12>
		enter_challenge_3();
 8000a0e:	f000 fa41 	bl	8000e94 <enter_challenge_3>
	}

}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <set_led>:
#include "led.h"

#include "stm32f303xc.h"

void set_led(int set){
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <set_led+0x20>)
 8000a26:	60fb      	str	r3, [r7, #12]
	*led_register = set;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	701a      	strb	r2, [r3, #0]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	48001015 	.word	0x48001015

08000a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	db0b      	blt.n	8000a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	f003 021f 	and.w	r2, r3, #31
 8000a58:	4907      	ldr	r1, [pc, #28]	; (8000a78 <__NVIC_EnableIRQ+0x38>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	095b      	lsrs	r3, r3, #5
 8000a60:	2001      	movs	r0, #1
 8000a62:	fa00 f202 	lsl.w	r2, r0, r2
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  enable_clocks();
 8000a80:	f7ff ff8c 	bl	800099c <enable_clocks>
  initialise_board();
 8000a84:	f7ff ff9a 	bl	80009bc <initialise_board>
  SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	490d      	ldr	r1, [pc, #52]	; (8000ac0 <main+0x44>)
 8000a8c:	2004      	movs	r0, #4
 8000a8e:	f000 fcf9 	bl	8001484 <SerialInitialise>
  enable_interrupts_RX();
 8000a92:	f000 fd6b 	bl	800156c <enable_interrupts_RX>
  TSC_error_handler = &handle_error;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <main+0x48>)
 8000a98:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <main+0x4c>)
 8000a9a:	601a      	str	r2, [r3, #0]
  TSC_EOA_handler = &get_output_channel;
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <main+0x50>)
 8000a9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <main+0x54>)
 8000aa0:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa2:	f000 ff9d 	bl	80019e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa6:	f000 f815 	bl	8000ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aaa:	f000 f8e5 	bl	8000c78 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000aae:	f000 f8c1 	bl	8000c34 <MX_USB_PCD_Init>
  MX_TSC_Init();
 8000ab2:	f000 f86b 	bl	8000b8c <MX_TSC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  enter_waiting();		// Wait until game is entered
 8000ab6:	f000 fa85 	bl	8000fc4 <enter_waiting>
 8000aba:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000018 	.word	0x20000018
 8000ac4:	20000484 	.word	0x20000484
 8000ac8:	08000fb1 	.word	0x08000fb1
 8000acc:	20000488 	.word	0x20000488
 8000ad0:	08000fe1 	.word	0x08000fe1

08000ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b09e      	sub	sp, #120	; 0x78
 8000ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ade:	2228      	movs	r2, #40	; 0x28
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f003 f942 	bl	8003d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af8:	463b      	mov	r3, r7
 8000afa:	223c      	movs	r2, #60	; 0x3c
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f003 f934 	bl	8003d6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b04:	2301      	movs	r3, #1
 8000b06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b08:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b0c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b12:	2301      	movs	r3, #1
 8000b14:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b16:	2302      	movs	r3, #2
 8000b18:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b1e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b24:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 fb08 	bl	8002140 <HAL_RCC_OscConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b36:	f000 f9a7 	bl	8000e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b54:	2101      	movs	r1, #1
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 fb30 	bl	80031bc <HAL_RCC_ClockConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b62:	f000 f991 	bl	8000e88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b6a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b70:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b72:	463b      	mov	r3, r7
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 fd07 	bl	8003588 <HAL_RCCEx_PeriphCLKConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000b80:	f000 f982 	bl	8000e88 <Error_Handler>
  }
}
 8000b84:	bf00      	nop
 8000b86:	3778      	adds	r7, #120	; 0x78
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8000b90:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <MX_TSC_Init+0x98>)
 8000b92:	4a25      	ldr	r2, [pc, #148]	; (8000c28 <MX_TSC_Init+0x9c>)
 8000b94:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8000b96:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <MX_TSC_Init+0x98>)
 8000b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b9c:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8000b9e:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <MX_TSC_Init+0x98>)
 8000ba0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ba4:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <MX_TSC_Init+0x98>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8000bac:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <MX_TSC_Init+0x98>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <MX_TSC_Init+0x98>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_TSC_Init+0x98>)
 8000bba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bbe:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_4095;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_TSC_Init+0x98>)
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_TSC_Init+0x98>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <MX_TSC_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_TSC_Init+0x98>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_TSC_Init+0x98>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO1|TSC_GROUP3_IO3|TSC_GROUP4_IO1
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_TSC_Init+0x98>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <MX_TSC_Init+0xa0>)
 8000be4:	631a      	str	r2, [r3, #48]	; 0x30
                    |TSC_GROUP5_IO3|TSC_GROUP6_IO1;
  htsc.Init.ShieldIOs = 0;
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_TSC_Init+0x98>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO2|TSC_GROUP2_IO2|TSC_GROUP3_IO2|TSC_GROUP4_IO2
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <MX_TSC_Init+0x98>)
 8000bee:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <MX_TSC_Init+0xa4>)
 8000bf0:	639a      	str	r2, [r3, #56]	; 0x38
                    |TSC_GROUP5_IO2|TSC_GROUP6_IO2;
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8000bf2:	480c      	ldr	r0, [pc, #48]	; (8000c24 <MX_TSC_Init+0x98>)
 8000bf4:	f002 fe78 	bl	80038e8 <HAL_TSC_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TSC_Init+0x76>
  {
    Error_Handler();
 8000bfe:	f000 f943 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */
  TSC->IER |= TSC_IER_MCEIE;
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_TSC_Init+0x9c>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <MX_TSC_Init+0x9c>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	6053      	str	r3, [r2, #4]
  TSC->IER |= TSC_IER_EOAIE;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_TSC_Init+0x9c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <MX_TSC_Init+0x9c>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6053      	str	r3, [r2, #4]
  NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000c1a:	2008      	movs	r0, #8
 8000c1c:	f7ff ff10 	bl	8000a40 <__NVIC_EnableIRQ>
  /* USER CODE END TSC_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200000e4 	.word	0x200000e4
 8000c28:	40024000 	.word	0x40024000
 8000c2c:	00141414 	.word	0x00141414
 8000c30:	00222222 	.word	0x00222222

08000c34 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <MX_USB_PCD_Init+0x3c>)
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <MX_USB_PCD_Init+0x40>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_USB_PCD_Init+0x3c>)
 8000c40:	2208      	movs	r2, #8
 8000c42:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <MX_USB_PCD_Init+0x3c>)
 8000c46:	2202      	movs	r2, #2
 8000c48:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_USB_PCD_Init+0x3c>)
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <MX_USB_PCD_Init+0x3c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_USB_PCD_Init+0x3c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_USB_PCD_Init+0x3c>)
 8000c5e:	f001 f99d 	bl	8001f9c <HAL_PCD_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000c68:	f000 f90e 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000128 	.word	0x20000128
 8000c74:	40005c00 	.word	0x40005c00

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8e:	4b37      	ldr	r3, [pc, #220]	; (8000d6c <MX_GPIO_Init+0xf4>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	4a36      	ldr	r2, [pc, #216]	; (8000d6c <MX_GPIO_Init+0xf4>)
 8000c94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c98:	6153      	str	r3, [r2, #20]
 8000c9a:	4b34      	ldr	r3, [pc, #208]	; (8000d6c <MX_GPIO_Init+0xf4>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b31      	ldr	r3, [pc, #196]	; (8000d6c <MX_GPIO_Init+0xf4>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	4a30      	ldr	r2, [pc, #192]	; (8000d6c <MX_GPIO_Init+0xf4>)
 8000cac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cb0:	6153      	str	r3, [r2, #20]
 8000cb2:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <MX_GPIO_Init+0xf4>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cbe:	4b2b      	ldr	r3, [pc, #172]	; (8000d6c <MX_GPIO_Init+0xf4>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	4a2a      	ldr	r2, [pc, #168]	; (8000d6c <MX_GPIO_Init+0xf4>)
 8000cc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cc8:	6153      	str	r3, [r2, #20]
 8000cca:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <MX_GPIO_Init+0xf4>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <MX_GPIO_Init+0xf4>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	4a24      	ldr	r2, [pc, #144]	; (8000d6c <MX_GPIO_Init+0xf4>)
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	6153      	str	r3, [r2, #20]
 8000ce2:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <MX_GPIO_Init+0xf4>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <MX_GPIO_Init+0xf4>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	4a1e      	ldr	r2, [pc, #120]	; (8000d6c <MX_GPIO_Init+0xf4>)
 8000cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf8:	6153      	str	r3, [r2, #20]
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <MX_GPIO_Init+0xf4>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|GPIO_PIN_10
 8000d06:	2200      	movs	r2, #0
 8000d08:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000d0c:	4818      	ldr	r0, [pc, #96]	; (8000d70 <MX_GPIO_Init+0xf8>)
 8000d0e:	f001 f92d 	bl	8001f6c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000d12:	2337      	movs	r3, #55	; 0x37
 8000d14:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d16:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4812      	ldr	r0, [pc, #72]	; (8000d70 <MX_GPIO_Init+0xf8>)
 8000d28:	f000 ffa6 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin PE10
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|GPIO_PIN_10
 8000d2c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000d30:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	480a      	ldr	r0, [pc, #40]	; (8000d70 <MX_GPIO_Init+0xf8>)
 8000d46:	f000 ff97 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d60:	f000 ff8a 	bl	8001c78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d64:	bf00      	nop
 8000d66:	3728      	adds	r7, #40	; 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	48001000 	.word	0x48001000

08000d74 <USART1_IRQHandler>:

/* USER CODE BEGIN 4 */
void USART1_IRQHandler(){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0

	char single_inp;
	int test = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]

	test = SerialReceiveChar(&USART1_PORT, &single_inp);
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	4619      	mov	r1, r3
 8000d82:	4826      	ldr	r0, [pc, #152]	; (8000e1c <USART1_IRQHandler+0xa8>)
 8000d84:	f000 fc47 	bl	8001616 <SerialReceiveChar>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60fb      	str	r3, [r7, #12]
	if (test == 1){
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d109      	bne.n	8000da6 <USART1_IRQHandler+0x32>
		input_buffer[input_counter] = single_inp;
 8000d92:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <USART1_IRQHandler+0xac>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	79f9      	ldrb	r1, [r7, #7]
 8000d98:	4a22      	ldr	r2, [pc, #136]	; (8000e24 <USART1_IRQHandler+0xb0>)
 8000d9a:	54d1      	strb	r1, [r2, r3]
		input_counter ++;
 8000d9c:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <USART1_IRQHandler+0xac>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	4a1f      	ldr	r2, [pc, #124]	; (8000e20 <USART1_IRQHandler+0xac>)
 8000da4:	6013      	str	r3, [r2, #0]
	}

	if (single_inp == 33){ //check for end of string character
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b21      	cmp	r3, #33	; 0x21
 8000daa:	d134      	bne.n	8000e16 <USART1_IRQHandler+0xa2>
		if (strncmp(input_buffer, "AA55", 4) == 0){ //check for sentinal char
 8000dac:	2204      	movs	r2, #4
 8000dae:	491e      	ldr	r1, [pc, #120]	; (8000e28 <USART1_IRQHandler+0xb4>)
 8000db0:	481c      	ldr	r0, [pc, #112]	; (8000e24 <USART1_IRQHandler+0xb0>)
 8000db2:	f003 f90a 	bl	8003fca <strncmp>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d121      	bne.n	8000e00 <USART1_IRQHandler+0x8c>
			if (input_buffer[4] == 49){ //if msgtype is 1
 8000dbc:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <USART1_IRQHandler+0xb0>)
 8000dbe:	791b      	ldrb	r3, [r3, #4]
 8000dc0:	2b31      	cmp	r3, #49	; 0x31
 8000dc2:	d11d      	bne.n	8000e00 <USART1_IRQHandler+0x8c>
				char *data = malloc(4);
 8000dc4:	2004      	movs	r0, #4
 8000dc6:	f002 ffc9 	bl	8003d5c <malloc>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	60bb      	str	r3, [r7, #8]
				strcpy(data, input_buffer + 5);
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <USART1_IRQHandler+0xb8>)
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	68b8      	ldr	r0, [r7, #8]
 8000dd4:	f003 f8f1 	bl	8003fba <strcpy>
				data[2] = 0;
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	3302      	adds	r3, #2
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]

				empty_buffer(input_buffer, BUFFER);
 8000de0:	2164      	movs	r1, #100	; 0x64
 8000de2:	4810      	ldr	r0, [pc, #64]	; (8000e24 <USART1_IRQHandler+0xb0>)
 8000de4:	f000 fc56 	bl	8001694 <empty_buffer>
				input_counter = 0;
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <USART1_IRQHandler+0xac>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
				test = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
				single_inp = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	71fb      	strb	r3, [r7, #7]

				state_handler(data, &current_game_state);
 8000df6:	490e      	ldr	r1, [pc, #56]	; (8000e30 <USART1_IRQHandler+0xbc>)
 8000df8:	68b8      	ldr	r0, [r7, #8]
 8000dfa:	f7ff fdf1 	bl	80009e0 <state_handler>
 8000dfe:	e00a      	b.n	8000e16 <USART1_IRQHandler+0xa2>

				return;
			}
		}

		empty_buffer(input_buffer, BUFFER);
 8000e00:	2164      	movs	r1, #100	; 0x64
 8000e02:	4808      	ldr	r0, [pc, #32]	; (8000e24 <USART1_IRQHandler+0xb0>)
 8000e04:	f000 fc46 	bl	8001694 <empty_buffer>
		input_counter = 0;
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <USART1_IRQHandler+0xac>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
		test = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
		single_inp = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	71fb      	strb	r3, [r7, #7]
	}
}
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000018 	.word	0x20000018
 8000e20:	2000047c 	.word	0x2000047c
 8000e24:	20000418 	.word	0x20000418
 8000e28:	080047e0 	.word	0x080047e0
 8000e2c:	2000041d 	.word	0x2000041d
 8000e30:	20000414 	.word	0x20000414

08000e34 <EXTI2_TSC_IRQHandler>:

void EXTI2_TSC_IRQHandler()
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	if(TSC_error_handler != 0x00 && (TSC->ISR & TSC_ISR_MCEF) != 0)
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <EXTI2_TSC_IRQHandler+0x44>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d009      	beq.n	8000e54 <EXTI2_TSC_IRQHandler+0x20>
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <EXTI2_TSC_IRQHandler+0x48>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <EXTI2_TSC_IRQHandler+0x20>
	{
		TSC_error_handler();
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <EXTI2_TSC_IRQHandler+0x44>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4798      	blx	r3
 8000e52:	e00c      	b.n	8000e6e <EXTI2_TSC_IRQHandler+0x3a>
	}

	else if(TSC_EOA_handler != 0x00 && (TSC->ISR & TSC_ISR_EOAF) != 0)
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <EXTI2_TSC_IRQHandler+0x4c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d008      	beq.n	8000e6e <EXTI2_TSC_IRQHandler+0x3a>
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <EXTI2_TSC_IRQHandler+0x48>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d002      	beq.n	8000e6e <EXTI2_TSC_IRQHandler+0x3a>
	{
		TSC_EOA_handler();
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <EXTI2_TSC_IRQHandler+0x4c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4798      	blx	r3
	}

	HAL_TSC_IRQHandler(&htsc);
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <EXTI2_TSC_IRQHandler+0x50>)
 8000e70:	f002 fea3 	bl	8003bba <HAL_TSC_IRQHandler>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000484 	.word	0x20000484
 8000e7c:	40024000 	.word	0x40024000
 8000e80:	20000488 	.word	0x20000488
 8000e84:	200000e4 	.word	0x200000e4

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <Error_Handler+0x8>
	...

08000e94 <enter_challenge_3>:
uint16_t check_zero = 0;			// Counts if output status is zero
uint16_t note_index = 0;			// Array index of current note array
uint16_t is_zero = 0;				// Counts how many times a channel output is zero

void enter_challenge_3()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	// Start code AA55103!
	set_led(0b111);
 8000e98:	2007      	movs	r0, #7
 8000e9a:	f7ff fdbf 	bl	8000a1c <set_led>

	memset(channel_out_arr, 0 ,sizeof(channel_out_arr));
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4832      	ldr	r0, [pc, #200]	; (8000f6c <enter_challenge_3+0xd8>)
 8000ea4:	f002 ff62 	bl	8003d6c <memset>
	memset(transmit_cnt_arr, 0 ,sizeof(transmit_cnt_arr));
 8000ea8:	220c      	movs	r2, #12
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4830      	ldr	r0, [pc, #192]	; (8000f70 <enter_challenge_3+0xdc>)
 8000eae:	f002 ff5d 	bl	8003d6c <memset>
	memset(note_array, 0 ,sizeof(note_array));
 8000eb2:	2212      	movs	r2, #18
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	482f      	ldr	r0, [pc, #188]	; (8000f74 <enter_challenge_3+0xe0>)
 8000eb8:	f002 ff58 	bl	8003d6c <memset>
	memset(group_sense_values, 0 ,sizeof(group_sense_values));
 8000ebc:	220c      	movs	r2, #12
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	482d      	ldr	r0, [pc, #180]	; (8000f78 <enter_challenge_3+0xe4>)
 8000ec2:	f002 ff53 	bl	8003d6c <memset>
	memset(group_sum, 0 ,sizeof(group_sum));
 8000ec6:	2218      	movs	r2, #24
 8000ec8:	2100      	movs	r1, #0
 8000eca:	482c      	ldr	r0, [pc, #176]	; (8000f7c <enter_challenge_3+0xe8>)
 8000ecc:	f002 ff4e 	bl	8003d6c <memset>
	memset(channel_out_str, 0 ,sizeof(channel_out_str));
 8000ed0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	482a      	ldr	r0, [pc, #168]	; (8000f80 <enter_challenge_3+0xec>)
 8000ed8:	f002 ff48 	bl	8003d6c <memset>
	memset(group_sense_val_buffer, 0 ,sizeof(group_sense_val_buffer));
 8000edc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4828      	ldr	r0, [pc, #160]	; (8000f84 <enter_challenge_3+0xf0>)
 8000ee4:	f002 ff42 	bl	8003d6c <memset>
	memset(group_roll_av_buffer, 0 ,sizeof(group_roll_av_buffer));
 8000ee8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000eec:	2100      	movs	r1, #0
 8000eee:	4826      	ldr	r0, [pc, #152]	; (8000f88 <enter_challenge_3+0xf4>)
 8000ef0:	f002 ff3c 	bl	8003d6c <memset>
	memset(channel_out_buff_arr, 0 ,sizeof(channel_out_buff_arr));
 8000ef4:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4824      	ldr	r0, [pc, #144]	; (8000f8c <enter_challenge_3+0xf8>)
 8000efc:	f002 ff36 	bl	8003d6c <memset>

	while (1)
	{
		// If not in current challenge, send EOS character and wait
		if(current_game_state != 3)
 8000f00:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <enter_challenge_3+0xfc>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d005      	beq.n	8000f14 <enter_challenge_3+0x80>
		{
			SerialOutputString("!",&USART1_PORT);
 8000f08:	4922      	ldr	r1, [pc, #136]	; (8000f94 <enter_challenge_3+0x100>)
 8000f0a:	4823      	ldr	r0, [pc, #140]	; (8000f98 <enter_challenge_3+0x104>)
 8000f0c:	f000 fb5f 	bl	80015ce <SerialOutputString>
			enter_waiting();
 8000f10:	f000 f858 	bl	8000fc4 <enter_waiting>
		}

		// Reset buffers and acquisition status
		check_zero = 0;
 8000f14:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <enter_challenge_3+0x108>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	801a      	strh	r2, [r3, #0]
		memset(channel_out_arr, 0, sizeof(channel_out_arr));
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4813      	ldr	r0, [pc, #76]	; (8000f6c <enter_challenge_3+0xd8>)
 8000f20:	f002 ff24 	bl	8003d6c <memset>
		memset(string_to_send, 0, sizeof(string_to_send));
 8000f24:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f28:	2100      	movs	r1, #0
 8000f2a:	481d      	ldr	r0, [pc, #116]	; (8000fa0 <enter_challenge_3+0x10c>)
 8000f2c:	f002 ff1e 	bl	8003d6c <memset>

		// All transmissions begin with sentinel bits
		strcat(string_to_send, "AA553");
 8000f30:	481b      	ldr	r0, [pc, #108]	; (8000fa0 <enter_challenge_3+0x10c>)
 8000f32:	f7ff f94d 	bl	80001d0 <strlen>
 8000f36:	4603      	mov	r3, r0
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <enter_challenge_3+0x10c>)
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <enter_challenge_3+0x110>)
 8000f40:	6810      	ldr	r0, [r2, #0]
 8000f42:	6018      	str	r0, [r3, #0]
 8000f44:	8892      	ldrh	r2, [r2, #4]
 8000f46:	809a      	strh	r2, [r3, #4]

		// Reset sampling capacitors
		HAL_TSC_IODischarge(&htsc, ENABLE);
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4817      	ldr	r0, [pc, #92]	; (8000fa8 <enter_challenge_3+0x114>)
 8000f4c:	f002 fdda 	bl	8003b04 <HAL_TSC_IODischarge>

		// Begin TSC acquisition and wait for completion
		HAL_TSC_Start_IT(&htsc);
 8000f50:	4815      	ldr	r0, [pc, #84]	; (8000fa8 <enter_challenge_3+0x114>)
 8000f52:	f002 fd49 	bl	80039e8 <HAL_TSC_Start_IT>

		// Waits until acquisition of each group is complete
		HAL_TSC_PollForAcquisition(&htsc);
 8000f56:	4814      	ldr	r0, [pc, #80]	; (8000fa8 <enter_challenge_3+0x114>)
 8000f58:	f002 fda3 	bl	8003aa2 <HAL_TSC_PollForAcquisition>

		//get_output_channel();

		if(completed == 1)
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <enter_challenge_3+0x118>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d000      	beq.n	8000f66 <enter_challenge_3+0xd2>
		if(current_game_state != 3)
 8000f64:	e7cc      	b.n	8000f00 <enter_challenge_3+0x6c>
		{
			return;
 8000f66:	bf00      	nop
		}

		//set_led(0b11111111);
	}
}
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000680 	.word	0x20000680
 8000f70:	2000068c 	.word	0x2000068c
 8000f74:	20000698 	.word	0x20000698
 8000f78:	200006ac 	.word	0x200006ac
 8000f7c:	200008ac 	.word	0x200008ac
 8000f80:	200006b8 	.word	0x200006b8
 8000f84:	200008c4 	.word	0x200008c4
 8000f88:	2000147c 	.word	0x2000147c
 8000f8c:	2000192c 	.word	0x2000192c
 8000f90:	20000414 	.word	0x20000414
 8000f94:	20000018 	.word	0x20000018
 8000f98:	080047f0 	.word	0x080047f0
 8000f9c:	20001c02 	.word	0x20001c02
 8000fa0:	2000048c 	.word	0x2000048c
 8000fa4:	080047f4 	.word	0x080047f4
 8000fa8:	200000e4 	.word	0x200000e4
 8000fac:	20000480 	.word	0x20000480

08000fb0 <handle_error>:

void handle_error()
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	// If max count error occurs, flash all LEDs for 2 seconds, then return to main game loop
	set_led(0b11111111);
 8000fb4:	20ff      	movs	r0, #255	; 0xff
 8000fb6:	f7ff fd31 	bl	8000a1c <set_led>
	// Upon returning to main game loop, everything gets reset
	enter_challenge_3();
 8000fba:	f7ff ff6b 	bl	8000e94 <enter_challenge_3>
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <enter_waiting>:

void enter_waiting()
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	set_led(0b11001100);
 8000fc8:	20cc      	movs	r0, #204	; 0xcc
 8000fca:	f7ff fd27 	bl	8000a1c <set_led>
	while(1)
	{
		check_state(current_game_state);
 8000fce:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <enter_waiting+0x18>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fd14 	bl	8000a00 <check_state>
 8000fd8:	e7f9      	b.n	8000fce <enter_waiting+0xa>
 8000fda:	bf00      	nop
 8000fdc:	20000414 	.word	0x20000414

08000fe0 <get_output_channel>:
	}
}

void get_output_channel()
{
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
	// Update rolling average for each group
	for(int i = 0; i < NUM_GROUPS; i++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	e055      	b.n	8001098 <get_output_channel+0xb8>
	{
	  group_sense_values[i] = (uint16_t)(HAL_TSC_GroupGetValue(&htsc, i));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	48a5      	ldr	r0, [pc, #660]	; (8001288 <get_output_channel+0x2a8>)
 8000ff2:	f002 fd75 	bl	8003ae0 <HAL_TSC_GroupGetValue>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b299      	uxth	r1, r3
 8000ffa:	4aa4      	ldr	r2, [pc, #656]	; (800128c <get_output_channel+0x2ac>)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  group_sum[i] = group_sum[i] - group_sense_val_buffer[i][sense_index] + group_sense_values[i];
 8001002:	4aa3      	ldr	r2, [pc, #652]	; (8001290 <get_output_channel+0x2b0>)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100a:	4aa2      	ldr	r2, [pc, #648]	; (8001294 <get_output_channel+0x2b4>)
 800100c:	8812      	ldrh	r2, [r2, #0]
 800100e:	4614      	mov	r4, r2
 8001010:	49a1      	ldr	r1, [pc, #644]	; (8001298 <get_output_channel+0x2b8>)
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	20fa      	movs	r0, #250	; 0xfa
 8001016:	fb00 f202 	mul.w	r2, r0, r2
 800101a:	4422      	add	r2, r4
 800101c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001020:	1a9b      	subs	r3, r3, r2
 8001022:	499a      	ldr	r1, [pc, #616]	; (800128c <get_output_channel+0x2ac>)
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800102a:	441a      	add	r2, r3
 800102c:	4998      	ldr	r1, [pc, #608]	; (8001290 <get_output_channel+0x2b0>)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  group_sense_val_buffer[i][sense_index] = group_sense_values[i];
 8001034:	4b97      	ldr	r3, [pc, #604]	; (8001294 <get_output_channel+0x2b4>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	461c      	mov	r4, r3
 800103a:	4a94      	ldr	r2, [pc, #592]	; (800128c <get_output_channel+0x2ac>)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001042:	4a95      	ldr	r2, [pc, #596]	; (8001298 <get_output_channel+0x2b8>)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	21fa      	movs	r1, #250	; 0xfa
 8001048:	fb01 f303 	mul.w	r3, r1, r3
 800104c:	4423      	add	r3, r4
 800104e:	4601      	mov	r1, r0
 8001050:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  group_roll_av_buffer[i][roll_index] = (uint16_t)(round(group_sum[i]/SENSE_VALUE_BUFFER));
 8001054:	4a8e      	ldr	r2, [pc, #568]	; (8001290 <get_output_channel+0x2b0>)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105c:	4a8f      	ldr	r2, [pc, #572]	; (800129c <get_output_channel+0x2bc>)
 800105e:	fba2 2303 	umull	r2, r3, r2, r3
 8001062:	091b      	lsrs	r3, r3, #4
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fb77 	bl	8000758 <__aeabi_ui2d>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	498c      	ldr	r1, [pc, #560]	; (80012a0 <get_output_channel+0x2c0>)
 8001070:	8809      	ldrh	r1, [r1, #0]
 8001072:	460c      	mov	r4, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f7ff fc70 	bl	800095c <__aeabi_d2uiz>
 800107c:	4603      	mov	r3, r0
 800107e:	b298      	uxth	r0, r3
 8001080:	4a88      	ldr	r2, [pc, #544]	; (80012a4 <get_output_channel+0x2c4>)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2164      	movs	r1, #100	; 0x64
 8001086:	fb01 f303 	mul.w	r3, r1, r3
 800108a:	4423      	add	r3, r4
 800108c:	4601      	mov	r1, r0
 800108e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < NUM_GROUPS; i++)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	3301      	adds	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	2b05      	cmp	r3, #5
 800109c:	dda6      	ble.n	8000fec <get_output_channel+0xc>
	}

	// Checks if average has dropped by 3% and updates channel output buffer
	for(int i = 0; i < NUM_GROUPS; i++)
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	e043      	b.n	800112c <get_output_channel+0x14c>
	{
	  if (group_roll_av_buffer[i][roll_index] < 0.97*(group_roll_av_buffer[i][0]))
 80010a4:	4b7e      	ldr	r3, [pc, #504]	; (80012a0 <get_output_channel+0x2c0>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	4a7e      	ldr	r2, [pc, #504]	; (80012a4 <get_output_channel+0x2c4>)
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	2164      	movs	r1, #100	; 0x64
 80010b0:	fb01 f303 	mul.w	r3, r1, r3
 80010b4:	4403      	add	r3, r0
 80010b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fb5c 	bl	8000778 <__aeabi_i2d>
 80010c0:	4604      	mov	r4, r0
 80010c2:	460d      	mov	r5, r1
 80010c4:	4a77      	ldr	r2, [pc, #476]	; (80012a4 <get_output_channel+0x2c4>)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	21c8      	movs	r1, #200	; 0xc8
 80010ca:	fb01 f303 	mul.w	r3, r1, r3
 80010ce:	4413      	add	r3, r2
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fb50 	bl	8000778 <__aeabi_i2d>
 80010d8:	a369      	add	r3, pc, #420	; (adr r3, 8001280 <get_output_channel+0x2a0>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff f8cf 	bl	8000280 <__aeabi_dmul>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4620      	mov	r0, r4
 80010e8:	4629      	mov	r1, r5
 80010ea:	f7ff fc0f 	bl	800090c <__aeabi_dcmplt>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d007      	beq.n	8001104 <get_output_channel+0x124>
	  {
		  channel_out_arr[i] = i+1;
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	3301      	adds	r3, #1
 80010fa:	b299      	uxth	r1, r3
 80010fc:	4a6a      	ldr	r2, [pc, #424]	; (80012a8 <get_output_channel+0x2c8>)
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  }

	  channel_out_buff_arr[i][channel_index] = channel_out_arr[i];
 8001104:	4b69      	ldr	r3, [pc, #420]	; (80012ac <get_output_channel+0x2cc>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	461c      	mov	r4, r3
 800110a:	4a67      	ldr	r2, [pc, #412]	; (80012a8 <get_output_channel+0x2c8>)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001112:	4967      	ldr	r1, [pc, #412]	; (80012b0 <get_output_channel+0x2d0>)
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4613      	mov	r3, r2
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	1a9b      	subs	r3, r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4423      	add	r3, r4
 8001120:	4602      	mov	r2, r0
 8001122:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(int i = 0; i < NUM_GROUPS; i++)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	3301      	adds	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	2b05      	cmp	r3, #5
 8001130:	ddb8      	ble.n	80010a4 <get_output_channel+0xc4>

	}

	// Checks if group output is stable
	for(int i = 0; i < NUM_GROUPS; i++)
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	e029      	b.n	800118c <get_output_channel+0x1ac>
	{
		is_zero = 0;
 8001138:	4b5e      	ldr	r3, [pc, #376]	; (80012b4 <get_output_channel+0x2d4>)
 800113a:	2200      	movs	r2, #0
 800113c:	801a      	strh	r2, [r3, #0]
		for(int k = 0; k < CHANNEL_BUFFER; k++)
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	e014      	b.n	800116e <get_output_channel+0x18e>
		{
			if(channel_out_buff_arr[i][k] == 0)
 8001144:	495a      	ldr	r1, [pc, #360]	; (80012b0 <get_output_channel+0x2d0>)
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	4613      	mov	r3, r2
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	68ba      	ldr	r2, [r7, #8]
 8001152:	4413      	add	r3, r2
 8001154:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d105      	bne.n	8001168 <get_output_channel+0x188>
			{
				is_zero++;
 800115c:	4b55      	ldr	r3, [pc, #340]	; (80012b4 <get_output_channel+0x2d4>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	b29a      	uxth	r2, r3
 8001164:	4b53      	ldr	r3, [pc, #332]	; (80012b4 <get_output_channel+0x2d4>)
 8001166:	801a      	strh	r2, [r3, #0]
		for(int k = 0; k < CHANNEL_BUFFER; k++)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	3301      	adds	r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2b3b      	cmp	r3, #59	; 0x3b
 8001172:	dde7      	ble.n	8001144 <get_output_channel+0x164>
			}
		}

		if(is_zero == CHANNEL_BUFFER)
 8001174:	4b4f      	ldr	r3, [pc, #316]	; (80012b4 <get_output_channel+0x2d4>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	2b3c      	cmp	r3, #60	; 0x3c
 800117a:	d104      	bne.n	8001186 <get_output_channel+0x1a6>
		{
			transmit_cnt_arr[i] = 0;
 800117c:	4a4e      	ldr	r2, [pc, #312]	; (80012b8 <get_output_channel+0x2d8>)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2100      	movs	r1, #0
 8001182:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < NUM_GROUPS; i++)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3301      	adds	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b05      	cmp	r3, #5
 8001190:	ddd2      	ble.n	8001138 <get_output_channel+0x158>
		}

	}

	// Checks if output group is ready to transmit
	for(int i = 0; i < NUM_GROUPS; i++)
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	e0af      	b.n	80012f8 <get_output_channel+0x318>
	{
	  if(channel_out_buff_arr[i][channel_index] != 0 && transmit_cnt_arr[i] == 0)
 8001198:	4b44      	ldr	r3, [pc, #272]	; (80012ac <get_output_channel+0x2cc>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	4944      	ldr	r1, [pc, #272]	; (80012b0 <get_output_channel+0x2d0>)
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	1a9b      	subs	r3, r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4403      	add	r3, r0
 80011ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 808f 	beq.w	80012d4 <get_output_channel+0x2f4>
 80011b6:	4a40      	ldr	r2, [pc, #256]	; (80012b8 <get_output_channel+0x2d8>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f040 8088 	bne.w	80012d4 <get_output_channel+0x2f4>
	  {
		  sprintf(channel_out_str, "%hu", channel_out_buff_arr[i][channel_index]);
 80011c4:	4b39      	ldr	r3, [pc, #228]	; (80012ac <get_output_channel+0x2cc>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	4939      	ldr	r1, [pc, #228]	; (80012b0 <get_output_channel+0x2d0>)
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	1a9b      	subs	r3, r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4403      	add	r3, r0
 80011d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011dc:	461a      	mov	r2, r3
 80011de:	4937      	ldr	r1, [pc, #220]	; (80012bc <get_output_channel+0x2dc>)
 80011e0:	4837      	ldr	r0, [pc, #220]	; (80012c0 <get_output_channel+0x2e0>)
 80011e2:	f002 febb 	bl	8003f5c <siprintf>

		  // Add current note to array and increment transmit counter
		  note_array[note_index] = channel_out_buff_arr[i][channel_index];
 80011e6:	4b31      	ldr	r3, [pc, #196]	; (80012ac <get_output_channel+0x2cc>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	461c      	mov	r4, r3
 80011ec:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <get_output_channel+0x2e4>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	492f      	ldr	r1, [pc, #188]	; (80012b0 <get_output_channel+0x2d0>)
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	1a9b      	subs	r3, r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4423      	add	r3, r4
 8001200:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001204:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <get_output_channel+0x2e8>)
 8001206:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		  transmit_cnt_arr[i]++;
 800120a:	4a2b      	ldr	r2, [pc, #172]	; (80012b8 <get_output_channel+0x2d8>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001212:	3301      	adds	r3, #1
 8001214:	b299      	uxth	r1, r3
 8001216:	4a28      	ldr	r2, [pc, #160]	; (80012b8 <get_output_channel+0x2d8>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		  // If the note is incorrect, reset note array and index
		  if(note_array[note_index] != correct_order[note_index])
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <get_output_channel+0x2e4>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <get_output_channel+0x2e8>)
 8001226:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800122a:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <get_output_channel+0x2e4>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	4619      	mov	r1, r3
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <get_output_channel+0x2ec>)
 8001232:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001236:	429a      	cmp	r2, r3
 8001238:	d00b      	beq.n	8001252 <get_output_channel+0x272>
		  {
			  set_led(0b00100010);
 800123a:	2022      	movs	r0, #34	; 0x22
 800123c:	f7ff fbee 	bl	8000a1c <set_led>
			  memset(note_array, 0, sizeof(note_array));
 8001240:	2212      	movs	r2, #18
 8001242:	2100      	movs	r1, #0
 8001244:	4820      	ldr	r0, [pc, #128]	; (80012c8 <get_output_channel+0x2e8>)
 8001246:	f002 fd91 	bl	8003d6c <memset>
			  note_index = 0;
 800124a:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <get_output_channel+0x2e4>)
 800124c:	2200      	movs	r2, #0
 800124e:	801a      	strh	r2, [r3, #0]
		  if(note_array[note_index] != correct_order[note_index])
 8001250:	e04b      	b.n	80012ea <get_output_channel+0x30a>
		  }
		  // If note is correct, continue through array
		  else
		  {
			  set_led(0b10001000);
 8001252:	2088      	movs	r0, #136	; 0x88
 8001254:	f7ff fbe2 	bl	8000a1c <set_led>
			  note_index = (note_index + 1)%NUM_NOTES;
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <get_output_channel+0x2e4>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	1c5a      	adds	r2, r3, #1
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <get_output_channel+0x2f0>)
 8001260:	fb83 1302 	smull	r1, r3, r3, r2
 8001264:	1059      	asrs	r1, r3, #1
 8001266:	17d3      	asrs	r3, r2, #31
 8001268:	1ac9      	subs	r1, r1, r3
 800126a:	460b      	mov	r3, r1
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	440b      	add	r3, r1
 8001270:	1ad1      	subs	r1, r2, r3
 8001272:	b28a      	uxth	r2, r1
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <get_output_channel+0x2e4>)
 8001276:	801a      	strh	r2, [r3, #0]
		  if(note_array[note_index] != correct_order[note_index])
 8001278:	e037      	b.n	80012ea <get_output_channel+0x30a>
 800127a:	bf00      	nop
 800127c:	f3af 8000 	nop.w
 8001280:	70a3d70a 	.word	0x70a3d70a
 8001284:	3fef0a3d 	.word	0x3fef0a3d
 8001288:	200000e4 	.word	0x200000e4
 800128c:	200006ac 	.word	0x200006ac
 8001290:	200008ac 	.word	0x200008ac
 8001294:	20001bfc 	.word	0x20001bfc
 8001298:	200008c4 	.word	0x200008c4
 800129c:	10624dd3 	.word	0x10624dd3
 80012a0:	20001bfe 	.word	0x20001bfe
 80012a4:	2000147c 	.word	0x2000147c
 80012a8:	20000680 	.word	0x20000680
 80012ac:	20001c00 	.word	0x20001c00
 80012b0:	2000192c 	.word	0x2000192c
 80012b4:	20001c06 	.word	0x20001c06
 80012b8:	2000068c 	.word	0x2000068c
 80012bc:	080047fc 	.word	0x080047fc
 80012c0:	200006b8 	.word	0x200006b8
 80012c4:	20001c04 	.word	0x20001c04
 80012c8:	20000698 	.word	0x20000698
 80012cc:	20000000 	.word	0x20000000
 80012d0:	38e38e39 	.word	0x38e38e39
	  }

	  // If not ready to transmit, send 0
	  else
	  {
		  sprintf(channel_out_str, "%hu", 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	4937      	ldr	r1, [pc, #220]	; (80013b4 <get_output_channel+0x3d4>)
 80012d8:	4837      	ldr	r0, [pc, #220]	; (80013b8 <get_output_channel+0x3d8>)
 80012da:	f002 fe3f 	bl	8003f5c <siprintf>
		  check_zero++;
 80012de:	4b37      	ldr	r3, [pc, #220]	; (80013bc <get_output_channel+0x3dc>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	3301      	adds	r3, #1
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	4b35      	ldr	r3, [pc, #212]	; (80013bc <get_output_channel+0x3dc>)
 80012e8:	801a      	strh	r2, [r3, #0]
	  }

	  strcat(string_to_send, channel_out_str);
 80012ea:	4933      	ldr	r1, [pc, #204]	; (80013b8 <get_output_channel+0x3d8>)
 80012ec:	4834      	ldr	r0, [pc, #208]	; (80013c0 <get_output_channel+0x3e0>)
 80012ee:	f002 fe55 	bl	8003f9c <strcat>
	for(int i = 0; i < NUM_GROUPS; i++)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3301      	adds	r3, #1
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b05      	cmp	r3, #5
 80012fc:	f77f af4c 	ble.w	8001198 <get_output_channel+0x1b8>
	}

	// Update rolling buffer indexes
	channel_index = (channel_index + 1)%CHANNEL_BUFFER;
 8001300:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <get_output_channel+0x3e4>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <get_output_channel+0x3e8>)
 8001308:	fb83 1302 	smull	r1, r3, r3, r2
 800130c:	4413      	add	r3, r2
 800130e:	1159      	asrs	r1, r3, #5
 8001310:	17d3      	asrs	r3, r2, #31
 8001312:	1ac9      	subs	r1, r1, r3
 8001314:	460b      	mov	r3, r1
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	1a5b      	subs	r3, r3, r1
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	1ad1      	subs	r1, r2, r3
 800131e:	b28a      	uxth	r2, r1
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <get_output_channel+0x3e4>)
 8001322:	801a      	strh	r2, [r3, #0]
	sense_index = (sense_index + 1) % SENSE_VALUE_BUFFER;
 8001324:	4b29      	ldr	r3, [pc, #164]	; (80013cc <get_output_channel+0x3ec>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	4a29      	ldr	r2, [pc, #164]	; (80013d0 <get_output_channel+0x3f0>)
 800132c:	fb82 1203 	smull	r1, r2, r2, r3
 8001330:	1111      	asrs	r1, r2, #4
 8001332:	17da      	asrs	r2, r3, #31
 8001334:	1a8a      	subs	r2, r1, r2
 8001336:	21fa      	movs	r1, #250	; 0xfa
 8001338:	fb01 f202 	mul.w	r2, r1, r2
 800133c:	1a9a      	subs	r2, r3, r2
 800133e:	b292      	uxth	r2, r2
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <get_output_channel+0x3ec>)
 8001342:	801a      	strh	r2, [r3, #0]
	roll_index = (roll_index + 1) % ROLL_AVERAGE_BUFFER;
 8001344:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <get_output_channel+0x3f4>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	4a23      	ldr	r2, [pc, #140]	; (80013d8 <get_output_channel+0x3f8>)
 800134c:	fb82 1203 	smull	r1, r2, r2, r3
 8001350:	1151      	asrs	r1, r2, #5
 8001352:	17da      	asrs	r2, r3, #31
 8001354:	1a8a      	subs	r2, r1, r2
 8001356:	2164      	movs	r1, #100	; 0x64
 8001358:	fb01 f202 	mul.w	r2, r1, r2
 800135c:	1a9a      	subs	r2, r3, r2
 800135e:	b292      	uxth	r2, r2
 8001360:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <get_output_channel+0x3f4>)
 8001362:	801a      	strh	r2, [r3, #0]

	// Add EOS character
	strcat(string_to_send,"!");
 8001364:	4816      	ldr	r0, [pc, #88]	; (80013c0 <get_output_channel+0x3e0>)
 8001366:	f7fe ff33 	bl	80001d0 <strlen>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <get_output_channel+0x3e0>)
 8001370:	4413      	add	r3, r2
 8001372:	491a      	ldr	r1, [pc, #104]	; (80013dc <get_output_channel+0x3fc>)
 8001374:	461a      	mov	r2, r3
 8001376:	460b      	mov	r3, r1
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	8013      	strh	r3, [r2, #0]

	// If there is a value to send, transmit
	if(check_zero != NUM_GROUPS)
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <get_output_channel+0x3dc>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	2b06      	cmp	r3, #6
 8001382:	d003      	beq.n	800138c <get_output_channel+0x3ac>
	{
		SerialOutputString(string_to_send, &USART1_PORT);
 8001384:	4916      	ldr	r1, [pc, #88]	; (80013e0 <get_output_channel+0x400>)
 8001386:	480e      	ldr	r0, [pc, #56]	; (80013c0 <get_output_channel+0x3e0>)
 8001388:	f000 f921 	bl	80015ce <SerialOutputString>
	}

	// Send completion string if note array is correct
	if(note_array[NUM_NOTES - 1] == correct_order[NUM_NOTES - 1])
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <get_output_channel+0x404>)
 800138e:	8a1a      	ldrh	r2, [r3, #16]
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <get_output_channel+0x408>)
 8001392:	8a1b      	ldrh	r3, [r3, #16]
 8001394:	429a      	cmp	r2, r3
 8001396:	d108      	bne.n	80013aa <get_output_channel+0x3ca>
	{
		SerialOutputString(completed_str, &USART1_PORT);
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <get_output_channel+0x40c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4910      	ldr	r1, [pc, #64]	; (80013e0 <get_output_channel+0x400>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f915 	bl	80015ce <SerialOutputString>
		completed = 1;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <get_output_channel+0x410>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
	}
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bdb0      	pop	{r4, r5, r7, pc}
 80013b2:	bf00      	nop
 80013b4:	080047fc 	.word	0x080047fc
 80013b8:	200006b8 	.word	0x200006b8
 80013bc:	20001c02 	.word	0x20001c02
 80013c0:	2000048c 	.word	0x2000048c
 80013c4:	20001c00 	.word	0x20001c00
 80013c8:	88888889 	.word	0x88888889
 80013cc:	20001bfc 	.word	0x20001bfc
 80013d0:	10624dd3 	.word	0x10624dd3
 80013d4:	20001bfe 	.word	0x20001bfe
 80013d8:	51eb851f 	.word	0x51eb851f
 80013dc:	080047f0 	.word	0x080047f0
 80013e0:	20000018 	.word	0x20000018
 80013e4:	20000698 	.word	0x20000698
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000014 	.word	0x20000014
 80013f0:	20000480 	.word	0x20000480

080013f4 <__NVIC_EnableIRQ>:
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <__NVIC_EnableIRQ+0x38>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	63da      	str	r2, [r3, #60]	; 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001496:	4b34      	ldr	r3, [pc, #208]	; (8001568 <SerialInitialise+0xe4>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	4a33      	ldr	r2, [pc, #204]	; (8001568 <SerialInitialise+0xe4>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a0:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80014a2:	4b31      	ldr	r3, [pc, #196]	; (8001568 <SerialInitialise+0xe4>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	4a30      	ldr	r2, [pc, #192]	; (8001568 <SerialInitialise+0xe4>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d106      	bne.n	80014c4 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80014b6:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <SerialInitialise+0xe4>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	4a2b      	ldr	r2, [pc, #172]	; (8001568 <SerialInitialise+0xe4>)
 80014bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014c0:	6153      	str	r3, [r2, #20]
		break;
 80014c2:	e000      	b.n	80014c6 <SerialInitialise+0x42>
	default:
		break;
 80014c4:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80014ce:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014d8:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	69d9      	ldr	r1, [r3, #28]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b04      	cmp	r3, #4
 8001504:	d821      	bhi.n	800154a <SerialInitialise+0xc6>
 8001506:	a201      	add	r2, pc, #4	; (adr r2, 800150c <SerialInitialise+0x88>)
 8001508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150c:	08001521 	.word	0x08001521
 8001510:	08001529 	.word	0x08001529
 8001514:	08001531 	.word	0x08001531
 8001518:	08001539 	.word	0x08001539
 800151c:	08001541 	.word	0x08001541
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2246      	movs	r2, #70	; 0x46
 8001524:	801a      	strh	r2, [r3, #0]
		break;
 8001526:	e010      	b.n	800154a <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	2246      	movs	r2, #70	; 0x46
 800152c:	801a      	strh	r2, [r3, #0]
		break;
 800152e:	e00c      	b.n	800154a <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2246      	movs	r2, #70	; 0x46
 8001534:	801a      	strh	r2, [r3, #0]
		break;
 8001536:	e008      	b.n	800154a <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2246      	movs	r2, #70	; 0x46
 800153c:	801a      	strh	r2, [r3, #0]
		break;
 800153e:	e004      	b.n	800154a <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001546:	801a      	strh	r2, [r3, #0]
		break;
 8001548:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f042 020d 	orr.w	r2, r2, #13
 8001558:	601a      	str	r2, [r3, #0]
}
 800155a:	bf00      	nop
 800155c:	371c      	adds	r7, #28
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000

0800156c <enable_interrupts_RX>:

void enable_interrupts_RX()
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
	__disable_irq();

	// Generate an interrupt upon receiving data
	USART1->CR1 |= USART_CR1_RXNEIE_Msk;
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <enable_interrupts_RX+0x2c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a07      	ldr	r2, [pc, #28]	; (8001598 <enable_interrupts_RX+0x2c>)
 800157a:	f043 0320 	orr.w	r3, r3, #32
 800157e:	6013      	str	r3, [r2, #0]

	// Set priority and enable interrupts
	NVIC_SetPriority(USART1_IRQn, 2);
 8001580:	2102      	movs	r1, #2
 8001582:	2025      	movs	r0, #37	; 0x25
 8001584:	f7ff ff54 	bl	8001430 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8001588:	2025      	movs	r0, #37	; 0x25
 800158a:	f7ff ff33 	bl	80013f4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800158e:	b662      	cpsie	i
}
 8001590:	bf00      	nop

	__enable_irq();
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40013800 	.word	0x40013800

0800159c <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 80015a8:	bf00      	nop
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f8      	beq.n	80015aa <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	79fa      	ldrb	r2, [r7, #7]
 80015be:	b292      	uxth	r2, r2
 80015c0:	801a      	strh	r2, [r3, #0]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 80015dc:	e00b      	b.n	80015f6 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	6839      	ldr	r1, [r7, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ffd9 	bl	800159c <SerialOutputChar>
		counter++;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3301      	adds	r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
		pt++;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3301      	adds	r3, #1
 80015f4:	607b      	str	r3, [r7, #4]
	while(*pt) {
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1ef      	bne.n	80015de <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	4798      	blx	r3
}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <SerialReceiveChar>:


// returns 1 if valid char, 0 if timeout
uint8_t SerialReceiveChar(SerialPort *serial_port, uint8_t *received_char)
{
 8001616:	b480      	push	{r7}
 8001618:	b085      	sub	sp, #20
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
	uint8_t latest_character = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	737b      	strb	r3, [r7, #13]

	uint16_t timeout = 0xffff;
 8001624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001628:	81fb      	strh	r3, [r7, #14]
  while (1) {
	  timeout--;
 800162a:	89fb      	ldrh	r3, [r7, #14]
 800162c:	3b01      	subs	r3, #1
 800162e:	81fb      	strh	r3, [r7, #14]
	  if (timeout == 0)
 8001630:	89fb      	ldrh	r3, [r7, #14]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <SerialReceiveChar+0x24>
		  return 0;
 8001636:	2300      	movs	r3, #0
 8001638:	e026      	b.n	8001688 <SerialReceiveChar+0x72>

	if (*(serial_port->StatusRegister) & USART_ISR_ORE || *(serial_port->StatusRegister) & USART_ISR_FE) {
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	d106      	bne.n	8001656 <SerialReceiveChar+0x40>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d007      	beq.n	8001666 <SerialReceiveChar+0x50>
		*(serial_port->FlagClearRegister) |= USART_ICR_ORECF | USART_ICR_FECF;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f042 020a 	orr.w	r2, r2, #10
 8001664:	601a      	str	r2, [r3, #0]
	}

	if (*(serial_port->StatusRegister) & USART_ISR_RXNE) { // Wait for RXNE flag to be set
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	2b00      	cmp	r3, #0
 8001672:	d100      	bne.n	8001676 <SerialReceiveChar+0x60>
	  timeout--;
 8001674:	e7d9      	b.n	800162a <SerialReceiveChar+0x14>
		break;
 8001676:	bf00      	nop
	}
  }
  *received_char = *(serial_port->DataInputRegister);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	b29b      	uxth	r3, r3
 8001680:	b2da      	uxtb	r2, r3
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	701a      	strb	r2, [r3, #0]
  return 1;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <empty_buffer>:
// Constants
//#define SENTINEL_1 0xAA
//#define SENTINEL_2 0x55


void empty_buffer(char *array, int size){
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++){
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	e007      	b.n	80016b4 <empty_buffer+0x20>
		array[i] = 0;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3301      	adds	r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dbf3      	blt.n	80016a4 <empty_buffer+0x10>
	}
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_MspInit+0x44>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_MspInit+0x44>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6193      	str	r3, [r2, #24]
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_MspInit+0x44>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_MspInit+0x44>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_MspInit+0x44>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	61d3      	str	r3, [r2, #28]
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_MspInit+0x44>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001702:	2007      	movs	r0, #7
 8001704:	f000 fa84 	bl	8001c10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(htsc->Instance==TSC)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a38      	ldr	r2, [pc, #224]	; (8001814 <HAL_TSC_MspInit+0x100>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d169      	bne.n	800180a <HAL_TSC_MspInit+0xf6>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8001736:	4b38      	ldr	r3, [pc, #224]	; (8001818 <HAL_TSC_MspInit+0x104>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	4a37      	ldr	r2, [pc, #220]	; (8001818 <HAL_TSC_MspInit+0x104>)
 800173c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001740:	6153      	str	r3, [r2, #20]
 8001742:	4b35      	ldr	r3, [pc, #212]	; (8001818 <HAL_TSC_MspInit+0x104>)
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	4b32      	ldr	r3, [pc, #200]	; (8001818 <HAL_TSC_MspInit+0x104>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	4a31      	ldr	r2, [pc, #196]	; (8001818 <HAL_TSC_MspInit+0x104>)
 8001754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001758:	6153      	str	r3, [r2, #20]
 800175a:	4b2f      	ldr	r3, [pc, #188]	; (8001818 <HAL_TSC_MspInit+0x104>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <HAL_TSC_MspInit+0x104>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	4a2b      	ldr	r2, [pc, #172]	; (8001818 <HAL_TSC_MspInit+0x104>)
 800176c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001770:	6153      	str	r3, [r2, #20]
 8001772:	4b29      	ldr	r3, [pc, #164]	; (8001818 <HAL_TSC_MspInit+0x104>)
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> TSC_G4_IO1
    PA10     ------> TSC_G4_IO2
    PB4     ------> TSC_G5_IO2
    PB6     ------> TSC_G5_IO3
    */
    GPIO_InitStruct.Pin = GROUP1_SAMPLE_Pin|GROUP2_SAMPLE_Pin|GROUP4_SAMPLE_Pin;
 800177e:	f240 4322 	movw	r3, #1058	; 0x422
 8001782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001784:	2312      	movs	r3, #18
 8001786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8001790:	2303      	movs	r3, #3
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179e:	f000 fa6b 	bl	8001c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GROUP1_CHANNEL_Pin|GROUP2_CHANNEL_Pin|GROUP4_CHANNEL_Pin;
 80017a2:	f44f 7305 	mov.w	r3, #532	; 0x214
 80017a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80017b4:	2303      	movs	r3, #3
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c2:	f000 fa59 	bl	8001c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GROUP3_SAMPLE_Pin|GROUP6_SAMPLE_Pin|GROUP5_SAMPLE_Pin;
 80017c6:	f241 0311 	movw	r3, #4113	; 0x1011
 80017ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017cc:	2312      	movs	r3, #18
 80017ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80017d8:	2303      	movs	r3, #3
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4619      	mov	r1, r3
 80017e2:	480e      	ldr	r0, [pc, #56]	; (800181c <HAL_TSC_MspInit+0x108>)
 80017e4:	f000 fa48 	bl	8001c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GROUP3_CHANNEL_Pin|GROUP6_CHANNEL_Pin|GROUP5_CHANNEL_Pin;
 80017e8:	f640 0342 	movw	r3, #2114	; 0x842
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80017fa:	2303      	movs	r3, #3
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <HAL_TSC_MspInit+0x108>)
 8001806:	f000 fa37 	bl	8001c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	; 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40024000 	.word	0x40024000
 8001818:	40021000 	.word	0x40021000
 800181c:	48000400 	.word	0x48000400

08001820 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a18      	ldr	r2, [pc, #96]	; (80018a0 <HAL_PCD_MspInit+0x80>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d129      	bne.n	8001896 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_PCD_MspInit+0x84>)
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <HAL_PCD_MspInit+0x84>)
 8001848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184c:	6153      	str	r3, [r2, #20]
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_PCD_MspInit+0x84>)
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800185a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800185e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800186c:	230e      	movs	r3, #14
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187a:	f000 f9fd 	bl	8001c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_PCD_MspInit+0x84>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_PCD_MspInit+0x84>)
 8001884:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001888:	61d3      	str	r3, [r2, #28]
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_PCD_MspInit+0x84>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	; 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40005c00 	.word	0x40005c00
 80018a4:	40021000 	.word	0x40021000

080018a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <NMI_Handler+0x4>

080018ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <HardFault_Handler+0x4>

080018b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <MemManage_Handler+0x4>

080018ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <BusFault_Handler+0x4>

080018c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <UsageFault_Handler+0x4>

080018c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f4:	f000 f8ba 	bl	8001a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <_sbrk+0x5c>)
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <_sbrk+0x60>)
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <_sbrk+0x64>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <_sbrk+0x68>)
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	429a      	cmp	r2, r3
 800192a:	d207      	bcs.n	800193c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800192c:	f002 f9ec 	bl	8003d08 <__errno>
 8001930:	4603      	mov	r3, r0
 8001932:	220c      	movs	r2, #12
 8001934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	e009      	b.n	8001950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <_sbrk+0x64>)
 800194c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	2000a000 	.word	0x2000a000
 800195c:	00000400 	.word	0x00000400
 8001960:	20001c08 	.word	0x20001c08
 8001964:	20001c20 	.word	0x20001c20

08001968 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <SystemInit+0x20>)
 800196e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001972:	4a05      	ldr	r2, [pc, #20]	; (8001988 <SystemInit+0x20>)
 8001974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800198c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001990:	f7ff ffea 	bl	8001968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001994:	480c      	ldr	r0, [pc, #48]	; (80019c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001996:	490d      	ldr	r1, [pc, #52]	; (80019cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001998:	4a0d      	ldr	r2, [pc, #52]	; (80019d0 <LoopForever+0xe>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800199c:	e002      	b.n	80019a4 <LoopCopyDataInit>

0800199e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a2:	3304      	adds	r3, #4

080019a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a8:	d3f9      	bcc.n	800199e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019ac:	4c0a      	ldr	r4, [pc, #40]	; (80019d8 <LoopForever+0x16>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b0:	e001      	b.n	80019b6 <LoopFillZerobss>

080019b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b4:	3204      	adds	r2, #4

080019b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b8:	d3fb      	bcc.n	80019b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ba:	f002 f9ab 	bl	8003d14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019be:	f7ff f85d 	bl	8000a7c <main>

080019c2 <LoopForever>:

LoopForever:
    b LoopForever
 80019c2:	e7fe      	b.n	80019c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019c4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80019c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019cc:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80019d0:	0800496c 	.word	0x0800496c
  ldr r2, =_sbss
 80019d4:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80019d8:	20001c20 	.word	0x20001c20

080019dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC1_2_IRQHandler>
	...

080019e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_Init+0x28>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <HAL_Init+0x28>)
 80019ea:	f043 0310 	orr.w	r3, r3, #16
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f0:	2003      	movs	r0, #3
 80019f2:	f000 f90d 	bl	8001c10 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f000 f808 	bl	8001a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019fc:	f7ff fe66 	bl	80016cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40022000 	.word	0x40022000

08001a0c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_InitTick+0x54>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_InitTick+0x58>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f917 	bl	8001c5e <HAL_SYSTICK_Config>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00e      	b.n	8001a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d80a      	bhi.n	8001a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a40:	2200      	movs	r2, #0
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f000 f8ed 	bl	8001c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a4c:	4a06      	ldr	r2, [pc, #24]	; (8001a68 <HAL_InitTick+0x5c>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000058 	.word	0x20000058
 8001a64:	20000060 	.word	0x20000060
 8001a68:	2000005c 	.word	0x2000005c

08001a6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_IncTick+0x20>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_IncTick+0x24>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000060 	.word	0x20000060
 8001a90:	20001c0c 	.word	0x20001c0c

08001a94 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <HAL_GetTick+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20001c0c 	.word	0x20001c0c

08001aac <__NVIC_SetPriorityGrouping>:
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ade:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	60d3      	str	r3, [r2, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_GetPriorityGrouping>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <__NVIC_GetPriorityGrouping+0x18>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	f003 0307 	and.w	r3, r3, #7
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_SetPriority>:
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	6039      	str	r1, [r7, #0]
 8001b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	db0a      	blt.n	8001b3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	490c      	ldr	r1, [pc, #48]	; (8001b5c <__NVIC_SetPriority+0x4c>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	0112      	lsls	r2, r2, #4
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	440b      	add	r3, r1
 8001b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b38:	e00a      	b.n	8001b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4908      	ldr	r1, [pc, #32]	; (8001b60 <__NVIC_SetPriority+0x50>)
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	3b04      	subs	r3, #4
 8001b48:	0112      	lsls	r2, r2, #4
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	761a      	strb	r2, [r3, #24]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000e100 	.word	0xe000e100
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	; 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f1c3 0307 	rsb	r3, r3, #7
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	bf28      	it	cs
 8001b82:	2304      	movcs	r3, #4
 8001b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	d902      	bls.n	8001b94 <NVIC_EncodePriority+0x30>
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3b03      	subs	r3, #3
 8001b92:	e000      	b.n	8001b96 <NVIC_EncodePriority+0x32>
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bac:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	43d9      	mvns	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	4313      	orrs	r3, r2
         );
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3724      	adds	r7, #36	; 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bdc:	d301      	bcc.n	8001be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00f      	b.n	8001c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be2:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <SysTick_Config+0x40>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bea:	210f      	movs	r1, #15
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f7ff ff8e 	bl	8001b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <SysTick_Config+0x40>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfa:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <SysTick_Config+0x40>)
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	e000e010 	.word	0xe000e010

08001c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ff47 	bl	8001aac <__NVIC_SetPriorityGrouping>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c38:	f7ff ff5c 	bl	8001af4 <__NVIC_GetPriorityGrouping>
 8001c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	6978      	ldr	r0, [r7, #20]
 8001c44:	f7ff ff8e 	bl	8001b64 <NVIC_EncodePriority>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff5d 	bl	8001b10 <__NVIC_SetPriority>
}
 8001c56:	bf00      	nop
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ffb0 	bl	8001bcc <SysTick_Config>
 8001c6c:	4603      	mov	r3, r0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c86:	e154      	b.n	8001f32 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	fa01 f303 	lsl.w	r3, r1, r3
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 8146 	beq.w	8001f2c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d005      	beq.n	8001cb8 <HAL_GPIO_Init+0x40>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d130      	bne.n	8001d1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cee:	2201      	movs	r2, #1
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	091b      	lsrs	r3, r3, #4
 8001d04:	f003 0201 	and.w	r2, r3, #1
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d017      	beq.n	8001d56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	2203      	movs	r2, #3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d123      	bne.n	8001daa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	08da      	lsrs	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3208      	adds	r2, #8
 8001d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	220f      	movs	r2, #15
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	08da      	lsrs	r2, r3, #3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3208      	adds	r2, #8
 8001da4:	6939      	ldr	r1, [r7, #16]
 8001da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0203 	and.w	r2, r3, #3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 80a0 	beq.w	8001f2c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dec:	4b58      	ldr	r3, [pc, #352]	; (8001f50 <HAL_GPIO_Init+0x2d8>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a57      	ldr	r2, [pc, #348]	; (8001f50 <HAL_GPIO_Init+0x2d8>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b55      	ldr	r3, [pc, #340]	; (8001f50 <HAL_GPIO_Init+0x2d8>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e04:	4a53      	ldr	r2, [pc, #332]	; (8001f54 <HAL_GPIO_Init+0x2dc>)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	220f      	movs	r2, #15
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e2e:	d019      	beq.n	8001e64 <HAL_GPIO_Init+0x1ec>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a49      	ldr	r2, [pc, #292]	; (8001f58 <HAL_GPIO_Init+0x2e0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d013      	beq.n	8001e60 <HAL_GPIO_Init+0x1e8>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a48      	ldr	r2, [pc, #288]	; (8001f5c <HAL_GPIO_Init+0x2e4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00d      	beq.n	8001e5c <HAL_GPIO_Init+0x1e4>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a47      	ldr	r2, [pc, #284]	; (8001f60 <HAL_GPIO_Init+0x2e8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d007      	beq.n	8001e58 <HAL_GPIO_Init+0x1e0>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a46      	ldr	r2, [pc, #280]	; (8001f64 <HAL_GPIO_Init+0x2ec>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d101      	bne.n	8001e54 <HAL_GPIO_Init+0x1dc>
 8001e50:	2304      	movs	r3, #4
 8001e52:	e008      	b.n	8001e66 <HAL_GPIO_Init+0x1ee>
 8001e54:	2305      	movs	r3, #5
 8001e56:	e006      	b.n	8001e66 <HAL_GPIO_Init+0x1ee>
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e004      	b.n	8001e66 <HAL_GPIO_Init+0x1ee>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e002      	b.n	8001e66 <HAL_GPIO_Init+0x1ee>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_GPIO_Init+0x1ee>
 8001e64:	2300      	movs	r3, #0
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	f002 0203 	and.w	r2, r2, #3
 8001e6c:	0092      	lsls	r2, r2, #2
 8001e6e:	4093      	lsls	r3, r2
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e76:	4937      	ldr	r1, [pc, #220]	; (8001f54 <HAL_GPIO_Init+0x2dc>)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e84:	4b38      	ldr	r3, [pc, #224]	; (8001f68 <HAL_GPIO_Init+0x2f0>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ea8:	4a2f      	ldr	r2, [pc, #188]	; (8001f68 <HAL_GPIO_Init+0x2f0>)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eae:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <HAL_GPIO_Init+0x2f0>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ed2:	4a25      	ldr	r2, [pc, #148]	; (8001f68 <HAL_GPIO_Init+0x2f0>)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ed8:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <HAL_GPIO_Init+0x2f0>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001efc:	4a1a      	ldr	r2, [pc, #104]	; (8001f68 <HAL_GPIO_Init+0x2f0>)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f02:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_GPIO_Init+0x2f0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f26:	4a10      	ldr	r2, [pc, #64]	; (8001f68 <HAL_GPIO_Init+0x2f0>)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f47f aea3 	bne.w	8001c88 <HAL_GPIO_Init+0x10>
  }
}
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
 8001f46:	371c      	adds	r7, #28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40010000 	.word	0x40010000
 8001f58:	48000400 	.word	0x48000400
 8001f5c:	48000800 	.word	0x48000800
 8001f60:	48000c00 	.word	0x48000c00
 8001f64:	48001000 	.word	0x48001000
 8001f68:	40010400 	.word	0x40010400

08001f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f7c:	787b      	ldrb	r3, [r7, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f88:	e002      	b.n	8001f90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f8a:	887a      	ldrh	r2, [r7, #2]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9e:	b08b      	sub	sp, #44	; 0x2c
 8001fa0:	af06      	add	r7, sp, #24
 8001fa2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e0c4      	b.n	8002138 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d106      	bne.n	8001fc8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff fc2c 	bl	8001820 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2203      	movs	r2, #3
 8001fcc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f001 fe56 	bl	8003c86 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	73fb      	strb	r3, [r7, #15]
 8001fde:	e040      	b.n	8002062 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	440b      	add	r3, r1
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	440b      	add	r3, r1
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	3303      	adds	r3, #3
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	3338      	adds	r3, #56	; 0x38
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	333c      	adds	r3, #60	; 0x3c
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	3340      	adds	r3, #64	; 0x40
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	3301      	adds	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	429a      	cmp	r2, r3
 800206a:	d3b9      	bcc.n	8001fe0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e044      	b.n	80020fc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002072:	7bfa      	ldrb	r2, [r7, #15]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	440b      	add	r3, r1
 80020ac:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	440b      	add	r3, r1
 80020c2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	440b      	add	r3, r1
 80020d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	440b      	add	r3, r1
 80020ee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	3301      	adds	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	429a      	cmp	r2, r3
 8002104:	d3b5      	bcc.n	8002072 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	687e      	ldr	r6, [r7, #4]
 800210e:	466d      	mov	r5, sp
 8002110:	f106 0410 	add.w	r4, r6, #16
 8002114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	602b      	str	r3, [r5, #0]
 800211c:	1d33      	adds	r3, r6, #4
 800211e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002120:	6838      	ldr	r0, [r7, #0]
 8002122:	f001 fdcb 	bl	8003cbc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002146:	af00      	add	r7, sp, #0
 8002148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002150:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002156:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	f001 b823 	b.w	80031ac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 817d 	beq.w	8002476 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800217c:	4bbc      	ldr	r3, [pc, #752]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b04      	cmp	r3, #4
 8002186:	d00c      	beq.n	80021a2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002188:	4bb9      	ldr	r3, [pc, #740]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	2b08      	cmp	r3, #8
 8002192:	d15c      	bne.n	800224e <HAL_RCC_OscConfig+0x10e>
 8002194:	4bb6      	ldr	r3, [pc, #728]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a0:	d155      	bne.n	800224e <HAL_RCC_OscConfig+0x10e>
 80021a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d102      	bne.n	80021d4 <HAL_RCC_OscConfig+0x94>
 80021ce:	4ba8      	ldr	r3, [pc, #672]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	e015      	b.n	8002200 <HAL_RCC_OscConfig+0xc0>
 80021d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021d8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80021e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80021f0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80021fc:	4b9c      	ldr	r3, [pc, #624]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002204:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002208:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800220c:	fa92 f2a2 	rbit	r2, r2
 8002210:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002214:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002218:	fab2 f282 	clz	r2, r2
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	f042 0220 	orr.w	r2, r2, #32
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	f002 021f 	and.w	r2, r2, #31
 8002228:	2101      	movs	r1, #1
 800222a:	fa01 f202 	lsl.w	r2, r1, r2
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 811f 	beq.w	8002474 <HAL_RCC_OscConfig+0x334>
 8002236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f040 8116 	bne.w	8002474 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	f000 bfaf 	b.w	80031ac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002252:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x12e>
 8002260:	4b83      	ldr	r3, [pc, #524]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a82      	ldr	r2, [pc, #520]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 8002266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	e036      	b.n	80022dc <HAL_RCC_OscConfig+0x19c>
 800226e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002272:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x158>
 800227e:	4b7c      	ldr	r3, [pc, #496]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a7b      	ldr	r2, [pc, #492]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 8002284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b79      	ldr	r3, [pc, #484]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a78      	ldr	r2, [pc, #480]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 8002290:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e021      	b.n	80022dc <HAL_RCC_OscConfig+0x19c>
 8002298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x184>
 80022aa:	4b71      	ldr	r3, [pc, #452]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a70      	ldr	r2, [pc, #448]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 80022b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b6e      	ldr	r3, [pc, #440]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a6d      	ldr	r2, [pc, #436]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0x19c>
 80022c4:	4b6a      	ldr	r3, [pc, #424]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a69      	ldr	r2, [pc, #420]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 80022ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b67      	ldr	r3, [pc, #412]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a66      	ldr	r2, [pc, #408]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 80022d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022da:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022dc:	4b64      	ldr	r3, [pc, #400]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	f023 020f 	bic.w	r2, r3, #15
 80022e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	495f      	ldr	r1, [pc, #380]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d059      	beq.n	80023ba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002306:	f7ff fbc5 	bl	8001a94 <HAL_GetTick>
 800230a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	e00a      	b.n	8002326 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002310:	f7ff fbc0 	bl	8001a94 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b64      	cmp	r3, #100	; 0x64
 800231e:	d902      	bls.n	8002326 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	f000 bf43 	b.w	80031ac <HAL_RCC_OscConfig+0x106c>
 8002326:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800232a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800233a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	095b      	lsrs	r3, r3, #5
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b01      	cmp	r3, #1
 8002350:	d102      	bne.n	8002358 <HAL_RCC_OscConfig+0x218>
 8002352:	4b47      	ldr	r3, [pc, #284]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	e015      	b.n	8002384 <HAL_RCC_OscConfig+0x244>
 8002358:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800235c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800236c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002370:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002374:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002380:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002388:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800238c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002390:	fa92 f2a2 	rbit	r2, r2
 8002394:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002398:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800239c:	fab2 f282 	clz	r2, r2
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	f042 0220 	orr.w	r2, r2, #32
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	f002 021f 	and.w	r2, r2, #31
 80023ac:	2101      	movs	r1, #1
 80023ae:	fa01 f202 	lsl.w	r2, r1, r2
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0ab      	beq.n	8002310 <HAL_RCC_OscConfig+0x1d0>
 80023b8:	e05d      	b.n	8002476 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ba:	f7ff fb6b 	bl	8001a94 <HAL_GetTick>
 80023be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c2:	e00a      	b.n	80023da <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c4:	f7ff fb66 	bl	8001a94 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b64      	cmp	r3, #100	; 0x64
 80023d2:	d902      	bls.n	80023da <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	f000 bee9 	b.w	80031ac <HAL_RCC_OscConfig+0x106c>
 80023da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023de:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80023ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	095b      	lsrs	r3, r3, #5
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d102      	bne.n	800240c <HAL_RCC_OscConfig+0x2cc>
 8002406:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	e015      	b.n	8002438 <HAL_RCC_OscConfig+0x2f8>
 800240c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002410:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002424:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002428:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002434:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800243c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002440:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002444:	fa92 f2a2 	rbit	r2, r2
 8002448:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800244c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002450:	fab2 f282 	clz	r2, r2
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	f042 0220 	orr.w	r2, r2, #32
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	f002 021f 	and.w	r2, r2, #31
 8002460:	2101      	movs	r1, #1
 8002462:	fa01 f202 	lsl.w	r2, r1, r2
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ab      	bne.n	80023c4 <HAL_RCC_OscConfig+0x284>
 800246c:	e003      	b.n	8002476 <HAL_RCC_OscConfig+0x336>
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 817d 	beq.w	8002786 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800248c:	4ba6      	ldr	r3, [pc, #664]	; (8002728 <HAL_RCC_OscConfig+0x5e8>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00b      	beq.n	80024b0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002498:	4ba3      	ldr	r3, [pc, #652]	; (8002728 <HAL_RCC_OscConfig+0x5e8>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d172      	bne.n	800258a <HAL_RCC_OscConfig+0x44a>
 80024a4:	4ba0      	ldr	r3, [pc, #640]	; (8002728 <HAL_RCC_OscConfig+0x5e8>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d16c      	bne.n	800258a <HAL_RCC_OscConfig+0x44a>
 80024b0:	2302      	movs	r3, #2
 80024b2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80024ba:	fa93 f3a3 	rbit	r3, r3
 80024be:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80024c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	095b      	lsrs	r3, r3, #5
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d102      	bne.n	80024e0 <HAL_RCC_OscConfig+0x3a0>
 80024da:	4b93      	ldr	r3, [pc, #588]	; (8002728 <HAL_RCC_OscConfig+0x5e8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	e013      	b.n	8002508 <HAL_RCC_OscConfig+0x3c8>
 80024e0:	2302      	movs	r3, #2
 80024e2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80024f2:	2302      	movs	r3, #2
 80024f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80024f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002504:	4b88      	ldr	r3, [pc, #544]	; (8002728 <HAL_RCC_OscConfig+0x5e8>)
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	2202      	movs	r2, #2
 800250a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800250e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002512:	fa92 f2a2 	rbit	r2, r2
 8002516:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800251a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800251e:	fab2 f282 	clz	r2, r2
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	f042 0220 	orr.w	r2, r2, #32
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	f002 021f 	and.w	r2, r2, #31
 800252e:	2101      	movs	r1, #1
 8002530:	fa01 f202 	lsl.w	r2, r1, r2
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCC_OscConfig+0x410>
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d002      	beq.n	8002550 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	f000 be2e 	b.w	80031ac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002550:	4b75      	ldr	r3, [pc, #468]	; (8002728 <HAL_RCC_OscConfig+0x5e8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	21f8      	movs	r1, #248	; 0xf8
 8002566:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800256e:	fa91 f1a1 	rbit	r1, r1
 8002572:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002576:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800257a:	fab1 f181 	clz	r1, r1
 800257e:	b2c9      	uxtb	r1, r1
 8002580:	408b      	lsls	r3, r1
 8002582:	4969      	ldr	r1, [pc, #420]	; (8002728 <HAL_RCC_OscConfig+0x5e8>)
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002588:	e0fd      	b.n	8002786 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800258a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 8088 	beq.w	80026ac <HAL_RCC_OscConfig+0x56c>
 800259c:	2301      	movs	r3, #1
 800259e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80025ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b2:	fab3 f383 	clz	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	461a      	mov	r2, r3
 80025c4:	2301      	movs	r3, #1
 80025c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7ff fa64 	bl	8001a94 <HAL_GetTick>
 80025cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	e00a      	b.n	80025e8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d2:	f7ff fa5f 	bl	8001a94 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d902      	bls.n	80025e8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	f000 bde2 	b.w	80031ac <HAL_RCC_OscConfig+0x106c>
 80025e8:	2302      	movs	r3, #2
 80025ea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80025fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	095b      	lsrs	r3, r3, #5
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d102      	bne.n	8002618 <HAL_RCC_OscConfig+0x4d8>
 8002612:	4b45      	ldr	r3, [pc, #276]	; (8002728 <HAL_RCC_OscConfig+0x5e8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	e013      	b.n	8002640 <HAL_RCC_OscConfig+0x500>
 8002618:	2302      	movs	r3, #2
 800261a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800262a:	2302      	movs	r3, #2
 800262c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002630:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800263c:	4b3a      	ldr	r3, [pc, #232]	; (8002728 <HAL_RCC_OscConfig+0x5e8>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	2202      	movs	r2, #2
 8002642:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002646:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800264a:	fa92 f2a2 	rbit	r2, r2
 800264e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002652:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002656:	fab2 f282 	clz	r2, r2
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	f042 0220 	orr.w	r2, r2, #32
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	f002 021f 	and.w	r2, r2, #31
 8002666:	2101      	movs	r1, #1
 8002668:	fa01 f202 	lsl.w	r2, r1, r2
 800266c:	4013      	ands	r3, r2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0af      	beq.n	80025d2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002672:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <HAL_RCC_OscConfig+0x5e8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800267a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	21f8      	movs	r1, #248	; 0xf8
 8002688:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002690:	fa91 f1a1 	rbit	r1, r1
 8002694:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002698:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800269c:	fab1 f181 	clz	r1, r1
 80026a0:	b2c9      	uxtb	r1, r1
 80026a2:	408b      	lsls	r3, r1
 80026a4:	4920      	ldr	r1, [pc, #128]	; (8002728 <HAL_RCC_OscConfig+0x5e8>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]
 80026aa:	e06c      	b.n	8002786 <HAL_RCC_OscConfig+0x646>
 80026ac:	2301      	movs	r3, #1
 80026ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80026be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	461a      	mov	r2, r3
 80026d4:	2300      	movs	r3, #0
 80026d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff f9dc 	bl	8001a94 <HAL_GetTick>
 80026dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e0:	e00a      	b.n	80026f8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e2:	f7ff f9d7 	bl	8001a94 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d902      	bls.n	80026f8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	f000 bd5a 	b.w	80031ac <HAL_RCC_OscConfig+0x106c>
 80026f8:	2302      	movs	r3, #2
 80026fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800270a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b01      	cmp	r3, #1
 8002720:	d104      	bne.n	800272c <HAL_RCC_OscConfig+0x5ec>
 8002722:	4b01      	ldr	r3, [pc, #4]	; (8002728 <HAL_RCC_OscConfig+0x5e8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	e015      	b.n	8002754 <HAL_RCC_OscConfig+0x614>
 8002728:	40021000 	.word	0x40021000
 800272c:	2302      	movs	r3, #2
 800272e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800273e:	2302      	movs	r3, #2
 8002740:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002744:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002750:	4bc8      	ldr	r3, [pc, #800]	; (8002a74 <HAL_RCC_OscConfig+0x934>)
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	2202      	movs	r2, #2
 8002756:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800275a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800275e:	fa92 f2a2 	rbit	r2, r2
 8002762:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002766:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800276a:	fab2 f282 	clz	r2, r2
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	f042 0220 	orr.w	r2, r2, #32
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	f002 021f 	and.w	r2, r2, #31
 800277a:	2101      	movs	r1, #1
 800277c:	fa01 f202 	lsl.w	r2, r1, r2
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1ad      	bne.n	80026e2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8110 	beq.w	80029bc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800279c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d079      	beq.n	80028a0 <HAL_RCC_OscConfig+0x760>
 80027ac:	2301      	movs	r3, #1
 80027ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80027be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	4bab      	ldr	r3, [pc, #684]	; (8002a78 <HAL_RCC_OscConfig+0x938>)
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	461a      	mov	r2, r3
 80027d2:	2301      	movs	r3, #1
 80027d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d6:	f7ff f95d 	bl	8001a94 <HAL_GetTick>
 80027da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e0:	f7ff f958 	bl	8001a94 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d902      	bls.n	80027f6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	f000 bcdb 	b.w	80031ac <HAL_RCC_OscConfig+0x106c>
 80027f6:	2302      	movs	r3, #2
 80027f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002810:	2202      	movs	r2, #2
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002818:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	fa93 f2a3 	rbit	r2, r3
 8002822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002834:	2202      	movs	r2, #2
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	fa93 f2a3 	rbit	r2, r3
 8002846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800284e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002850:	4b88      	ldr	r3, [pc, #544]	; (8002a74 <HAL_RCC_OscConfig+0x934>)
 8002852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002858:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800285c:	2102      	movs	r1, #2
 800285e:	6019      	str	r1, [r3, #0]
 8002860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002864:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	fa93 f1a3 	rbit	r1, r3
 800286e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002872:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002876:	6019      	str	r1, [r3, #0]
  return result;
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0a0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x6a0>
 800289e:	e08d      	b.n	80029bc <HAL_RCC_OscConfig+0x87c>
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028a8:	2201      	movs	r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	fa93 f2a3 	rbit	r2, r3
 80028ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80028c2:	601a      	str	r2, [r3, #0]
  return result;
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80028cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	4b68      	ldr	r3, [pc, #416]	; (8002a78 <HAL_RCC_OscConfig+0x938>)
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	461a      	mov	r2, r3
 80028de:	2300      	movs	r3, #0
 80028e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e2:	f7ff f8d7 	bl	8001a94 <HAL_GetTick>
 80028e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ec:	f7ff f8d2 	bl	8001a94 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d902      	bls.n	8002902 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	f000 bc55 	b.w	80031ac <HAL_RCC_OscConfig+0x106c>
 8002902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002906:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800290a:	2202      	movs	r2, #2
 800290c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002912:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	fa93 f2a3 	rbit	r2, r3
 800291c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002920:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800292e:	2202      	movs	r2, #2
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002936:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	fa93 f2a3 	rbit	r2, r3
 8002940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002944:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002952:	2202      	movs	r2, #2
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	fa93 f2a3 	rbit	r2, r3
 8002964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002968:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800296c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296e:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <HAL_RCC_OscConfig+0x934>)
 8002970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800297a:	2102      	movs	r1, #2
 800297c:	6019      	str	r1, [r3, #0]
 800297e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002982:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	fa93 f1a3 	rbit	r1, r3
 800298c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002990:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002994:	6019      	str	r1, [r3, #0]
  return result;
 8002996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	fab3 f383 	clz	r3, r3
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	2101      	movs	r1, #1
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d197      	bne.n	80028ec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 81a1 	beq.w	8002d14 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d8:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <HAL_RCC_OscConfig+0x934>)
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d116      	bne.n	8002a12 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e4:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <HAL_RCC_OscConfig+0x934>)
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <HAL_RCC_OscConfig+0x934>)
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ee:	61d3      	str	r3, [r2, #28]
 80029f0:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <HAL_RCC_OscConfig+0x934>)
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80029f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a06:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a0a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a12:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <HAL_RCC_OscConfig+0x93c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d11a      	bne.n	8002a54 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a1e:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <HAL_RCC_OscConfig+0x93c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a16      	ldr	r2, [pc, #88]	; (8002a7c <HAL_RCC_OscConfig+0x93c>)
 8002a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a28:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2a:	f7ff f833 	bl	8001a94 <HAL_GetTick>
 8002a2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a32:	e009      	b.n	8002a48 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a34:	f7ff f82e 	bl	8001a94 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b64      	cmp	r3, #100	; 0x64
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e3b1      	b.n	80031ac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <HAL_RCC_OscConfig+0x93c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ef      	beq.n	8002a34 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d10d      	bne.n	8002a80 <HAL_RCC_OscConfig+0x940>
 8002a64:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <HAL_RCC_OscConfig+0x934>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4a02      	ldr	r2, [pc, #8]	; (8002a74 <HAL_RCC_OscConfig+0x934>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	6213      	str	r3, [r2, #32]
 8002a70:	e03c      	b.n	8002aec <HAL_RCC_OscConfig+0x9ac>
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
 8002a78:	10908120 	.word	0x10908120
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10c      	bne.n	8002aaa <HAL_RCC_OscConfig+0x96a>
 8002a90:	4bc1      	ldr	r3, [pc, #772]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	4ac0      	ldr	r2, [pc, #768]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	6213      	str	r3, [r2, #32]
 8002a9c:	4bbe      	ldr	r3, [pc, #760]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4abd      	ldr	r2, [pc, #756]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002aa2:	f023 0304 	bic.w	r3, r3, #4
 8002aa6:	6213      	str	r3, [r2, #32]
 8002aa8:	e020      	b.n	8002aec <HAL_RCC_OscConfig+0x9ac>
 8002aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b05      	cmp	r3, #5
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x994>
 8002aba:	4bb7      	ldr	r3, [pc, #732]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	4ab6      	ldr	r2, [pc, #728]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002ac0:	f043 0304 	orr.w	r3, r3, #4
 8002ac4:	6213      	str	r3, [r2, #32]
 8002ac6:	4bb4      	ldr	r3, [pc, #720]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	4ab3      	ldr	r2, [pc, #716]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6213      	str	r3, [r2, #32]
 8002ad2:	e00b      	b.n	8002aec <HAL_RCC_OscConfig+0x9ac>
 8002ad4:	4bb0      	ldr	r3, [pc, #704]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4aaf      	ldr	r2, [pc, #700]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	6213      	str	r3, [r2, #32]
 8002ae0:	4bad      	ldr	r3, [pc, #692]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4aac      	ldr	r2, [pc, #688]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002ae6:	f023 0304 	bic.w	r3, r3, #4
 8002aea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8081 	beq.w	8002c00 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afe:	f7fe ffc9 	bl	8001a94 <HAL_GetTick>
 8002b02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b06:	e00b      	b.n	8002b20 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7fe ffc4 	bl	8001a94 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e345      	b.n	80031ac <HAL_RCC_OscConfig+0x106c>
 8002b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b24:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b28:	2202      	movs	r2, #2
 8002b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b30:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	fa93 f2a3 	rbit	r2, r3
 8002b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b48:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	fa93 f2a3 	rbit	r2, r3
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b66:	601a      	str	r2, [r3, #0]
  return result;
 8002b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b70:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	f043 0302 	orr.w	r3, r3, #2
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d102      	bne.n	8002b8c <HAL_RCC_OscConfig+0xa4c>
 8002b86:	4b84      	ldr	r3, [pc, #528]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	e013      	b.n	8002bb4 <HAL_RCC_OscConfig+0xa74>
 8002b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b90:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002b94:	2202      	movs	r2, #2
 8002b96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	fa93 f2a3 	rbit	r2, r3
 8002ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002baa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	4b79      	ldr	r3, [pc, #484]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bb8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	6011      	str	r1, [r2, #0]
 8002bc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bc4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	fa92 f1a2 	rbit	r1, r2
 8002bce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bd2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002bd6:	6011      	str	r1, [r2, #0]
  return result;
 8002bd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bdc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	fab2 f282 	clz	r2, r2
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	f002 021f 	and.w	r2, r2, #31
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d084      	beq.n	8002b08 <HAL_RCC_OscConfig+0x9c8>
 8002bfe:	e07f      	b.n	8002d00 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c00:	f7fe ff48 	bl	8001a94 <HAL_GetTick>
 8002c04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c08:	e00b      	b.n	8002c22 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0a:	f7fe ff43 	bl	8001a94 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e2c4      	b.n	80031ac <HAL_RCC_OscConfig+0x106c>
 8002c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c26:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	fa93 f2a3 	rbit	r2, r3
 8002c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c40:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c4e:	2202      	movs	r2, #2
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c56:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	fa93 f2a3 	rbit	r2, r3
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c68:	601a      	str	r2, [r3, #0]
  return result;
 8002c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c72:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c74:	fab3 f383 	clz	r3, r3
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	f043 0302 	orr.w	r3, r3, #2
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d102      	bne.n	8002c8e <HAL_RCC_OscConfig+0xb4e>
 8002c88:	4b43      	ldr	r3, [pc, #268]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	e013      	b.n	8002cb6 <HAL_RCC_OscConfig+0xb76>
 8002c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c92:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c96:	2202      	movs	r2, #2
 8002c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	fa93 f2a3 	rbit	r2, r3
 8002ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	4b39      	ldr	r3, [pc, #228]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	6011      	str	r1, [r2, #0]
 8002cc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cc6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	fa92 f1a2 	rbit	r1, r2
 8002cd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cd4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002cd8:	6011      	str	r1, [r2, #0]
  return result;
 8002cda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cde:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	fab2 f282 	clz	r2, r2
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	f002 021f 	and.w	r2, r2, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d184      	bne.n	8002c0a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d00:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d105      	bne.n	8002d14 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d08:	4b23      	ldr	r3, [pc, #140]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	4a22      	ldr	r2, [pc, #136]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d12:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 8242 	beq.w	80031aa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d26:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <HAL_RCC_OscConfig+0xc58>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	f000 8213 	beq.w	800315a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	f040 8162 	bne.w	800300a <HAL_RCC_OscConfig+0xeca>
 8002d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d58:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	fa93 f2a3 	rbit	r2, r3
 8002d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d66:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d6a:	601a      	str	r2, [r3, #0]
  return result;
 8002d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d70:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d74:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	461a      	mov	r2, r3
 8002d88:	2300      	movs	r3, #0
 8002d8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fe82 	bl	8001a94 <HAL_GetTick>
 8002d90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d94:	e00c      	b.n	8002db0 <HAL_RCC_OscConfig+0xc70>
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fe fe7a 	bl	8001a94 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e1fd      	b.n	80031ac <HAL_RCC_OscConfig+0x106c>
 8002db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	fa93 f2a3 	rbit	r2, r3
 8002dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002dd4:	601a      	str	r2, [r3, #0]
  return result;
 8002dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dda:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002dde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d102      	bne.n	8002dfa <HAL_RCC_OscConfig+0xcba>
 8002df4:	4bb0      	ldr	r3, [pc, #704]	; (80030b8 <HAL_RCC_OscConfig+0xf78>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	e027      	b.n	8002e4a <HAL_RCC_OscConfig+0xd0a>
 8002dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	fa93 f2a3 	rbit	r2, r3
 8002e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e24:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e32:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	fa93 f2a3 	rbit	r2, r3
 8002e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e40:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	4b9c      	ldr	r3, [pc, #624]	; (80030b8 <HAL_RCC_OscConfig+0xf78>)
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e4e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e56:	6011      	str	r1, [r2, #0]
 8002e58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e5c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e60:	6812      	ldr	r2, [r2, #0]
 8002e62:	fa92 f1a2 	rbit	r1, r2
 8002e66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e6a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e6e:	6011      	str	r1, [r2, #0]
  return result;
 8002e70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e74:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	fab2 f282 	clz	r2, r2
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	f042 0220 	orr.w	r2, r2, #32
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	f002 021f 	and.w	r2, r2, #31
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e90:	4013      	ands	r3, r2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d182      	bne.n	8002d9c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e96:	4b88      	ldr	r3, [pc, #544]	; (80030b8 <HAL_RCC_OscConfig+0xf78>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	430b      	orrs	r3, r1
 8002eb8:	497f      	ldr	r1, [pc, #508]	; (80030b8 <HAL_RCC_OscConfig+0xf78>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	604b      	str	r3, [r1, #4]
 8002ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ec6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002eca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	fa93 f2a3 	rbit	r2, r3
 8002eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ede:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ee2:	601a      	str	r2, [r3, #0]
  return result;
 8002ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002eec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ef8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	461a      	mov	r2, r3
 8002f00:	2301      	movs	r3, #1
 8002f02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fe fdc6 	bl	8001a94 <HAL_GetTick>
 8002f08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f0c:	e009      	b.n	8002f22 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7fe fdc1 	bl	8001a94 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e144      	b.n	80031ac <HAL_RCC_OscConfig+0x106c>
 8002f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f26:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	fa93 f2a3 	rbit	r2, r3
 8002f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f42:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f46:	601a      	str	r2, [r3, #0]
  return result;
 8002f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f52:	fab3 f383 	clz	r3, r3
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	095b      	lsrs	r3, r3, #5
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d102      	bne.n	8002f6c <HAL_RCC_OscConfig+0xe2c>
 8002f66:	4b54      	ldr	r3, [pc, #336]	; (80030b8 <HAL_RCC_OscConfig+0xf78>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	e027      	b.n	8002fbc <HAL_RCC_OscConfig+0xe7c>
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	fa93 f2a3 	rbit	r2, r3
 8002f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f96:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002f9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	fa93 f2a3 	rbit	r2, r3
 8002fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	4b3f      	ldr	r3, [pc, #252]	; (80030b8 <HAL_RCC_OscConfig+0xf78>)
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fc0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002fc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fc8:	6011      	str	r1, [r2, #0]
 8002fca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fce:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	fa92 f1a2 	rbit	r1, r2
 8002fd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fdc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002fe0:	6011      	str	r1, [r2, #0]
  return result;
 8002fe2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fe6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	fab2 f282 	clz	r2, r2
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	f042 0220 	orr.w	r2, r2, #32
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	f002 021f 	and.w	r2, r2, #31
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d082      	beq.n	8002f0e <HAL_RCC_OscConfig+0xdce>
 8003008:	e0cf      	b.n	80031aa <HAL_RCC_OscConfig+0x106a>
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003012:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800302e:	601a      	str	r2, [r3, #0]
  return result;
 8003030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003034:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003038:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003044:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	461a      	mov	r2, r3
 800304c:	2300      	movs	r3, #0
 800304e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fe fd20 	bl	8001a94 <HAL_GetTick>
 8003054:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003058:	e009      	b.n	800306e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305a:	f7fe fd1b 	bl	8001a94 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e09e      	b.n	80031ac <HAL_RCC_OscConfig+0x106c>
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003076:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800307a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003080:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	fa93 f2a3 	rbit	r2, r3
 800308a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003092:	601a      	str	r2, [r3, #0]
  return result;
 8003094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003098:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800309c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d104      	bne.n	80030bc <HAL_RCC_OscConfig+0xf7c>
 80030b2:	4b01      	ldr	r3, [pc, #4]	; (80030b8 <HAL_RCC_OscConfig+0xf78>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	e029      	b.n	800310c <HAL_RCC_OscConfig+0xfcc>
 80030b8:	40021000 	.word	0x40021000
 80030bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80030c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ce:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	fa93 f2a3 	rbit	r2, r3
 80030d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030dc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80030ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	fa93 f2a3 	rbit	r2, r3
 80030fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003102:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <HAL_RCC_OscConfig+0x1078>)
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003110:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003114:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003118:	6011      	str	r1, [r2, #0]
 800311a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800311e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	fa92 f1a2 	rbit	r1, r2
 8003128:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800312c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003130:	6011      	str	r1, [r2, #0]
  return result;
 8003132:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003136:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	fab2 f282 	clz	r2, r2
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	f042 0220 	orr.w	r2, r2, #32
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	f002 021f 	and.w	r2, r2, #31
 800314c:	2101      	movs	r1, #1
 800314e:	fa01 f202 	lsl.w	r2, r1, r2
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d180      	bne.n	800305a <HAL_RCC_OscConfig+0xf1a>
 8003158:	e027      	b.n	80031aa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800315a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e01e      	b.n	80031ac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800316e:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <HAL_RCC_OscConfig+0x1078>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003176:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800317a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800317e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003182:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	429a      	cmp	r2, r3
 800318c:	d10b      	bne.n	80031a6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800318e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003192:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d001      	beq.n	80031aa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000

080031bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b09e      	sub	sp, #120	; 0x78
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e162      	b.n	800349a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031d4:	4b90      	ldr	r3, [pc, #576]	; (8003418 <HAL_RCC_ClockConfig+0x25c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d910      	bls.n	8003204 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	4b8d      	ldr	r3, [pc, #564]	; (8003418 <HAL_RCC_ClockConfig+0x25c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 0207 	bic.w	r2, r3, #7
 80031ea:	498b      	ldr	r1, [pc, #556]	; (8003418 <HAL_RCC_ClockConfig+0x25c>)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f2:	4b89      	ldr	r3, [pc, #548]	; (8003418 <HAL_RCC_ClockConfig+0x25c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d001      	beq.n	8003204 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e14a      	b.n	800349a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003210:	4b82      	ldr	r3, [pc, #520]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	497f      	ldr	r1, [pc, #508]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 800321e:	4313      	orrs	r3, r2
 8003220:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80dc 	beq.w	80033e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d13c      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xf6>
 8003238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800323c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003240:	fa93 f3a3 	rbit	r3, r3
 8003244:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	d102      	bne.n	8003262 <HAL_RCC_ClockConfig+0xa6>
 800325c:	4b6f      	ldr	r3, [pc, #444]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	e00f      	b.n	8003282 <HAL_RCC_ClockConfig+0xc6>
 8003262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003266:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003268:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800326a:	fa93 f3a3 	rbit	r3, r3
 800326e:	667b      	str	r3, [r7, #100]	; 0x64
 8003270:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003274:	663b      	str	r3, [r7, #96]	; 0x60
 8003276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003278:	fa93 f3a3 	rbit	r3, r3
 800327c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800327e:	4b67      	ldr	r3, [pc, #412]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003286:	65ba      	str	r2, [r7, #88]	; 0x58
 8003288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800328a:	fa92 f2a2 	rbit	r2, r2
 800328e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003290:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003292:	fab2 f282 	clz	r2, r2
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	f042 0220 	orr.w	r2, r2, #32
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f002 021f 	and.w	r2, r2, #31
 80032a2:	2101      	movs	r1, #1
 80032a4:	fa01 f202 	lsl.w	r2, r1, r2
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d17b      	bne.n	80033a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e0f3      	b.n	800349a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d13c      	bne.n	8003334 <HAL_RCC_ClockConfig+0x178>
 80032ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d102      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x128>
 80032de:	4b4f      	ldr	r3, [pc, #316]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	e00f      	b.n	8003304 <HAL_RCC_ClockConfig+0x148>
 80032e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ec:	fa93 f3a3 	rbit	r3, r3
 80032f0:	647b      	str	r3, [r7, #68]	; 0x44
 80032f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f6:	643b      	str	r3, [r7, #64]	; 0x40
 80032f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003300:	4b46      	ldr	r3, [pc, #280]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003308:	63ba      	str	r2, [r7, #56]	; 0x38
 800330a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800330c:	fa92 f2a2 	rbit	r2, r2
 8003310:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003314:	fab2 f282 	clz	r2, r2
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	f042 0220 	orr.w	r2, r2, #32
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	f002 021f 	and.w	r2, r2, #31
 8003324:	2101      	movs	r1, #1
 8003326:	fa01 f202 	lsl.w	r2, r1, r2
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d13a      	bne.n	80033a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0b2      	b.n	800349a <HAL_RCC_ClockConfig+0x2de>
 8003334:	2302      	movs	r3, #2
 8003336:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	b2db      	uxtb	r3, r3
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d102      	bne.n	800335c <HAL_RCC_ClockConfig+0x1a0>
 8003356:	4b31      	ldr	r3, [pc, #196]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	e00d      	b.n	8003378 <HAL_RCC_ClockConfig+0x1bc>
 800335c:	2302      	movs	r3, #2
 800335e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003362:	fa93 f3a3 	rbit	r3, r3
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
 8003368:	2302      	movs	r3, #2
 800336a:	623b      	str	r3, [r7, #32]
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	61fb      	str	r3, [r7, #28]
 8003374:	4b29      	ldr	r3, [pc, #164]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	2202      	movs	r2, #2
 800337a:	61ba      	str	r2, [r7, #24]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	fa92 f2a2 	rbit	r2, r2
 8003382:	617a      	str	r2, [r7, #20]
  return result;
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	fab2 f282 	clz	r2, r2
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	f042 0220 	orr.w	r2, r2, #32
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	f002 021f 	and.w	r2, r2, #31
 8003396:	2101      	movs	r1, #1
 8003398:	fa01 f202 	lsl.w	r2, r1, r2
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e079      	b.n	800349a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a6:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	491a      	ldr	r1, [pc, #104]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b8:	f7fe fb6c 	bl	8001a94 <HAL_GetTick>
 80033bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7fe fb68 	bl	8001a94 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e061      	b.n	800349a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d6:	4b11      	ldr	r3, [pc, #68]	; (800341c <HAL_RCC_ClockConfig+0x260>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 020c 	and.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d1eb      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_ClockConfig+0x25c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d214      	bcs.n	8003420 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b08      	ldr	r3, [pc, #32]	; (8003418 <HAL_RCC_ClockConfig+0x25c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 0207 	bic.w	r2, r3, #7
 80033fe:	4906      	ldr	r1, [pc, #24]	; (8003418 <HAL_RCC_ClockConfig+0x25c>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b04      	ldr	r3, [pc, #16]	; (8003418 <HAL_RCC_ClockConfig+0x25c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e040      	b.n	800349a <HAL_RCC_ClockConfig+0x2de>
 8003418:	40022000 	.word	0x40022000
 800341c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800342c:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <HAL_RCC_ClockConfig+0x2e8>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	491a      	ldr	r1, [pc, #104]	; (80034a4 <HAL_RCC_ClockConfig+0x2e8>)
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800344a:	4b16      	ldr	r3, [pc, #88]	; (80034a4 <HAL_RCC_ClockConfig+0x2e8>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4912      	ldr	r1, [pc, #72]	; (80034a4 <HAL_RCC_ClockConfig+0x2e8>)
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800345e:	f000 f829 	bl	80034b4 <HAL_RCC_GetSysClockFreq>
 8003462:	4601      	mov	r1, r0
 8003464:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <HAL_RCC_ClockConfig+0x2e8>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800346c:	22f0      	movs	r2, #240	; 0xf0
 800346e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	fa92 f2a2 	rbit	r2, r2
 8003476:	60fa      	str	r2, [r7, #12]
  return result;
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	fab2 f282 	clz	r2, r2
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	40d3      	lsrs	r3, r2
 8003482:	4a09      	ldr	r2, [pc, #36]	; (80034a8 <HAL_RCC_ClockConfig+0x2ec>)
 8003484:	5cd3      	ldrb	r3, [r2, r3]
 8003486:	fa21 f303 	lsr.w	r3, r1, r3
 800348a:	4a08      	ldr	r2, [pc, #32]	; (80034ac <HAL_RCC_ClockConfig+0x2f0>)
 800348c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800348e:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <HAL_RCC_ClockConfig+0x2f4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f7fe faba 	bl	8001a0c <HAL_InitTick>
  
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3778      	adds	r7, #120	; 0x78
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000
 80034a8:	08004800 	.word	0x08004800
 80034ac:	20000058 	.word	0x20000058
 80034b0:	2000005c 	.word	0x2000005c

080034b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b08b      	sub	sp, #44	; 0x2c
 80034b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	2300      	movs	r3, #0
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	2300      	movs	r3, #0
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80034ce:	4b29      	ldr	r3, [pc, #164]	; (8003574 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d002      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0x30>
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d003      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0x36>
 80034e2:	e03c      	b.n	800355e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034e4:	4b24      	ldr	r3, [pc, #144]	; (8003578 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034e6:	623b      	str	r3, [r7, #32]
      break;
 80034e8:	e03c      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80034f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80034f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	fa92 f2a2 	rbit	r2, r2
 80034fc:	607a      	str	r2, [r7, #4]
  return result;
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	fab2 f282 	clz	r2, r2
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	40d3      	lsrs	r3, r2
 8003508:	4a1c      	ldr	r2, [pc, #112]	; (800357c <HAL_RCC_GetSysClockFreq+0xc8>)
 800350a:	5cd3      	ldrb	r3, [r2, r3]
 800350c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800350e:	4b19      	ldr	r3, [pc, #100]	; (8003574 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	220f      	movs	r2, #15
 8003518:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	fa92 f2a2 	rbit	r2, r2
 8003520:	60fa      	str	r2, [r7, #12]
  return result;
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	fab2 f282 	clz	r2, r2
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	40d3      	lsrs	r3, r2
 800352c:	4a14      	ldr	r2, [pc, #80]	; (8003580 <HAL_RCC_GetSysClockFreq+0xcc>)
 800352e:	5cd3      	ldrb	r3, [r2, r3]
 8003530:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800353c:	4a0e      	ldr	r2, [pc, #56]	; (8003578 <HAL_RCC_GetSysClockFreq+0xc4>)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	fbb2 f2f3 	udiv	r2, r2, r3
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	fb02 f303 	mul.w	r3, r2, r3
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
 800354c:	e004      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	4a0c      	ldr	r2, [pc, #48]	; (8003584 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	623b      	str	r3, [r7, #32]
      break;
 800355c:	e002      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003560:	623b      	str	r3, [r7, #32]
      break;
 8003562:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003564:	6a3b      	ldr	r3, [r7, #32]
}
 8003566:	4618      	mov	r0, r3
 8003568:	372c      	adds	r7, #44	; 0x2c
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000
 8003578:	007a1200 	.word	0x007a1200
 800357c:	08004810 	.word	0x08004810
 8003580:	08004820 	.word	0x08004820
 8003584:	003d0900 	.word	0x003d0900

08003588 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b092      	sub	sp, #72	; 0x48
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003598:	2300      	movs	r3, #0
 800359a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 80d4 	beq.w	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ac:	4b4e      	ldr	r3, [pc, #312]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10e      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b8:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	4a4a      	ldr	r2, [pc, #296]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c2:	61d3      	str	r3, [r2, #28]
 80035c4:	4b48      	ldr	r3, [pc, #288]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d6:	4b45      	ldr	r3, [pc, #276]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d118      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e2:	4b42      	ldr	r3, [pc, #264]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a41      	ldr	r2, [pc, #260]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ee:	f7fe fa51 	bl	8001a94 <HAL_GetTick>
 80035f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	e008      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f6:	f7fe fa4d 	bl	8001a94 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b64      	cmp	r3, #100	; 0x64
 8003602:	d901      	bls.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e169      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003608:	4b38      	ldr	r3, [pc, #224]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003614:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800361e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8084 	beq.w	800372e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003630:	429a      	cmp	r2, r3
 8003632:	d07c      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003634:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800363e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003642:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	4b26      	ldr	r3, [pc, #152]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	461a      	mov	r2, r3
 800365e:	2301      	movs	r3, #1
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003666:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	461a      	mov	r2, r3
 8003682:	2300      	movs	r3, #0
 8003684:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003686:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800368c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d04b      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003696:	f7fe f9fd 	bl	8001a94 <HAL_GetTick>
 800369a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	e00a      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369e:	f7fe f9f9 	bl	8001a94 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e113      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x354>
 80036b4:	2302      	movs	r3, #2
 80036b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	fa93 f3a3 	rbit	r3, r3
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
 80036c0:	2302      	movs	r3, #2
 80036c2:	623b      	str	r3, [r7, #32]
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	61fb      	str	r3, [r7, #28]
  return result;
 80036cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f043 0302 	orr.w	r3, r3, #2
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d108      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80036e2:	4b01      	ldr	r3, [pc, #4]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	e00d      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40007000 	.word	0x40007000
 80036f0:	10908100 	.word	0x10908100
 80036f4:	2302      	movs	r3, #2
 80036f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	4b78      	ldr	r3, [pc, #480]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	2202      	movs	r2, #2
 8003706:	613a      	str	r2, [r7, #16]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	fa92 f2a2 	rbit	r2, r2
 800370e:	60fa      	str	r2, [r7, #12]
  return result;
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	fab2 f282 	clz	r2, r2
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	f002 021f 	and.w	r2, r2, #31
 8003722:	2101      	movs	r1, #1
 8003724:	fa01 f202 	lsl.w	r2, r1, r2
 8003728:	4013      	ands	r3, r2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0b7      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800372e:	4b6d      	ldr	r3, [pc, #436]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	496a      	ldr	r1, [pc, #424]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800373c:	4313      	orrs	r3, r2
 800373e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003740:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003744:	2b01      	cmp	r3, #1
 8003746:	d105      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003748:	4b66      	ldr	r3, [pc, #408]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	4a65      	ldr	r2, [pc, #404]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800374e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003752:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003760:	4b60      	ldr	r3, [pc, #384]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	f023 0203 	bic.w	r2, r3, #3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	495d      	ldr	r1, [pc, #372]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800376e:	4313      	orrs	r3, r2
 8003770:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d008      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800377e:	4b59      	ldr	r3, [pc, #356]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	4956      	ldr	r1, [pc, #344]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800378c:	4313      	orrs	r3, r2
 800378e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800379c:	4b51      	ldr	r3, [pc, #324]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	494e      	ldr	r1, [pc, #312]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037ba:	4b4a      	ldr	r3, [pc, #296]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	f023 0210 	bic.w	r2, r3, #16
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	4947      	ldr	r1, [pc, #284]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037d8:	4b42      	ldr	r3, [pc, #264]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e4:	493f      	ldr	r1, [pc, #252]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d008      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037f6:	4b3b      	ldr	r3, [pc, #236]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f023 0220 	bic.w	r2, r3, #32
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	4938      	ldr	r1, [pc, #224]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003804:	4313      	orrs	r3, r2
 8003806:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003814:	4b33      	ldr	r3, [pc, #204]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	4930      	ldr	r1, [pc, #192]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003822:	4313      	orrs	r3, r2
 8003824:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	2b00      	cmp	r3, #0
 8003830:	d008      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003832:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	4929      	ldr	r1, [pc, #164]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003840:	4313      	orrs	r3, r2
 8003842:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003850:	4b24      	ldr	r3, [pc, #144]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	4921      	ldr	r1, [pc, #132]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800385e:	4313      	orrs	r3, r2
 8003860:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386a:	2b00      	cmp	r3, #0
 800386c:	d008      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	491a      	ldr	r1, [pc, #104]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800387c:	4313      	orrs	r3, r2
 800387e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800388c:	4b15      	ldr	r3, [pc, #84]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	4912      	ldr	r1, [pc, #72]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800389a:	4313      	orrs	r3, r2
 800389c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d008      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	490b      	ldr	r1, [pc, #44]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d4:	4903      	ldr	r1, [pc, #12]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3748      	adds	r7, #72	; 0x48
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021000 	.word	0x40021000

080038e8 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e072      	b.n	80039e0 <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fd ff00 	bl	8001714 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6819      	ldr	r1, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003932:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 800393a:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8003940:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8003946:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800394c:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8003952:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8003958:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	7b1b      	ldrb	r3, [r3, #12]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d107      	bne.n	800397a <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003978:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	43d2      	mvns	r2, r2
 8003990:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039aa:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681c      	ldr	r4, [r3, #0]
 80039b4:	4610      	mov	r0, r2
 80039b6:	f000 f941 	bl	8003c3c <TSC_extract_groups>
 80039ba:	4603      	mov	r3, r0
 80039bc:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0203 	bic.w	r2, r2, #3
 80039cc:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2203      	movs	r2, #3
 80039d4:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd90      	pop	{r4, r7, pc}

080039e8 <HAL_TSC_Start_IT>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_TSC_Start_IT(TSC_HandleTypeDef *htsc)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));

  /* Process locked */
  __HAL_LOCK(htsc);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_TSC_Start_IT+0x16>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e04b      	b.n	8003a96 <HAL_TSC_Start_IT+0xae>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable end of acquisition interrupt */
  __HAL_TSC_ENABLE_IT(htsc, TSC_IT_EOA);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	605a      	str	r2, [r3, #4]

  /* Enable max count error interrupt (optional) */
  if (htsc->Init.MaxCountInterrupt == ENABLE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d108      	bne.n	8003a3a <HAL_TSC_Start_IT+0x52>
  {
    __HAL_TSC_ENABLE_IT(htsc, TSC_IT_MCE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0202 	orr.w	r2, r2, #2
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	e007      	b.n	8003a4a <HAL_TSC_Start_IT+0x62>
  }
  else
  {
    __HAL_TSC_DISABLE_IT(htsc, TSC_IT_MCE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0202 	bic.w	r2, r2, #2
 8003a48:	605a      	str	r2, [r3, #4]
  }

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2203      	movs	r2, #3
 8003a50:	609a      	str	r2, [r3, #8]

  /* Set touch sensing IOs not acquired to the specified IODefaultMode */
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d108      	bne.n	8003a6c <HAL_TSC_Start_IT+0x84>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0210 	bic.w	r2, r2, #16
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	e007      	b.n	8003a7c <HAL_TSC_Start_IT+0x94>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0210 	orr.w	r2, r2, #16
 8003a7a:	601a      	str	r2, [r3, #0]
  }

  /* Launch the acquisition */
  __HAL_TSC_START_ACQ(htsc);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0202 	orr.w	r2, r2, #2
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_TSC_PollForAcquisition>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_TSC_PollForAcquisition(TSC_HandleTypeDef *htsc)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_TSC_PollForAcquisition+0x16>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e00f      	b.n	8003ad8 <HAL_TSC_PollForAcquisition+0x36>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check end of acquisition */
  while (HAL_TSC_GetState(htsc) == HAL_TSC_STATE_BUSY)
 8003ac0:	bf00      	nop
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f84e 	bl	8003b64 <HAL_TSC_GetState>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d0f9      	beq.n	8003ac2 <HAL_TSC_PollForAcquisition+0x20>
  {
    /* The timeout (max count error) is managed by the TSC peripheral itself. */
  }

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_TSC_GroupGetValue>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Acquisition measure
  */
uint32_t HAL_TSC_GroupGetValue(const TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group acquisition counter */
  return htsc->Instance->IOGXCR[gx_index];
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	330c      	adds	r3, #12
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	685b      	ldr	r3, [r3, #4]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_TSC_IODischarge>:
  *         the configuration information for the specified TSC.
  * @param  choice This parameter can be set to ENABLE or DISABLE.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IODischarge(TSC_HandleTypeDef *htsc, FunctionalState choice)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_TSC_IODischarge+0x1a>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e01c      	b.n	8003b58 <HAL_TSC_IODischarge+0x54>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (choice == ENABLE)
 8003b26:	78fb      	ldrb	r3, [r7, #3]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d108      	bne.n	8003b3e <HAL_TSC_IODischarge+0x3a>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0210 	bic.w	r2, r2, #16
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	e007      	b.n	8003b4e <HAL_TSC_IODischarge+0x4a>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0210 	orr.w	r2, r2, #16
 8003b4c:	601a      	str	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return the group acquisition counter */
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_TSC_GetState>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL state
  */
HAL_TSC_StateTypeDef HAL_TSC_GetState(TSC_HandleTypeDef *htsc)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  if (htsc->State == HAL_TSC_STATE_BUSY)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d116      	bne.n	8003ba6 <HAL_TSC_GetState+0x42>
  {
    /* Check end of acquisition flag */
    if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d10f      	bne.n	8003ba6 <HAL_TSC_GetState+0x42>
    {
      /* Check max count error flag */
      if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d104      	bne.n	8003b9e <HAL_TSC_GetState+0x3a>
      {
        /* Change TSC state */
        htsc->State = HAL_TSC_STATE_ERROR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2203      	movs	r2, #3
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b9c:	e003      	b.n	8003ba6 <HAL_TSC_GetState+0x42>
      }
      else
      {
        /* Change TSC state */
        htsc->State = HAL_TSC_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return TSC state */
  return htsc->State;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bac:	b2db      	uxtb	r3, r3
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_TSC_IRQHandler>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
void HAL_TSC_IRQHandler(TSC_HandleTypeDef *htsc)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Check if the end of acquisition occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d103      	bne.n	8003bd8 <HAL_TSC_IRQHandler+0x1e>
  {
    /* Clear EOA flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_EOA);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	609a      	str	r2, [r3, #8]
  }

  /* Check if max count error occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d10b      	bne.n	8003bfe <HAL_TSC_IRQHandler+0x44>
  {
    /* Clear MCE flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_MCE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2202      	movs	r2, #2
 8003bec:	609a      	str	r2, [r3, #8]
    /* Change TSC state */
    htsc->State = HAL_TSC_STATE_ERROR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
#if (USE_HAL_TSC_REGISTER_CALLBACKS == 1)
    htsc->ErrorCallback(htsc);
#else
    /* Conversion completed callback */
    HAL_TSC_ErrorCallback(htsc);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f816 	bl	8003c28 <HAL_TSC_ErrorCallback>
#else
    /* Conversion completed callback */
    HAL_TSC_ConvCpltCallback(htsc);
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }
}
 8003bfc:	e006      	b.n	8003c0c <HAL_TSC_IRQHandler+0x52>
    htsc->State = HAL_TSC_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    HAL_TSC_ConvCpltCallback(htsc);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f804 	bl	8003c14 <HAL_TSC_ConvCpltCallback>
}
 8003c0c:	bf00      	nop
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_TSC_ConvCpltCallback>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
__weak void HAL_TSC_ConvCpltCallback(TSC_HandleTypeDef *htsc)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htsc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TSC_ConvCpltCallback could be implemented in the user file.
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_TSC_ErrorCallback>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
__weak void HAL_TSC_ErrorCallback(TSC_HandleTypeDef *htsc)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htsc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TSC_ErrorCallback could be implemented in the user file.
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	e011      	b.n	8003c72 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	220f      	movs	r2, #15
 8003c54:	409a      	lsls	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d006      	beq.n	8003c6c <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8003c5e:	2201      	movs	r2, #1
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b07      	cmp	r3, #7
 8003c76:	d9ea      	bls.n	8003c4e <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8003c78:	68fb      	ldr	r3, [r7, #12]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b085      	sub	sp, #20
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c8e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003c92:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	f107 0014 	add.w	r0, r7, #20
 8003cca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	b004      	add	sp, #16
 8003cfc:	4770      	bx	lr

08003cfe <atoi>:
 8003cfe:	220a      	movs	r2, #10
 8003d00:	2100      	movs	r1, #0
 8003d02:	f000 b9f9 	b.w	80040f8 <strtol>
	...

08003d08 <__errno>:
 8003d08:	4b01      	ldr	r3, [pc, #4]	; (8003d10 <__errno+0x8>)
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000064 	.word	0x20000064

08003d14 <__libc_init_array>:
 8003d14:	b570      	push	{r4, r5, r6, lr}
 8003d16:	4d0d      	ldr	r5, [pc, #52]	; (8003d4c <__libc_init_array+0x38>)
 8003d18:	4c0d      	ldr	r4, [pc, #52]	; (8003d50 <__libc_init_array+0x3c>)
 8003d1a:	1b64      	subs	r4, r4, r5
 8003d1c:	10a4      	asrs	r4, r4, #2
 8003d1e:	2600      	movs	r6, #0
 8003d20:	42a6      	cmp	r6, r4
 8003d22:	d109      	bne.n	8003d38 <__libc_init_array+0x24>
 8003d24:	4d0b      	ldr	r5, [pc, #44]	; (8003d54 <__libc_init_array+0x40>)
 8003d26:	4c0c      	ldr	r4, [pc, #48]	; (8003d58 <__libc_init_array+0x44>)
 8003d28:	f000 fd4e 	bl	80047c8 <_init>
 8003d2c:	1b64      	subs	r4, r4, r5
 8003d2e:	10a4      	asrs	r4, r4, #2
 8003d30:	2600      	movs	r6, #0
 8003d32:	42a6      	cmp	r6, r4
 8003d34:	d105      	bne.n	8003d42 <__libc_init_array+0x2e>
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
 8003d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3c:	4798      	blx	r3
 8003d3e:	3601      	adds	r6, #1
 8003d40:	e7ee      	b.n	8003d20 <__libc_init_array+0xc>
 8003d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d46:	4798      	blx	r3
 8003d48:	3601      	adds	r6, #1
 8003d4a:	e7f2      	b.n	8003d32 <__libc_init_array+0x1e>
 8003d4c:	08004964 	.word	0x08004964
 8003d50:	08004964 	.word	0x08004964
 8003d54:	08004964 	.word	0x08004964
 8003d58:	08004968 	.word	0x08004968

08003d5c <malloc>:
 8003d5c:	4b02      	ldr	r3, [pc, #8]	; (8003d68 <malloc+0xc>)
 8003d5e:	4601      	mov	r1, r0
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	f000 b877 	b.w	8003e54 <_malloc_r>
 8003d66:	bf00      	nop
 8003d68:	20000064 	.word	0x20000064

08003d6c <memset>:
 8003d6c:	4402      	add	r2, r0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d100      	bne.n	8003d76 <memset+0xa>
 8003d74:	4770      	bx	lr
 8003d76:	f803 1b01 	strb.w	r1, [r3], #1
 8003d7a:	e7f9      	b.n	8003d70 <memset+0x4>

08003d7c <_free_r>:
 8003d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d7e:	2900      	cmp	r1, #0
 8003d80:	d044      	beq.n	8003e0c <_free_r+0x90>
 8003d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d86:	9001      	str	r0, [sp, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8003d8e:	bfb8      	it	lt
 8003d90:	18e4      	addlt	r4, r4, r3
 8003d92:	f000 f9bb 	bl	800410c <__malloc_lock>
 8003d96:	4a1e      	ldr	r2, [pc, #120]	; (8003e10 <_free_r+0x94>)
 8003d98:	9801      	ldr	r0, [sp, #4]
 8003d9a:	6813      	ldr	r3, [r2, #0]
 8003d9c:	b933      	cbnz	r3, 8003dac <_free_r+0x30>
 8003d9e:	6063      	str	r3, [r4, #4]
 8003da0:	6014      	str	r4, [r2, #0]
 8003da2:	b003      	add	sp, #12
 8003da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003da8:	f000 b9b6 	b.w	8004118 <__malloc_unlock>
 8003dac:	42a3      	cmp	r3, r4
 8003dae:	d908      	bls.n	8003dc2 <_free_r+0x46>
 8003db0:	6825      	ldr	r5, [r4, #0]
 8003db2:	1961      	adds	r1, r4, r5
 8003db4:	428b      	cmp	r3, r1
 8003db6:	bf01      	itttt	eq
 8003db8:	6819      	ldreq	r1, [r3, #0]
 8003dba:	685b      	ldreq	r3, [r3, #4]
 8003dbc:	1949      	addeq	r1, r1, r5
 8003dbe:	6021      	streq	r1, [r4, #0]
 8003dc0:	e7ed      	b.n	8003d9e <_free_r+0x22>
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	b10b      	cbz	r3, 8003dcc <_free_r+0x50>
 8003dc8:	42a3      	cmp	r3, r4
 8003dca:	d9fa      	bls.n	8003dc2 <_free_r+0x46>
 8003dcc:	6811      	ldr	r1, [r2, #0]
 8003dce:	1855      	adds	r5, r2, r1
 8003dd0:	42a5      	cmp	r5, r4
 8003dd2:	d10b      	bne.n	8003dec <_free_r+0x70>
 8003dd4:	6824      	ldr	r4, [r4, #0]
 8003dd6:	4421      	add	r1, r4
 8003dd8:	1854      	adds	r4, r2, r1
 8003dda:	42a3      	cmp	r3, r4
 8003ddc:	6011      	str	r1, [r2, #0]
 8003dde:	d1e0      	bne.n	8003da2 <_free_r+0x26>
 8003de0:	681c      	ldr	r4, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	6053      	str	r3, [r2, #4]
 8003de6:	4421      	add	r1, r4
 8003de8:	6011      	str	r1, [r2, #0]
 8003dea:	e7da      	b.n	8003da2 <_free_r+0x26>
 8003dec:	d902      	bls.n	8003df4 <_free_r+0x78>
 8003dee:	230c      	movs	r3, #12
 8003df0:	6003      	str	r3, [r0, #0]
 8003df2:	e7d6      	b.n	8003da2 <_free_r+0x26>
 8003df4:	6825      	ldr	r5, [r4, #0]
 8003df6:	1961      	adds	r1, r4, r5
 8003df8:	428b      	cmp	r3, r1
 8003dfa:	bf04      	itt	eq
 8003dfc:	6819      	ldreq	r1, [r3, #0]
 8003dfe:	685b      	ldreq	r3, [r3, #4]
 8003e00:	6063      	str	r3, [r4, #4]
 8003e02:	bf04      	itt	eq
 8003e04:	1949      	addeq	r1, r1, r5
 8003e06:	6021      	streq	r1, [r4, #0]
 8003e08:	6054      	str	r4, [r2, #4]
 8003e0a:	e7ca      	b.n	8003da2 <_free_r+0x26>
 8003e0c:	b003      	add	sp, #12
 8003e0e:	bd30      	pop	{r4, r5, pc}
 8003e10:	20001c10 	.word	0x20001c10

08003e14 <sbrk_aligned>:
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	4e0e      	ldr	r6, [pc, #56]	; (8003e50 <sbrk_aligned+0x3c>)
 8003e18:	460c      	mov	r4, r1
 8003e1a:	6831      	ldr	r1, [r6, #0]
 8003e1c:	4605      	mov	r5, r0
 8003e1e:	b911      	cbnz	r1, 8003e26 <sbrk_aligned+0x12>
 8003e20:	f000 f88c 	bl	8003f3c <_sbrk_r>
 8003e24:	6030      	str	r0, [r6, #0]
 8003e26:	4621      	mov	r1, r4
 8003e28:	4628      	mov	r0, r5
 8003e2a:	f000 f887 	bl	8003f3c <_sbrk_r>
 8003e2e:	1c43      	adds	r3, r0, #1
 8003e30:	d00a      	beq.n	8003e48 <sbrk_aligned+0x34>
 8003e32:	1cc4      	adds	r4, r0, #3
 8003e34:	f024 0403 	bic.w	r4, r4, #3
 8003e38:	42a0      	cmp	r0, r4
 8003e3a:	d007      	beq.n	8003e4c <sbrk_aligned+0x38>
 8003e3c:	1a21      	subs	r1, r4, r0
 8003e3e:	4628      	mov	r0, r5
 8003e40:	f000 f87c 	bl	8003f3c <_sbrk_r>
 8003e44:	3001      	adds	r0, #1
 8003e46:	d101      	bne.n	8003e4c <sbrk_aligned+0x38>
 8003e48:	f04f 34ff 	mov.w	r4, #4294967295
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}
 8003e50:	20001c14 	.word	0x20001c14

08003e54 <_malloc_r>:
 8003e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e58:	1ccd      	adds	r5, r1, #3
 8003e5a:	f025 0503 	bic.w	r5, r5, #3
 8003e5e:	3508      	adds	r5, #8
 8003e60:	2d0c      	cmp	r5, #12
 8003e62:	bf38      	it	cc
 8003e64:	250c      	movcc	r5, #12
 8003e66:	2d00      	cmp	r5, #0
 8003e68:	4607      	mov	r7, r0
 8003e6a:	db01      	blt.n	8003e70 <_malloc_r+0x1c>
 8003e6c:	42a9      	cmp	r1, r5
 8003e6e:	d905      	bls.n	8003e7c <_malloc_r+0x28>
 8003e70:	230c      	movs	r3, #12
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	2600      	movs	r6, #0
 8003e76:	4630      	mov	r0, r6
 8003e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e7c:	4e2e      	ldr	r6, [pc, #184]	; (8003f38 <_malloc_r+0xe4>)
 8003e7e:	f000 f945 	bl	800410c <__malloc_lock>
 8003e82:	6833      	ldr	r3, [r6, #0]
 8003e84:	461c      	mov	r4, r3
 8003e86:	bb34      	cbnz	r4, 8003ed6 <_malloc_r+0x82>
 8003e88:	4629      	mov	r1, r5
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	f7ff ffc2 	bl	8003e14 <sbrk_aligned>
 8003e90:	1c43      	adds	r3, r0, #1
 8003e92:	4604      	mov	r4, r0
 8003e94:	d14d      	bne.n	8003f32 <_malloc_r+0xde>
 8003e96:	6834      	ldr	r4, [r6, #0]
 8003e98:	4626      	mov	r6, r4
 8003e9a:	2e00      	cmp	r6, #0
 8003e9c:	d140      	bne.n	8003f20 <_malloc_r+0xcc>
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	4631      	mov	r1, r6
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	eb04 0803 	add.w	r8, r4, r3
 8003ea8:	f000 f848 	bl	8003f3c <_sbrk_r>
 8003eac:	4580      	cmp	r8, r0
 8003eae:	d13a      	bne.n	8003f26 <_malloc_r+0xd2>
 8003eb0:	6821      	ldr	r1, [r4, #0]
 8003eb2:	3503      	adds	r5, #3
 8003eb4:	1a6d      	subs	r5, r5, r1
 8003eb6:	f025 0503 	bic.w	r5, r5, #3
 8003eba:	3508      	adds	r5, #8
 8003ebc:	2d0c      	cmp	r5, #12
 8003ebe:	bf38      	it	cc
 8003ec0:	250c      	movcc	r5, #12
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	f7ff ffa5 	bl	8003e14 <sbrk_aligned>
 8003eca:	3001      	adds	r0, #1
 8003ecc:	d02b      	beq.n	8003f26 <_malloc_r+0xd2>
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	442b      	add	r3, r5
 8003ed2:	6023      	str	r3, [r4, #0]
 8003ed4:	e00e      	b.n	8003ef4 <_malloc_r+0xa0>
 8003ed6:	6822      	ldr	r2, [r4, #0]
 8003ed8:	1b52      	subs	r2, r2, r5
 8003eda:	d41e      	bmi.n	8003f1a <_malloc_r+0xc6>
 8003edc:	2a0b      	cmp	r2, #11
 8003ede:	d916      	bls.n	8003f0e <_malloc_r+0xba>
 8003ee0:	1961      	adds	r1, r4, r5
 8003ee2:	42a3      	cmp	r3, r4
 8003ee4:	6025      	str	r5, [r4, #0]
 8003ee6:	bf18      	it	ne
 8003ee8:	6059      	strne	r1, [r3, #4]
 8003eea:	6863      	ldr	r3, [r4, #4]
 8003eec:	bf08      	it	eq
 8003eee:	6031      	streq	r1, [r6, #0]
 8003ef0:	5162      	str	r2, [r4, r5]
 8003ef2:	604b      	str	r3, [r1, #4]
 8003ef4:	4638      	mov	r0, r7
 8003ef6:	f104 060b 	add.w	r6, r4, #11
 8003efa:	f000 f90d 	bl	8004118 <__malloc_unlock>
 8003efe:	f026 0607 	bic.w	r6, r6, #7
 8003f02:	1d23      	adds	r3, r4, #4
 8003f04:	1af2      	subs	r2, r6, r3
 8003f06:	d0b6      	beq.n	8003e76 <_malloc_r+0x22>
 8003f08:	1b9b      	subs	r3, r3, r6
 8003f0a:	50a3      	str	r3, [r4, r2]
 8003f0c:	e7b3      	b.n	8003e76 <_malloc_r+0x22>
 8003f0e:	6862      	ldr	r2, [r4, #4]
 8003f10:	42a3      	cmp	r3, r4
 8003f12:	bf0c      	ite	eq
 8003f14:	6032      	streq	r2, [r6, #0]
 8003f16:	605a      	strne	r2, [r3, #4]
 8003f18:	e7ec      	b.n	8003ef4 <_malloc_r+0xa0>
 8003f1a:	4623      	mov	r3, r4
 8003f1c:	6864      	ldr	r4, [r4, #4]
 8003f1e:	e7b2      	b.n	8003e86 <_malloc_r+0x32>
 8003f20:	4634      	mov	r4, r6
 8003f22:	6876      	ldr	r6, [r6, #4]
 8003f24:	e7b9      	b.n	8003e9a <_malloc_r+0x46>
 8003f26:	230c      	movs	r3, #12
 8003f28:	603b      	str	r3, [r7, #0]
 8003f2a:	4638      	mov	r0, r7
 8003f2c:	f000 f8f4 	bl	8004118 <__malloc_unlock>
 8003f30:	e7a1      	b.n	8003e76 <_malloc_r+0x22>
 8003f32:	6025      	str	r5, [r4, #0]
 8003f34:	e7de      	b.n	8003ef4 <_malloc_r+0xa0>
 8003f36:	bf00      	nop
 8003f38:	20001c10 	.word	0x20001c10

08003f3c <_sbrk_r>:
 8003f3c:	b538      	push	{r3, r4, r5, lr}
 8003f3e:	4d06      	ldr	r5, [pc, #24]	; (8003f58 <_sbrk_r+0x1c>)
 8003f40:	2300      	movs	r3, #0
 8003f42:	4604      	mov	r4, r0
 8003f44:	4608      	mov	r0, r1
 8003f46:	602b      	str	r3, [r5, #0]
 8003f48:	f7fd fcd8 	bl	80018fc <_sbrk>
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d102      	bne.n	8003f56 <_sbrk_r+0x1a>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	b103      	cbz	r3, 8003f56 <_sbrk_r+0x1a>
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	bd38      	pop	{r3, r4, r5, pc}
 8003f58:	20001c18 	.word	0x20001c18

08003f5c <siprintf>:
 8003f5c:	b40e      	push	{r1, r2, r3}
 8003f5e:	b500      	push	{lr}
 8003f60:	b09c      	sub	sp, #112	; 0x70
 8003f62:	ab1d      	add	r3, sp, #116	; 0x74
 8003f64:	9002      	str	r0, [sp, #8]
 8003f66:	9006      	str	r0, [sp, #24]
 8003f68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f6c:	4809      	ldr	r0, [pc, #36]	; (8003f94 <siprintf+0x38>)
 8003f6e:	9107      	str	r1, [sp, #28]
 8003f70:	9104      	str	r1, [sp, #16]
 8003f72:	4909      	ldr	r1, [pc, #36]	; (8003f98 <siprintf+0x3c>)
 8003f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f78:	9105      	str	r1, [sp, #20]
 8003f7a:	6800      	ldr	r0, [r0, #0]
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	a902      	add	r1, sp, #8
 8003f80:	f000 f92c 	bl	80041dc <_svfiprintf_r>
 8003f84:	9b02      	ldr	r3, [sp, #8]
 8003f86:	2200      	movs	r2, #0
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	b01c      	add	sp, #112	; 0x70
 8003f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f90:	b003      	add	sp, #12
 8003f92:	4770      	bx	lr
 8003f94:	20000064 	.word	0x20000064
 8003f98:	ffff0208 	.word	0xffff0208

08003f9c <strcat>:
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	7814      	ldrb	r4, [r2, #0]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	3201      	adds	r2, #1
 8003fa6:	2c00      	cmp	r4, #0
 8003fa8:	d1fa      	bne.n	8003fa0 <strcat+0x4>
 8003faa:	3b01      	subs	r3, #1
 8003fac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fb4:	2a00      	cmp	r2, #0
 8003fb6:	d1f9      	bne.n	8003fac <strcat+0x10>
 8003fb8:	bd10      	pop	{r4, pc}

08003fba <strcpy>:
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fc0:	f803 2b01 	strb.w	r2, [r3], #1
 8003fc4:	2a00      	cmp	r2, #0
 8003fc6:	d1f9      	bne.n	8003fbc <strcpy+0x2>
 8003fc8:	4770      	bx	lr

08003fca <strncmp>:
 8003fca:	b510      	push	{r4, lr}
 8003fcc:	b17a      	cbz	r2, 8003fee <strncmp+0x24>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	3901      	subs	r1, #1
 8003fd2:	1884      	adds	r4, r0, r2
 8003fd4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003fd8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003fdc:	4290      	cmp	r0, r2
 8003fde:	d101      	bne.n	8003fe4 <strncmp+0x1a>
 8003fe0:	42a3      	cmp	r3, r4
 8003fe2:	d101      	bne.n	8003fe8 <strncmp+0x1e>
 8003fe4:	1a80      	subs	r0, r0, r2
 8003fe6:	bd10      	pop	{r4, pc}
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	d1f3      	bne.n	8003fd4 <strncmp+0xa>
 8003fec:	e7fa      	b.n	8003fe4 <strncmp+0x1a>
 8003fee:	4610      	mov	r0, r2
 8003ff0:	e7f9      	b.n	8003fe6 <strncmp+0x1c>
	...

08003ff4 <_strtol_l.constprop.0>:
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ffa:	d001      	beq.n	8004000 <_strtol_l.constprop.0+0xc>
 8003ffc:	2b24      	cmp	r3, #36	; 0x24
 8003ffe:	d906      	bls.n	800400e <_strtol_l.constprop.0+0x1a>
 8004000:	f7ff fe82 	bl	8003d08 <__errno>
 8004004:	2316      	movs	r3, #22
 8004006:	6003      	str	r3, [r0, #0]
 8004008:	2000      	movs	r0, #0
 800400a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80040f4 <_strtol_l.constprop.0+0x100>
 8004012:	460d      	mov	r5, r1
 8004014:	462e      	mov	r6, r5
 8004016:	f815 4b01 	ldrb.w	r4, [r5], #1
 800401a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800401e:	f017 0708 	ands.w	r7, r7, #8
 8004022:	d1f7      	bne.n	8004014 <_strtol_l.constprop.0+0x20>
 8004024:	2c2d      	cmp	r4, #45	; 0x2d
 8004026:	d132      	bne.n	800408e <_strtol_l.constprop.0+0x9a>
 8004028:	782c      	ldrb	r4, [r5, #0]
 800402a:	2701      	movs	r7, #1
 800402c:	1cb5      	adds	r5, r6, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d05b      	beq.n	80040ea <_strtol_l.constprop.0+0xf6>
 8004032:	2b10      	cmp	r3, #16
 8004034:	d109      	bne.n	800404a <_strtol_l.constprop.0+0x56>
 8004036:	2c30      	cmp	r4, #48	; 0x30
 8004038:	d107      	bne.n	800404a <_strtol_l.constprop.0+0x56>
 800403a:	782c      	ldrb	r4, [r5, #0]
 800403c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004040:	2c58      	cmp	r4, #88	; 0x58
 8004042:	d14d      	bne.n	80040e0 <_strtol_l.constprop.0+0xec>
 8004044:	786c      	ldrb	r4, [r5, #1]
 8004046:	2310      	movs	r3, #16
 8004048:	3502      	adds	r5, #2
 800404a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800404e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004052:	f04f 0c00 	mov.w	ip, #0
 8004056:	fbb8 f9f3 	udiv	r9, r8, r3
 800405a:	4666      	mov	r6, ip
 800405c:	fb03 8a19 	mls	sl, r3, r9, r8
 8004060:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004064:	f1be 0f09 	cmp.w	lr, #9
 8004068:	d816      	bhi.n	8004098 <_strtol_l.constprop.0+0xa4>
 800406a:	4674      	mov	r4, lr
 800406c:	42a3      	cmp	r3, r4
 800406e:	dd24      	ble.n	80040ba <_strtol_l.constprop.0+0xc6>
 8004070:	f1bc 0f00 	cmp.w	ip, #0
 8004074:	db1e      	blt.n	80040b4 <_strtol_l.constprop.0+0xc0>
 8004076:	45b1      	cmp	r9, r6
 8004078:	d31c      	bcc.n	80040b4 <_strtol_l.constprop.0+0xc0>
 800407a:	d101      	bne.n	8004080 <_strtol_l.constprop.0+0x8c>
 800407c:	45a2      	cmp	sl, r4
 800407e:	db19      	blt.n	80040b4 <_strtol_l.constprop.0+0xc0>
 8004080:	fb06 4603 	mla	r6, r6, r3, r4
 8004084:	f04f 0c01 	mov.w	ip, #1
 8004088:	f815 4b01 	ldrb.w	r4, [r5], #1
 800408c:	e7e8      	b.n	8004060 <_strtol_l.constprop.0+0x6c>
 800408e:	2c2b      	cmp	r4, #43	; 0x2b
 8004090:	bf04      	itt	eq
 8004092:	782c      	ldrbeq	r4, [r5, #0]
 8004094:	1cb5      	addeq	r5, r6, #2
 8004096:	e7ca      	b.n	800402e <_strtol_l.constprop.0+0x3a>
 8004098:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800409c:	f1be 0f19 	cmp.w	lr, #25
 80040a0:	d801      	bhi.n	80040a6 <_strtol_l.constprop.0+0xb2>
 80040a2:	3c37      	subs	r4, #55	; 0x37
 80040a4:	e7e2      	b.n	800406c <_strtol_l.constprop.0+0x78>
 80040a6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80040aa:	f1be 0f19 	cmp.w	lr, #25
 80040ae:	d804      	bhi.n	80040ba <_strtol_l.constprop.0+0xc6>
 80040b0:	3c57      	subs	r4, #87	; 0x57
 80040b2:	e7db      	b.n	800406c <_strtol_l.constprop.0+0x78>
 80040b4:	f04f 3cff 	mov.w	ip, #4294967295
 80040b8:	e7e6      	b.n	8004088 <_strtol_l.constprop.0+0x94>
 80040ba:	f1bc 0f00 	cmp.w	ip, #0
 80040be:	da05      	bge.n	80040cc <_strtol_l.constprop.0+0xd8>
 80040c0:	2322      	movs	r3, #34	; 0x22
 80040c2:	6003      	str	r3, [r0, #0]
 80040c4:	4646      	mov	r6, r8
 80040c6:	b942      	cbnz	r2, 80040da <_strtol_l.constprop.0+0xe6>
 80040c8:	4630      	mov	r0, r6
 80040ca:	e79e      	b.n	800400a <_strtol_l.constprop.0+0x16>
 80040cc:	b107      	cbz	r7, 80040d0 <_strtol_l.constprop.0+0xdc>
 80040ce:	4276      	negs	r6, r6
 80040d0:	2a00      	cmp	r2, #0
 80040d2:	d0f9      	beq.n	80040c8 <_strtol_l.constprop.0+0xd4>
 80040d4:	f1bc 0f00 	cmp.w	ip, #0
 80040d8:	d000      	beq.n	80040dc <_strtol_l.constprop.0+0xe8>
 80040da:	1e69      	subs	r1, r5, #1
 80040dc:	6011      	str	r1, [r2, #0]
 80040de:	e7f3      	b.n	80040c8 <_strtol_l.constprop.0+0xd4>
 80040e0:	2430      	movs	r4, #48	; 0x30
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1b1      	bne.n	800404a <_strtol_l.constprop.0+0x56>
 80040e6:	2308      	movs	r3, #8
 80040e8:	e7af      	b.n	800404a <_strtol_l.constprop.0+0x56>
 80040ea:	2c30      	cmp	r4, #48	; 0x30
 80040ec:	d0a5      	beq.n	800403a <_strtol_l.constprop.0+0x46>
 80040ee:	230a      	movs	r3, #10
 80040f0:	e7ab      	b.n	800404a <_strtol_l.constprop.0+0x56>
 80040f2:	bf00      	nop
 80040f4:	08004831 	.word	0x08004831

080040f8 <strtol>:
 80040f8:	4613      	mov	r3, r2
 80040fa:	460a      	mov	r2, r1
 80040fc:	4601      	mov	r1, r0
 80040fe:	4802      	ldr	r0, [pc, #8]	; (8004108 <strtol+0x10>)
 8004100:	6800      	ldr	r0, [r0, #0]
 8004102:	f7ff bf77 	b.w	8003ff4 <_strtol_l.constprop.0>
 8004106:	bf00      	nop
 8004108:	20000064 	.word	0x20000064

0800410c <__malloc_lock>:
 800410c:	4801      	ldr	r0, [pc, #4]	; (8004114 <__malloc_lock+0x8>)
 800410e:	f000 baf9 	b.w	8004704 <__retarget_lock_acquire_recursive>
 8004112:	bf00      	nop
 8004114:	20001c1c 	.word	0x20001c1c

08004118 <__malloc_unlock>:
 8004118:	4801      	ldr	r0, [pc, #4]	; (8004120 <__malloc_unlock+0x8>)
 800411a:	f000 baf4 	b.w	8004706 <__retarget_lock_release_recursive>
 800411e:	bf00      	nop
 8004120:	20001c1c 	.word	0x20001c1c

08004124 <__ssputs_r>:
 8004124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004128:	688e      	ldr	r6, [r1, #8]
 800412a:	429e      	cmp	r6, r3
 800412c:	4682      	mov	sl, r0
 800412e:	460c      	mov	r4, r1
 8004130:	4690      	mov	r8, r2
 8004132:	461f      	mov	r7, r3
 8004134:	d838      	bhi.n	80041a8 <__ssputs_r+0x84>
 8004136:	898a      	ldrh	r2, [r1, #12]
 8004138:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800413c:	d032      	beq.n	80041a4 <__ssputs_r+0x80>
 800413e:	6825      	ldr	r5, [r4, #0]
 8004140:	6909      	ldr	r1, [r1, #16]
 8004142:	eba5 0901 	sub.w	r9, r5, r1
 8004146:	6965      	ldr	r5, [r4, #20]
 8004148:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800414c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004150:	3301      	adds	r3, #1
 8004152:	444b      	add	r3, r9
 8004154:	106d      	asrs	r5, r5, #1
 8004156:	429d      	cmp	r5, r3
 8004158:	bf38      	it	cc
 800415a:	461d      	movcc	r5, r3
 800415c:	0553      	lsls	r3, r2, #21
 800415e:	d531      	bpl.n	80041c4 <__ssputs_r+0xa0>
 8004160:	4629      	mov	r1, r5
 8004162:	f7ff fe77 	bl	8003e54 <_malloc_r>
 8004166:	4606      	mov	r6, r0
 8004168:	b950      	cbnz	r0, 8004180 <__ssputs_r+0x5c>
 800416a:	230c      	movs	r3, #12
 800416c:	f8ca 3000 	str.w	r3, [sl]
 8004170:	89a3      	ldrh	r3, [r4, #12]
 8004172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004176:	81a3      	strh	r3, [r4, #12]
 8004178:	f04f 30ff 	mov.w	r0, #4294967295
 800417c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004180:	6921      	ldr	r1, [r4, #16]
 8004182:	464a      	mov	r2, r9
 8004184:	f000 fac0 	bl	8004708 <memcpy>
 8004188:	89a3      	ldrh	r3, [r4, #12]
 800418a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800418e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004192:	81a3      	strh	r3, [r4, #12]
 8004194:	6126      	str	r6, [r4, #16]
 8004196:	6165      	str	r5, [r4, #20]
 8004198:	444e      	add	r6, r9
 800419a:	eba5 0509 	sub.w	r5, r5, r9
 800419e:	6026      	str	r6, [r4, #0]
 80041a0:	60a5      	str	r5, [r4, #8]
 80041a2:	463e      	mov	r6, r7
 80041a4:	42be      	cmp	r6, r7
 80041a6:	d900      	bls.n	80041aa <__ssputs_r+0x86>
 80041a8:	463e      	mov	r6, r7
 80041aa:	6820      	ldr	r0, [r4, #0]
 80041ac:	4632      	mov	r2, r6
 80041ae:	4641      	mov	r1, r8
 80041b0:	f000 fab8 	bl	8004724 <memmove>
 80041b4:	68a3      	ldr	r3, [r4, #8]
 80041b6:	1b9b      	subs	r3, r3, r6
 80041b8:	60a3      	str	r3, [r4, #8]
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	4433      	add	r3, r6
 80041be:	6023      	str	r3, [r4, #0]
 80041c0:	2000      	movs	r0, #0
 80041c2:	e7db      	b.n	800417c <__ssputs_r+0x58>
 80041c4:	462a      	mov	r2, r5
 80041c6:	f000 fac7 	bl	8004758 <_realloc_r>
 80041ca:	4606      	mov	r6, r0
 80041cc:	2800      	cmp	r0, #0
 80041ce:	d1e1      	bne.n	8004194 <__ssputs_r+0x70>
 80041d0:	6921      	ldr	r1, [r4, #16]
 80041d2:	4650      	mov	r0, sl
 80041d4:	f7ff fdd2 	bl	8003d7c <_free_r>
 80041d8:	e7c7      	b.n	800416a <__ssputs_r+0x46>
	...

080041dc <_svfiprintf_r>:
 80041dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e0:	4698      	mov	r8, r3
 80041e2:	898b      	ldrh	r3, [r1, #12]
 80041e4:	061b      	lsls	r3, r3, #24
 80041e6:	b09d      	sub	sp, #116	; 0x74
 80041e8:	4607      	mov	r7, r0
 80041ea:	460d      	mov	r5, r1
 80041ec:	4614      	mov	r4, r2
 80041ee:	d50e      	bpl.n	800420e <_svfiprintf_r+0x32>
 80041f0:	690b      	ldr	r3, [r1, #16]
 80041f2:	b963      	cbnz	r3, 800420e <_svfiprintf_r+0x32>
 80041f4:	2140      	movs	r1, #64	; 0x40
 80041f6:	f7ff fe2d 	bl	8003e54 <_malloc_r>
 80041fa:	6028      	str	r0, [r5, #0]
 80041fc:	6128      	str	r0, [r5, #16]
 80041fe:	b920      	cbnz	r0, 800420a <_svfiprintf_r+0x2e>
 8004200:	230c      	movs	r3, #12
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	f04f 30ff 	mov.w	r0, #4294967295
 8004208:	e0d1      	b.n	80043ae <_svfiprintf_r+0x1d2>
 800420a:	2340      	movs	r3, #64	; 0x40
 800420c:	616b      	str	r3, [r5, #20]
 800420e:	2300      	movs	r3, #0
 8004210:	9309      	str	r3, [sp, #36]	; 0x24
 8004212:	2320      	movs	r3, #32
 8004214:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004218:	f8cd 800c 	str.w	r8, [sp, #12]
 800421c:	2330      	movs	r3, #48	; 0x30
 800421e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80043c8 <_svfiprintf_r+0x1ec>
 8004222:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004226:	f04f 0901 	mov.w	r9, #1
 800422a:	4623      	mov	r3, r4
 800422c:	469a      	mov	sl, r3
 800422e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004232:	b10a      	cbz	r2, 8004238 <_svfiprintf_r+0x5c>
 8004234:	2a25      	cmp	r2, #37	; 0x25
 8004236:	d1f9      	bne.n	800422c <_svfiprintf_r+0x50>
 8004238:	ebba 0b04 	subs.w	fp, sl, r4
 800423c:	d00b      	beq.n	8004256 <_svfiprintf_r+0x7a>
 800423e:	465b      	mov	r3, fp
 8004240:	4622      	mov	r2, r4
 8004242:	4629      	mov	r1, r5
 8004244:	4638      	mov	r0, r7
 8004246:	f7ff ff6d 	bl	8004124 <__ssputs_r>
 800424a:	3001      	adds	r0, #1
 800424c:	f000 80aa 	beq.w	80043a4 <_svfiprintf_r+0x1c8>
 8004250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004252:	445a      	add	r2, fp
 8004254:	9209      	str	r2, [sp, #36]	; 0x24
 8004256:	f89a 3000 	ldrb.w	r3, [sl]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 80a2 	beq.w	80043a4 <_svfiprintf_r+0x1c8>
 8004260:	2300      	movs	r3, #0
 8004262:	f04f 32ff 	mov.w	r2, #4294967295
 8004266:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800426a:	f10a 0a01 	add.w	sl, sl, #1
 800426e:	9304      	str	r3, [sp, #16]
 8004270:	9307      	str	r3, [sp, #28]
 8004272:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004276:	931a      	str	r3, [sp, #104]	; 0x68
 8004278:	4654      	mov	r4, sl
 800427a:	2205      	movs	r2, #5
 800427c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004280:	4851      	ldr	r0, [pc, #324]	; (80043c8 <_svfiprintf_r+0x1ec>)
 8004282:	f7fb ffad 	bl	80001e0 <memchr>
 8004286:	9a04      	ldr	r2, [sp, #16]
 8004288:	b9d8      	cbnz	r0, 80042c2 <_svfiprintf_r+0xe6>
 800428a:	06d0      	lsls	r0, r2, #27
 800428c:	bf44      	itt	mi
 800428e:	2320      	movmi	r3, #32
 8004290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004294:	0711      	lsls	r1, r2, #28
 8004296:	bf44      	itt	mi
 8004298:	232b      	movmi	r3, #43	; 0x2b
 800429a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800429e:	f89a 3000 	ldrb.w	r3, [sl]
 80042a2:	2b2a      	cmp	r3, #42	; 0x2a
 80042a4:	d015      	beq.n	80042d2 <_svfiprintf_r+0xf6>
 80042a6:	9a07      	ldr	r2, [sp, #28]
 80042a8:	4654      	mov	r4, sl
 80042aa:	2000      	movs	r0, #0
 80042ac:	f04f 0c0a 	mov.w	ip, #10
 80042b0:	4621      	mov	r1, r4
 80042b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042b6:	3b30      	subs	r3, #48	; 0x30
 80042b8:	2b09      	cmp	r3, #9
 80042ba:	d94e      	bls.n	800435a <_svfiprintf_r+0x17e>
 80042bc:	b1b0      	cbz	r0, 80042ec <_svfiprintf_r+0x110>
 80042be:	9207      	str	r2, [sp, #28]
 80042c0:	e014      	b.n	80042ec <_svfiprintf_r+0x110>
 80042c2:	eba0 0308 	sub.w	r3, r0, r8
 80042c6:	fa09 f303 	lsl.w	r3, r9, r3
 80042ca:	4313      	orrs	r3, r2
 80042cc:	9304      	str	r3, [sp, #16]
 80042ce:	46a2      	mov	sl, r4
 80042d0:	e7d2      	b.n	8004278 <_svfiprintf_r+0x9c>
 80042d2:	9b03      	ldr	r3, [sp, #12]
 80042d4:	1d19      	adds	r1, r3, #4
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	9103      	str	r1, [sp, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	bfbb      	ittet	lt
 80042de:	425b      	neglt	r3, r3
 80042e0:	f042 0202 	orrlt.w	r2, r2, #2
 80042e4:	9307      	strge	r3, [sp, #28]
 80042e6:	9307      	strlt	r3, [sp, #28]
 80042e8:	bfb8      	it	lt
 80042ea:	9204      	strlt	r2, [sp, #16]
 80042ec:	7823      	ldrb	r3, [r4, #0]
 80042ee:	2b2e      	cmp	r3, #46	; 0x2e
 80042f0:	d10c      	bne.n	800430c <_svfiprintf_r+0x130>
 80042f2:	7863      	ldrb	r3, [r4, #1]
 80042f4:	2b2a      	cmp	r3, #42	; 0x2a
 80042f6:	d135      	bne.n	8004364 <_svfiprintf_r+0x188>
 80042f8:	9b03      	ldr	r3, [sp, #12]
 80042fa:	1d1a      	adds	r2, r3, #4
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	9203      	str	r2, [sp, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	bfb8      	it	lt
 8004304:	f04f 33ff 	movlt.w	r3, #4294967295
 8004308:	3402      	adds	r4, #2
 800430a:	9305      	str	r3, [sp, #20]
 800430c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80043d8 <_svfiprintf_r+0x1fc>
 8004310:	7821      	ldrb	r1, [r4, #0]
 8004312:	2203      	movs	r2, #3
 8004314:	4650      	mov	r0, sl
 8004316:	f7fb ff63 	bl	80001e0 <memchr>
 800431a:	b140      	cbz	r0, 800432e <_svfiprintf_r+0x152>
 800431c:	2340      	movs	r3, #64	; 0x40
 800431e:	eba0 000a 	sub.w	r0, r0, sl
 8004322:	fa03 f000 	lsl.w	r0, r3, r0
 8004326:	9b04      	ldr	r3, [sp, #16]
 8004328:	4303      	orrs	r3, r0
 800432a:	3401      	adds	r4, #1
 800432c:	9304      	str	r3, [sp, #16]
 800432e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004332:	4826      	ldr	r0, [pc, #152]	; (80043cc <_svfiprintf_r+0x1f0>)
 8004334:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004338:	2206      	movs	r2, #6
 800433a:	f7fb ff51 	bl	80001e0 <memchr>
 800433e:	2800      	cmp	r0, #0
 8004340:	d038      	beq.n	80043b4 <_svfiprintf_r+0x1d8>
 8004342:	4b23      	ldr	r3, [pc, #140]	; (80043d0 <_svfiprintf_r+0x1f4>)
 8004344:	bb1b      	cbnz	r3, 800438e <_svfiprintf_r+0x1b2>
 8004346:	9b03      	ldr	r3, [sp, #12]
 8004348:	3307      	adds	r3, #7
 800434a:	f023 0307 	bic.w	r3, r3, #7
 800434e:	3308      	adds	r3, #8
 8004350:	9303      	str	r3, [sp, #12]
 8004352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004354:	4433      	add	r3, r6
 8004356:	9309      	str	r3, [sp, #36]	; 0x24
 8004358:	e767      	b.n	800422a <_svfiprintf_r+0x4e>
 800435a:	fb0c 3202 	mla	r2, ip, r2, r3
 800435e:	460c      	mov	r4, r1
 8004360:	2001      	movs	r0, #1
 8004362:	e7a5      	b.n	80042b0 <_svfiprintf_r+0xd4>
 8004364:	2300      	movs	r3, #0
 8004366:	3401      	adds	r4, #1
 8004368:	9305      	str	r3, [sp, #20]
 800436a:	4619      	mov	r1, r3
 800436c:	f04f 0c0a 	mov.w	ip, #10
 8004370:	4620      	mov	r0, r4
 8004372:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004376:	3a30      	subs	r2, #48	; 0x30
 8004378:	2a09      	cmp	r2, #9
 800437a:	d903      	bls.n	8004384 <_svfiprintf_r+0x1a8>
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0c5      	beq.n	800430c <_svfiprintf_r+0x130>
 8004380:	9105      	str	r1, [sp, #20]
 8004382:	e7c3      	b.n	800430c <_svfiprintf_r+0x130>
 8004384:	fb0c 2101 	mla	r1, ip, r1, r2
 8004388:	4604      	mov	r4, r0
 800438a:	2301      	movs	r3, #1
 800438c:	e7f0      	b.n	8004370 <_svfiprintf_r+0x194>
 800438e:	ab03      	add	r3, sp, #12
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	462a      	mov	r2, r5
 8004394:	4b0f      	ldr	r3, [pc, #60]	; (80043d4 <_svfiprintf_r+0x1f8>)
 8004396:	a904      	add	r1, sp, #16
 8004398:	4638      	mov	r0, r7
 800439a:	f3af 8000 	nop.w
 800439e:	1c42      	adds	r2, r0, #1
 80043a0:	4606      	mov	r6, r0
 80043a2:	d1d6      	bne.n	8004352 <_svfiprintf_r+0x176>
 80043a4:	89ab      	ldrh	r3, [r5, #12]
 80043a6:	065b      	lsls	r3, r3, #25
 80043a8:	f53f af2c 	bmi.w	8004204 <_svfiprintf_r+0x28>
 80043ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043ae:	b01d      	add	sp, #116	; 0x74
 80043b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b4:	ab03      	add	r3, sp, #12
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	462a      	mov	r2, r5
 80043ba:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <_svfiprintf_r+0x1f8>)
 80043bc:	a904      	add	r1, sp, #16
 80043be:	4638      	mov	r0, r7
 80043c0:	f000 f87a 	bl	80044b8 <_printf_i>
 80043c4:	e7eb      	b.n	800439e <_svfiprintf_r+0x1c2>
 80043c6:	bf00      	nop
 80043c8:	08004931 	.word	0x08004931
 80043cc:	0800493b 	.word	0x0800493b
 80043d0:	00000000 	.word	0x00000000
 80043d4:	08004125 	.word	0x08004125
 80043d8:	08004937 	.word	0x08004937

080043dc <_printf_common>:
 80043dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043e0:	4616      	mov	r6, r2
 80043e2:	4699      	mov	r9, r3
 80043e4:	688a      	ldr	r2, [r1, #8]
 80043e6:	690b      	ldr	r3, [r1, #16]
 80043e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043ec:	4293      	cmp	r3, r2
 80043ee:	bfb8      	it	lt
 80043f0:	4613      	movlt	r3, r2
 80043f2:	6033      	str	r3, [r6, #0]
 80043f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043f8:	4607      	mov	r7, r0
 80043fa:	460c      	mov	r4, r1
 80043fc:	b10a      	cbz	r2, 8004402 <_printf_common+0x26>
 80043fe:	3301      	adds	r3, #1
 8004400:	6033      	str	r3, [r6, #0]
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	0699      	lsls	r1, r3, #26
 8004406:	bf42      	ittt	mi
 8004408:	6833      	ldrmi	r3, [r6, #0]
 800440a:	3302      	addmi	r3, #2
 800440c:	6033      	strmi	r3, [r6, #0]
 800440e:	6825      	ldr	r5, [r4, #0]
 8004410:	f015 0506 	ands.w	r5, r5, #6
 8004414:	d106      	bne.n	8004424 <_printf_common+0x48>
 8004416:	f104 0a19 	add.w	sl, r4, #25
 800441a:	68e3      	ldr	r3, [r4, #12]
 800441c:	6832      	ldr	r2, [r6, #0]
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	42ab      	cmp	r3, r5
 8004422:	dc26      	bgt.n	8004472 <_printf_common+0x96>
 8004424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004428:	1e13      	subs	r3, r2, #0
 800442a:	6822      	ldr	r2, [r4, #0]
 800442c:	bf18      	it	ne
 800442e:	2301      	movne	r3, #1
 8004430:	0692      	lsls	r2, r2, #26
 8004432:	d42b      	bmi.n	800448c <_printf_common+0xb0>
 8004434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004438:	4649      	mov	r1, r9
 800443a:	4638      	mov	r0, r7
 800443c:	47c0      	blx	r8
 800443e:	3001      	adds	r0, #1
 8004440:	d01e      	beq.n	8004480 <_printf_common+0xa4>
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	68e5      	ldr	r5, [r4, #12]
 8004446:	6832      	ldr	r2, [r6, #0]
 8004448:	f003 0306 	and.w	r3, r3, #6
 800444c:	2b04      	cmp	r3, #4
 800444e:	bf08      	it	eq
 8004450:	1aad      	subeq	r5, r5, r2
 8004452:	68a3      	ldr	r3, [r4, #8]
 8004454:	6922      	ldr	r2, [r4, #16]
 8004456:	bf0c      	ite	eq
 8004458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800445c:	2500      	movne	r5, #0
 800445e:	4293      	cmp	r3, r2
 8004460:	bfc4      	itt	gt
 8004462:	1a9b      	subgt	r3, r3, r2
 8004464:	18ed      	addgt	r5, r5, r3
 8004466:	2600      	movs	r6, #0
 8004468:	341a      	adds	r4, #26
 800446a:	42b5      	cmp	r5, r6
 800446c:	d11a      	bne.n	80044a4 <_printf_common+0xc8>
 800446e:	2000      	movs	r0, #0
 8004470:	e008      	b.n	8004484 <_printf_common+0xa8>
 8004472:	2301      	movs	r3, #1
 8004474:	4652      	mov	r2, sl
 8004476:	4649      	mov	r1, r9
 8004478:	4638      	mov	r0, r7
 800447a:	47c0      	blx	r8
 800447c:	3001      	adds	r0, #1
 800447e:	d103      	bne.n	8004488 <_printf_common+0xac>
 8004480:	f04f 30ff 	mov.w	r0, #4294967295
 8004484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004488:	3501      	adds	r5, #1
 800448a:	e7c6      	b.n	800441a <_printf_common+0x3e>
 800448c:	18e1      	adds	r1, r4, r3
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	2030      	movs	r0, #48	; 0x30
 8004492:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004496:	4422      	add	r2, r4
 8004498:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800449c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044a0:	3302      	adds	r3, #2
 80044a2:	e7c7      	b.n	8004434 <_printf_common+0x58>
 80044a4:	2301      	movs	r3, #1
 80044a6:	4622      	mov	r2, r4
 80044a8:	4649      	mov	r1, r9
 80044aa:	4638      	mov	r0, r7
 80044ac:	47c0      	blx	r8
 80044ae:	3001      	adds	r0, #1
 80044b0:	d0e6      	beq.n	8004480 <_printf_common+0xa4>
 80044b2:	3601      	adds	r6, #1
 80044b4:	e7d9      	b.n	800446a <_printf_common+0x8e>
	...

080044b8 <_printf_i>:
 80044b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044bc:	7e0f      	ldrb	r7, [r1, #24]
 80044be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044c0:	2f78      	cmp	r7, #120	; 0x78
 80044c2:	4691      	mov	r9, r2
 80044c4:	4680      	mov	r8, r0
 80044c6:	460c      	mov	r4, r1
 80044c8:	469a      	mov	sl, r3
 80044ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044ce:	d807      	bhi.n	80044e0 <_printf_i+0x28>
 80044d0:	2f62      	cmp	r7, #98	; 0x62
 80044d2:	d80a      	bhi.n	80044ea <_printf_i+0x32>
 80044d4:	2f00      	cmp	r7, #0
 80044d6:	f000 80d8 	beq.w	800468a <_printf_i+0x1d2>
 80044da:	2f58      	cmp	r7, #88	; 0x58
 80044dc:	f000 80a3 	beq.w	8004626 <_printf_i+0x16e>
 80044e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044e8:	e03a      	b.n	8004560 <_printf_i+0xa8>
 80044ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044ee:	2b15      	cmp	r3, #21
 80044f0:	d8f6      	bhi.n	80044e0 <_printf_i+0x28>
 80044f2:	a101      	add	r1, pc, #4	; (adr r1, 80044f8 <_printf_i+0x40>)
 80044f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044f8:	08004551 	.word	0x08004551
 80044fc:	08004565 	.word	0x08004565
 8004500:	080044e1 	.word	0x080044e1
 8004504:	080044e1 	.word	0x080044e1
 8004508:	080044e1 	.word	0x080044e1
 800450c:	080044e1 	.word	0x080044e1
 8004510:	08004565 	.word	0x08004565
 8004514:	080044e1 	.word	0x080044e1
 8004518:	080044e1 	.word	0x080044e1
 800451c:	080044e1 	.word	0x080044e1
 8004520:	080044e1 	.word	0x080044e1
 8004524:	08004671 	.word	0x08004671
 8004528:	08004595 	.word	0x08004595
 800452c:	08004653 	.word	0x08004653
 8004530:	080044e1 	.word	0x080044e1
 8004534:	080044e1 	.word	0x080044e1
 8004538:	08004693 	.word	0x08004693
 800453c:	080044e1 	.word	0x080044e1
 8004540:	08004595 	.word	0x08004595
 8004544:	080044e1 	.word	0x080044e1
 8004548:	080044e1 	.word	0x080044e1
 800454c:	0800465b 	.word	0x0800465b
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	1d1a      	adds	r2, r3, #4
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	602a      	str	r2, [r5, #0]
 8004558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800455c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004560:	2301      	movs	r3, #1
 8004562:	e0a3      	b.n	80046ac <_printf_i+0x1f4>
 8004564:	6820      	ldr	r0, [r4, #0]
 8004566:	6829      	ldr	r1, [r5, #0]
 8004568:	0606      	lsls	r6, r0, #24
 800456a:	f101 0304 	add.w	r3, r1, #4
 800456e:	d50a      	bpl.n	8004586 <_printf_i+0xce>
 8004570:	680e      	ldr	r6, [r1, #0]
 8004572:	602b      	str	r3, [r5, #0]
 8004574:	2e00      	cmp	r6, #0
 8004576:	da03      	bge.n	8004580 <_printf_i+0xc8>
 8004578:	232d      	movs	r3, #45	; 0x2d
 800457a:	4276      	negs	r6, r6
 800457c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004580:	485e      	ldr	r0, [pc, #376]	; (80046fc <_printf_i+0x244>)
 8004582:	230a      	movs	r3, #10
 8004584:	e019      	b.n	80045ba <_printf_i+0x102>
 8004586:	680e      	ldr	r6, [r1, #0]
 8004588:	602b      	str	r3, [r5, #0]
 800458a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800458e:	bf18      	it	ne
 8004590:	b236      	sxthne	r6, r6
 8004592:	e7ef      	b.n	8004574 <_printf_i+0xbc>
 8004594:	682b      	ldr	r3, [r5, #0]
 8004596:	6820      	ldr	r0, [r4, #0]
 8004598:	1d19      	adds	r1, r3, #4
 800459a:	6029      	str	r1, [r5, #0]
 800459c:	0601      	lsls	r1, r0, #24
 800459e:	d501      	bpl.n	80045a4 <_printf_i+0xec>
 80045a0:	681e      	ldr	r6, [r3, #0]
 80045a2:	e002      	b.n	80045aa <_printf_i+0xf2>
 80045a4:	0646      	lsls	r6, r0, #25
 80045a6:	d5fb      	bpl.n	80045a0 <_printf_i+0xe8>
 80045a8:	881e      	ldrh	r6, [r3, #0]
 80045aa:	4854      	ldr	r0, [pc, #336]	; (80046fc <_printf_i+0x244>)
 80045ac:	2f6f      	cmp	r7, #111	; 0x6f
 80045ae:	bf0c      	ite	eq
 80045b0:	2308      	moveq	r3, #8
 80045b2:	230a      	movne	r3, #10
 80045b4:	2100      	movs	r1, #0
 80045b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045ba:	6865      	ldr	r5, [r4, #4]
 80045bc:	60a5      	str	r5, [r4, #8]
 80045be:	2d00      	cmp	r5, #0
 80045c0:	bfa2      	ittt	ge
 80045c2:	6821      	ldrge	r1, [r4, #0]
 80045c4:	f021 0104 	bicge.w	r1, r1, #4
 80045c8:	6021      	strge	r1, [r4, #0]
 80045ca:	b90e      	cbnz	r6, 80045d0 <_printf_i+0x118>
 80045cc:	2d00      	cmp	r5, #0
 80045ce:	d04d      	beq.n	800466c <_printf_i+0x1b4>
 80045d0:	4615      	mov	r5, r2
 80045d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80045d6:	fb03 6711 	mls	r7, r3, r1, r6
 80045da:	5dc7      	ldrb	r7, [r0, r7]
 80045dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045e0:	4637      	mov	r7, r6
 80045e2:	42bb      	cmp	r3, r7
 80045e4:	460e      	mov	r6, r1
 80045e6:	d9f4      	bls.n	80045d2 <_printf_i+0x11a>
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d10b      	bne.n	8004604 <_printf_i+0x14c>
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	07de      	lsls	r6, r3, #31
 80045f0:	d508      	bpl.n	8004604 <_printf_i+0x14c>
 80045f2:	6923      	ldr	r3, [r4, #16]
 80045f4:	6861      	ldr	r1, [r4, #4]
 80045f6:	4299      	cmp	r1, r3
 80045f8:	bfde      	ittt	le
 80045fa:	2330      	movle	r3, #48	; 0x30
 80045fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004600:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004604:	1b52      	subs	r2, r2, r5
 8004606:	6122      	str	r2, [r4, #16]
 8004608:	f8cd a000 	str.w	sl, [sp]
 800460c:	464b      	mov	r3, r9
 800460e:	aa03      	add	r2, sp, #12
 8004610:	4621      	mov	r1, r4
 8004612:	4640      	mov	r0, r8
 8004614:	f7ff fee2 	bl	80043dc <_printf_common>
 8004618:	3001      	adds	r0, #1
 800461a:	d14c      	bne.n	80046b6 <_printf_i+0x1fe>
 800461c:	f04f 30ff 	mov.w	r0, #4294967295
 8004620:	b004      	add	sp, #16
 8004622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004626:	4835      	ldr	r0, [pc, #212]	; (80046fc <_printf_i+0x244>)
 8004628:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800462c:	6829      	ldr	r1, [r5, #0]
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	f851 6b04 	ldr.w	r6, [r1], #4
 8004634:	6029      	str	r1, [r5, #0]
 8004636:	061d      	lsls	r5, r3, #24
 8004638:	d514      	bpl.n	8004664 <_printf_i+0x1ac>
 800463a:	07df      	lsls	r7, r3, #31
 800463c:	bf44      	itt	mi
 800463e:	f043 0320 	orrmi.w	r3, r3, #32
 8004642:	6023      	strmi	r3, [r4, #0]
 8004644:	b91e      	cbnz	r6, 800464e <_printf_i+0x196>
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	f023 0320 	bic.w	r3, r3, #32
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	2310      	movs	r3, #16
 8004650:	e7b0      	b.n	80045b4 <_printf_i+0xfc>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	f043 0320 	orr.w	r3, r3, #32
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	2378      	movs	r3, #120	; 0x78
 800465c:	4828      	ldr	r0, [pc, #160]	; (8004700 <_printf_i+0x248>)
 800465e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004662:	e7e3      	b.n	800462c <_printf_i+0x174>
 8004664:	0659      	lsls	r1, r3, #25
 8004666:	bf48      	it	mi
 8004668:	b2b6      	uxthmi	r6, r6
 800466a:	e7e6      	b.n	800463a <_printf_i+0x182>
 800466c:	4615      	mov	r5, r2
 800466e:	e7bb      	b.n	80045e8 <_printf_i+0x130>
 8004670:	682b      	ldr	r3, [r5, #0]
 8004672:	6826      	ldr	r6, [r4, #0]
 8004674:	6961      	ldr	r1, [r4, #20]
 8004676:	1d18      	adds	r0, r3, #4
 8004678:	6028      	str	r0, [r5, #0]
 800467a:	0635      	lsls	r5, r6, #24
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	d501      	bpl.n	8004684 <_printf_i+0x1cc>
 8004680:	6019      	str	r1, [r3, #0]
 8004682:	e002      	b.n	800468a <_printf_i+0x1d2>
 8004684:	0670      	lsls	r0, r6, #25
 8004686:	d5fb      	bpl.n	8004680 <_printf_i+0x1c8>
 8004688:	8019      	strh	r1, [r3, #0]
 800468a:	2300      	movs	r3, #0
 800468c:	6123      	str	r3, [r4, #16]
 800468e:	4615      	mov	r5, r2
 8004690:	e7ba      	b.n	8004608 <_printf_i+0x150>
 8004692:	682b      	ldr	r3, [r5, #0]
 8004694:	1d1a      	adds	r2, r3, #4
 8004696:	602a      	str	r2, [r5, #0]
 8004698:	681d      	ldr	r5, [r3, #0]
 800469a:	6862      	ldr	r2, [r4, #4]
 800469c:	2100      	movs	r1, #0
 800469e:	4628      	mov	r0, r5
 80046a0:	f7fb fd9e 	bl	80001e0 <memchr>
 80046a4:	b108      	cbz	r0, 80046aa <_printf_i+0x1f2>
 80046a6:	1b40      	subs	r0, r0, r5
 80046a8:	6060      	str	r0, [r4, #4]
 80046aa:	6863      	ldr	r3, [r4, #4]
 80046ac:	6123      	str	r3, [r4, #16]
 80046ae:	2300      	movs	r3, #0
 80046b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046b4:	e7a8      	b.n	8004608 <_printf_i+0x150>
 80046b6:	6923      	ldr	r3, [r4, #16]
 80046b8:	462a      	mov	r2, r5
 80046ba:	4649      	mov	r1, r9
 80046bc:	4640      	mov	r0, r8
 80046be:	47d0      	blx	sl
 80046c0:	3001      	adds	r0, #1
 80046c2:	d0ab      	beq.n	800461c <_printf_i+0x164>
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	079b      	lsls	r3, r3, #30
 80046c8:	d413      	bmi.n	80046f2 <_printf_i+0x23a>
 80046ca:	68e0      	ldr	r0, [r4, #12]
 80046cc:	9b03      	ldr	r3, [sp, #12]
 80046ce:	4298      	cmp	r0, r3
 80046d0:	bfb8      	it	lt
 80046d2:	4618      	movlt	r0, r3
 80046d4:	e7a4      	b.n	8004620 <_printf_i+0x168>
 80046d6:	2301      	movs	r3, #1
 80046d8:	4632      	mov	r2, r6
 80046da:	4649      	mov	r1, r9
 80046dc:	4640      	mov	r0, r8
 80046de:	47d0      	blx	sl
 80046e0:	3001      	adds	r0, #1
 80046e2:	d09b      	beq.n	800461c <_printf_i+0x164>
 80046e4:	3501      	adds	r5, #1
 80046e6:	68e3      	ldr	r3, [r4, #12]
 80046e8:	9903      	ldr	r1, [sp, #12]
 80046ea:	1a5b      	subs	r3, r3, r1
 80046ec:	42ab      	cmp	r3, r5
 80046ee:	dcf2      	bgt.n	80046d6 <_printf_i+0x21e>
 80046f0:	e7eb      	b.n	80046ca <_printf_i+0x212>
 80046f2:	2500      	movs	r5, #0
 80046f4:	f104 0619 	add.w	r6, r4, #25
 80046f8:	e7f5      	b.n	80046e6 <_printf_i+0x22e>
 80046fa:	bf00      	nop
 80046fc:	08004942 	.word	0x08004942
 8004700:	08004953 	.word	0x08004953

08004704 <__retarget_lock_acquire_recursive>:
 8004704:	4770      	bx	lr

08004706 <__retarget_lock_release_recursive>:
 8004706:	4770      	bx	lr

08004708 <memcpy>:
 8004708:	440a      	add	r2, r1
 800470a:	4291      	cmp	r1, r2
 800470c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004710:	d100      	bne.n	8004714 <memcpy+0xc>
 8004712:	4770      	bx	lr
 8004714:	b510      	push	{r4, lr}
 8004716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800471a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800471e:	4291      	cmp	r1, r2
 8004720:	d1f9      	bne.n	8004716 <memcpy+0xe>
 8004722:	bd10      	pop	{r4, pc}

08004724 <memmove>:
 8004724:	4288      	cmp	r0, r1
 8004726:	b510      	push	{r4, lr}
 8004728:	eb01 0402 	add.w	r4, r1, r2
 800472c:	d902      	bls.n	8004734 <memmove+0x10>
 800472e:	4284      	cmp	r4, r0
 8004730:	4623      	mov	r3, r4
 8004732:	d807      	bhi.n	8004744 <memmove+0x20>
 8004734:	1e43      	subs	r3, r0, #1
 8004736:	42a1      	cmp	r1, r4
 8004738:	d008      	beq.n	800474c <memmove+0x28>
 800473a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800473e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004742:	e7f8      	b.n	8004736 <memmove+0x12>
 8004744:	4402      	add	r2, r0
 8004746:	4601      	mov	r1, r0
 8004748:	428a      	cmp	r2, r1
 800474a:	d100      	bne.n	800474e <memmove+0x2a>
 800474c:	bd10      	pop	{r4, pc}
 800474e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004752:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004756:	e7f7      	b.n	8004748 <memmove+0x24>

08004758 <_realloc_r>:
 8004758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800475c:	4680      	mov	r8, r0
 800475e:	4614      	mov	r4, r2
 8004760:	460e      	mov	r6, r1
 8004762:	b921      	cbnz	r1, 800476e <_realloc_r+0x16>
 8004764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004768:	4611      	mov	r1, r2
 800476a:	f7ff bb73 	b.w	8003e54 <_malloc_r>
 800476e:	b92a      	cbnz	r2, 800477c <_realloc_r+0x24>
 8004770:	f7ff fb04 	bl	8003d7c <_free_r>
 8004774:	4625      	mov	r5, r4
 8004776:	4628      	mov	r0, r5
 8004778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800477c:	f000 f81b 	bl	80047b6 <_malloc_usable_size_r>
 8004780:	4284      	cmp	r4, r0
 8004782:	4607      	mov	r7, r0
 8004784:	d802      	bhi.n	800478c <_realloc_r+0x34>
 8004786:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800478a:	d812      	bhi.n	80047b2 <_realloc_r+0x5a>
 800478c:	4621      	mov	r1, r4
 800478e:	4640      	mov	r0, r8
 8004790:	f7ff fb60 	bl	8003e54 <_malloc_r>
 8004794:	4605      	mov	r5, r0
 8004796:	2800      	cmp	r0, #0
 8004798:	d0ed      	beq.n	8004776 <_realloc_r+0x1e>
 800479a:	42bc      	cmp	r4, r7
 800479c:	4622      	mov	r2, r4
 800479e:	4631      	mov	r1, r6
 80047a0:	bf28      	it	cs
 80047a2:	463a      	movcs	r2, r7
 80047a4:	f7ff ffb0 	bl	8004708 <memcpy>
 80047a8:	4631      	mov	r1, r6
 80047aa:	4640      	mov	r0, r8
 80047ac:	f7ff fae6 	bl	8003d7c <_free_r>
 80047b0:	e7e1      	b.n	8004776 <_realloc_r+0x1e>
 80047b2:	4635      	mov	r5, r6
 80047b4:	e7df      	b.n	8004776 <_realloc_r+0x1e>

080047b6 <_malloc_usable_size_r>:
 80047b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047ba:	1f18      	subs	r0, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	bfbc      	itt	lt
 80047c0:	580b      	ldrlt	r3, [r1, r0]
 80047c2:	18c0      	addlt	r0, r0, r3
 80047c4:	4770      	bx	lr
	...

080047c8 <_init>:
 80047c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ca:	bf00      	nop
 80047cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ce:	bc08      	pop	{r3}
 80047d0:	469e      	mov	lr, r3
 80047d2:	4770      	bx	lr

080047d4 <_fini>:
 80047d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d6:	bf00      	nop
 80047d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047da:	bc08      	pop	{r3}
 80047dc:	469e      	mov	lr, r3
 80047de:	4770      	bx	lr
