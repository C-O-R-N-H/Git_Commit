
Swap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004374  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004570  08004570  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08004570  08004570  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004570  08004570  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004570  08004570  00014570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004574  08004574  00014574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08004578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
 10 .bss          000000f0  200000b0  200000b0  000200b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a0  200001a0  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008eb5  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a74  00000000  00000000  00028f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000700  00000000  00000000  0002aa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000648  00000000  00000000  0002b110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001df6  00000000  00000000  0002b758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f51  00000000  00000000  0002d54e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b19e0  00000000  00000000  0003749f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e8e7f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001eac  00000000  00000000  000e8ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044ec 	.word	0x080044ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	080044ec 	.word	0x080044ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fb91 	bl	800099c <HAL_Init>

  /* USER CODE BEGIN Init */
  SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 800027a:	2200      	movs	r2, #0
 800027c:	4916      	ldr	r1, [pc, #88]	; (80002d8 <main+0x68>)
 800027e:	2004      	movs	r0, #4
 8000280:	f000 f9ca 	bl	8000618 <SerialInitialise>
  //enable_interrupts_RX();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000284:	f000 f836 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000288:	f000 f8ee 	bl	8000468 <MX_GPIO_Init>
  MX_ADC2_Init();
 800028c:	f000 f88e 	bl	80003ac <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc2);
 8000290:	4812      	ldr	r0, [pc, #72]	; (80002dc <main+0x6c>)
 8000292:	f000 fe01 	bl	8000e98 <HAL_ADC_Start_IT>
  uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <main+0x70>)
 8000298:	607b      	str	r3, [r7, #4]
  *led_register = 0b00000000;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //void disable_interrupts_RX();
	  if (check > 0)
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <main+0x74>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d003      	beq.n	80002b0 <main+0x40>
	  {
	  		  HAL_Delay(1000);
 80002a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ac:	f000 fbdc 	bl	8000a68 <HAL_Delay>
	  }

	  if (fail == 0)
 80002b0:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <main+0x78>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d102      	bne.n	80002be <main+0x4e>
	  {
		  HAL_ADC_Start_IT(&hadc2);
 80002b8:	4808      	ldr	r0, [pc, #32]	; (80002dc <main+0x6c>)
 80002ba:	f000 fded 	bl	8000e98 <HAL_ADC_Start_IT>
	  }
	  if (fail == 1){
 80002be:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <main+0x78>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d1ec      	bne.n	80002a0 <main+0x30>
		  sprintf(string,"AA5520!");
 80002c6:	4909      	ldr	r1, [pc, #36]	; (80002ec <main+0x7c>)
 80002c8:	4809      	ldr	r0, [pc, #36]	; (80002f0 <main+0x80>)
 80002ca:	f003 fca1 	bl	8003c10 <siprintf>
		  SerialOutputString(string, &USART1_PORT);
 80002ce:	4902      	ldr	r1, [pc, #8]	; (80002d8 <main+0x68>)
 80002d0:	4807      	ldr	r0, [pc, #28]	; (80002f0 <main+0x80>)
 80002d2:	f000 fa2e 	bl	8000732 <SerialOutputString>
	  if (check > 0)
 80002d6:	e7e3      	b.n	80002a0 <main+0x30>
 80002d8:	20000000 	.word	0x20000000
 80002dc:	200000cc 	.word	0x200000cc
 80002e0:	48001015 	.word	0x48001015
 80002e4:	20000120 	.word	0x20000120
 80002e8:	20000121 	.word	0x20000121
 80002ec:	08004504 	.word	0x08004504
 80002f0:	20000124 	.word	0x20000124

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b09e      	sub	sp, #120	; 0x78
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002fe:	2228      	movs	r2, #40	; 0x28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f003 fc7c 	bl	8003c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000318:	463b      	mov	r3, r7
 800031a:	223c      	movs	r2, #60	; 0x3c
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f003 fc6e 	bl	8003c00 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000324:	2301      	movs	r3, #1
 8000326:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000332:	2301      	movs	r3, #1
 8000334:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000336:	2302      	movs	r3, #2
 8000338:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800033a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000340:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000344:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000346:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800034a:	4618      	mov	r0, r3
 800034c:	f002 f85a 	bl	8002404 <HAL_RCC_OscConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000356:	f000 f959 	bl	800060c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035a:	230f      	movs	r3, #15
 800035c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035e:	2302      	movs	r3, #2
 8000360:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800036a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000370:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000374:	2101      	movs	r1, #1
 8000376:	4618      	mov	r0, r3
 8000378:	f003 f882 	bl	8003480 <HAL_RCC_ClockConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000382:	f000 f943 	bl	800060c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000386:	2380      	movs	r3, #128	; 0x80
 8000388:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800038a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800038e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000390:	463b      	mov	r3, r7
 8000392:	4618      	mov	r0, r3
 8000394:	f003 fa5a 	bl	800384c <HAL_RCCEx_PeriphCLKConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800039e:	f000 f935 	bl	800060c <Error_Handler>
  }
}
 80003a2:	bf00      	nop
 80003a4:	3778      	adds	r7, #120	; 0x78
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003b2:	463b      	mov	r3, r7
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
 80003c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80003c2:	4b27      	ldr	r3, [pc, #156]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003c4:	4a27      	ldr	r2, [pc, #156]	; (8000464 <MX_ADC2_Init+0xb8>)
 80003c6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003c8:	4b25      	ldr	r3, [pc, #148]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003ce:	4b24      	ldr	r3, [pc, #144]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003d4:	4b22      	ldr	r3, [pc, #136]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003da:	4b21      	ldr	r3, [pc, #132]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003e0:	4b1f      	ldr	r3, [pc, #124]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e8:	4b1d      	ldr	r3, [pc, #116]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ee:	4b1c      	ldr	r3, [pc, #112]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003f4:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80003fa:	4b19      	ldr	r3, [pc, #100]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000400:	4b17      	ldr	r3, [pc, #92]	; (8000460 <MX_ADC2_Init+0xb4>)
 8000402:	2200      	movs	r2, #0
 8000404:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000408:	4b15      	ldr	r3, [pc, #84]	; (8000460 <MX_ADC2_Init+0xb4>)
 800040a:	2204      	movs	r2, #4
 800040c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800040e:	4b14      	ldr	r3, [pc, #80]	; (8000460 <MX_ADC2_Init+0xb4>)
 8000410:	2200      	movs	r2, #0
 8000412:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <MX_ADC2_Init+0xb4>)
 8000416:	2200      	movs	r2, #0
 8000418:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800041a:	4811      	ldr	r0, [pc, #68]	; (8000460 <MX_ADC2_Init+0xb4>)
 800041c:	f000 fb5c 	bl	8000ad8 <HAL_ADC_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000426:	f000 f8f1 	bl	800060c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800042a:	2301      	movs	r3, #1
 800042c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800042e:	2301      	movs	r3, #1
 8000430:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000432:	2300      	movs	r3, #0
 8000434:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000436:	2300      	movs	r3, #0
 8000438:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800043a:	2300      	movs	r3, #0
 800043c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000442:	463b      	mov	r3, r7
 8000444:	4619      	mov	r1, r3
 8000446:	4806      	ldr	r0, [pc, #24]	; (8000460 <MX_ADC2_Init+0xb4>)
 8000448:	f001 f982 	bl	8001750 <HAL_ADC_ConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000452:	f000 f8db 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000456:	bf00      	nop
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	200000cc 	.word	0x200000cc
 8000464:	50000100 	.word	0x50000100

08000468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08a      	sub	sp, #40	; 0x28
 800046c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
 800047c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047e:	4b39      	ldr	r3, [pc, #228]	; (8000564 <MX_GPIO_Init+0xfc>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a38      	ldr	r2, [pc, #224]	; (8000564 <MX_GPIO_Init+0xfc>)
 8000484:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b36      	ldr	r3, [pc, #216]	; (8000564 <MX_GPIO_Init+0xfc>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000492:	613b      	str	r3, [r7, #16]
 8000494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000496:	4b33      	ldr	r3, [pc, #204]	; (8000564 <MX_GPIO_Init+0xfc>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a32      	ldr	r2, [pc, #200]	; (8000564 <MX_GPIO_Init+0xfc>)
 800049c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004a0:	6153      	str	r3, [r2, #20]
 80004a2:	4b30      	ldr	r3, [pc, #192]	; (8000564 <MX_GPIO_Init+0xfc>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ae:	4b2d      	ldr	r3, [pc, #180]	; (8000564 <MX_GPIO_Init+0xfc>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a2c      	ldr	r2, [pc, #176]	; (8000564 <MX_GPIO_Init+0xfc>)
 80004b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b8:	6153      	str	r3, [r2, #20]
 80004ba:	4b2a      	ldr	r3, [pc, #168]	; (8000564 <MX_GPIO_Init+0xfc>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004c6:	4b27      	ldr	r3, [pc, #156]	; (8000564 <MX_GPIO_Init+0xfc>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a26      	ldr	r2, [pc, #152]	; (8000564 <MX_GPIO_Init+0xfc>)
 80004cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b24      	ldr	r3, [pc, #144]	; (8000564 <MX_GPIO_Init+0xfc>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004de:	4b21      	ldr	r3, [pc, #132]	; (8000564 <MX_GPIO_Init+0xfc>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a20      	ldr	r2, [pc, #128]	; (8000564 <MX_GPIO_Init+0xfc>)
 80004e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <MX_GPIO_Init+0xfc>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 80004f6:	2200      	movs	r2, #0
 80004f8:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80004fc:	481a      	ldr	r0, [pc, #104]	; (8000568 <MX_GPIO_Init+0x100>)
 80004fe:	f001 ff69 	bl	80023d4 <HAL_GPIO_WritePin>
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
                           LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8000502:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000506:	617b      	str	r3, [r7, #20]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000508:	2301      	movs	r3, #1
 800050a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000510:	2300      	movs	r3, #0
 8000512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	4619      	mov	r1, r3
 800051a:	4813      	ldr	r0, [pc, #76]	; (8000568 <MX_GPIO_Init+0x100>)
 800051c:	f001 fde0 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000520:	23c0      	movs	r3, #192	; 0xc0
 8000522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000524:	2312      	movs	r3, #18
 8000526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000528:	2301      	movs	r3, #1
 800052a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052c:	2303      	movs	r3, #3
 800052e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000530:	2304      	movs	r3, #4
 8000532:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	4619      	mov	r1, r3
 800053a:	480c      	ldr	r0, [pc, #48]	; (800056c <MX_GPIO_Init+0x104>)
 800053c:	f001 fdd0 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 8000540:	2303      	movs	r3, #3
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000544:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	4619      	mov	r1, r3
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <MX_GPIO_Init+0x100>)
 8000556:	f001 fdc3 	bl	80020e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800055a:	bf00      	nop
 800055c:	3728      	adds	r7, #40	; 0x28
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000
 8000568:	48001000 	.word	0x48001000
 800056c:	48000400 	.word	0x48000400

08000570 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* h)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

	if (h == &hadc2)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a1c      	ldr	r2, [pc, #112]	; (80005ec <HAL_ADC_ConvCpltCallback+0x7c>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d130      	bne.n	80005e2 <HAL_ADC_ConvCpltCallback+0x72>
	{
		uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <HAL_ADC_ConvCpltCallback+0x80>)
 8000582:	60fb      	str	r3, [r7, #12]
		weight = HAL_ADC_GetValue(&hadc2);
 8000584:	4819      	ldr	r0, [pc, #100]	; (80005ec <HAL_ADC_ConvCpltCallback+0x7c>)
 8000586:	f000 fdc7 	bl	8001118 <HAL_ADC_GetValue>
 800058a:	4603      	mov	r3, r0
 800058c:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <HAL_ADC_ConvCpltCallback+0x84>)
 800058e:	6013      	str	r3, [r2, #0]
		if (weight > 3000)
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <HAL_ADC_ConvCpltCallback+0x84>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000598:	4293      	cmp	r3, r2
 800059a:	d906      	bls.n	80005aa <HAL_ADC_ConvCpltCallback+0x3a>
		{
			*led_register = 0b00000000;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
			check = 0;
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <HAL_ADC_ConvCpltCallback+0x88>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 80005a8:	e01b      	b.n	80005e2 <HAL_ADC_ConvCpltCallback+0x72>
			if (check > 0)
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <HAL_ADC_ConvCpltCallback+0x88>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d00e      	beq.n	80005d0 <HAL_ADC_ConvCpltCallback+0x60>
				*led_register = 0b11111111;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	22ff      	movs	r2, #255	; 0xff
 80005b6:	701a      	strb	r2, [r3, #0]
				fail = 1;
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <HAL_ADC_ConvCpltCallback+0x8c>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
				sprintf(string,"AA5520!");
 80005be:	4910      	ldr	r1, [pc, #64]	; (8000600 <HAL_ADC_ConvCpltCallback+0x90>)
 80005c0:	4810      	ldr	r0, [pc, #64]	; (8000604 <HAL_ADC_ConvCpltCallback+0x94>)
 80005c2:	f003 fb25 	bl	8003c10 <siprintf>
			    SerialOutputString(string, &USART1_PORT);
 80005c6:	4910      	ldr	r1, [pc, #64]	; (8000608 <HAL_ADC_ConvCpltCallback+0x98>)
 80005c8:	480e      	ldr	r0, [pc, #56]	; (8000604 <HAL_ADC_ConvCpltCallback+0x94>)
 80005ca:	f000 f8b2 	bl	8000732 <SerialOutputString>
}
 80005ce:	e008      	b.n	80005e2 <HAL_ADC_ConvCpltCallback+0x72>
				check++;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_ADC_ConvCpltCallback+0x88>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <HAL_ADC_ConvCpltCallback+0x88>)
 80005da:	701a      	strb	r2, [r3, #0]
				*led_register = 0b00000001;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200000cc 	.word	0x200000cc
 80005f0:	48001015 	.word	0x48001015
 80005f4:	2000011c 	.word	0x2000011c
 80005f8:	20000120 	.word	0x20000120
 80005fc:	20000121 	.word	0x20000121
 8000600:	08004504 	.word	0x08004504
 8000604:	20000124 	.word	0x20000124
 8000608:	20000000 	.word	0x20000000

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
}
 8000612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000614:	e7fe      	b.n	8000614 <Error_Handler+0x8>
	...

08000618 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000618:	b480      	push	{r7}
 800061a:	b087      	sub	sp, #28
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	63da      	str	r2, [r3, #60]	; 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800062a:	4b34      	ldr	r3, [pc, #208]	; (80006fc <SerialInitialise+0xe4>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a33      	ldr	r2, [pc, #204]	; (80006fc <SerialInitialise+0xe4>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000634:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000636:	4b31      	ldr	r3, [pc, #196]	; (80006fc <SerialInitialise+0xe4>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4a30      	ldr	r2, [pc, #192]	; (80006fc <SerialInitialise+0xe4>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	6a1b      	ldr	r3, [r3, #32]
 8000646:	2b02      	cmp	r3, #2
 8000648:	d106      	bne.n	8000658 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 800064a:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <SerialInitialise+0xe4>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4a2b      	ldr	r2, [pc, #172]	; (80006fc <SerialInitialise+0xe4>)
 8000650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000654:	6153      	str	r3, [r2, #20]
		break;
 8000656:	e000      	b.n	800065a <SerialInitialise+0x42>
	default:
		break;
 8000658:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000662:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000668:	68ba      	ldr	r2, [r7, #8]
 800066a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800066c:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	69d9      	ldr	r1, [r3, #28]
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	430a      	orrs	r2, r1
 800068c:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	2b04      	cmp	r3, #4
 8000698:	d821      	bhi.n	80006de <SerialInitialise+0xc6>
 800069a:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <SerialInitialise+0x88>)
 800069c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a0:	080006b5 	.word	0x080006b5
 80006a4:	080006bd 	.word	0x080006bd
 80006a8:	080006c5 	.word	0x080006c5
 80006ac:	080006cd 	.word	0x080006cd
 80006b0:	080006d5 	.word	0x080006d5
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	2246      	movs	r2, #70	; 0x46
 80006b8:	801a      	strh	r2, [r3, #0]
		break;
 80006ba:	e010      	b.n	80006de <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	2246      	movs	r2, #70	; 0x46
 80006c0:	801a      	strh	r2, [r3, #0]
		break;
 80006c2:	e00c      	b.n	80006de <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	2246      	movs	r2, #70	; 0x46
 80006c8:	801a      	strh	r2, [r3, #0]
		break;
 80006ca:	e008      	b.n	80006de <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	2246      	movs	r2, #70	; 0x46
 80006d0:	801a      	strh	r2, [r3, #0]
		break;
 80006d2:	e004      	b.n	80006de <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80006da:	801a      	strh	r2, [r3, #0]
		break;
 80006dc:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	f042 020d 	orr.w	r2, r2, #13
 80006ec:	601a      	str	r2, [r3, #0]
}
 80006ee:	bf00      	nop
 80006f0:	371c      	adds	r7, #28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000

08000700 <SerialOutputChar>:

void disable_interrupts_RX(){
	NVIC_DisableIRQ(USART1_IRQn);
}

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 800070c:	bf00      	nop
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0f8      	beq.n	800070e <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	691b      	ldr	r3, [r3, #16]
 8000720:	79fa      	ldrb	r2, [r7, #7]
 8000722:	b292      	uxth	r2, r2
 8000724:	801a      	strh	r2, [r3, #0]
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000732:	b580      	push	{r7, lr}
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
 800073a:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8000740:	e00b      	b.n	800075a <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	6839      	ldr	r1, [r7, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ffd9 	bl	8000700 <SerialOutputChar>
		counter++;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	3301      	adds	r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
		pt++;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3301      	adds	r3, #1
 8000758:	607b      	str	r3, [r7, #4]
	while(*pt) {
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1ef      	bne.n	8000742 <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000766:	2b00      	cmp	r3, #0
 8000768:	d003      	beq.n	8000772 <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	4798      	blx	r3
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_MspInit+0x44>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <HAL_MspInit+0x44>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6193      	str	r3, [r2, #24]
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_MspInit+0x44>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_MspInit+0x44>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <HAL_MspInit+0x44>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a4:	61d3      	str	r3, [r2, #28]
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_MspInit+0x44>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007b2:	2007      	movs	r0, #7
 80007b4:	f001 fc52 	bl	800205c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a19      	ldr	r2, [pc, #100]	; (8000848 <HAL_ADC_MspInit+0x84>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d12c      	bne.n	8000840 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <HAL_ADC_MspInit+0x88>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a18      	ldr	r2, [pc, #96]	; (800084c <HAL_ADC_MspInit+0x88>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <HAL_ADC_MspInit+0x88>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <HAL_ADC_MspInit+0x88>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a12      	ldr	r2, [pc, #72]	; (800084c <HAL_ADC_MspInit+0x88>)
 8000804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000808:	6153      	str	r3, [r2, #20]
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <HAL_ADC_MspInit+0x88>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000816:	2310      	movs	r3, #16
 8000818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800081a:	2303      	movs	r3, #3
 800081c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082c:	f001 fc58 	bl	80020e0 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	2012      	movs	r0, #18
 8000836:	f001 fc1c 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800083a:	2012      	movs	r0, #18
 800083c:	f001 fc35 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	50000100 	.word	0x50000100
 800084c:	40021000 	.word	0x40021000

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <NMI_Handler+0x4>

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 f8c4 	bl	8000a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <ADC1_2_IRQHandler+0x10>)
 80008aa:	f000 fc43 	bl	8001134 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000cc 	.word	0x200000cc

080008b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c0:	4a14      	ldr	r2, [pc, #80]	; (8000914 <_sbrk+0x5c>)
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <_sbrk+0x60>)
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d102      	bne.n	80008da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <_sbrk+0x64>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <_sbrk+0x68>)
 80008d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d207      	bcs.n	80008f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e8:	f003 f960 	bl	8003bac <__errno>
 80008ec:	4603      	mov	r3, r0
 80008ee:	220c      	movs	r2, #12
 80008f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008f6:	e009      	b.n	800090c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <_sbrk+0x64>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <_sbrk+0x64>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	4a05      	ldr	r2, [pc, #20]	; (800091c <_sbrk+0x64>)
 8000908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800090a:	68fb      	ldr	r3, [r7, #12]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	2000a000 	.word	0x2000a000
 8000918:	00000400 	.word	0x00000400
 800091c:	20000188 	.word	0x20000188
 8000920:	200001a0 	.word	0x200001a0

08000924 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <SystemInit+0x20>)
 800092a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <SystemInit+0x20>)
 8000930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000980 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800094c:	f7ff ffea 	bl	8000924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <LoopForever+0x6>)
  ldr r1, =_edata
 8000952:	490d      	ldr	r1, [pc, #52]	; (8000988 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <LoopForever+0xe>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000968:	4c0a      	ldr	r4, [pc, #40]	; (8000994 <LoopForever+0x16>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000976:	f003 f91f 	bl	8003bb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800097a:	f7ff fc79 	bl	8000270 <main>

0800097e <LoopForever>:

LoopForever:
    b LoopForever
 800097e:	e7fe      	b.n	800097e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000980:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000988:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 800098c:	08004578 	.word	0x08004578
  ldr r2, =_sbss
 8000990:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000994:	200001a0 	.word	0x200001a0

08000998 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC3_IRQHandler>
	...

0800099c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <HAL_Init+0x28>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <HAL_Init+0x28>)
 80009a6:	f043 0310 	orr.w	r3, r3, #16
 80009aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f001 fb55 	bl	800205c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f000 f808 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b8:	f7ff fee0 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40022000 	.word	0x40022000

080009c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_InitTick+0x54>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_InitTick+0x58>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009de:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f001 fb6d 	bl	80020c6 <HAL_SYSTICK_Config>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00e      	b.n	8000a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d80a      	bhi.n	8000a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a04:	f001 fb35 	bl	8002072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a08:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <HAL_InitTick+0x5c>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e000      	b.n	8000a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000040 	.word	0x20000040
 8000a20:	20000048 	.word	0x20000048
 8000a24:	20000044 	.word	0x20000044

08000a28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_IncTick+0x20>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x24>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <HAL_IncTick+0x24>)
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000048 	.word	0x20000048
 8000a4c:	2000018c 	.word	0x2000018c

08000a50 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <HAL_GetTick+0x14>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	2000018c 	.word	0x2000018c

08000a68 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a70:	f7ff ffee 	bl	8000a50 <HAL_GetTick>
 8000a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a80:	d005      	beq.n	8000a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_Delay+0x44>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a8e:	bf00      	nop
 8000a90:	f7ff ffde 	bl	8000a50 <HAL_GetTick>
 8000a94:	4602      	mov	r2, r0
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d8f7      	bhi.n	8000a90 <HAL_Delay+0x28>
  {
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000048 	.word	0x20000048

08000ab0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b09a      	sub	sp, #104	; 0x68
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d101      	bne.n	8000af8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e1c9      	b.n	8000e8c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	691b      	ldr	r3, [r3, #16]
 8000afc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f003 0310 	and.w	r3, r3, #16
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d176      	bne.n	8000bf8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d152      	bne.n	8000bb8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff fe49 	bl	80007c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13b      	bne.n	8000bb8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f001 f955 	bl	8001df0 <ADC_Disable>
 8000b46:	4603      	mov	r3, r0
 8000b48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	f003 0310 	and.w	r3, r3, #16
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d12f      	bne.n	8000bb8 <HAL_ADC_Init+0xe0>
 8000b58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d12b      	bne.n	8000bb8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b68:	f023 0302 	bic.w	r3, r3, #2
 8000b6c:	f043 0202 	orr.w	r2, r3, #2
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000b82:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b92:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b94:	4b86      	ldr	r3, [pc, #536]	; (8000db0 <HAL_ADC_Init+0x2d8>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a86      	ldr	r2, [pc, #536]	; (8000db4 <HAL_ADC_Init+0x2dc>)
 8000b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9e:	0c9a      	lsrs	r2, r3, #18
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000baa:	e002      	b.n	8000bb2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1f9      	bne.n	8000bac <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d007      	beq.n	8000bd6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000bd4:	d110      	bne.n	8000bf8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f023 0312 	bic.w	r3, r3, #18
 8000bde:	f043 0210 	orr.w	r2, r3, #16
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f043 0201 	orr.w	r2, r3, #1
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	f003 0310 	and.w	r3, r3, #16
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f040 8136 	bne.w	8000e72 <HAL_ADC_Init+0x39a>
 8000c06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f040 8131 	bne.w	8000e72 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f040 8129 	bne.w	8000e72 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000c28:	f043 0202 	orr.w	r2, r3, #2
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c38:	d004      	beq.n	8000c44 <HAL_ADC_Init+0x16c>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a5e      	ldr	r2, [pc, #376]	; (8000db8 <HAL_ADC_Init+0x2e0>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d101      	bne.n	8000c48 <HAL_ADC_Init+0x170>
 8000c44:	4b5d      	ldr	r3, [pc, #372]	; (8000dbc <HAL_ADC_Init+0x2e4>)
 8000c46:	e000      	b.n	8000c4a <HAL_ADC_Init+0x172>
 8000c48:	4b5d      	ldr	r3, [pc, #372]	; (8000dc0 <HAL_ADC_Init+0x2e8>)
 8000c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c54:	d102      	bne.n	8000c5c <HAL_ADC_Init+0x184>
 8000c56:	4b58      	ldr	r3, [pc, #352]	; (8000db8 <HAL_ADC_Init+0x2e0>)
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	e01a      	b.n	8000c92 <HAL_ADC_Init+0x1ba>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a55      	ldr	r2, [pc, #340]	; (8000db8 <HAL_ADC_Init+0x2e0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d103      	bne.n	8000c6e <HAL_ADC_Init+0x196>
 8000c66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	e011      	b.n	8000c92 <HAL_ADC_Init+0x1ba>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a54      	ldr	r2, [pc, #336]	; (8000dc4 <HAL_ADC_Init+0x2ec>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d102      	bne.n	8000c7e <HAL_ADC_Init+0x1a6>
 8000c78:	4b53      	ldr	r3, [pc, #332]	; (8000dc8 <HAL_ADC_Init+0x2f0>)
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	e009      	b.n	8000c92 <HAL_ADC_Init+0x1ba>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a51      	ldr	r2, [pc, #324]	; (8000dc8 <HAL_ADC_Init+0x2f0>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d102      	bne.n	8000c8e <HAL_ADC_Init+0x1b6>
 8000c88:	4b4e      	ldr	r3, [pc, #312]	; (8000dc4 <HAL_ADC_Init+0x2ec>)
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	e001      	b.n	8000c92 <HAL_ADC_Init+0x1ba>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d108      	bne.n	8000cb2 <HAL_ADC_Init+0x1da>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d101      	bne.n	8000cb2 <HAL_ADC_Init+0x1da>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <HAL_ADC_Init+0x1dc>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d11c      	bne.n	8000cf2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d010      	beq.n	8000ce0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d107      	bne.n	8000cda <HAL_ADC_Init+0x202>
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d101      	bne.n	8000cda <HAL_ADC_Init+0x202>
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e000      	b.n	8000cdc <HAL_ADC_Init+0x204>
 8000cda:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d108      	bne.n	8000cf2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	431a      	orrs	r2, r3
 8000cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cf0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7e5b      	ldrb	r3, [r3, #25]
 8000cf6:	035b      	lsls	r3, r3, #13
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000cfc:	2a01      	cmp	r2, #1
 8000cfe:	d002      	beq.n	8000d06 <HAL_ADC_Init+0x22e>
 8000d00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d04:	e000      	b.n	8000d08 <HAL_ADC_Init+0x230>
 8000d06:	2200      	movs	r2, #0
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d11b      	bne.n	8000d5e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	7e5b      	ldrb	r3, [r3, #25]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d109      	bne.n	8000d42 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d32:	3b01      	subs	r3, #1
 8000d34:	045a      	lsls	r2, r3, #17
 8000d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d3e:	663b      	str	r3, [r7, #96]	; 0x60
 8000d40:	e00d      	b.n	8000d5e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000d4a:	f043 0220 	orr.w	r2, r3, #32
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f043 0201 	orr.w	r2, r3, #1
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d03a      	beq.n	8000ddc <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a16      	ldr	r2, [pc, #88]	; (8000dc4 <HAL_ADC_Init+0x2ec>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d004      	beq.n	8000d7a <HAL_ADC_Init+0x2a2>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <HAL_ADC_Init+0x2f0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d128      	bne.n	8000dcc <HAL_ADC_Init+0x2f4>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000d82:	d012      	beq.n	8000daa <HAL_ADC_Init+0x2d2>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d8c:	d00a      	beq.n	8000da4 <HAL_ADC_Init+0x2cc>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d92:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000d96:	d002      	beq.n	8000d9e <HAL_ADC_Init+0x2c6>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9c:	e018      	b.n	8000dd0 <HAL_ADC_Init+0x2f8>
 8000d9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da2:	e015      	b.n	8000dd0 <HAL_ADC_Init+0x2f8>
 8000da4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000da8:	e012      	b.n	8000dd0 <HAL_ADC_Init+0x2f8>
 8000daa:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000dae:	e00f      	b.n	8000dd0 <HAL_ADC_Init+0x2f8>
 8000db0:	20000040 	.word	0x20000040
 8000db4:	431bde83 	.word	0x431bde83
 8000db8:	50000100 	.word	0x50000100
 8000dbc:	50000300 	.word	0x50000300
 8000dc0:	50000700 	.word	0x50000700
 8000dc4:	50000400 	.word	0x50000400
 8000dc8:	50000500 	.word	0x50000500
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f003 030c 	and.w	r3, r3, #12
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d114      	bne.n	8000e14 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	6812      	ldr	r2, [r2, #0]
 8000df4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000df8:	f023 0302 	bic.w	r3, r3, #2
 8000dfc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	7e1b      	ldrb	r3, [r3, #24]
 8000e02:	039a      	lsls	r2, r3, #14
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e10:	4313      	orrs	r3, r2
 8000e12:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <HAL_ADC_Init+0x3bc>)
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6812      	ldr	r2, [r2, #0]
 8000e22:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000e24:	430b      	orrs	r3, r1
 8000e26:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d10c      	bne.n	8000e4a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f023 010f 	bic.w	r1, r3, #15
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	1e5a      	subs	r2, r3, #1
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	631a      	str	r2, [r3, #48]	; 0x30
 8000e48:	e007      	b.n	8000e5a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 020f 	bic.w	r2, r2, #15
 8000e58:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f023 0303 	bic.w	r3, r3, #3
 8000e68:	f043 0201 	orr.w	r2, r3, #1
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e70:	e00a      	b.n	8000e88 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f023 0312 	bic.w	r3, r3, #18
 8000e7a:	f043 0210 	orr.w	r2, r3, #16
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e82:	2301      	movs	r3, #1
 8000e84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3768      	adds	r7, #104	; 0x68
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	fff0c007 	.word	0xfff0c007

08000e98 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 8123 	bne.w	80010fa <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d101      	bne.n	8000ec2 <HAL_ADC_Start_IT+0x2a>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e11e      	b.n	8001100 <HAL_ADC_Start_IT+0x268>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 ff2c 	bl	8001d28 <ADC_Enable>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f040 810a 	bne.w	80010f0 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ef8:	d004      	beq.n	8000f04 <HAL_ADC_Start_IT+0x6c>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a82      	ldr	r2, [pc, #520]	; (8001108 <HAL_ADC_Start_IT+0x270>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d106      	bne.n	8000f12 <HAL_ADC_Start_IT+0x7a>
 8000f04:	4b81      	ldr	r3, [pc, #516]	; (800110c <HAL_ADC_Start_IT+0x274>)
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f003 031f 	and.w	r3, r3, #31
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d010      	beq.n	8000f32 <HAL_ADC_Start_IT+0x9a>
 8000f10:	e005      	b.n	8000f1e <HAL_ADC_Start_IT+0x86>
 8000f12:	4b7f      	ldr	r3, [pc, #508]	; (8001110 <HAL_ADC_Start_IT+0x278>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 031f 	and.w	r3, r3, #31
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d009      	beq.n	8000f32 <HAL_ADC_Start_IT+0x9a>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f26:	d004      	beq.n	8000f32 <HAL_ADC_Start_IT+0x9a>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a79      	ldr	r2, [pc, #484]	; (8001114 <HAL_ADC_Start_IT+0x27c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d115      	bne.n	8000f5e <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d036      	beq.n	8000fba <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f5c:	e02d      	b.n	8000fba <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f72:	d004      	beq.n	8000f7e <HAL_ADC_Start_IT+0xe6>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a63      	ldr	r2, [pc, #396]	; (8001108 <HAL_ADC_Start_IT+0x270>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d10a      	bne.n	8000f94 <HAL_ADC_Start_IT+0xfc>
 8000f7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	bf14      	ite	ne
 8000f8c:	2301      	movne	r3, #1
 8000f8e:	2300      	moveq	r3, #0
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	e008      	b.n	8000fa6 <HAL_ADC_Start_IT+0x10e>
 8000f94:	4b5f      	ldr	r3, [pc, #380]	; (8001114 <HAL_ADC_Start_IT+0x27c>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	bf14      	ite	ne
 8000fa0:	2301      	movne	r3, #1
 8000fa2:	2300      	moveq	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d007      	beq.n	8000fba <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fc6:	d106      	bne.n	8000fd6 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fcc:	f023 0206 	bic.w	r2, r3, #6
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	645a      	str	r2, [r3, #68]	; 0x44
 8000fd4:	e002      	b.n	8000fdc <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	221c      	movs	r2, #28
 8000fea:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	2b08      	cmp	r3, #8
 8000ff2:	d110      	bne.n	8001016 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0204 	bic.w	r2, r2, #4
 8001002:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0208 	orr.w	r2, r2, #8
 8001012:	605a      	str	r2, [r3, #4]
          break;
 8001014:	e008      	b.n	8001028 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f042 020c 	orr.w	r2, r2, #12
 8001024:	605a      	str	r2, [r3, #4]
          break;
 8001026:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102c:	2b01      	cmp	r3, #1
 800102e:	d107      	bne.n	8001040 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0210 	bic.w	r2, r2, #16
 800103e:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001048:	d004      	beq.n	8001054 <HAL_ADC_Start_IT+0x1bc>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a2e      	ldr	r2, [pc, #184]	; (8001108 <HAL_ADC_Start_IT+0x270>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d106      	bne.n	8001062 <HAL_ADC_Start_IT+0x1ca>
 8001054:	4b2d      	ldr	r3, [pc, #180]	; (800110c <HAL_ADC_Start_IT+0x274>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 031f 	and.w	r3, r3, #31
 800105c:	2b00      	cmp	r3, #0
 800105e:	d03e      	beq.n	80010de <HAL_ADC_Start_IT+0x246>
 8001060:	e005      	b.n	800106e <HAL_ADC_Start_IT+0x1d6>
 8001062:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <HAL_ADC_Start_IT+0x278>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 031f 	and.w	r3, r3, #31
 800106a:	2b00      	cmp	r3, #0
 800106c:	d037      	beq.n	80010de <HAL_ADC_Start_IT+0x246>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001076:	d004      	beq.n	8001082 <HAL_ADC_Start_IT+0x1ea>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a22      	ldr	r2, [pc, #136]	; (8001108 <HAL_ADC_Start_IT+0x270>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d106      	bne.n	8001090 <HAL_ADC_Start_IT+0x1f8>
 8001082:	4b22      	ldr	r3, [pc, #136]	; (800110c <HAL_ADC_Start_IT+0x274>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 031f 	and.w	r3, r3, #31
 800108a:	2b05      	cmp	r3, #5
 800108c:	d027      	beq.n	80010de <HAL_ADC_Start_IT+0x246>
 800108e:	e005      	b.n	800109c <HAL_ADC_Start_IT+0x204>
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <HAL_ADC_Start_IT+0x278>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f003 031f 	and.w	r3, r3, #31
 8001098:	2b05      	cmp	r3, #5
 800109a:	d020      	beq.n	80010de <HAL_ADC_Start_IT+0x246>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010a4:	d004      	beq.n	80010b0 <HAL_ADC_Start_IT+0x218>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a17      	ldr	r2, [pc, #92]	; (8001108 <HAL_ADC_Start_IT+0x270>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d106      	bne.n	80010be <HAL_ADC_Start_IT+0x226>
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <HAL_ADC_Start_IT+0x274>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 031f 	and.w	r3, r3, #31
 80010b8:	2b09      	cmp	r3, #9
 80010ba:	d010      	beq.n	80010de <HAL_ADC_Start_IT+0x246>
 80010bc:	e005      	b.n	80010ca <HAL_ADC_Start_IT+0x232>
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <HAL_ADC_Start_IT+0x278>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 031f 	and.w	r3, r3, #31
 80010c6:	2b09      	cmp	r3, #9
 80010c8:	d009      	beq.n	80010de <HAL_ADC_Start_IT+0x246>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010d2:	d004      	beq.n	80010de <HAL_ADC_Start_IT+0x246>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <HAL_ADC_Start_IT+0x27c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d10f      	bne.n	80010fe <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f042 0204 	orr.w	r2, r2, #4
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	e006      	b.n	80010fe <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80010f8:	e001      	b.n	80010fe <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80010fa:	2302      	movs	r3, #2
 80010fc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	50000100 	.word	0x50000100
 800110c:	50000300 	.word	0x50000300
 8001110:	50000700 	.word	0x50000700
 8001114:	50000400 	.word	0x50000400

08001118 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	2b00      	cmp	r3, #0
 8001160:	d004      	beq.n	800116c <HAL_ADC_IRQHandler+0x38>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10b      	bne.n	8001184 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 80bc 	beq.w	80012f0 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 80b6 	beq.w	80012f0 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f003 0310 	and.w	r3, r3, #16
 800118c:	2b00      	cmp	r3, #0
 800118e:	d105      	bne.n	800119c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011a4:	d004      	beq.n	80011b0 <HAL_ADC_IRQHandler+0x7c>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a90      	ldr	r2, [pc, #576]	; (80013ec <HAL_ADC_IRQHandler+0x2b8>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d106      	bne.n	80011be <HAL_ADC_IRQHandler+0x8a>
 80011b0:	4b8f      	ldr	r3, [pc, #572]	; (80013f0 <HAL_ADC_IRQHandler+0x2bc>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 031f 	and.w	r3, r3, #31
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d03e      	beq.n	800123a <HAL_ADC_IRQHandler+0x106>
 80011bc:	e005      	b.n	80011ca <HAL_ADC_IRQHandler+0x96>
 80011be:	4b8d      	ldr	r3, [pc, #564]	; (80013f4 <HAL_ADC_IRQHandler+0x2c0>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 031f 	and.w	r3, r3, #31
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d037      	beq.n	800123a <HAL_ADC_IRQHandler+0x106>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011d2:	d004      	beq.n	80011de <HAL_ADC_IRQHandler+0xaa>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a84      	ldr	r2, [pc, #528]	; (80013ec <HAL_ADC_IRQHandler+0x2b8>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d106      	bne.n	80011ec <HAL_ADC_IRQHandler+0xb8>
 80011de:	4b84      	ldr	r3, [pc, #528]	; (80013f0 <HAL_ADC_IRQHandler+0x2bc>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 031f 	and.w	r3, r3, #31
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d027      	beq.n	800123a <HAL_ADC_IRQHandler+0x106>
 80011ea:	e005      	b.n	80011f8 <HAL_ADC_IRQHandler+0xc4>
 80011ec:	4b81      	ldr	r3, [pc, #516]	; (80013f4 <HAL_ADC_IRQHandler+0x2c0>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 031f 	and.w	r3, r3, #31
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	d020      	beq.n	800123a <HAL_ADC_IRQHandler+0x106>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001200:	d004      	beq.n	800120c <HAL_ADC_IRQHandler+0xd8>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a79      	ldr	r2, [pc, #484]	; (80013ec <HAL_ADC_IRQHandler+0x2b8>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d106      	bne.n	800121a <HAL_ADC_IRQHandler+0xe6>
 800120c:	4b78      	ldr	r3, [pc, #480]	; (80013f0 <HAL_ADC_IRQHandler+0x2bc>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 031f 	and.w	r3, r3, #31
 8001214:	2b09      	cmp	r3, #9
 8001216:	d010      	beq.n	800123a <HAL_ADC_IRQHandler+0x106>
 8001218:	e005      	b.n	8001226 <HAL_ADC_IRQHandler+0xf2>
 800121a:	4b76      	ldr	r3, [pc, #472]	; (80013f4 <HAL_ADC_IRQHandler+0x2c0>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 031f 	and.w	r3, r3, #31
 8001222:	2b09      	cmp	r3, #9
 8001224:	d009      	beq.n	800123a <HAL_ADC_IRQHandler+0x106>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800122e:	d004      	beq.n	800123a <HAL_ADC_IRQHandler+0x106>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a70      	ldr	r2, [pc, #448]	; (80013f8 <HAL_ADC_IRQHandler+0x2c4>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d104      	bne.n	8001244 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
 8001242:	e00f      	b.n	8001264 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800124c:	d004      	beq.n	8001258 <HAL_ADC_IRQHandler+0x124>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a66      	ldr	r2, [pc, #408]	; (80013ec <HAL_ADC_IRQHandler+0x2b8>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d102      	bne.n	800125e <HAL_ADC_IRQHandler+0x12a>
 8001258:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800125c:	e000      	b.n	8001260 <HAL_ADC_IRQHandler+0x12c>
 800125e:	4b66      	ldr	r3, [pc, #408]	; (80013f8 <HAL_ADC_IRQHandler+0x2c4>)
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800126e:	2b00      	cmp	r3, #0
 8001270:	d137      	bne.n	80012e2 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001278:	2b00      	cmp	r3, #0
 800127a:	d132      	bne.n	80012e2 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d02d      	beq.n	80012e2 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d11a      	bne.n	80012ca <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 020c 	bic.w	r2, r2, #12
 80012a2:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d112      	bne.n	80012e2 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	f043 0201 	orr.w	r2, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	641a      	str	r2, [r3, #64]	; 0x40
 80012c8:	e00b      	b.n	80012e2 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f043 0210 	orr.w	r2, r3, #16
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f043 0201 	orr.w	r2, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff f944 	bl	8000570 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	220c      	movs	r2, #12
 80012ee:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	f003 0320 	and.w	r3, r3, #32
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d004      	beq.n	8001304 <HAL_ADC_IRQHandler+0x1d0>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10b      	bne.n	800131c <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 8138 	beq.w	8001580 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 8132 	beq.w	8001580 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001330:	d004      	beq.n	800133c <HAL_ADC_IRQHandler+0x208>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a2d      	ldr	r2, [pc, #180]	; (80013ec <HAL_ADC_IRQHandler+0x2b8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d106      	bne.n	800134a <HAL_ADC_IRQHandler+0x216>
 800133c:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <HAL_ADC_IRQHandler+0x2bc>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 031f 	and.w	r3, r3, #31
 8001344:	2b00      	cmp	r3, #0
 8001346:	d03e      	beq.n	80013c6 <HAL_ADC_IRQHandler+0x292>
 8001348:	e005      	b.n	8001356 <HAL_ADC_IRQHandler+0x222>
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <HAL_ADC_IRQHandler+0x2c0>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 031f 	and.w	r3, r3, #31
 8001352:	2b00      	cmp	r3, #0
 8001354:	d037      	beq.n	80013c6 <HAL_ADC_IRQHandler+0x292>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800135e:	d004      	beq.n	800136a <HAL_ADC_IRQHandler+0x236>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a21      	ldr	r2, [pc, #132]	; (80013ec <HAL_ADC_IRQHandler+0x2b8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d106      	bne.n	8001378 <HAL_ADC_IRQHandler+0x244>
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <HAL_ADC_IRQHandler+0x2bc>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 031f 	and.w	r3, r3, #31
 8001372:	2b05      	cmp	r3, #5
 8001374:	d027      	beq.n	80013c6 <HAL_ADC_IRQHandler+0x292>
 8001376:	e005      	b.n	8001384 <HAL_ADC_IRQHandler+0x250>
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <HAL_ADC_IRQHandler+0x2c0>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 031f 	and.w	r3, r3, #31
 8001380:	2b05      	cmp	r3, #5
 8001382:	d020      	beq.n	80013c6 <HAL_ADC_IRQHandler+0x292>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800138c:	d004      	beq.n	8001398 <HAL_ADC_IRQHandler+0x264>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a16      	ldr	r2, [pc, #88]	; (80013ec <HAL_ADC_IRQHandler+0x2b8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d106      	bne.n	80013a6 <HAL_ADC_IRQHandler+0x272>
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_ADC_IRQHandler+0x2bc>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	2b09      	cmp	r3, #9
 80013a2:	d010      	beq.n	80013c6 <HAL_ADC_IRQHandler+0x292>
 80013a4:	e005      	b.n	80013b2 <HAL_ADC_IRQHandler+0x27e>
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <HAL_ADC_IRQHandler+0x2c0>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 031f 	and.w	r3, r3, #31
 80013ae:	2b09      	cmp	r3, #9
 80013b0:	d009      	beq.n	80013c6 <HAL_ADC_IRQHandler+0x292>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013ba:	d004      	beq.n	80013c6 <HAL_ADC_IRQHandler+0x292>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <HAL_ADC_IRQHandler+0x2c4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d104      	bne.n	80013d0 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	e018      	b.n	8001402 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013d8:	d004      	beq.n	80013e4 <HAL_ADC_IRQHandler+0x2b0>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_ADC_IRQHandler+0x2b8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d10b      	bne.n	80013fc <HAL_ADC_IRQHandler+0x2c8>
 80013e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013e8:	e009      	b.n	80013fe <HAL_ADC_IRQHandler+0x2ca>
 80013ea:	bf00      	nop
 80013ec:	50000100 	.word	0x50000100
 80013f0:	50000300 	.word	0x50000300
 80013f4:	50000700 	.word	0x50000700
 80013f8:	50000400 	.word	0x50000400
 80013fc:	4b92      	ldr	r3, [pc, #584]	; (8001648 <HAL_ADC_IRQHandler+0x514>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001408:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800140c:	2b00      	cmp	r3, #0
 800140e:	f040 80b0 	bne.w	8001572 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00d      	beq.n	8001438 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001426:	2b00      	cmp	r3, #0
 8001428:	f040 80a3 	bne.w	8001572 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001432:	2b00      	cmp	r3, #0
 8001434:	f040 809d 	bne.w	8001572 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 8097 	beq.w	8001572 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800144c:	d004      	beq.n	8001458 <HAL_ADC_IRQHandler+0x324>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a7e      	ldr	r2, [pc, #504]	; (800164c <HAL_ADC_IRQHandler+0x518>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d106      	bne.n	8001466 <HAL_ADC_IRQHandler+0x332>
 8001458:	4b7d      	ldr	r3, [pc, #500]	; (8001650 <HAL_ADC_IRQHandler+0x51c>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 031f 	and.w	r3, r3, #31
 8001460:	2b00      	cmp	r3, #0
 8001462:	d03e      	beq.n	80014e2 <HAL_ADC_IRQHandler+0x3ae>
 8001464:	e005      	b.n	8001472 <HAL_ADC_IRQHandler+0x33e>
 8001466:	4b7b      	ldr	r3, [pc, #492]	; (8001654 <HAL_ADC_IRQHandler+0x520>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	2b00      	cmp	r3, #0
 8001470:	d037      	beq.n	80014e2 <HAL_ADC_IRQHandler+0x3ae>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800147a:	d004      	beq.n	8001486 <HAL_ADC_IRQHandler+0x352>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a72      	ldr	r2, [pc, #456]	; (800164c <HAL_ADC_IRQHandler+0x518>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d106      	bne.n	8001494 <HAL_ADC_IRQHandler+0x360>
 8001486:	4b72      	ldr	r3, [pc, #456]	; (8001650 <HAL_ADC_IRQHandler+0x51c>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 031f 	and.w	r3, r3, #31
 800148e:	2b06      	cmp	r3, #6
 8001490:	d027      	beq.n	80014e2 <HAL_ADC_IRQHandler+0x3ae>
 8001492:	e005      	b.n	80014a0 <HAL_ADC_IRQHandler+0x36c>
 8001494:	4b6f      	ldr	r3, [pc, #444]	; (8001654 <HAL_ADC_IRQHandler+0x520>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	2b06      	cmp	r3, #6
 800149e:	d020      	beq.n	80014e2 <HAL_ADC_IRQHandler+0x3ae>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a8:	d004      	beq.n	80014b4 <HAL_ADC_IRQHandler+0x380>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a67      	ldr	r2, [pc, #412]	; (800164c <HAL_ADC_IRQHandler+0x518>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d106      	bne.n	80014c2 <HAL_ADC_IRQHandler+0x38e>
 80014b4:	4b66      	ldr	r3, [pc, #408]	; (8001650 <HAL_ADC_IRQHandler+0x51c>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 031f 	and.w	r3, r3, #31
 80014bc:	2b07      	cmp	r3, #7
 80014be:	d010      	beq.n	80014e2 <HAL_ADC_IRQHandler+0x3ae>
 80014c0:	e005      	b.n	80014ce <HAL_ADC_IRQHandler+0x39a>
 80014c2:	4b64      	ldr	r3, [pc, #400]	; (8001654 <HAL_ADC_IRQHandler+0x520>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 031f 	and.w	r3, r3, #31
 80014ca:	2b07      	cmp	r3, #7
 80014cc:	d009      	beq.n	80014e2 <HAL_ADC_IRQHandler+0x3ae>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014d6:	d004      	beq.n	80014e2 <HAL_ADC_IRQHandler+0x3ae>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a5a      	ldr	r2, [pc, #360]	; (8001648 <HAL_ADC_IRQHandler+0x514>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d104      	bne.n	80014ec <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	e00f      	b.n	800150c <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014f4:	d004      	beq.n	8001500 <HAL_ADC_IRQHandler+0x3cc>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a54      	ldr	r2, [pc, #336]	; (800164c <HAL_ADC_IRQHandler+0x518>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d102      	bne.n	8001506 <HAL_ADC_IRQHandler+0x3d2>
 8001500:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001504:	e000      	b.n	8001508 <HAL_ADC_IRQHandler+0x3d4>
 8001506:	4b50      	ldr	r3, [pc, #320]	; (8001648 <HAL_ADC_IRQHandler+0x514>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d12d      	bne.n	8001572 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d11a      	bne.n	800155a <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001532:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d112      	bne.n	8001572 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f043 0201 	orr.w	r2, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	641a      	str	r2, [r3, #64]	; 0x40
 8001558:	e00b      	b.n	8001572 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f043 0210 	orr.w	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f043 0201 	orr.w	r2, r3, #1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f8c4 	bl	8001700 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2260      	movs	r2, #96	; 0x60
 800157e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001586:	2b00      	cmp	r3, #0
 8001588:	d011      	beq.n	80015ae <HAL_ADC_IRQHandler+0x47a>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00c      	beq.n	80015ae <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff fa85 	bl	8000ab0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2280      	movs	r2, #128	; 0x80
 80015ac:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d012      	beq.n	80015de <HAL_ADC_IRQHandler+0x4aa>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00d      	beq.n	80015de <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f8aa 	bl	8001728 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015dc:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d012      	beq.n	800160e <HAL_ADC_IRQHandler+0x4da>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00d      	beq.n	800160e <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f89c 	bl	800173c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	f003 0310 	and.w	r3, r3, #16
 8001614:	2b00      	cmp	r3, #0
 8001616:	d04f      	beq.n	80016b8 <HAL_ADC_IRQHandler+0x584>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	2b00      	cmp	r3, #0
 8001620:	d04a      	beq.n	80016b8 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001626:	2b01      	cmp	r3, #1
 8001628:	d102      	bne.n	8001630 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 800162a:	2301      	movs	r3, #1
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	e02d      	b.n	800168c <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001638:	d004      	beq.n	8001644 <HAL_ADC_IRQHandler+0x510>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a03      	ldr	r2, [pc, #12]	; (800164c <HAL_ADC_IRQHandler+0x518>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d109      	bne.n	8001658 <HAL_ADC_IRQHandler+0x524>
 8001644:	4b02      	ldr	r3, [pc, #8]	; (8001650 <HAL_ADC_IRQHandler+0x51c>)
 8001646:	e008      	b.n	800165a <HAL_ADC_IRQHandler+0x526>
 8001648:	50000400 	.word	0x50000400
 800164c:	50000100 	.word	0x50000100
 8001650:	50000300 	.word	0x50000300
 8001654:	50000700 	.word	0x50000700
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <HAL_ADC_IRQHandler+0x5c8>)
 800165a:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	2b00      	cmp	r3, #0
 8001666:	d109      	bne.n	800167c <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b01      	cmp	r3, #1
 8001674:	d10a      	bne.n	800168c <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001676:	2301      	movs	r3, #1
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	e007      	b.n	800168c <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001688:	2301      	movs	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d10e      	bne.n	80016b0 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f043 0202 	orr.w	r2, r3, #2
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fa0a 	bl	8000ac4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2210      	movs	r2, #16
 80016b6:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d018      	beq.n	80016f4 <HAL_ADC_IRQHandler+0x5c0>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d013      	beq.n	80016f4 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016dc:	f043 0208 	orr.w	r2, r3, #8
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ec:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f810 	bl	8001714 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80016f4:	bf00      	nop
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	50000700 	.word	0x50000700

08001700 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001750:	b480      	push	{r7}
 8001752:	b09b      	sub	sp, #108	; 0x6c
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800176a:	2b01      	cmp	r3, #1
 800176c:	d101      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x22>
 800176e:	2302      	movs	r3, #2
 8001770:	e2ca      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x5b8>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	f040 82ae 	bne.w	8001ce6 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b04      	cmp	r3, #4
 8001790:	d81c      	bhi.n	80017cc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	461a      	mov	r2, r3
 80017a6:	231f      	movs	r3, #31
 80017a8:	4093      	lsls	r3, r2
 80017aa:	43db      	mvns	r3, r3
 80017ac:	4019      	ands	r1, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	6818      	ldr	r0, [r3, #0]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	fa00 f203 	lsl.w	r2, r0, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	631a      	str	r2, [r3, #48]	; 0x30
 80017ca:	e063      	b.n	8001894 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b09      	cmp	r3, #9
 80017d2:	d81e      	bhi.n	8001812 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	3b1e      	subs	r3, #30
 80017e8:	221f      	movs	r2, #31
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	4019      	ands	r1, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	6818      	ldr	r0, [r3, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	3b1e      	subs	r3, #30
 8001804:	fa00 f203 	lsl.w	r2, r0, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	635a      	str	r2, [r3, #52]	; 0x34
 8001810:	e040      	b.n	8001894 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b0e      	cmp	r3, #14
 8001818:	d81e      	bhi.n	8001858 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	3b3c      	subs	r3, #60	; 0x3c
 800182e:	221f      	movs	r2, #31
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	4019      	ands	r1, r3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	3b3c      	subs	r3, #60	; 0x3c
 800184a:	fa00 f203 	lsl.w	r2, r0, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	639a      	str	r2, [r3, #56]	; 0x38
 8001856:	e01d      	b.n	8001894 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	3b5a      	subs	r3, #90	; 0x5a
 800186c:	221f      	movs	r2, #31
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	4019      	ands	r1, r3
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	3b5a      	subs	r3, #90	; 0x5a
 8001888:	fa00 f203 	lsl.w	r2, r0, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f040 80e5 	bne.w	8001a6e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b09      	cmp	r3, #9
 80018aa:	d91c      	bls.n	80018e6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6999      	ldr	r1, [r3, #24]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	3b1e      	subs	r3, #30
 80018be:	2207      	movs	r2, #7
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4019      	ands	r1, r3
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	6898      	ldr	r0, [r3, #8]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	3b1e      	subs	r3, #30
 80018d8:	fa00 f203 	lsl.w	r2, r0, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	619a      	str	r2, [r3, #24]
 80018e4:	e019      	b.n	800191a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6959      	ldr	r1, [r3, #20]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	2207      	movs	r2, #7
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	4019      	ands	r1, r3
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	6898      	ldr	r0, [r3, #8]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	fa00 f203 	lsl.w	r2, r0, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	08db      	lsrs	r3, r3, #3
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	3b01      	subs	r3, #1
 8001938:	2b03      	cmp	r3, #3
 800193a:	d84f      	bhi.n	80019dc <HAL_ADC_ConfigChannel+0x28c>
 800193c:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <HAL_ADC_ConfigChannel+0x1f4>)
 800193e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001942:	bf00      	nop
 8001944:	08001955 	.word	0x08001955
 8001948:	08001977 	.word	0x08001977
 800194c:	08001999 	.word	0x08001999
 8001950:	080019bb 	.word	0x080019bb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800195a:	4b9a      	ldr	r3, [pc, #616]	; (8001bc4 <HAL_ADC_ConfigChannel+0x474>)
 800195c:	4013      	ands	r3, r2
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	0691      	lsls	r1, r2, #26
 8001964:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001966:	430a      	orrs	r2, r1
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001972:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001974:	e07e      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800197c:	4b91      	ldr	r3, [pc, #580]	; (8001bc4 <HAL_ADC_ConfigChannel+0x474>)
 800197e:	4013      	ands	r3, r2
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	0691      	lsls	r1, r2, #26
 8001986:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001988:	430a      	orrs	r2, r1
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001994:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001996:	e06d      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800199e:	4b89      	ldr	r3, [pc, #548]	; (8001bc4 <HAL_ADC_ConfigChannel+0x474>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	0691      	lsls	r1, r2, #26
 80019a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019aa:	430a      	orrs	r2, r1
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019b6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019b8:	e05c      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019c0:	4b80      	ldr	r3, [pc, #512]	; (8001bc4 <HAL_ADC_ConfigChannel+0x474>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	0691      	lsls	r1, r2, #26
 80019ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019cc:	430a      	orrs	r2, r1
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019d8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019da:	e04b      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	069b      	lsls	r3, r3, #26
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d107      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019fe:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	069b      	lsls	r3, r3, #26
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d107      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a22:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	069b      	lsls	r3, r3, #26
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d107      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a46:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	069b      	lsls	r3, r3, #26
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d10a      	bne.n	8001a72 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a6a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001a6c:	e001      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001a6e:	bf00      	nop
 8001a70:	e000      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001a72:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d108      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x344>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x344>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x346>
 8001a94:	2300      	movs	r3, #0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f040 8130 	bne.w	8001cfc <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d00f      	beq.n	8001ac4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	400a      	ands	r2, r1
 8001abe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001ac2:	e049      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b09      	cmp	r3, #9
 8001ae4:	d91c      	bls.n	8001b20 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6999      	ldr	r1, [r3, #24]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	3b1b      	subs	r3, #27
 8001af8:	2207      	movs	r2, #7
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	4019      	ands	r1, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6898      	ldr	r0, [r3, #8]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b1b      	subs	r3, #27
 8001b12:	fa00 f203 	lsl.w	r2, r0, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	619a      	str	r2, [r3, #24]
 8001b1e:	e01b      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6959      	ldr	r1, [r3, #20]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	2207      	movs	r2, #7
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4019      	ands	r1, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6898      	ldr	r0, [r3, #8]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b60:	d004      	beq.n	8001b6c <HAL_ADC_ConfigChannel+0x41c>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a18      	ldr	r2, [pc, #96]	; (8001bc8 <HAL_ADC_ConfigChannel+0x478>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x420>
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <HAL_ADC_ConfigChannel+0x47c>)
 8001b6e:	e000      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x422>
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <HAL_ADC_ConfigChannel+0x480>)
 8001b72:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b10      	cmp	r3, #16
 8001b7a:	d105      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d015      	beq.n	8001bb4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b8c:	2b11      	cmp	r3, #17
 8001b8e:	d105      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00b      	beq.n	8001bb4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ba0:	2b12      	cmp	r3, #18
 8001ba2:	f040 80ab 	bne.w	8001cfc <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 80a4 	bne.w	8001cfc <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bbc:	d10a      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x484>
 8001bbe:	4b02      	ldr	r3, [pc, #8]	; (8001bc8 <HAL_ADC_ConfigChannel+0x478>)
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	e022      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x4ba>
 8001bc4:	83fff000 	.word	0x83fff000
 8001bc8:	50000100 	.word	0x50000100
 8001bcc:	50000300 	.word	0x50000300
 8001bd0:	50000700 	.word	0x50000700
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a4e      	ldr	r2, [pc, #312]	; (8001d14 <HAL_ADC_ConfigChannel+0x5c4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d103      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x496>
 8001bde:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	e011      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x4ba>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a4b      	ldr	r2, [pc, #300]	; (8001d18 <HAL_ADC_ConfigChannel+0x5c8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d102      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x4a6>
 8001bf0:	4b4a      	ldr	r3, [pc, #296]	; (8001d1c <HAL_ADC_ConfigChannel+0x5cc>)
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e009      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x4ba>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a48      	ldr	r2, [pc, #288]	; (8001d1c <HAL_ADC_ConfigChannel+0x5cc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d102      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x4b6>
 8001c00:	4b45      	ldr	r3, [pc, #276]	; (8001d18 <HAL_ADC_ConfigChannel+0x5c8>)
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	e001      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x4ba>
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d108      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x4da>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x4da>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x4dc>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d150      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c30:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d010      	beq.n	8001c58 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d107      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x502>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x502>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x504>
 8001c52:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d13c      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b10      	cmp	r3, #16
 8001c5e:	d11d      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x54c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c68:	d118      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c74:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c76:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <HAL_ADC_ConfigChannel+0x5d0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a2a      	ldr	r2, [pc, #168]	; (8001d24 <HAL_ADC_ConfigChannel+0x5d4>)
 8001c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c80:	0c9a      	lsrs	r2, r3, #18
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c8c:	e002      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f9      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c9a:	e02e      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b11      	cmp	r3, #17
 8001ca2:	d10b      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x56c>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cac:	d106      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cba:	e01e      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b12      	cmp	r3, #18
 8001cc2:	d11a      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cce:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cd0:	e013      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f043 0220 	orr.w	r2, r3, #32
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ce4:	e00a      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f043 0220 	orr.w	r2, r3, #32
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001cf8:	e000      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cfa:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	376c      	adds	r7, #108	; 0x6c
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	50000100 	.word	0x50000100
 8001d18:	50000400 	.word	0x50000400
 8001d1c:	50000500 	.word	0x50000500
 8001d20:	20000040 	.word	0x20000040
 8001d24:	431bde83 	.word	0x431bde83

08001d28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d108      	bne.n	8001d54 <ADC_Enable+0x2c>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <ADC_Enable+0x2c>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <ADC_Enable+0x2e>
 8001d54:	2300      	movs	r3, #0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d143      	bne.n	8001de2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	4b22      	ldr	r3, [pc, #136]	; (8001dec <ADC_Enable+0xc4>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00d      	beq.n	8001d84 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f043 0210 	orr.w	r2, r3, #16
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e02f      	b.n	8001de4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001d94:	f7fe fe5c 	bl	8000a50 <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d9a:	e01b      	b.n	8001dd4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d9c:	f7fe fe58 	bl	8000a50 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d914      	bls.n	8001dd4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d00d      	beq.n	8001dd4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	f043 0210 	orr.w	r2, r3, #16
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	f043 0201 	orr.w	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e007      	b.n	8001de4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d1dc      	bne.n	8001d9c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	8000003f 	.word	0x8000003f

08001df0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d108      	bne.n	8001e1c <ADC_Disable+0x2c>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <ADC_Disable+0x2c>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e000      	b.n	8001e1e <ADC_Disable+0x2e>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d047      	beq.n	8001eb2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 030d 	and.w	r3, r3, #13
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d10f      	bne.n	8001e50 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0202 	orr.w	r2, r2, #2
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2203      	movs	r2, #3
 8001e46:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001e48:	f7fe fe02 	bl	8000a50 <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e4e:	e029      	b.n	8001ea4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	f043 0210 	orr.w	r2, r3, #16
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e60:	f043 0201 	orr.w	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e023      	b.n	8001eb4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e6c:	f7fe fdf0 	bl	8000a50 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d914      	bls.n	8001ea4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d10d      	bne.n	8001ea4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	f043 0210 	orr.w	r2, r3, #16
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	f043 0201 	orr.w	r2, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e007      	b.n	8001eb4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d0dc      	beq.n	8001e6c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <__NVIC_GetPriorityGrouping+0x18>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 0307 	and.w	r3, r3, #7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db0b      	blt.n	8001f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4907      	ldr	r1, [pc, #28]	; (8001f58 <__NVIC_EnableIRQ+0x38>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2001      	movs	r0, #1
 8001f42:	fa00 f202 	lsl.w	r2, r0, r2
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	; (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	4313      	orrs	r3, r2
         );
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002028:	d301      	bcc.n	800202e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202a:	2301      	movs	r3, #1
 800202c:	e00f      	b.n	800204e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <SysTick_Config+0x40>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002036:	210f      	movs	r1, #15
 8002038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800203c:	f7ff ff8e 	bl	8001f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <SysTick_Config+0x40>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <SysTick_Config+0x40>)
 8002048:	2207      	movs	r2, #7
 800204a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff29 	bl	8001ebc <__NVIC_SetPriorityGrouping>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002084:	f7ff ff3e 	bl	8001f04 <__NVIC_GetPriorityGrouping>
 8002088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f7ff ff8e 	bl	8001fb0 <NVIC_EncodePriority>
 8002094:	4602      	mov	r2, r0
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff5d 	bl	8001f5c <__NVIC_SetPriority>
}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff31 	bl	8001f20 <__NVIC_EnableIRQ>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffa2 	bl	8002018 <SysTick_Config>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ee:	e154      	b.n	800239a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2101      	movs	r1, #1
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	fa01 f303 	lsl.w	r3, r1, r3
 80020fc:	4013      	ands	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8146 	beq.w	8002394 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d005      	beq.n	8002120 <HAL_GPIO_Init+0x40>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d130      	bne.n	8002182 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002156:	2201      	movs	r2, #1
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	f003 0201 	and.w	r2, r3, #1
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b03      	cmp	r3, #3
 800218c:	d017      	beq.n	80021be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	2203      	movs	r2, #3
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4013      	ands	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d123      	bne.n	8002212 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	08da      	lsrs	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3208      	adds	r2, #8
 80021d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	220f      	movs	r2, #15
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	08da      	lsrs	r2, r3, #3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3208      	adds	r2, #8
 800220c:	6939      	ldr	r1, [r7, #16]
 800220e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	2203      	movs	r2, #3
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 0203 	and.w	r2, r3, #3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80a0 	beq.w	8002394 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002254:	4b58      	ldr	r3, [pc, #352]	; (80023b8 <HAL_GPIO_Init+0x2d8>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	4a57      	ldr	r2, [pc, #348]	; (80023b8 <HAL_GPIO_Init+0x2d8>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6193      	str	r3, [r2, #24]
 8002260:	4b55      	ldr	r3, [pc, #340]	; (80023b8 <HAL_GPIO_Init+0x2d8>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800226c:	4a53      	ldr	r2, [pc, #332]	; (80023bc <HAL_GPIO_Init+0x2dc>)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	3302      	adds	r3, #2
 8002274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002278:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	220f      	movs	r2, #15
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002296:	d019      	beq.n	80022cc <HAL_GPIO_Init+0x1ec>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a49      	ldr	r2, [pc, #292]	; (80023c0 <HAL_GPIO_Init+0x2e0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d013      	beq.n	80022c8 <HAL_GPIO_Init+0x1e8>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a48      	ldr	r2, [pc, #288]	; (80023c4 <HAL_GPIO_Init+0x2e4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d00d      	beq.n	80022c4 <HAL_GPIO_Init+0x1e4>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a47      	ldr	r2, [pc, #284]	; (80023c8 <HAL_GPIO_Init+0x2e8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d007      	beq.n	80022c0 <HAL_GPIO_Init+0x1e0>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a46      	ldr	r2, [pc, #280]	; (80023cc <HAL_GPIO_Init+0x2ec>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d101      	bne.n	80022bc <HAL_GPIO_Init+0x1dc>
 80022b8:	2304      	movs	r3, #4
 80022ba:	e008      	b.n	80022ce <HAL_GPIO_Init+0x1ee>
 80022bc:	2305      	movs	r3, #5
 80022be:	e006      	b.n	80022ce <HAL_GPIO_Init+0x1ee>
 80022c0:	2303      	movs	r3, #3
 80022c2:	e004      	b.n	80022ce <HAL_GPIO_Init+0x1ee>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e002      	b.n	80022ce <HAL_GPIO_Init+0x1ee>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <HAL_GPIO_Init+0x1ee>
 80022cc:	2300      	movs	r3, #0
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	f002 0203 	and.w	r2, r2, #3
 80022d4:	0092      	lsls	r2, r2, #2
 80022d6:	4093      	lsls	r3, r2
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022de:	4937      	ldr	r1, [pc, #220]	; (80023bc <HAL_GPIO_Init+0x2dc>)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	3302      	adds	r3, #2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ec:	4b38      	ldr	r3, [pc, #224]	; (80023d0 <HAL_GPIO_Init+0x2f0>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002310:	4a2f      	ldr	r2, [pc, #188]	; (80023d0 <HAL_GPIO_Init+0x2f0>)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002316:	4b2e      	ldr	r3, [pc, #184]	; (80023d0 <HAL_GPIO_Init+0x2f0>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800233a:	4a25      	ldr	r2, [pc, #148]	; (80023d0 <HAL_GPIO_Init+0x2f0>)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002340:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <HAL_GPIO_Init+0x2f0>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002364:	4a1a      	ldr	r2, [pc, #104]	; (80023d0 <HAL_GPIO_Init+0x2f0>)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800236a:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HAL_GPIO_Init+0x2f0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800238e:	4a10      	ldr	r2, [pc, #64]	; (80023d0 <HAL_GPIO_Init+0x2f0>)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	3301      	adds	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f47f aea3 	bne.w	80020f0 <HAL_GPIO_Init+0x10>
  }
}
 80023aa:	bf00      	nop
 80023ac:	bf00      	nop
 80023ae:	371c      	adds	r7, #28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40010000 	.word	0x40010000
 80023c0:	48000400 	.word	0x48000400
 80023c4:	48000800 	.word	0x48000800
 80023c8:	48000c00 	.word	0x48000c00
 80023cc:	48001000 	.word	0x48001000
 80023d0:	40010400 	.word	0x40010400

080023d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
 80023e0:	4613      	mov	r3, r2
 80023e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023e4:	787b      	ldrb	r3, [r7, #1]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ea:	887a      	ldrh	r2, [r7, #2]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023f0:	e002      	b.n	80023f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800240a:	af00      	add	r7, sp, #0
 800240c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002410:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002414:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	f001 b823 	b.w	8003470 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 817d 	beq.w	800273a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002440:	4bbc      	ldr	r3, [pc, #752]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b04      	cmp	r3, #4
 800244a:	d00c      	beq.n	8002466 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800244c:	4bb9      	ldr	r3, [pc, #740]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b08      	cmp	r3, #8
 8002456:	d15c      	bne.n	8002512 <HAL_RCC_OscConfig+0x10e>
 8002458:	4bb6      	ldr	r3, [pc, #728]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002464:	d155      	bne.n	8002512 <HAL_RCC_OscConfig+0x10e>
 8002466:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800246a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002472:	fa93 f3a3 	rbit	r3, r3
 8002476:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800247a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	095b      	lsrs	r3, r3, #5
 8002486:	b2db      	uxtb	r3, r3
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b01      	cmp	r3, #1
 8002490:	d102      	bne.n	8002498 <HAL_RCC_OscConfig+0x94>
 8002492:	4ba8      	ldr	r3, [pc, #672]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	e015      	b.n	80024c4 <HAL_RCC_OscConfig+0xc0>
 8002498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800249c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80024ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80024b4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80024c0:	4b9c      	ldr	r3, [pc, #624]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024c8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80024cc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80024d0:	fa92 f2a2 	rbit	r2, r2
 80024d4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80024d8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80024dc:	fab2 f282 	clz	r2, r2
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f042 0220 	orr.w	r2, r2, #32
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	f002 021f 	and.w	r2, r2, #31
 80024ec:	2101      	movs	r1, #1
 80024ee:	fa01 f202 	lsl.w	r2, r1, r2
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 811f 	beq.w	8002738 <HAL_RCC_OscConfig+0x334>
 80024fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f040 8116 	bne.w	8002738 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	f000 bfaf 	b.w	8003470 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002516:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x12e>
 8002524:	4b83      	ldr	r3, [pc, #524]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a82      	ldr	r2, [pc, #520]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 800252a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	e036      	b.n	80025a0 <HAL_RCC_OscConfig+0x19c>
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0x158>
 8002542:	4b7c      	ldr	r3, [pc, #496]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a7b      	ldr	r2, [pc, #492]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 8002548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	4b79      	ldr	r3, [pc, #484]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a78      	ldr	r2, [pc, #480]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 8002554:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e021      	b.n	80025a0 <HAL_RCC_OscConfig+0x19c>
 800255c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002560:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x184>
 800256e:	4b71      	ldr	r3, [pc, #452]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a70      	ldr	r2, [pc, #448]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 8002574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b6e      	ldr	r3, [pc, #440]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a6d      	ldr	r2, [pc, #436]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 8002580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e00b      	b.n	80025a0 <HAL_RCC_OscConfig+0x19c>
 8002588:	4b6a      	ldr	r3, [pc, #424]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a69      	ldr	r2, [pc, #420]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 800258e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	4b67      	ldr	r3, [pc, #412]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a66      	ldr	r2, [pc, #408]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 800259a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800259e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025a0:	4b64      	ldr	r3, [pc, #400]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	f023 020f 	bic.w	r2, r3, #15
 80025a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	495f      	ldr	r1, [pc, #380]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d059      	beq.n	800267e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ca:	f7fe fa41 	bl	8000a50 <HAL_GetTick>
 80025ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d4:	f7fe fa3c 	bl	8000a50 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b64      	cmp	r3, #100	; 0x64
 80025e2:	d902      	bls.n	80025ea <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	f000 bf43 	b.w	8003470 <HAL_RCC_OscConfig+0x106c>
 80025ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ee:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80025fe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d102      	bne.n	800261c <HAL_RCC_OscConfig+0x218>
 8002616:	4b47      	ldr	r3, [pc, #284]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	e015      	b.n	8002648 <HAL_RCC_OscConfig+0x244>
 800261c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002620:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002630:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002634:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002638:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002644:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800264c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002650:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002654:	fa92 f2a2 	rbit	r2, r2
 8002658:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800265c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002660:	fab2 f282 	clz	r2, r2
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	f042 0220 	orr.w	r2, r2, #32
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	f002 021f 	and.w	r2, r2, #31
 8002670:	2101      	movs	r1, #1
 8002672:	fa01 f202 	lsl.w	r2, r1, r2
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0ab      	beq.n	80025d4 <HAL_RCC_OscConfig+0x1d0>
 800267c:	e05d      	b.n	800273a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267e:	f7fe f9e7 	bl	8000a50 <HAL_GetTick>
 8002682:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002686:	e00a      	b.n	800269e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002688:	f7fe f9e2 	bl	8000a50 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b64      	cmp	r3, #100	; 0x64
 8002696:	d902      	bls.n	800269e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	f000 bee9 	b.w	8003470 <HAL_RCC_OscConfig+0x106c>
 800269e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026a2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80026b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	095b      	lsrs	r3, r3, #5
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d102      	bne.n	80026d0 <HAL_RCC_OscConfig+0x2cc>
 80026ca:	4b1a      	ldr	r3, [pc, #104]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	e015      	b.n	80026fc <HAL_RCC_OscConfig+0x2f8>
 80026d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80026e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80026ec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <HAL_RCC_OscConfig+0x330>)
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002700:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002704:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002708:	fa92 f2a2 	rbit	r2, r2
 800270c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002710:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002714:	fab2 f282 	clz	r2, r2
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	f042 0220 	orr.w	r2, r2, #32
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f002 021f 	and.w	r2, r2, #31
 8002724:	2101      	movs	r1, #1
 8002726:	fa01 f202 	lsl.w	r2, r1, r2
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1ab      	bne.n	8002688 <HAL_RCC_OscConfig+0x284>
 8002730:	e003      	b.n	800273a <HAL_RCC_OscConfig+0x336>
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 817d 	beq.w	8002a4a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002750:	4ba6      	ldr	r3, [pc, #664]	; (80029ec <HAL_RCC_OscConfig+0x5e8>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 030c 	and.w	r3, r3, #12
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00b      	beq.n	8002774 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800275c:	4ba3      	ldr	r3, [pc, #652]	; (80029ec <HAL_RCC_OscConfig+0x5e8>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 030c 	and.w	r3, r3, #12
 8002764:	2b08      	cmp	r3, #8
 8002766:	d172      	bne.n	800284e <HAL_RCC_OscConfig+0x44a>
 8002768:	4ba0      	ldr	r3, [pc, #640]	; (80029ec <HAL_RCC_OscConfig+0x5e8>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d16c      	bne.n	800284e <HAL_RCC_OscConfig+0x44a>
 8002774:	2302      	movs	r3, #2
 8002776:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002786:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d102      	bne.n	80027a4 <HAL_RCC_OscConfig+0x3a0>
 800279e:	4b93      	ldr	r3, [pc, #588]	; (80029ec <HAL_RCC_OscConfig+0x5e8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	e013      	b.n	80027cc <HAL_RCC_OscConfig+0x3c8>
 80027a4:	2302      	movs	r3, #2
 80027a6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80027b6:	2302      	movs	r3, #2
 80027b8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80027bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80027c8:	4b88      	ldr	r3, [pc, #544]	; (80029ec <HAL_RCC_OscConfig+0x5e8>)
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	2202      	movs	r2, #2
 80027ce:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80027d2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80027d6:	fa92 f2a2 	rbit	r2, r2
 80027da:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80027de:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80027e2:	fab2 f282 	clz	r2, r2
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	f042 0220 	orr.w	r2, r2, #32
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	f002 021f 	and.w	r2, r2, #31
 80027f2:	2101      	movs	r1, #1
 80027f4:	fa01 f202 	lsl.w	r2, r1, r2
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <HAL_RCC_OscConfig+0x410>
 80027fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002802:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d002      	beq.n	8002814 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	f000 be2e 	b.w	8003470 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002814:	4b75      	ldr	r3, [pc, #468]	; (80029ec <HAL_RCC_OscConfig+0x5e8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	21f8      	movs	r1, #248	; 0xf8
 800282a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002832:	fa91 f1a1 	rbit	r1, r1
 8002836:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800283a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800283e:	fab1 f181 	clz	r1, r1
 8002842:	b2c9      	uxtb	r1, r1
 8002844:	408b      	lsls	r3, r1
 8002846:	4969      	ldr	r1, [pc, #420]	; (80029ec <HAL_RCC_OscConfig+0x5e8>)
 8002848:	4313      	orrs	r3, r2
 800284a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284c:	e0fd      	b.n	8002a4a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8088 	beq.w	8002970 <HAL_RCC_OscConfig+0x56c>
 8002860:	2301      	movs	r3, #1
 8002862:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002872:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002880:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	461a      	mov	r2, r3
 8002888:	2301      	movs	r3, #1
 800288a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe f8e0 	bl	8000a50 <HAL_GetTick>
 8002890:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002896:	f7fe f8db 	bl	8000a50 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d902      	bls.n	80028ac <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	f000 bde2 	b.w	8003470 <HAL_RCC_OscConfig+0x106c>
 80028ac:	2302      	movs	r3, #2
 80028ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80028be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d102      	bne.n	80028dc <HAL_RCC_OscConfig+0x4d8>
 80028d6:	4b45      	ldr	r3, [pc, #276]	; (80029ec <HAL_RCC_OscConfig+0x5e8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	e013      	b.n	8002904 <HAL_RCC_OscConfig+0x500>
 80028dc:	2302      	movs	r3, #2
 80028de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028ee:	2302      	movs	r3, #2
 80028f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002900:	4b3a      	ldr	r3, [pc, #232]	; (80029ec <HAL_RCC_OscConfig+0x5e8>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	2202      	movs	r2, #2
 8002906:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800290a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800290e:	fa92 f2a2 	rbit	r2, r2
 8002912:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002916:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800291a:	fab2 f282 	clz	r2, r2
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	f042 0220 	orr.w	r2, r2, #32
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	f002 021f 	and.w	r2, r2, #31
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0af      	beq.n	8002896 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002936:	4b2d      	ldr	r3, [pc, #180]	; (80029ec <HAL_RCC_OscConfig+0x5e8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002942:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	21f8      	movs	r1, #248	; 0xf8
 800294c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002954:	fa91 f1a1 	rbit	r1, r1
 8002958:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800295c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002960:	fab1 f181 	clz	r1, r1
 8002964:	b2c9      	uxtb	r1, r1
 8002966:	408b      	lsls	r3, r1
 8002968:	4920      	ldr	r1, [pc, #128]	; (80029ec <HAL_RCC_OscConfig+0x5e8>)
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
 800296e:	e06c      	b.n	8002a4a <HAL_RCC_OscConfig+0x646>
 8002970:	2301      	movs	r3, #1
 8002972:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002982:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002990:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	461a      	mov	r2, r3
 8002998:	2300      	movs	r3, #0
 800299a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7fe f858 	bl	8000a50 <HAL_GetTick>
 80029a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a4:	e00a      	b.n	80029bc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a6:	f7fe f853 	bl	8000a50 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d902      	bls.n	80029bc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	f000 bd5a 	b.w	8003470 <HAL_RCC_OscConfig+0x106c>
 80029bc:	2302      	movs	r3, #2
 80029be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80029ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	095b      	lsrs	r3, r3, #5
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d104      	bne.n	80029f0 <HAL_RCC_OscConfig+0x5ec>
 80029e6:	4b01      	ldr	r3, [pc, #4]	; (80029ec <HAL_RCC_OscConfig+0x5e8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	e015      	b.n	8002a18 <HAL_RCC_OscConfig+0x614>
 80029ec:	40021000 	.word	0x40021000
 80029f0:	2302      	movs	r3, #2
 80029f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002a02:	2302      	movs	r3, #2
 8002a04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002a14:	4bc8      	ldr	r3, [pc, #800]	; (8002d38 <HAL_RCC_OscConfig+0x934>)
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	2202      	movs	r2, #2
 8002a1a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002a1e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002a22:	fa92 f2a2 	rbit	r2, r2
 8002a26:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002a2a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a2e:	fab2 f282 	clz	r2, r2
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	f042 0220 	orr.w	r2, r2, #32
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	f002 021f 	and.w	r2, r2, #31
 8002a3e:	2101      	movs	r1, #1
 8002a40:	fa01 f202 	lsl.w	r2, r1, r2
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1ad      	bne.n	80029a6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 8110 	beq.w	8002c80 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d079      	beq.n	8002b64 <HAL_RCC_OscConfig+0x760>
 8002a70:	2301      	movs	r3, #1
 8002a72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4bab      	ldr	r3, [pc, #684]	; (8002d3c <HAL_RCC_OscConfig+0x938>)
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	461a      	mov	r2, r3
 8002a96:	2301      	movs	r3, #1
 8002a98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7fd ffd9 	bl	8000a50 <HAL_GetTick>
 8002a9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa4:	f7fd ffd4 	bl	8000a50 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d902      	bls.n	8002aba <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	f000 bcdb 	b.w	8003470 <HAL_RCC_OscConfig+0x106c>
 8002aba:	2302      	movs	r3, #2
 8002abc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ac4:	fa93 f3a3 	rbit	r3, r3
 8002ac8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002adc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	fa93 f2a3 	rbit	r2, r3
 8002ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002af8:	2202      	movs	r2, #2
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	fa93 f2a3 	rbit	r2, r3
 8002b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b12:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b14:	4b88      	ldr	r3, [pc, #544]	; (8002d38 <HAL_RCC_OscConfig+0x934>)
 8002b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b20:	2102      	movs	r1, #2
 8002b22:	6019      	str	r1, [r3, #0]
 8002b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	fa93 f1a3 	rbit	r1, r3
 8002b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002b3a:	6019      	str	r1, [r3, #0]
  return result;
 8002b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b40:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	2101      	movs	r1, #1
 8002b58:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0a0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x6a0>
 8002b62:	e08d      	b.n	8002c80 <HAL_RCC_OscConfig+0x87c>
 8002b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b74:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	fa93 f2a3 	rbit	r2, r3
 8002b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b82:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b86:	601a      	str	r2, [r3, #0]
  return result;
 8002b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b90:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b68      	ldr	r3, [pc, #416]	; (8002d3c <HAL_RCC_OscConfig+0x938>)
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba6:	f7fd ff53 	bl	8000a50 <HAL_GetTick>
 8002baa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb0:	f7fd ff4e 	bl	8000a50 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d902      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	f000 bc55 	b.w	8003470 <HAL_RCC_OscConfig+0x106c>
 8002bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002bce:	2202      	movs	r2, #2
 8002bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	fa93 f2a3 	rbit	r2, r3
 8002be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	fa93 f2a3 	rbit	r2, r3
 8002c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c16:	2202      	movs	r2, #2
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	fa93 f2a3 	rbit	r2, r3
 8002c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c30:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c32:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <HAL_RCC_OscConfig+0x934>)
 8002c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002c3e:	2102      	movs	r1, #2
 8002c40:	6019      	str	r1, [r3, #0]
 8002c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c46:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	fa93 f1a3 	rbit	r1, r3
 8002c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c54:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c58:	6019      	str	r1, [r3, #0]
  return result;
 8002c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	2101      	movs	r1, #1
 8002c76:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d197      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 81a1 	beq.w	8002fd8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9c:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <HAL_RCC_OscConfig+0x934>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d116      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca8:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <HAL_RCC_OscConfig+0x934>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	4a22      	ldr	r2, [pc, #136]	; (8002d38 <HAL_RCC_OscConfig+0x934>)
 8002cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	61d3      	str	r3, [r2, #28]
 8002cb4:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <HAL_RCC_OscConfig+0x934>)
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cca:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002cce:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd6:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <HAL_RCC_OscConfig+0x93c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d11a      	bne.n	8002d18 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ce2:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <HAL_RCC_OscConfig+0x93c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a16      	ldr	r2, [pc, #88]	; (8002d40 <HAL_RCC_OscConfig+0x93c>)
 8002ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cee:	f7fd feaf 	bl	8000a50 <HAL_GetTick>
 8002cf2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf6:	e009      	b.n	8002d0c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf8:	f7fd feaa 	bl	8000a50 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b64      	cmp	r3, #100	; 0x64
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e3b1      	b.n	8003470 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <HAL_RCC_OscConfig+0x93c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0ef      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d10d      	bne.n	8002d44 <HAL_RCC_OscConfig+0x940>
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <HAL_RCC_OscConfig+0x934>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	4a02      	ldr	r2, [pc, #8]	; (8002d38 <HAL_RCC_OscConfig+0x934>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6213      	str	r3, [r2, #32]
 8002d34:	e03c      	b.n	8002db0 <HAL_RCC_OscConfig+0x9ac>
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	10908120 	.word	0x10908120
 8002d40:	40007000 	.word	0x40007000
 8002d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10c      	bne.n	8002d6e <HAL_RCC_OscConfig+0x96a>
 8002d54:	4bc1      	ldr	r3, [pc, #772]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4ac0      	ldr	r2, [pc, #768]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002d5a:	f023 0301 	bic.w	r3, r3, #1
 8002d5e:	6213      	str	r3, [r2, #32]
 8002d60:	4bbe      	ldr	r3, [pc, #760]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4abd      	ldr	r2, [pc, #756]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002d66:	f023 0304 	bic.w	r3, r3, #4
 8002d6a:	6213      	str	r3, [r2, #32]
 8002d6c:	e020      	b.n	8002db0 <HAL_RCC_OscConfig+0x9ac>
 8002d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2b05      	cmp	r3, #5
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x994>
 8002d7e:	4bb7      	ldr	r3, [pc, #732]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	4ab6      	ldr	r2, [pc, #728]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002d84:	f043 0304 	orr.w	r3, r3, #4
 8002d88:	6213      	str	r3, [r2, #32]
 8002d8a:	4bb4      	ldr	r3, [pc, #720]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4ab3      	ldr	r2, [pc, #716]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	6213      	str	r3, [r2, #32]
 8002d96:	e00b      	b.n	8002db0 <HAL_RCC_OscConfig+0x9ac>
 8002d98:	4bb0      	ldr	r3, [pc, #704]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	4aaf      	ldr	r2, [pc, #700]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002d9e:	f023 0301 	bic.w	r3, r3, #1
 8002da2:	6213      	str	r3, [r2, #32]
 8002da4:	4bad      	ldr	r3, [pc, #692]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	4aac      	ldr	r2, [pc, #688]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002daa:	f023 0304 	bic.w	r3, r3, #4
 8002dae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8081 	beq.w	8002ec4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc2:	f7fd fe45 	bl	8000a50 <HAL_GetTick>
 8002dc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dca:	e00b      	b.n	8002de4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dcc:	f7fd fe40 	bl	8000a50 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e345      	b.n	8003470 <HAL_RCC_OscConfig+0x106c>
 8002de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002dec:	2202      	movs	r2, #2
 8002dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	fa93 f2a3 	rbit	r2, r3
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002e10:	2202      	movs	r2, #2
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e18:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	fa93 f2a3 	rbit	r2, r3
 8002e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e26:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002e2a:	601a      	str	r2, [r3, #0]
  return result;
 8002e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e30:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002e34:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d102      	bne.n	8002e50 <HAL_RCC_OscConfig+0xa4c>
 8002e4a:	4b84      	ldr	r3, [pc, #528]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	e013      	b.n	8002e78 <HAL_RCC_OscConfig+0xa74>
 8002e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e54:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e58:	2202      	movs	r2, #2
 8002e5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e60:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	fa93 f2a3 	rbit	r2, r3
 8002e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	4b79      	ldr	r3, [pc, #484]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e7c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e80:	2102      	movs	r1, #2
 8002e82:	6011      	str	r1, [r2, #0]
 8002e84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e88:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	fa92 f1a2 	rbit	r1, r2
 8002e92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e96:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e9a:	6011      	str	r1, [r2, #0]
  return result;
 8002e9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ea0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	fab2 f282 	clz	r2, r2
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	f002 021f 	and.w	r2, r2, #31
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d084      	beq.n	8002dcc <HAL_RCC_OscConfig+0x9c8>
 8002ec2:	e07f      	b.n	8002fc4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec4:	f7fd fdc4 	bl	8000a50 <HAL_GetTick>
 8002ec8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ecc:	e00b      	b.n	8002ee6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ece:	f7fd fdbf 	bl	8000a50 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e2c4      	b.n	8003470 <HAL_RCC_OscConfig+0x106c>
 8002ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002eee:	2202      	movs	r2, #2
 8002ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	fa93 f2a3 	rbit	r2, r3
 8002f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f04:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f12:	2202      	movs	r2, #2
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	fa93 f2a3 	rbit	r2, r3
 8002f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f28:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002f2c:	601a      	str	r2, [r3, #0]
  return result;
 8002f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f32:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002f36:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f043 0302 	orr.w	r3, r3, #2
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d102      	bne.n	8002f52 <HAL_RCC_OscConfig+0xb4e>
 8002f4c:	4b43      	ldr	r3, [pc, #268]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	e013      	b.n	8002f7a <HAL_RCC_OscConfig+0xb76>
 8002f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f56:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f62:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	fa93 f2a3 	rbit	r2, r3
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	4b39      	ldr	r3, [pc, #228]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f7e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f82:	2102      	movs	r1, #2
 8002f84:	6011      	str	r1, [r2, #0]
 8002f86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f8a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	fa92 f1a2 	rbit	r1, r2
 8002f94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f98:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f9c:	6011      	str	r1, [r2, #0]
  return result;
 8002f9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fa2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	fab2 f282 	clz	r2, r2
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	f002 021f 	and.w	r2, r2, #31
 8002fb8:	2101      	movs	r1, #1
 8002fba:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d184      	bne.n	8002ece <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fc4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d105      	bne.n	8002fd8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fcc:	4b23      	ldr	r3, [pc, #140]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	4a22      	ldr	r2, [pc, #136]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8242 	beq.w	800346e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fea:	4b1c      	ldr	r3, [pc, #112]	; (800305c <HAL_RCC_OscConfig+0xc58>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	f000 8213 	beq.w	800341e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	2b02      	cmp	r3, #2
 8003006:	f040 8162 	bne.w	80032ce <HAL_RCC_OscConfig+0xeca>
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003012:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800302e:	601a      	str	r2, [r3, #0]
  return result;
 8003030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003034:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003038:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003044:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	461a      	mov	r2, r3
 800304c:	2300      	movs	r3, #0
 800304e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fd fcfe 	bl	8000a50 <HAL_GetTick>
 8003054:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003058:	e00c      	b.n	8003074 <HAL_RCC_OscConfig+0xc70>
 800305a:	bf00      	nop
 800305c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003060:	f7fd fcf6 	bl	8000a50 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e1fd      	b.n	8003470 <HAL_RCC_OscConfig+0x106c>
 8003074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003078:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800307c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003080:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003086:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	fa93 f2a3 	rbit	r2, r3
 8003090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003094:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003098:	601a      	str	r2, [r3, #0]
  return result;
 800309a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80030a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a4:	fab3 f383 	clz	r3, r3
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d102      	bne.n	80030be <HAL_RCC_OscConfig+0xcba>
 80030b8:	4bb0      	ldr	r3, [pc, #704]	; (800337c <HAL_RCC_OscConfig+0xf78>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	e027      	b.n	800310e <HAL_RCC_OscConfig+0xd0a>
 80030be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80030c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	fa93 f2a3 	rbit	r2, r3
 80030da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030de:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80030ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	fa93 f2a3 	rbit	r2, r3
 8003100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003104:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	4b9c      	ldr	r3, [pc, #624]	; (800337c <HAL_RCC_OscConfig+0xf78>)
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003112:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003116:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800311a:	6011      	str	r1, [r2, #0]
 800311c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003120:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	fa92 f1a2 	rbit	r1, r2
 800312a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800312e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003132:	6011      	str	r1, [r2, #0]
  return result;
 8003134:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003138:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	fab2 f282 	clz	r2, r2
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	f042 0220 	orr.w	r2, r2, #32
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	f002 021f 	and.w	r2, r2, #31
 800314e:	2101      	movs	r1, #1
 8003150:	fa01 f202 	lsl.w	r2, r1, r2
 8003154:	4013      	ands	r3, r2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d182      	bne.n	8003060 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800315a:	4b88      	ldr	r3, [pc, #544]	; (800337c <HAL_RCC_OscConfig+0xf78>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003166:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800316e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003172:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	430b      	orrs	r3, r1
 800317c:	497f      	ldr	r1, [pc, #508]	; (800337c <HAL_RCC_OscConfig+0xf78>)
 800317e:	4313      	orrs	r3, r2
 8003180:	604b      	str	r3, [r1, #4]
 8003182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003186:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800318a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800318e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003194:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	fa93 f2a3 	rbit	r2, r3
 800319e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80031a6:	601a      	str	r2, [r3, #0]
  return result;
 80031a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ac:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80031b0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	461a      	mov	r2, r3
 80031c4:	2301      	movs	r3, #1
 80031c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7fd fc42 	bl	8000a50 <HAL_GetTick>
 80031cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031d0:	e009      	b.n	80031e6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d2:	f7fd fc3d 	bl	8000a50 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e144      	b.n	8003470 <HAL_RCC_OscConfig+0x106c>
 80031e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ea:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80031ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	fa93 f2a3 	rbit	r2, r3
 8003202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003206:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800320a:	601a      	str	r2, [r3, #0]
  return result;
 800320c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003210:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003214:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b01      	cmp	r3, #1
 8003228:	d102      	bne.n	8003230 <HAL_RCC_OscConfig+0xe2c>
 800322a:	4b54      	ldr	r3, [pc, #336]	; (800337c <HAL_RCC_OscConfig+0xf78>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	e027      	b.n	8003280 <HAL_RCC_OscConfig+0xe7c>
 8003230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003234:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003238:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800323c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003242:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	fa93 f2a3 	rbit	r2, r3
 800324c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003250:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800325e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003268:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	fa93 f2a3 	rbit	r2, r3
 8003272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003276:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	4b3f      	ldr	r3, [pc, #252]	; (800337c <HAL_RCC_OscConfig+0xf78>)
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003284:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003288:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800328c:	6011      	str	r1, [r2, #0]
 800328e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003292:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	fa92 f1a2 	rbit	r1, r2
 800329c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032a0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80032a4:	6011      	str	r1, [r2, #0]
  return result;
 80032a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032aa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	fab2 f282 	clz	r2, r2
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	f042 0220 	orr.w	r2, r2, #32
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	f002 021f 	and.w	r2, r2, #31
 80032c0:	2101      	movs	r1, #1
 80032c2:	fa01 f202 	lsl.w	r2, r1, r2
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d082      	beq.n	80031d2 <HAL_RCC_OscConfig+0xdce>
 80032cc:	e0cf      	b.n	800346e <HAL_RCC_OscConfig+0x106a>
 80032ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80032d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	fa93 f2a3 	rbit	r2, r3
 80032ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80032f2:	601a      	str	r2, [r3, #0]
  return result;
 80032f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80032fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fe:	fab3 f383 	clz	r3, r3
 8003302:	b2db      	uxtb	r3, r3
 8003304:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003308:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	461a      	mov	r2, r3
 8003310:	2300      	movs	r3, #0
 8003312:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7fd fb9c 	bl	8000a50 <HAL_GetTick>
 8003318:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331c:	e009      	b.n	8003332 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800331e:	f7fd fb97 	bl	8000a50 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e09e      	b.n	8003470 <HAL_RCC_OscConfig+0x106c>
 8003332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003336:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800333a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800333e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003344:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	fa93 f2a3 	rbit	r2, r3
 800334e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003352:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003356:	601a      	str	r2, [r3, #0]
  return result;
 8003358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003360:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d104      	bne.n	8003380 <HAL_RCC_OscConfig+0xf7c>
 8003376:	4b01      	ldr	r3, [pc, #4]	; (800337c <HAL_RCC_OscConfig+0xf78>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	e029      	b.n	80033d0 <HAL_RCC_OscConfig+0xfcc>
 800337c:	40021000 	.word	0x40021000
 8003380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003384:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003388:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800338c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003392:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	fa93 f2a3 	rbit	r2, r3
 800339c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033aa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80033ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	fa93 f2a3 	rbit	r2, r3
 80033c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	4b2b      	ldr	r3, [pc, #172]	; (800347c <HAL_RCC_OscConfig+0x1078>)
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033d4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80033d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033dc:	6011      	str	r1, [r2, #0]
 80033de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033e2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	fa92 f1a2 	rbit	r1, r2
 80033ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033f0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80033f4:	6011      	str	r1, [r2, #0]
  return result;
 80033f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033fa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	fab2 f282 	clz	r2, r2
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	f042 0220 	orr.w	r2, r2, #32
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	f002 021f 	and.w	r2, r2, #31
 8003410:	2101      	movs	r1, #1
 8003412:	fa01 f202 	lsl.w	r2, r1, r2
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d180      	bne.n	800331e <HAL_RCC_OscConfig+0xf1a>
 800341c:	e027      	b.n	800346e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800341e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003422:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e01e      	b.n	8003470 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003432:	4b12      	ldr	r3, [pc, #72]	; (800347c <HAL_RCC_OscConfig+0x1078>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800343a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800343e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003446:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	429a      	cmp	r2, r3
 8003450:	d10b      	bne.n	800346a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003452:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003456:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800345a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003466:	429a      	cmp	r2, r3
 8003468:	d001      	beq.n	800346e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000

08003480 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b09e      	sub	sp, #120	; 0x78
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e162      	b.n	800375e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003498:	4b90      	ldr	r3, [pc, #576]	; (80036dc <HAL_RCC_ClockConfig+0x25c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d910      	bls.n	80034c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b8d      	ldr	r3, [pc, #564]	; (80036dc <HAL_RCC_ClockConfig+0x25c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 0207 	bic.w	r2, r3, #7
 80034ae:	498b      	ldr	r1, [pc, #556]	; (80036dc <HAL_RCC_ClockConfig+0x25c>)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b6:	4b89      	ldr	r3, [pc, #548]	; (80036dc <HAL_RCC_ClockConfig+0x25c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e14a      	b.n	800375e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d4:	4b82      	ldr	r3, [pc, #520]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	497f      	ldr	r1, [pc, #508]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80dc 	beq.w	80036ac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d13c      	bne.n	8003576 <HAL_RCC_ClockConfig+0xf6>
 80034fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003500:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003504:	fa93 f3a3 	rbit	r3, r3
 8003508:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800350a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350c:	fab3 f383 	clz	r3, r3
 8003510:	b2db      	uxtb	r3, r3
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d102      	bne.n	8003526 <HAL_RCC_ClockConfig+0xa6>
 8003520:	4b6f      	ldr	r3, [pc, #444]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	e00f      	b.n	8003546 <HAL_RCC_ClockConfig+0xc6>
 8003526:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800352a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	667b      	str	r3, [r7, #100]	; 0x64
 8003534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003538:	663b      	str	r3, [r7, #96]	; 0x60
 800353a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003542:	4b67      	ldr	r3, [pc, #412]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800354a:	65ba      	str	r2, [r7, #88]	; 0x58
 800354c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800354e:	fa92 f2a2 	rbit	r2, r2
 8003552:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003554:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003556:	fab2 f282 	clz	r2, r2
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	f042 0220 	orr.w	r2, r2, #32
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	f002 021f 	and.w	r2, r2, #31
 8003566:	2101      	movs	r1, #1
 8003568:	fa01 f202 	lsl.w	r2, r1, r2
 800356c:	4013      	ands	r3, r2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d17b      	bne.n	800366a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e0f3      	b.n	800375e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d13c      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x178>
 800357e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003582:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003586:	fa93 f3a3 	rbit	r3, r3
 800358a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800358c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358e:	fab3 f383 	clz	r3, r3
 8003592:	b2db      	uxtb	r3, r3
 8003594:	095b      	lsrs	r3, r3, #5
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d102      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x128>
 80035a2:	4b4f      	ldr	r3, [pc, #316]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	e00f      	b.n	80035c8 <HAL_RCC_ClockConfig+0x148>
 80035a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	647b      	str	r3, [r7, #68]	; 0x44
 80035b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ba:	643b      	str	r3, [r7, #64]	; 0x40
 80035bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c4:	4b46      	ldr	r3, [pc, #280]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035cc:	63ba      	str	r2, [r7, #56]	; 0x38
 80035ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035d0:	fa92 f2a2 	rbit	r2, r2
 80035d4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80035d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035d8:	fab2 f282 	clz	r2, r2
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	f042 0220 	orr.w	r2, r2, #32
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	f002 021f 	and.w	r2, r2, #31
 80035e8:	2101      	movs	r1, #1
 80035ea:	fa01 f202 	lsl.w	r2, r1, r2
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d13a      	bne.n	800366a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0b2      	b.n	800375e <HAL_RCC_ClockConfig+0x2de>
 80035f8:	2302      	movs	r3, #2
 80035fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d102      	bne.n	8003620 <HAL_RCC_ClockConfig+0x1a0>
 800361a:	4b31      	ldr	r3, [pc, #196]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	e00d      	b.n	800363c <HAL_RCC_ClockConfig+0x1bc>
 8003620:	2302      	movs	r3, #2
 8003622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
 800362c:	2302      	movs	r3, #2
 800362e:	623b      	str	r3, [r7, #32]
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	fa93 f3a3 	rbit	r3, r3
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	4b29      	ldr	r3, [pc, #164]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	2202      	movs	r2, #2
 800363e:	61ba      	str	r2, [r7, #24]
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	fa92 f2a2 	rbit	r2, r2
 8003646:	617a      	str	r2, [r7, #20]
  return result;
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	fab2 f282 	clz	r2, r2
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	f042 0220 	orr.w	r2, r2, #32
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	f002 021f 	and.w	r2, r2, #31
 800365a:	2101      	movs	r1, #1
 800365c:	fa01 f202 	lsl.w	r2, r1, r2
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e079      	b.n	800375e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366a:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f023 0203 	bic.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	491a      	ldr	r1, [pc, #104]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 8003678:	4313      	orrs	r3, r2
 800367a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800367c:	f7fd f9e8 	bl	8000a50 <HAL_GetTick>
 8003680:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	e00a      	b.n	800369a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003684:	f7fd f9e4 	bl	8000a50 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e061      	b.n	800375e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 020c 	and.w	r2, r3, #12
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d1eb      	bne.n	8003684 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ac:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <HAL_RCC_ClockConfig+0x25c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d214      	bcs.n	80036e4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b08      	ldr	r3, [pc, #32]	; (80036dc <HAL_RCC_ClockConfig+0x25c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 0207 	bic.w	r2, r3, #7
 80036c2:	4906      	ldr	r1, [pc, #24]	; (80036dc <HAL_RCC_ClockConfig+0x25c>)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	4b04      	ldr	r3, [pc, #16]	; (80036dc <HAL_RCC_ClockConfig+0x25c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e040      	b.n	800375e <HAL_RCC_ClockConfig+0x2de>
 80036dc:	40022000 	.word	0x40022000
 80036e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <HAL_RCC_ClockConfig+0x2e8>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	491a      	ldr	r1, [pc, #104]	; (8003768 <HAL_RCC_ClockConfig+0x2e8>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800370e:	4b16      	ldr	r3, [pc, #88]	; (8003768 <HAL_RCC_ClockConfig+0x2e8>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4912      	ldr	r1, [pc, #72]	; (8003768 <HAL_RCC_ClockConfig+0x2e8>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003722:	f000 f829 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8003726:	4601      	mov	r1, r0
 8003728:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <HAL_RCC_ClockConfig+0x2e8>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003730:	22f0      	movs	r2, #240	; 0xf0
 8003732:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	fa92 f2a2 	rbit	r2, r2
 800373a:	60fa      	str	r2, [r7, #12]
  return result;
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	fab2 f282 	clz	r2, r2
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	40d3      	lsrs	r3, r2
 8003746:	4a09      	ldr	r2, [pc, #36]	; (800376c <HAL_RCC_ClockConfig+0x2ec>)
 8003748:	5cd3      	ldrb	r3, [r2, r3]
 800374a:	fa21 f303 	lsr.w	r3, r1, r3
 800374e:	4a08      	ldr	r2, [pc, #32]	; (8003770 <HAL_RCC_ClockConfig+0x2f0>)
 8003750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <HAL_RCC_ClockConfig+0x2f4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7fd f936 	bl	80009c8 <HAL_InitTick>
  
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3778      	adds	r7, #120	; 0x78
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	0800450c 	.word	0x0800450c
 8003770:	20000040 	.word	0x20000040
 8003774:	20000044 	.word	0x20000044

08003778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003778:	b480      	push	{r7}
 800377a:	b08b      	sub	sp, #44	; 0x2c
 800377c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	2300      	movs	r3, #0
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	2300      	movs	r3, #0
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003792:	4b29      	ldr	r3, [pc, #164]	; (8003838 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d002      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x30>
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d003      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0x36>
 80037a6:	e03c      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037a8:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RCC_GetSysClockFreq+0xc4>)
 80037aa:	623b      	str	r3, [r7, #32]
      break;
 80037ac:	e03c      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80037b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80037b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	fa92 f2a2 	rbit	r2, r2
 80037c0:	607a      	str	r2, [r7, #4]
  return result;
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	fab2 f282 	clz	r2, r2
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	40d3      	lsrs	r3, r2
 80037cc:	4a1c      	ldr	r2, [pc, #112]	; (8003840 <HAL_RCC_GetSysClockFreq+0xc8>)
 80037ce:	5cd3      	ldrb	r3, [r2, r3]
 80037d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80037d2:	4b19      	ldr	r3, [pc, #100]	; (8003838 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	220f      	movs	r2, #15
 80037dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	fa92 f2a2 	rbit	r2, r2
 80037e4:	60fa      	str	r2, [r7, #12]
  return result;
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	fab2 f282 	clz	r2, r2
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	40d3      	lsrs	r3, r2
 80037f0:	4a14      	ldr	r2, [pc, #80]	; (8003844 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037f2:	5cd3      	ldrb	r3, [r2, r3]
 80037f4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003800:	4a0e      	ldr	r2, [pc, #56]	; (800383c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	fbb2 f2f3 	udiv	r2, r2, r3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
 8003810:	e004      	b.n	800381c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	4a0c      	ldr	r2, [pc, #48]	; (8003848 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	623b      	str	r3, [r7, #32]
      break;
 8003820:	e002      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003824:	623b      	str	r3, [r7, #32]
      break;
 8003826:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003828:	6a3b      	ldr	r3, [r7, #32]
}
 800382a:	4618      	mov	r0, r3
 800382c:	372c      	adds	r7, #44	; 0x2c
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000
 800383c:	007a1200 	.word	0x007a1200
 8003840:	0800451c 	.word	0x0800451c
 8003844:	0800452c 	.word	0x0800452c
 8003848:	003d0900 	.word	0x003d0900

0800384c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b092      	sub	sp, #72	; 0x48
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800385c:	2300      	movs	r3, #0
 800385e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80d4 	beq.w	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003870:	4b4e      	ldr	r3, [pc, #312]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10e      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387c:	4b4b      	ldr	r3, [pc, #300]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	4a4a      	ldr	r2, [pc, #296]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003886:	61d3      	str	r3, [r2, #28]
 8003888:	4b48      	ldr	r3, [pc, #288]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003894:	2301      	movs	r3, #1
 8003896:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389a:	4b45      	ldr	r3, [pc, #276]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d118      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038a6:	4b42      	ldr	r3, [pc, #264]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a41      	ldr	r2, [pc, #260]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b2:	f7fd f8cd 	bl	8000a50 <HAL_GetTick>
 80038b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b8:	e008      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ba:	f7fd f8c9 	bl	8000a50 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b64      	cmp	r3, #100	; 0x64
 80038c6:	d901      	bls.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e169      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038cc:	4b38      	ldr	r3, [pc, #224]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038d8:	4b34      	ldr	r3, [pc, #208]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8084 	beq.w	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d07c      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038f8:	4b2c      	ldr	r3, [pc, #176]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003902:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003906:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	fa93 f3a3 	rbit	r3, r3
 800390e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003912:	fab3 f383 	clz	r3, r3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	461a      	mov	r2, r3
 800391a:	4b26      	ldr	r3, [pc, #152]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	461a      	mov	r2, r3
 8003922:	2301      	movs	r3, #1
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800392a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392e:	fa93 f3a3 	rbit	r3, r3
 8003932:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	461a      	mov	r2, r3
 800393e:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	461a      	mov	r2, r3
 8003946:	2300      	movs	r3, #0
 8003948:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800394a:	4a18      	ldr	r2, [pc, #96]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d04b      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395a:	f7fd f879 	bl	8000a50 <HAL_GetTick>
 800395e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003960:	e00a      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003962:	f7fd f875 	bl	8000a50 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003970:	4293      	cmp	r3, r2
 8003972:	d901      	bls.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e113      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003978:	2302      	movs	r3, #2
 800397a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397e:	fa93 f3a3 	rbit	r3, r3
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
 8003984:	2302      	movs	r3, #2
 8003986:	623b      	str	r3, [r7, #32]
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	fa93 f3a3 	rbit	r3, r3
 800398e:	61fb      	str	r3, [r7, #28]
  return result;
 8003990:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003992:	fab3 f383 	clz	r3, r3
 8003996:	b2db      	uxtb	r3, r3
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f043 0302 	orr.w	r3, r3, #2
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d108      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80039a6:	4b01      	ldr	r3, [pc, #4]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	e00d      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40007000 	.word	0x40007000
 80039b4:	10908100 	.word	0x10908100
 80039b8:	2302      	movs	r3, #2
 80039ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	4b78      	ldr	r3, [pc, #480]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	2202      	movs	r2, #2
 80039ca:	613a      	str	r2, [r7, #16]
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	fa92 f2a2 	rbit	r2, r2
 80039d2:	60fa      	str	r2, [r7, #12]
  return result;
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	fab2 f282 	clz	r2, r2
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	f002 021f 	and.w	r2, r2, #31
 80039e6:	2101      	movs	r1, #1
 80039e8:	fa01 f202 	lsl.w	r2, r1, r2
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0b7      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039f2:	4b6d      	ldr	r3, [pc, #436]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	496a      	ldr	r1, [pc, #424]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d105      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a0c:	4b66      	ldr	r3, [pc, #408]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	4a65      	ldr	r2, [pc, #404]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a24:	4b60      	ldr	r3, [pc, #384]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	f023 0203 	bic.w	r2, r3, #3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	495d      	ldr	r1, [pc, #372]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d008      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a42:	4b59      	ldr	r3, [pc, #356]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	4956      	ldr	r1, [pc, #344]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a60:	4b51      	ldr	r3, [pc, #324]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	494e      	ldr	r1, [pc, #312]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d008      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	f023 0210 	bic.w	r2, r3, #16
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	4947      	ldr	r1, [pc, #284]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a9c:	4b42      	ldr	r3, [pc, #264]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	493f      	ldr	r1, [pc, #252]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aba:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	f023 0220 	bic.w	r2, r3, #32
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	4938      	ldr	r1, [pc, #224]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ad8:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	4930      	ldr	r1, [pc, #192]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d008      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003af6:	4b2c      	ldr	r3, [pc, #176]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	4929      	ldr	r1, [pc, #164]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b14:	4b24      	ldr	r3, [pc, #144]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	4921      	ldr	r1, [pc, #132]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d008      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b32:	4b1d      	ldr	r3, [pc, #116]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	491a      	ldr	r1, [pc, #104]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003b50:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	4912      	ldr	r1, [pc, #72]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d008      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	490b      	ldr	r1, [pc, #44]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	4903      	ldr	r1, [pc, #12]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3748      	adds	r7, #72	; 0x48
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40021000 	.word	0x40021000

08003bac <__errno>:
 8003bac:	4b01      	ldr	r3, [pc, #4]	; (8003bb4 <__errno+0x8>)
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	2000004c 	.word	0x2000004c

08003bb8 <__libc_init_array>:
 8003bb8:	b570      	push	{r4, r5, r6, lr}
 8003bba:	4d0d      	ldr	r5, [pc, #52]	; (8003bf0 <__libc_init_array+0x38>)
 8003bbc:	4c0d      	ldr	r4, [pc, #52]	; (8003bf4 <__libc_init_array+0x3c>)
 8003bbe:	1b64      	subs	r4, r4, r5
 8003bc0:	10a4      	asrs	r4, r4, #2
 8003bc2:	2600      	movs	r6, #0
 8003bc4:	42a6      	cmp	r6, r4
 8003bc6:	d109      	bne.n	8003bdc <__libc_init_array+0x24>
 8003bc8:	4d0b      	ldr	r5, [pc, #44]	; (8003bf8 <__libc_init_array+0x40>)
 8003bca:	4c0c      	ldr	r4, [pc, #48]	; (8003bfc <__libc_init_array+0x44>)
 8003bcc:	f000 fc8e 	bl	80044ec <_init>
 8003bd0:	1b64      	subs	r4, r4, r5
 8003bd2:	10a4      	asrs	r4, r4, #2
 8003bd4:	2600      	movs	r6, #0
 8003bd6:	42a6      	cmp	r6, r4
 8003bd8:	d105      	bne.n	8003be6 <__libc_init_array+0x2e>
 8003bda:	bd70      	pop	{r4, r5, r6, pc}
 8003bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be0:	4798      	blx	r3
 8003be2:	3601      	adds	r6, #1
 8003be4:	e7ee      	b.n	8003bc4 <__libc_init_array+0xc>
 8003be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bea:	4798      	blx	r3
 8003bec:	3601      	adds	r6, #1
 8003bee:	e7f2      	b.n	8003bd6 <__libc_init_array+0x1e>
 8003bf0:	08004570 	.word	0x08004570
 8003bf4:	08004570 	.word	0x08004570
 8003bf8:	08004570 	.word	0x08004570
 8003bfc:	08004574 	.word	0x08004574

08003c00 <memset>:
 8003c00:	4402      	add	r2, r0
 8003c02:	4603      	mov	r3, r0
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d100      	bne.n	8003c0a <memset+0xa>
 8003c08:	4770      	bx	lr
 8003c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c0e:	e7f9      	b.n	8003c04 <memset+0x4>

08003c10 <siprintf>:
 8003c10:	b40e      	push	{r1, r2, r3}
 8003c12:	b500      	push	{lr}
 8003c14:	b09c      	sub	sp, #112	; 0x70
 8003c16:	ab1d      	add	r3, sp, #116	; 0x74
 8003c18:	9002      	str	r0, [sp, #8]
 8003c1a:	9006      	str	r0, [sp, #24]
 8003c1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c20:	4809      	ldr	r0, [pc, #36]	; (8003c48 <siprintf+0x38>)
 8003c22:	9107      	str	r1, [sp, #28]
 8003c24:	9104      	str	r1, [sp, #16]
 8003c26:	4909      	ldr	r1, [pc, #36]	; (8003c4c <siprintf+0x3c>)
 8003c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c2c:	9105      	str	r1, [sp, #20]
 8003c2e:	6800      	ldr	r0, [r0, #0]
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	a902      	add	r1, sp, #8
 8003c34:	f000 f868 	bl	8003d08 <_svfiprintf_r>
 8003c38:	9b02      	ldr	r3, [sp, #8]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	701a      	strb	r2, [r3, #0]
 8003c3e:	b01c      	add	sp, #112	; 0x70
 8003c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c44:	b003      	add	sp, #12
 8003c46:	4770      	bx	lr
 8003c48:	2000004c 	.word	0x2000004c
 8003c4c:	ffff0208 	.word	0xffff0208

08003c50 <__ssputs_r>:
 8003c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c54:	688e      	ldr	r6, [r1, #8]
 8003c56:	429e      	cmp	r6, r3
 8003c58:	4682      	mov	sl, r0
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	4690      	mov	r8, r2
 8003c5e:	461f      	mov	r7, r3
 8003c60:	d838      	bhi.n	8003cd4 <__ssputs_r+0x84>
 8003c62:	898a      	ldrh	r2, [r1, #12]
 8003c64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c68:	d032      	beq.n	8003cd0 <__ssputs_r+0x80>
 8003c6a:	6825      	ldr	r5, [r4, #0]
 8003c6c:	6909      	ldr	r1, [r1, #16]
 8003c6e:	eba5 0901 	sub.w	r9, r5, r1
 8003c72:	6965      	ldr	r5, [r4, #20]
 8003c74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	444b      	add	r3, r9
 8003c80:	106d      	asrs	r5, r5, #1
 8003c82:	429d      	cmp	r5, r3
 8003c84:	bf38      	it	cc
 8003c86:	461d      	movcc	r5, r3
 8003c88:	0553      	lsls	r3, r2, #21
 8003c8a:	d531      	bpl.n	8003cf0 <__ssputs_r+0xa0>
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	f000 fb63 	bl	8004358 <_malloc_r>
 8003c92:	4606      	mov	r6, r0
 8003c94:	b950      	cbnz	r0, 8003cac <__ssputs_r+0x5c>
 8003c96:	230c      	movs	r3, #12
 8003c98:	f8ca 3000 	str.w	r3, [sl]
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca2:	81a3      	strh	r3, [r4, #12]
 8003ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cac:	6921      	ldr	r1, [r4, #16]
 8003cae:	464a      	mov	r2, r9
 8003cb0:	f000 fabe 	bl	8004230 <memcpy>
 8003cb4:	89a3      	ldrh	r3, [r4, #12]
 8003cb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cbe:	81a3      	strh	r3, [r4, #12]
 8003cc0:	6126      	str	r6, [r4, #16]
 8003cc2:	6165      	str	r5, [r4, #20]
 8003cc4:	444e      	add	r6, r9
 8003cc6:	eba5 0509 	sub.w	r5, r5, r9
 8003cca:	6026      	str	r6, [r4, #0]
 8003ccc:	60a5      	str	r5, [r4, #8]
 8003cce:	463e      	mov	r6, r7
 8003cd0:	42be      	cmp	r6, r7
 8003cd2:	d900      	bls.n	8003cd6 <__ssputs_r+0x86>
 8003cd4:	463e      	mov	r6, r7
 8003cd6:	6820      	ldr	r0, [r4, #0]
 8003cd8:	4632      	mov	r2, r6
 8003cda:	4641      	mov	r1, r8
 8003cdc:	f000 fab6 	bl	800424c <memmove>
 8003ce0:	68a3      	ldr	r3, [r4, #8]
 8003ce2:	1b9b      	subs	r3, r3, r6
 8003ce4:	60a3      	str	r3, [r4, #8]
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	4433      	add	r3, r6
 8003cea:	6023      	str	r3, [r4, #0]
 8003cec:	2000      	movs	r0, #0
 8003cee:	e7db      	b.n	8003ca8 <__ssputs_r+0x58>
 8003cf0:	462a      	mov	r2, r5
 8003cf2:	f000 fba5 	bl	8004440 <_realloc_r>
 8003cf6:	4606      	mov	r6, r0
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d1e1      	bne.n	8003cc0 <__ssputs_r+0x70>
 8003cfc:	6921      	ldr	r1, [r4, #16]
 8003cfe:	4650      	mov	r0, sl
 8003d00:	f000 fabe 	bl	8004280 <_free_r>
 8003d04:	e7c7      	b.n	8003c96 <__ssputs_r+0x46>
	...

08003d08 <_svfiprintf_r>:
 8003d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d0c:	4698      	mov	r8, r3
 8003d0e:	898b      	ldrh	r3, [r1, #12]
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	b09d      	sub	sp, #116	; 0x74
 8003d14:	4607      	mov	r7, r0
 8003d16:	460d      	mov	r5, r1
 8003d18:	4614      	mov	r4, r2
 8003d1a:	d50e      	bpl.n	8003d3a <_svfiprintf_r+0x32>
 8003d1c:	690b      	ldr	r3, [r1, #16]
 8003d1e:	b963      	cbnz	r3, 8003d3a <_svfiprintf_r+0x32>
 8003d20:	2140      	movs	r1, #64	; 0x40
 8003d22:	f000 fb19 	bl	8004358 <_malloc_r>
 8003d26:	6028      	str	r0, [r5, #0]
 8003d28:	6128      	str	r0, [r5, #16]
 8003d2a:	b920      	cbnz	r0, 8003d36 <_svfiprintf_r+0x2e>
 8003d2c:	230c      	movs	r3, #12
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d34:	e0d1      	b.n	8003eda <_svfiprintf_r+0x1d2>
 8003d36:	2340      	movs	r3, #64	; 0x40
 8003d38:	616b      	str	r3, [r5, #20]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d3e:	2320      	movs	r3, #32
 8003d40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d44:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d48:	2330      	movs	r3, #48	; 0x30
 8003d4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003ef4 <_svfiprintf_r+0x1ec>
 8003d4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d52:	f04f 0901 	mov.w	r9, #1
 8003d56:	4623      	mov	r3, r4
 8003d58:	469a      	mov	sl, r3
 8003d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d5e:	b10a      	cbz	r2, 8003d64 <_svfiprintf_r+0x5c>
 8003d60:	2a25      	cmp	r2, #37	; 0x25
 8003d62:	d1f9      	bne.n	8003d58 <_svfiprintf_r+0x50>
 8003d64:	ebba 0b04 	subs.w	fp, sl, r4
 8003d68:	d00b      	beq.n	8003d82 <_svfiprintf_r+0x7a>
 8003d6a:	465b      	mov	r3, fp
 8003d6c:	4622      	mov	r2, r4
 8003d6e:	4629      	mov	r1, r5
 8003d70:	4638      	mov	r0, r7
 8003d72:	f7ff ff6d 	bl	8003c50 <__ssputs_r>
 8003d76:	3001      	adds	r0, #1
 8003d78:	f000 80aa 	beq.w	8003ed0 <_svfiprintf_r+0x1c8>
 8003d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d7e:	445a      	add	r2, fp
 8003d80:	9209      	str	r2, [sp, #36]	; 0x24
 8003d82:	f89a 3000 	ldrb.w	r3, [sl]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 80a2 	beq.w	8003ed0 <_svfiprintf_r+0x1c8>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d96:	f10a 0a01 	add.w	sl, sl, #1
 8003d9a:	9304      	str	r3, [sp, #16]
 8003d9c:	9307      	str	r3, [sp, #28]
 8003d9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003da2:	931a      	str	r3, [sp, #104]	; 0x68
 8003da4:	4654      	mov	r4, sl
 8003da6:	2205      	movs	r2, #5
 8003da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dac:	4851      	ldr	r0, [pc, #324]	; (8003ef4 <_svfiprintf_r+0x1ec>)
 8003dae:	f7fc fa0f 	bl	80001d0 <memchr>
 8003db2:	9a04      	ldr	r2, [sp, #16]
 8003db4:	b9d8      	cbnz	r0, 8003dee <_svfiprintf_r+0xe6>
 8003db6:	06d0      	lsls	r0, r2, #27
 8003db8:	bf44      	itt	mi
 8003dba:	2320      	movmi	r3, #32
 8003dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dc0:	0711      	lsls	r1, r2, #28
 8003dc2:	bf44      	itt	mi
 8003dc4:	232b      	movmi	r3, #43	; 0x2b
 8003dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dca:	f89a 3000 	ldrb.w	r3, [sl]
 8003dce:	2b2a      	cmp	r3, #42	; 0x2a
 8003dd0:	d015      	beq.n	8003dfe <_svfiprintf_r+0xf6>
 8003dd2:	9a07      	ldr	r2, [sp, #28]
 8003dd4:	4654      	mov	r4, sl
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	f04f 0c0a 	mov.w	ip, #10
 8003ddc:	4621      	mov	r1, r4
 8003dde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003de2:	3b30      	subs	r3, #48	; 0x30
 8003de4:	2b09      	cmp	r3, #9
 8003de6:	d94e      	bls.n	8003e86 <_svfiprintf_r+0x17e>
 8003de8:	b1b0      	cbz	r0, 8003e18 <_svfiprintf_r+0x110>
 8003dea:	9207      	str	r2, [sp, #28]
 8003dec:	e014      	b.n	8003e18 <_svfiprintf_r+0x110>
 8003dee:	eba0 0308 	sub.w	r3, r0, r8
 8003df2:	fa09 f303 	lsl.w	r3, r9, r3
 8003df6:	4313      	orrs	r3, r2
 8003df8:	9304      	str	r3, [sp, #16]
 8003dfa:	46a2      	mov	sl, r4
 8003dfc:	e7d2      	b.n	8003da4 <_svfiprintf_r+0x9c>
 8003dfe:	9b03      	ldr	r3, [sp, #12]
 8003e00:	1d19      	adds	r1, r3, #4
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	9103      	str	r1, [sp, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bfbb      	ittet	lt
 8003e0a:	425b      	neglt	r3, r3
 8003e0c:	f042 0202 	orrlt.w	r2, r2, #2
 8003e10:	9307      	strge	r3, [sp, #28]
 8003e12:	9307      	strlt	r3, [sp, #28]
 8003e14:	bfb8      	it	lt
 8003e16:	9204      	strlt	r2, [sp, #16]
 8003e18:	7823      	ldrb	r3, [r4, #0]
 8003e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e1c:	d10c      	bne.n	8003e38 <_svfiprintf_r+0x130>
 8003e1e:	7863      	ldrb	r3, [r4, #1]
 8003e20:	2b2a      	cmp	r3, #42	; 0x2a
 8003e22:	d135      	bne.n	8003e90 <_svfiprintf_r+0x188>
 8003e24:	9b03      	ldr	r3, [sp, #12]
 8003e26:	1d1a      	adds	r2, r3, #4
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	9203      	str	r2, [sp, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bfb8      	it	lt
 8003e30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003e34:	3402      	adds	r4, #2
 8003e36:	9305      	str	r3, [sp, #20]
 8003e38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f04 <_svfiprintf_r+0x1fc>
 8003e3c:	7821      	ldrb	r1, [r4, #0]
 8003e3e:	2203      	movs	r2, #3
 8003e40:	4650      	mov	r0, sl
 8003e42:	f7fc f9c5 	bl	80001d0 <memchr>
 8003e46:	b140      	cbz	r0, 8003e5a <_svfiprintf_r+0x152>
 8003e48:	2340      	movs	r3, #64	; 0x40
 8003e4a:	eba0 000a 	sub.w	r0, r0, sl
 8003e4e:	fa03 f000 	lsl.w	r0, r3, r0
 8003e52:	9b04      	ldr	r3, [sp, #16]
 8003e54:	4303      	orrs	r3, r0
 8003e56:	3401      	adds	r4, #1
 8003e58:	9304      	str	r3, [sp, #16]
 8003e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e5e:	4826      	ldr	r0, [pc, #152]	; (8003ef8 <_svfiprintf_r+0x1f0>)
 8003e60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e64:	2206      	movs	r2, #6
 8003e66:	f7fc f9b3 	bl	80001d0 <memchr>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d038      	beq.n	8003ee0 <_svfiprintf_r+0x1d8>
 8003e6e:	4b23      	ldr	r3, [pc, #140]	; (8003efc <_svfiprintf_r+0x1f4>)
 8003e70:	bb1b      	cbnz	r3, 8003eba <_svfiprintf_r+0x1b2>
 8003e72:	9b03      	ldr	r3, [sp, #12]
 8003e74:	3307      	adds	r3, #7
 8003e76:	f023 0307 	bic.w	r3, r3, #7
 8003e7a:	3308      	adds	r3, #8
 8003e7c:	9303      	str	r3, [sp, #12]
 8003e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e80:	4433      	add	r3, r6
 8003e82:	9309      	str	r3, [sp, #36]	; 0x24
 8003e84:	e767      	b.n	8003d56 <_svfiprintf_r+0x4e>
 8003e86:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	2001      	movs	r0, #1
 8003e8e:	e7a5      	b.n	8003ddc <_svfiprintf_r+0xd4>
 8003e90:	2300      	movs	r3, #0
 8003e92:	3401      	adds	r4, #1
 8003e94:	9305      	str	r3, [sp, #20]
 8003e96:	4619      	mov	r1, r3
 8003e98:	f04f 0c0a 	mov.w	ip, #10
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ea2:	3a30      	subs	r2, #48	; 0x30
 8003ea4:	2a09      	cmp	r2, #9
 8003ea6:	d903      	bls.n	8003eb0 <_svfiprintf_r+0x1a8>
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0c5      	beq.n	8003e38 <_svfiprintf_r+0x130>
 8003eac:	9105      	str	r1, [sp, #20]
 8003eae:	e7c3      	b.n	8003e38 <_svfiprintf_r+0x130>
 8003eb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e7f0      	b.n	8003e9c <_svfiprintf_r+0x194>
 8003eba:	ab03      	add	r3, sp, #12
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	462a      	mov	r2, r5
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <_svfiprintf_r+0x1f8>)
 8003ec2:	a904      	add	r1, sp, #16
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	f3af 8000 	nop.w
 8003eca:	1c42      	adds	r2, r0, #1
 8003ecc:	4606      	mov	r6, r0
 8003ece:	d1d6      	bne.n	8003e7e <_svfiprintf_r+0x176>
 8003ed0:	89ab      	ldrh	r3, [r5, #12]
 8003ed2:	065b      	lsls	r3, r3, #25
 8003ed4:	f53f af2c 	bmi.w	8003d30 <_svfiprintf_r+0x28>
 8003ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eda:	b01d      	add	sp, #116	; 0x74
 8003edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ee0:	ab03      	add	r3, sp, #12
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	462a      	mov	r2, r5
 8003ee6:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <_svfiprintf_r+0x1f8>)
 8003ee8:	a904      	add	r1, sp, #16
 8003eea:	4638      	mov	r0, r7
 8003eec:	f000 f87a 	bl	8003fe4 <_printf_i>
 8003ef0:	e7eb      	b.n	8003eca <_svfiprintf_r+0x1c2>
 8003ef2:	bf00      	nop
 8003ef4:	0800453c 	.word	0x0800453c
 8003ef8:	08004546 	.word	0x08004546
 8003efc:	00000000 	.word	0x00000000
 8003f00:	08003c51 	.word	0x08003c51
 8003f04:	08004542 	.word	0x08004542

08003f08 <_printf_common>:
 8003f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f0c:	4616      	mov	r6, r2
 8003f0e:	4699      	mov	r9, r3
 8003f10:	688a      	ldr	r2, [r1, #8]
 8003f12:	690b      	ldr	r3, [r1, #16]
 8003f14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	bfb8      	it	lt
 8003f1c:	4613      	movlt	r3, r2
 8003f1e:	6033      	str	r3, [r6, #0]
 8003f20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f24:	4607      	mov	r7, r0
 8003f26:	460c      	mov	r4, r1
 8003f28:	b10a      	cbz	r2, 8003f2e <_printf_common+0x26>
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	6033      	str	r3, [r6, #0]
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	0699      	lsls	r1, r3, #26
 8003f32:	bf42      	ittt	mi
 8003f34:	6833      	ldrmi	r3, [r6, #0]
 8003f36:	3302      	addmi	r3, #2
 8003f38:	6033      	strmi	r3, [r6, #0]
 8003f3a:	6825      	ldr	r5, [r4, #0]
 8003f3c:	f015 0506 	ands.w	r5, r5, #6
 8003f40:	d106      	bne.n	8003f50 <_printf_common+0x48>
 8003f42:	f104 0a19 	add.w	sl, r4, #25
 8003f46:	68e3      	ldr	r3, [r4, #12]
 8003f48:	6832      	ldr	r2, [r6, #0]
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	42ab      	cmp	r3, r5
 8003f4e:	dc26      	bgt.n	8003f9e <_printf_common+0x96>
 8003f50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f54:	1e13      	subs	r3, r2, #0
 8003f56:	6822      	ldr	r2, [r4, #0]
 8003f58:	bf18      	it	ne
 8003f5a:	2301      	movne	r3, #1
 8003f5c:	0692      	lsls	r2, r2, #26
 8003f5e:	d42b      	bmi.n	8003fb8 <_printf_common+0xb0>
 8003f60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f64:	4649      	mov	r1, r9
 8003f66:	4638      	mov	r0, r7
 8003f68:	47c0      	blx	r8
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	d01e      	beq.n	8003fac <_printf_common+0xa4>
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	68e5      	ldr	r5, [r4, #12]
 8003f72:	6832      	ldr	r2, [r6, #0]
 8003f74:	f003 0306 	and.w	r3, r3, #6
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	bf08      	it	eq
 8003f7c:	1aad      	subeq	r5, r5, r2
 8003f7e:	68a3      	ldr	r3, [r4, #8]
 8003f80:	6922      	ldr	r2, [r4, #16]
 8003f82:	bf0c      	ite	eq
 8003f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f88:	2500      	movne	r5, #0
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	bfc4      	itt	gt
 8003f8e:	1a9b      	subgt	r3, r3, r2
 8003f90:	18ed      	addgt	r5, r5, r3
 8003f92:	2600      	movs	r6, #0
 8003f94:	341a      	adds	r4, #26
 8003f96:	42b5      	cmp	r5, r6
 8003f98:	d11a      	bne.n	8003fd0 <_printf_common+0xc8>
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	e008      	b.n	8003fb0 <_printf_common+0xa8>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	4652      	mov	r2, sl
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	4638      	mov	r0, r7
 8003fa6:	47c0      	blx	r8
 8003fa8:	3001      	adds	r0, #1
 8003faa:	d103      	bne.n	8003fb4 <_printf_common+0xac>
 8003fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb4:	3501      	adds	r5, #1
 8003fb6:	e7c6      	b.n	8003f46 <_printf_common+0x3e>
 8003fb8:	18e1      	adds	r1, r4, r3
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	2030      	movs	r0, #48	; 0x30
 8003fbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fc2:	4422      	add	r2, r4
 8003fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fcc:	3302      	adds	r3, #2
 8003fce:	e7c7      	b.n	8003f60 <_printf_common+0x58>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	4649      	mov	r1, r9
 8003fd6:	4638      	mov	r0, r7
 8003fd8:	47c0      	blx	r8
 8003fda:	3001      	adds	r0, #1
 8003fdc:	d0e6      	beq.n	8003fac <_printf_common+0xa4>
 8003fde:	3601      	adds	r6, #1
 8003fe0:	e7d9      	b.n	8003f96 <_printf_common+0x8e>
	...

08003fe4 <_printf_i>:
 8003fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe8:	7e0f      	ldrb	r7, [r1, #24]
 8003fea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fec:	2f78      	cmp	r7, #120	; 0x78
 8003fee:	4691      	mov	r9, r2
 8003ff0:	4680      	mov	r8, r0
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	469a      	mov	sl, r3
 8003ff6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ffa:	d807      	bhi.n	800400c <_printf_i+0x28>
 8003ffc:	2f62      	cmp	r7, #98	; 0x62
 8003ffe:	d80a      	bhi.n	8004016 <_printf_i+0x32>
 8004000:	2f00      	cmp	r7, #0
 8004002:	f000 80d8 	beq.w	80041b6 <_printf_i+0x1d2>
 8004006:	2f58      	cmp	r7, #88	; 0x58
 8004008:	f000 80a3 	beq.w	8004152 <_printf_i+0x16e>
 800400c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004014:	e03a      	b.n	800408c <_printf_i+0xa8>
 8004016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800401a:	2b15      	cmp	r3, #21
 800401c:	d8f6      	bhi.n	800400c <_printf_i+0x28>
 800401e:	a101      	add	r1, pc, #4	; (adr r1, 8004024 <_printf_i+0x40>)
 8004020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004024:	0800407d 	.word	0x0800407d
 8004028:	08004091 	.word	0x08004091
 800402c:	0800400d 	.word	0x0800400d
 8004030:	0800400d 	.word	0x0800400d
 8004034:	0800400d 	.word	0x0800400d
 8004038:	0800400d 	.word	0x0800400d
 800403c:	08004091 	.word	0x08004091
 8004040:	0800400d 	.word	0x0800400d
 8004044:	0800400d 	.word	0x0800400d
 8004048:	0800400d 	.word	0x0800400d
 800404c:	0800400d 	.word	0x0800400d
 8004050:	0800419d 	.word	0x0800419d
 8004054:	080040c1 	.word	0x080040c1
 8004058:	0800417f 	.word	0x0800417f
 800405c:	0800400d 	.word	0x0800400d
 8004060:	0800400d 	.word	0x0800400d
 8004064:	080041bf 	.word	0x080041bf
 8004068:	0800400d 	.word	0x0800400d
 800406c:	080040c1 	.word	0x080040c1
 8004070:	0800400d 	.word	0x0800400d
 8004074:	0800400d 	.word	0x0800400d
 8004078:	08004187 	.word	0x08004187
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	1d1a      	adds	r2, r3, #4
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	602a      	str	r2, [r5, #0]
 8004084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800408c:	2301      	movs	r3, #1
 800408e:	e0a3      	b.n	80041d8 <_printf_i+0x1f4>
 8004090:	6820      	ldr	r0, [r4, #0]
 8004092:	6829      	ldr	r1, [r5, #0]
 8004094:	0606      	lsls	r6, r0, #24
 8004096:	f101 0304 	add.w	r3, r1, #4
 800409a:	d50a      	bpl.n	80040b2 <_printf_i+0xce>
 800409c:	680e      	ldr	r6, [r1, #0]
 800409e:	602b      	str	r3, [r5, #0]
 80040a0:	2e00      	cmp	r6, #0
 80040a2:	da03      	bge.n	80040ac <_printf_i+0xc8>
 80040a4:	232d      	movs	r3, #45	; 0x2d
 80040a6:	4276      	negs	r6, r6
 80040a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ac:	485e      	ldr	r0, [pc, #376]	; (8004228 <_printf_i+0x244>)
 80040ae:	230a      	movs	r3, #10
 80040b0:	e019      	b.n	80040e6 <_printf_i+0x102>
 80040b2:	680e      	ldr	r6, [r1, #0]
 80040b4:	602b      	str	r3, [r5, #0]
 80040b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040ba:	bf18      	it	ne
 80040bc:	b236      	sxthne	r6, r6
 80040be:	e7ef      	b.n	80040a0 <_printf_i+0xbc>
 80040c0:	682b      	ldr	r3, [r5, #0]
 80040c2:	6820      	ldr	r0, [r4, #0]
 80040c4:	1d19      	adds	r1, r3, #4
 80040c6:	6029      	str	r1, [r5, #0]
 80040c8:	0601      	lsls	r1, r0, #24
 80040ca:	d501      	bpl.n	80040d0 <_printf_i+0xec>
 80040cc:	681e      	ldr	r6, [r3, #0]
 80040ce:	e002      	b.n	80040d6 <_printf_i+0xf2>
 80040d0:	0646      	lsls	r6, r0, #25
 80040d2:	d5fb      	bpl.n	80040cc <_printf_i+0xe8>
 80040d4:	881e      	ldrh	r6, [r3, #0]
 80040d6:	4854      	ldr	r0, [pc, #336]	; (8004228 <_printf_i+0x244>)
 80040d8:	2f6f      	cmp	r7, #111	; 0x6f
 80040da:	bf0c      	ite	eq
 80040dc:	2308      	moveq	r3, #8
 80040de:	230a      	movne	r3, #10
 80040e0:	2100      	movs	r1, #0
 80040e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040e6:	6865      	ldr	r5, [r4, #4]
 80040e8:	60a5      	str	r5, [r4, #8]
 80040ea:	2d00      	cmp	r5, #0
 80040ec:	bfa2      	ittt	ge
 80040ee:	6821      	ldrge	r1, [r4, #0]
 80040f0:	f021 0104 	bicge.w	r1, r1, #4
 80040f4:	6021      	strge	r1, [r4, #0]
 80040f6:	b90e      	cbnz	r6, 80040fc <_printf_i+0x118>
 80040f8:	2d00      	cmp	r5, #0
 80040fa:	d04d      	beq.n	8004198 <_printf_i+0x1b4>
 80040fc:	4615      	mov	r5, r2
 80040fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004102:	fb03 6711 	mls	r7, r3, r1, r6
 8004106:	5dc7      	ldrb	r7, [r0, r7]
 8004108:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800410c:	4637      	mov	r7, r6
 800410e:	42bb      	cmp	r3, r7
 8004110:	460e      	mov	r6, r1
 8004112:	d9f4      	bls.n	80040fe <_printf_i+0x11a>
 8004114:	2b08      	cmp	r3, #8
 8004116:	d10b      	bne.n	8004130 <_printf_i+0x14c>
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	07de      	lsls	r6, r3, #31
 800411c:	d508      	bpl.n	8004130 <_printf_i+0x14c>
 800411e:	6923      	ldr	r3, [r4, #16]
 8004120:	6861      	ldr	r1, [r4, #4]
 8004122:	4299      	cmp	r1, r3
 8004124:	bfde      	ittt	le
 8004126:	2330      	movle	r3, #48	; 0x30
 8004128:	f805 3c01 	strble.w	r3, [r5, #-1]
 800412c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004130:	1b52      	subs	r2, r2, r5
 8004132:	6122      	str	r2, [r4, #16]
 8004134:	f8cd a000 	str.w	sl, [sp]
 8004138:	464b      	mov	r3, r9
 800413a:	aa03      	add	r2, sp, #12
 800413c:	4621      	mov	r1, r4
 800413e:	4640      	mov	r0, r8
 8004140:	f7ff fee2 	bl	8003f08 <_printf_common>
 8004144:	3001      	adds	r0, #1
 8004146:	d14c      	bne.n	80041e2 <_printf_i+0x1fe>
 8004148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800414c:	b004      	add	sp, #16
 800414e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004152:	4835      	ldr	r0, [pc, #212]	; (8004228 <_printf_i+0x244>)
 8004154:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004158:	6829      	ldr	r1, [r5, #0]
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004160:	6029      	str	r1, [r5, #0]
 8004162:	061d      	lsls	r5, r3, #24
 8004164:	d514      	bpl.n	8004190 <_printf_i+0x1ac>
 8004166:	07df      	lsls	r7, r3, #31
 8004168:	bf44      	itt	mi
 800416a:	f043 0320 	orrmi.w	r3, r3, #32
 800416e:	6023      	strmi	r3, [r4, #0]
 8004170:	b91e      	cbnz	r6, 800417a <_printf_i+0x196>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	f023 0320 	bic.w	r3, r3, #32
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	2310      	movs	r3, #16
 800417c:	e7b0      	b.n	80040e0 <_printf_i+0xfc>
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	f043 0320 	orr.w	r3, r3, #32
 8004184:	6023      	str	r3, [r4, #0]
 8004186:	2378      	movs	r3, #120	; 0x78
 8004188:	4828      	ldr	r0, [pc, #160]	; (800422c <_printf_i+0x248>)
 800418a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800418e:	e7e3      	b.n	8004158 <_printf_i+0x174>
 8004190:	0659      	lsls	r1, r3, #25
 8004192:	bf48      	it	mi
 8004194:	b2b6      	uxthmi	r6, r6
 8004196:	e7e6      	b.n	8004166 <_printf_i+0x182>
 8004198:	4615      	mov	r5, r2
 800419a:	e7bb      	b.n	8004114 <_printf_i+0x130>
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	6826      	ldr	r6, [r4, #0]
 80041a0:	6961      	ldr	r1, [r4, #20]
 80041a2:	1d18      	adds	r0, r3, #4
 80041a4:	6028      	str	r0, [r5, #0]
 80041a6:	0635      	lsls	r5, r6, #24
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	d501      	bpl.n	80041b0 <_printf_i+0x1cc>
 80041ac:	6019      	str	r1, [r3, #0]
 80041ae:	e002      	b.n	80041b6 <_printf_i+0x1d2>
 80041b0:	0670      	lsls	r0, r6, #25
 80041b2:	d5fb      	bpl.n	80041ac <_printf_i+0x1c8>
 80041b4:	8019      	strh	r1, [r3, #0]
 80041b6:	2300      	movs	r3, #0
 80041b8:	6123      	str	r3, [r4, #16]
 80041ba:	4615      	mov	r5, r2
 80041bc:	e7ba      	b.n	8004134 <_printf_i+0x150>
 80041be:	682b      	ldr	r3, [r5, #0]
 80041c0:	1d1a      	adds	r2, r3, #4
 80041c2:	602a      	str	r2, [r5, #0]
 80041c4:	681d      	ldr	r5, [r3, #0]
 80041c6:	6862      	ldr	r2, [r4, #4]
 80041c8:	2100      	movs	r1, #0
 80041ca:	4628      	mov	r0, r5
 80041cc:	f7fc f800 	bl	80001d0 <memchr>
 80041d0:	b108      	cbz	r0, 80041d6 <_printf_i+0x1f2>
 80041d2:	1b40      	subs	r0, r0, r5
 80041d4:	6060      	str	r0, [r4, #4]
 80041d6:	6863      	ldr	r3, [r4, #4]
 80041d8:	6123      	str	r3, [r4, #16]
 80041da:	2300      	movs	r3, #0
 80041dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e0:	e7a8      	b.n	8004134 <_printf_i+0x150>
 80041e2:	6923      	ldr	r3, [r4, #16]
 80041e4:	462a      	mov	r2, r5
 80041e6:	4649      	mov	r1, r9
 80041e8:	4640      	mov	r0, r8
 80041ea:	47d0      	blx	sl
 80041ec:	3001      	adds	r0, #1
 80041ee:	d0ab      	beq.n	8004148 <_printf_i+0x164>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	079b      	lsls	r3, r3, #30
 80041f4:	d413      	bmi.n	800421e <_printf_i+0x23a>
 80041f6:	68e0      	ldr	r0, [r4, #12]
 80041f8:	9b03      	ldr	r3, [sp, #12]
 80041fa:	4298      	cmp	r0, r3
 80041fc:	bfb8      	it	lt
 80041fe:	4618      	movlt	r0, r3
 8004200:	e7a4      	b.n	800414c <_printf_i+0x168>
 8004202:	2301      	movs	r3, #1
 8004204:	4632      	mov	r2, r6
 8004206:	4649      	mov	r1, r9
 8004208:	4640      	mov	r0, r8
 800420a:	47d0      	blx	sl
 800420c:	3001      	adds	r0, #1
 800420e:	d09b      	beq.n	8004148 <_printf_i+0x164>
 8004210:	3501      	adds	r5, #1
 8004212:	68e3      	ldr	r3, [r4, #12]
 8004214:	9903      	ldr	r1, [sp, #12]
 8004216:	1a5b      	subs	r3, r3, r1
 8004218:	42ab      	cmp	r3, r5
 800421a:	dcf2      	bgt.n	8004202 <_printf_i+0x21e>
 800421c:	e7eb      	b.n	80041f6 <_printf_i+0x212>
 800421e:	2500      	movs	r5, #0
 8004220:	f104 0619 	add.w	r6, r4, #25
 8004224:	e7f5      	b.n	8004212 <_printf_i+0x22e>
 8004226:	bf00      	nop
 8004228:	0800454d 	.word	0x0800454d
 800422c:	0800455e 	.word	0x0800455e

08004230 <memcpy>:
 8004230:	440a      	add	r2, r1
 8004232:	4291      	cmp	r1, r2
 8004234:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004238:	d100      	bne.n	800423c <memcpy+0xc>
 800423a:	4770      	bx	lr
 800423c:	b510      	push	{r4, lr}
 800423e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004242:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004246:	4291      	cmp	r1, r2
 8004248:	d1f9      	bne.n	800423e <memcpy+0xe>
 800424a:	bd10      	pop	{r4, pc}

0800424c <memmove>:
 800424c:	4288      	cmp	r0, r1
 800424e:	b510      	push	{r4, lr}
 8004250:	eb01 0402 	add.w	r4, r1, r2
 8004254:	d902      	bls.n	800425c <memmove+0x10>
 8004256:	4284      	cmp	r4, r0
 8004258:	4623      	mov	r3, r4
 800425a:	d807      	bhi.n	800426c <memmove+0x20>
 800425c:	1e43      	subs	r3, r0, #1
 800425e:	42a1      	cmp	r1, r4
 8004260:	d008      	beq.n	8004274 <memmove+0x28>
 8004262:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004266:	f803 2f01 	strb.w	r2, [r3, #1]!
 800426a:	e7f8      	b.n	800425e <memmove+0x12>
 800426c:	4402      	add	r2, r0
 800426e:	4601      	mov	r1, r0
 8004270:	428a      	cmp	r2, r1
 8004272:	d100      	bne.n	8004276 <memmove+0x2a>
 8004274:	bd10      	pop	{r4, pc}
 8004276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800427a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800427e:	e7f7      	b.n	8004270 <memmove+0x24>

08004280 <_free_r>:
 8004280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004282:	2900      	cmp	r1, #0
 8004284:	d044      	beq.n	8004310 <_free_r+0x90>
 8004286:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800428a:	9001      	str	r0, [sp, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	f1a1 0404 	sub.w	r4, r1, #4
 8004292:	bfb8      	it	lt
 8004294:	18e4      	addlt	r4, r4, r3
 8004296:	f000 f913 	bl	80044c0 <__malloc_lock>
 800429a:	4a1e      	ldr	r2, [pc, #120]	; (8004314 <_free_r+0x94>)
 800429c:	9801      	ldr	r0, [sp, #4]
 800429e:	6813      	ldr	r3, [r2, #0]
 80042a0:	b933      	cbnz	r3, 80042b0 <_free_r+0x30>
 80042a2:	6063      	str	r3, [r4, #4]
 80042a4:	6014      	str	r4, [r2, #0]
 80042a6:	b003      	add	sp, #12
 80042a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042ac:	f000 b90e 	b.w	80044cc <__malloc_unlock>
 80042b0:	42a3      	cmp	r3, r4
 80042b2:	d908      	bls.n	80042c6 <_free_r+0x46>
 80042b4:	6825      	ldr	r5, [r4, #0]
 80042b6:	1961      	adds	r1, r4, r5
 80042b8:	428b      	cmp	r3, r1
 80042ba:	bf01      	itttt	eq
 80042bc:	6819      	ldreq	r1, [r3, #0]
 80042be:	685b      	ldreq	r3, [r3, #4]
 80042c0:	1949      	addeq	r1, r1, r5
 80042c2:	6021      	streq	r1, [r4, #0]
 80042c4:	e7ed      	b.n	80042a2 <_free_r+0x22>
 80042c6:	461a      	mov	r2, r3
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	b10b      	cbz	r3, 80042d0 <_free_r+0x50>
 80042cc:	42a3      	cmp	r3, r4
 80042ce:	d9fa      	bls.n	80042c6 <_free_r+0x46>
 80042d0:	6811      	ldr	r1, [r2, #0]
 80042d2:	1855      	adds	r5, r2, r1
 80042d4:	42a5      	cmp	r5, r4
 80042d6:	d10b      	bne.n	80042f0 <_free_r+0x70>
 80042d8:	6824      	ldr	r4, [r4, #0]
 80042da:	4421      	add	r1, r4
 80042dc:	1854      	adds	r4, r2, r1
 80042de:	42a3      	cmp	r3, r4
 80042e0:	6011      	str	r1, [r2, #0]
 80042e2:	d1e0      	bne.n	80042a6 <_free_r+0x26>
 80042e4:	681c      	ldr	r4, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	6053      	str	r3, [r2, #4]
 80042ea:	4421      	add	r1, r4
 80042ec:	6011      	str	r1, [r2, #0]
 80042ee:	e7da      	b.n	80042a6 <_free_r+0x26>
 80042f0:	d902      	bls.n	80042f8 <_free_r+0x78>
 80042f2:	230c      	movs	r3, #12
 80042f4:	6003      	str	r3, [r0, #0]
 80042f6:	e7d6      	b.n	80042a6 <_free_r+0x26>
 80042f8:	6825      	ldr	r5, [r4, #0]
 80042fa:	1961      	adds	r1, r4, r5
 80042fc:	428b      	cmp	r3, r1
 80042fe:	bf04      	itt	eq
 8004300:	6819      	ldreq	r1, [r3, #0]
 8004302:	685b      	ldreq	r3, [r3, #4]
 8004304:	6063      	str	r3, [r4, #4]
 8004306:	bf04      	itt	eq
 8004308:	1949      	addeq	r1, r1, r5
 800430a:	6021      	streq	r1, [r4, #0]
 800430c:	6054      	str	r4, [r2, #4]
 800430e:	e7ca      	b.n	80042a6 <_free_r+0x26>
 8004310:	b003      	add	sp, #12
 8004312:	bd30      	pop	{r4, r5, pc}
 8004314:	20000190 	.word	0x20000190

08004318 <sbrk_aligned>:
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	4e0e      	ldr	r6, [pc, #56]	; (8004354 <sbrk_aligned+0x3c>)
 800431c:	460c      	mov	r4, r1
 800431e:	6831      	ldr	r1, [r6, #0]
 8004320:	4605      	mov	r5, r0
 8004322:	b911      	cbnz	r1, 800432a <sbrk_aligned+0x12>
 8004324:	f000 f8bc 	bl	80044a0 <_sbrk_r>
 8004328:	6030      	str	r0, [r6, #0]
 800432a:	4621      	mov	r1, r4
 800432c:	4628      	mov	r0, r5
 800432e:	f000 f8b7 	bl	80044a0 <_sbrk_r>
 8004332:	1c43      	adds	r3, r0, #1
 8004334:	d00a      	beq.n	800434c <sbrk_aligned+0x34>
 8004336:	1cc4      	adds	r4, r0, #3
 8004338:	f024 0403 	bic.w	r4, r4, #3
 800433c:	42a0      	cmp	r0, r4
 800433e:	d007      	beq.n	8004350 <sbrk_aligned+0x38>
 8004340:	1a21      	subs	r1, r4, r0
 8004342:	4628      	mov	r0, r5
 8004344:	f000 f8ac 	bl	80044a0 <_sbrk_r>
 8004348:	3001      	adds	r0, #1
 800434a:	d101      	bne.n	8004350 <sbrk_aligned+0x38>
 800434c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004350:	4620      	mov	r0, r4
 8004352:	bd70      	pop	{r4, r5, r6, pc}
 8004354:	20000194 	.word	0x20000194

08004358 <_malloc_r>:
 8004358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800435c:	1ccd      	adds	r5, r1, #3
 800435e:	f025 0503 	bic.w	r5, r5, #3
 8004362:	3508      	adds	r5, #8
 8004364:	2d0c      	cmp	r5, #12
 8004366:	bf38      	it	cc
 8004368:	250c      	movcc	r5, #12
 800436a:	2d00      	cmp	r5, #0
 800436c:	4607      	mov	r7, r0
 800436e:	db01      	blt.n	8004374 <_malloc_r+0x1c>
 8004370:	42a9      	cmp	r1, r5
 8004372:	d905      	bls.n	8004380 <_malloc_r+0x28>
 8004374:	230c      	movs	r3, #12
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	2600      	movs	r6, #0
 800437a:	4630      	mov	r0, r6
 800437c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004380:	4e2e      	ldr	r6, [pc, #184]	; (800443c <_malloc_r+0xe4>)
 8004382:	f000 f89d 	bl	80044c0 <__malloc_lock>
 8004386:	6833      	ldr	r3, [r6, #0]
 8004388:	461c      	mov	r4, r3
 800438a:	bb34      	cbnz	r4, 80043da <_malloc_r+0x82>
 800438c:	4629      	mov	r1, r5
 800438e:	4638      	mov	r0, r7
 8004390:	f7ff ffc2 	bl	8004318 <sbrk_aligned>
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	4604      	mov	r4, r0
 8004398:	d14d      	bne.n	8004436 <_malloc_r+0xde>
 800439a:	6834      	ldr	r4, [r6, #0]
 800439c:	4626      	mov	r6, r4
 800439e:	2e00      	cmp	r6, #0
 80043a0:	d140      	bne.n	8004424 <_malloc_r+0xcc>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	4631      	mov	r1, r6
 80043a6:	4638      	mov	r0, r7
 80043a8:	eb04 0803 	add.w	r8, r4, r3
 80043ac:	f000 f878 	bl	80044a0 <_sbrk_r>
 80043b0:	4580      	cmp	r8, r0
 80043b2:	d13a      	bne.n	800442a <_malloc_r+0xd2>
 80043b4:	6821      	ldr	r1, [r4, #0]
 80043b6:	3503      	adds	r5, #3
 80043b8:	1a6d      	subs	r5, r5, r1
 80043ba:	f025 0503 	bic.w	r5, r5, #3
 80043be:	3508      	adds	r5, #8
 80043c0:	2d0c      	cmp	r5, #12
 80043c2:	bf38      	it	cc
 80043c4:	250c      	movcc	r5, #12
 80043c6:	4629      	mov	r1, r5
 80043c8:	4638      	mov	r0, r7
 80043ca:	f7ff ffa5 	bl	8004318 <sbrk_aligned>
 80043ce:	3001      	adds	r0, #1
 80043d0:	d02b      	beq.n	800442a <_malloc_r+0xd2>
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	442b      	add	r3, r5
 80043d6:	6023      	str	r3, [r4, #0]
 80043d8:	e00e      	b.n	80043f8 <_malloc_r+0xa0>
 80043da:	6822      	ldr	r2, [r4, #0]
 80043dc:	1b52      	subs	r2, r2, r5
 80043de:	d41e      	bmi.n	800441e <_malloc_r+0xc6>
 80043e0:	2a0b      	cmp	r2, #11
 80043e2:	d916      	bls.n	8004412 <_malloc_r+0xba>
 80043e4:	1961      	adds	r1, r4, r5
 80043e6:	42a3      	cmp	r3, r4
 80043e8:	6025      	str	r5, [r4, #0]
 80043ea:	bf18      	it	ne
 80043ec:	6059      	strne	r1, [r3, #4]
 80043ee:	6863      	ldr	r3, [r4, #4]
 80043f0:	bf08      	it	eq
 80043f2:	6031      	streq	r1, [r6, #0]
 80043f4:	5162      	str	r2, [r4, r5]
 80043f6:	604b      	str	r3, [r1, #4]
 80043f8:	4638      	mov	r0, r7
 80043fa:	f104 060b 	add.w	r6, r4, #11
 80043fe:	f000 f865 	bl	80044cc <__malloc_unlock>
 8004402:	f026 0607 	bic.w	r6, r6, #7
 8004406:	1d23      	adds	r3, r4, #4
 8004408:	1af2      	subs	r2, r6, r3
 800440a:	d0b6      	beq.n	800437a <_malloc_r+0x22>
 800440c:	1b9b      	subs	r3, r3, r6
 800440e:	50a3      	str	r3, [r4, r2]
 8004410:	e7b3      	b.n	800437a <_malloc_r+0x22>
 8004412:	6862      	ldr	r2, [r4, #4]
 8004414:	42a3      	cmp	r3, r4
 8004416:	bf0c      	ite	eq
 8004418:	6032      	streq	r2, [r6, #0]
 800441a:	605a      	strne	r2, [r3, #4]
 800441c:	e7ec      	b.n	80043f8 <_malloc_r+0xa0>
 800441e:	4623      	mov	r3, r4
 8004420:	6864      	ldr	r4, [r4, #4]
 8004422:	e7b2      	b.n	800438a <_malloc_r+0x32>
 8004424:	4634      	mov	r4, r6
 8004426:	6876      	ldr	r6, [r6, #4]
 8004428:	e7b9      	b.n	800439e <_malloc_r+0x46>
 800442a:	230c      	movs	r3, #12
 800442c:	603b      	str	r3, [r7, #0]
 800442e:	4638      	mov	r0, r7
 8004430:	f000 f84c 	bl	80044cc <__malloc_unlock>
 8004434:	e7a1      	b.n	800437a <_malloc_r+0x22>
 8004436:	6025      	str	r5, [r4, #0]
 8004438:	e7de      	b.n	80043f8 <_malloc_r+0xa0>
 800443a:	bf00      	nop
 800443c:	20000190 	.word	0x20000190

08004440 <_realloc_r>:
 8004440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004444:	4680      	mov	r8, r0
 8004446:	4614      	mov	r4, r2
 8004448:	460e      	mov	r6, r1
 800444a:	b921      	cbnz	r1, 8004456 <_realloc_r+0x16>
 800444c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004450:	4611      	mov	r1, r2
 8004452:	f7ff bf81 	b.w	8004358 <_malloc_r>
 8004456:	b92a      	cbnz	r2, 8004464 <_realloc_r+0x24>
 8004458:	f7ff ff12 	bl	8004280 <_free_r>
 800445c:	4625      	mov	r5, r4
 800445e:	4628      	mov	r0, r5
 8004460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004464:	f000 f838 	bl	80044d8 <_malloc_usable_size_r>
 8004468:	4284      	cmp	r4, r0
 800446a:	4607      	mov	r7, r0
 800446c:	d802      	bhi.n	8004474 <_realloc_r+0x34>
 800446e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004472:	d812      	bhi.n	800449a <_realloc_r+0x5a>
 8004474:	4621      	mov	r1, r4
 8004476:	4640      	mov	r0, r8
 8004478:	f7ff ff6e 	bl	8004358 <_malloc_r>
 800447c:	4605      	mov	r5, r0
 800447e:	2800      	cmp	r0, #0
 8004480:	d0ed      	beq.n	800445e <_realloc_r+0x1e>
 8004482:	42bc      	cmp	r4, r7
 8004484:	4622      	mov	r2, r4
 8004486:	4631      	mov	r1, r6
 8004488:	bf28      	it	cs
 800448a:	463a      	movcs	r2, r7
 800448c:	f7ff fed0 	bl	8004230 <memcpy>
 8004490:	4631      	mov	r1, r6
 8004492:	4640      	mov	r0, r8
 8004494:	f7ff fef4 	bl	8004280 <_free_r>
 8004498:	e7e1      	b.n	800445e <_realloc_r+0x1e>
 800449a:	4635      	mov	r5, r6
 800449c:	e7df      	b.n	800445e <_realloc_r+0x1e>
	...

080044a0 <_sbrk_r>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	4d06      	ldr	r5, [pc, #24]	; (80044bc <_sbrk_r+0x1c>)
 80044a4:	2300      	movs	r3, #0
 80044a6:	4604      	mov	r4, r0
 80044a8:	4608      	mov	r0, r1
 80044aa:	602b      	str	r3, [r5, #0]
 80044ac:	f7fc fa04 	bl	80008b8 <_sbrk>
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	d102      	bne.n	80044ba <_sbrk_r+0x1a>
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	b103      	cbz	r3, 80044ba <_sbrk_r+0x1a>
 80044b8:	6023      	str	r3, [r4, #0]
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	20000198 	.word	0x20000198

080044c0 <__malloc_lock>:
 80044c0:	4801      	ldr	r0, [pc, #4]	; (80044c8 <__malloc_lock+0x8>)
 80044c2:	f000 b811 	b.w	80044e8 <__retarget_lock_acquire_recursive>
 80044c6:	bf00      	nop
 80044c8:	2000019c 	.word	0x2000019c

080044cc <__malloc_unlock>:
 80044cc:	4801      	ldr	r0, [pc, #4]	; (80044d4 <__malloc_unlock+0x8>)
 80044ce:	f000 b80c 	b.w	80044ea <__retarget_lock_release_recursive>
 80044d2:	bf00      	nop
 80044d4:	2000019c 	.word	0x2000019c

080044d8 <_malloc_usable_size_r>:
 80044d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044dc:	1f18      	subs	r0, r3, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	bfbc      	itt	lt
 80044e2:	580b      	ldrlt	r3, [r1, r0]
 80044e4:	18c0      	addlt	r0, r0, r3
 80044e6:	4770      	bx	lr

080044e8 <__retarget_lock_acquire_recursive>:
 80044e8:	4770      	bx	lr

080044ea <__retarget_lock_release_recursive>:
 80044ea:	4770      	bx	lr

080044ec <_init>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	bf00      	nop
 80044f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f2:	bc08      	pop	{r3}
 80044f4:	469e      	mov	lr, r3
 80044f6:	4770      	bx	lr

080044f8 <_fini>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	bf00      	nop
 80044fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fe:	bc08      	pop	{r3}
 8004500:	469e      	mov	lr, r3
 8004502:	4770      	bx	lr
