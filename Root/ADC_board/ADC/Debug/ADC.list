
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004854  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080049e4  080049e4  000149e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b64  08004b64  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08004b64  08004b64  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b64  08004b64  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08004b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
 10 .bss          000001a4  200000b0  200000b0  000200b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000254  20000254  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000097e5  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e3d  00000000  00000000  000298c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  0002b708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006e0  00000000  00000000  0002bef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001df63  00000000  00000000  0002c5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b9d1  00000000  00000000  0004a533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1f5a  00000000  00000000  00055f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00107e5e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000022c8  00000000  00000000  00107eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049cc 	.word	0x080049cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	080049cc 	.word	0x080049cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <state_handler>:
#include "data_handler.h"
#include "stm32f303xc.h"
#include "main.h"

void state_handler(char *state, int *game_state){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
	int state_int = atoi(state);
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	f003 fe4a 	bl	8003f14 <atoi>
 8000280:	60f8      	str	r0, [r7, #12]
	*game_state = state_int;
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	68fa      	ldr	r2, [r7, #12]
 8000286:	601a      	str	r2, [r3, #0]
//	else if(state_int == 02){
//		enter_challenge_2();
//	}

	//set_led(0b10101010);
}
 8000288:	bf00      	nop
 800028a:	3710      	adds	r7, #16
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <check_state>:

void check_state(int game_state){
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

	if (game_state == 5){
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b05      	cmp	r3, #5
 800029c:	d101      	bne.n	80002a2 <check_state+0x12>
		enter_login();
 800029e:	f000 f887 	bl	80003b0 <enter_login>
	}
	if (game_state == 9){
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2b09      	cmp	r3, #9
 80002a6:	d101      	bne.n	80002ac <check_state+0x1c>
		enter_pressure();
 80002a8:	f000 f87c 	bl	80003a4 <enter_pressure>
	}

}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <set_led>:

#include "stm32f303xc.h"

bool flashing = false;

void set_led(uint8_t led_mask){
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80002be:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <set_led+0x20>)
 80002c0:	60fb      	str	r3, [r7, #12]
	*led_register = led_mask;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	79fa      	ldrb	r2, [r7, #7]
 80002c6:	701a      	strb	r2, [r3, #0]
}
 80002c8:	bf00      	nop
 80002ca:	3714      	adds	r7, #20
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr
 80002d4:	48001015 	.word	0x48001015

080002d8 <USART1_IRQHandler>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USART1_IRQHandler(){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0

	char single_inp;
	int test = 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
	set_led(0b1111);
 80002e2:	200f      	movs	r0, #15
 80002e4:	f7ff ffe6 	bl	80002b4 <set_led>
	test = SerialReceiveChar(&USART1_PORT, &single_inp);
 80002e8:	1dfb      	adds	r3, r7, #7
 80002ea:	4619      	mov	r1, r3
 80002ec:	4827      	ldr	r0, [pc, #156]	; (800038c <USART1_IRQHandler+0xb4>)
 80002ee:	f000 fbb2 	bl	8000a56 <SerialReceiveChar>
 80002f2:	4603      	mov	r3, r0
 80002f4:	60fb      	str	r3, [r7, #12]
	if (test == 1){
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d109      	bne.n	8000310 <USART1_IRQHandler+0x38>
		input_buffer[input_counter] = single_inp;
 80002fc:	4b24      	ldr	r3, [pc, #144]	; (8000390 <USART1_IRQHandler+0xb8>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	79f9      	ldrb	r1, [r7, #7]
 8000302:	4a24      	ldr	r2, [pc, #144]	; (8000394 <USART1_IRQHandler+0xbc>)
 8000304:	54d1      	strb	r1, [r2, r3]
		input_counter ++;
 8000306:	4b22      	ldr	r3, [pc, #136]	; (8000390 <USART1_IRQHandler+0xb8>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	3301      	adds	r3, #1
 800030c:	4a20      	ldr	r2, [pc, #128]	; (8000390 <USART1_IRQHandler+0xb8>)
 800030e:	6013      	str	r3, [r2, #0]
		//set_led(0b0101);
		//SerialOutputChar(single_inp, &USART1_PORT);
	}
	if (single_inp == 33){ //check for end of string character
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	2b21      	cmp	r3, #33	; 0x21
 8000314:	d137      	bne.n	8000386 <USART1_IRQHandler+0xae>
		if (strncmp(input_buffer, "AA55", 4) == 0){ //check for sentinal char
 8000316:	2204      	movs	r2, #4
 8000318:	491f      	ldr	r1, [pc, #124]	; (8000398 <USART1_IRQHandler+0xc0>)
 800031a:	481e      	ldr	r0, [pc, #120]	; (8000394 <USART1_IRQHandler+0xbc>)
 800031c:	f003 ff58 	bl	80041d0 <strncmp>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d124      	bne.n	8000370 <USART1_IRQHandler+0x98>
			if (input_buffer[4] == 49){ //if msgtype is 1
 8000326:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <USART1_IRQHandler+0xbc>)
 8000328:	791b      	ldrb	r3, [r3, #4]
 800032a:	2b31      	cmp	r3, #49	; 0x31
 800032c:	d120      	bne.n	8000370 <USART1_IRQHandler+0x98>
				char *data = malloc(4);
 800032e:	2004      	movs	r0, #4
 8000330:	f003 fe1e 	bl	8003f70 <malloc>
 8000334:	4603      	mov	r3, r0
 8000336:	60bb      	str	r3, [r7, #8]
				strcpy(data, input_buffer + 5);
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <USART1_IRQHandler+0xc4>)
 800033a:	4619      	mov	r1, r3
 800033c:	68b8      	ldr	r0, [r7, #8]
 800033e:	f003 ff3f 	bl	80041c0 <strcpy>
				data[2] = 0;
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	3302      	adds	r3, #2
 8000346:	2200      	movs	r2, #0
 8000348:	701a      	strb	r2, [r3, #0]

				//SerialOutputString(data, &USART1_PORT);
				empty_buffer(input_buffer, BUFFER);
 800034a:	2164      	movs	r1, #100	; 0x64
 800034c:	4811      	ldr	r0, [pc, #68]	; (8000394 <USART1_IRQHandler+0xbc>)
 800034e:	f000 fbc1 	bl	8000ad4 <empty_buffer>
				input_counter = 0;
 8000352:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <USART1_IRQHandler+0xb8>)
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
				test = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
				single_inp = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	71fb      	strb	r3, [r7, #7]

				state_handler(data, &current_game_state);
 8000360:	490f      	ldr	r1, [pc, #60]	; (80003a0 <USART1_IRQHandler+0xc8>)
 8000362:	68b8      	ldr	r0, [r7, #8]
 8000364:	f7ff ff84 	bl	8000270 <state_handler>
				free(data);
 8000368:	68b8      	ldr	r0, [r7, #8]
 800036a:	f003 fe09 	bl	8003f80 <free>
 800036e:	e00a      	b.n	8000386 <USART1_IRQHandler+0xae>
			//set_led(0b100010); //error
		}
		//SerialOutputString(input_buffer, &USART1_PORT);


		empty_buffer(input_buffer, BUFFER);
 8000370:	2164      	movs	r1, #100	; 0x64
 8000372:	4808      	ldr	r0, [pc, #32]	; (8000394 <USART1_IRQHandler+0xbc>)
 8000374:	f000 fbae 	bl	8000ad4 <empty_buffer>
		input_counter = 0;
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <USART1_IRQHandler+0xb8>)
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
		test = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]
		single_inp = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	71fb      	strb	r3, [r7, #7]


	}

}
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000000 	.word	0x20000000
 8000390:	20000238 	.word	0x20000238
 8000394:	200001d4 	.word	0x200001d4
 8000398:	080049e4 	.word	0x080049e4
 800039c:	200001d9 	.word	0x200001d9
 80003a0:	200001d0 	.word	0x200001d0

080003a4 <enter_pressure>:

void enter_pressure()
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	set_led(0b10101010);
 80003a8:	20aa      	movs	r0, #170	; 0xaa
 80003aa:	f7ff ff83 	bl	80002b4 <set_led>
	while(1){
 80003ae:	e7fe      	b.n	80003ae <enter_pressure+0xa>

080003b0 <enter_login>:

	}

}
void enter_login(){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	set_led(0b00110011);
 80003b4:	2033      	movs	r0, #51	; 0x33
 80003b6:	f7ff ff7d 	bl	80002b4 <set_led>
	while(1){
		if (current_game_state == 9){
 80003ba:	4b24      	ldr	r3, [pc, #144]	; (800044c <enter_login+0x9c>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2b09      	cmp	r3, #9
 80003c0:	d105      	bne.n	80003ce <enter_login+0x1e>
			SerialOutputString("!", &USART1_PORT);
 80003c2:	4923      	ldr	r1, [pc, #140]	; (8000450 <enter_login+0xa0>)
 80003c4:	4823      	ldr	r0, [pc, #140]	; (8000454 <enter_login+0xa4>)
 80003c6:	f000 fb22 	bl	8000a0e <SerialOutputString>
			enter_pressure();
 80003ca:	f7ff ffeb 	bl	80003a4 <enter_pressure>
		}
		if (current_game_state != 5){
 80003ce:	4b1f      	ldr	r3, [pc, #124]	; (800044c <enter_login+0x9c>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2b05      	cmp	r3, #5
 80003d4:	d005      	beq.n	80003e2 <enter_login+0x32>
			SerialOutputString("!", &USART1_PORT);
 80003d6:	491e      	ldr	r1, [pc, #120]	; (8000450 <enter_login+0xa0>)
 80003d8:	481e      	ldr	r0, [pc, #120]	; (8000454 <enter_login+0xa4>)
 80003da:	f000 fb18 	bl	8000a0e <SerialOutputString>
			enter_waiting();
 80003de:	f000 f84b 	bl	8000478 <enter_waiting>
		}

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResults, adcChannels);
 80003e2:	2302      	movs	r3, #2
 80003e4:	461a      	mov	r2, r3
 80003e6:	491c      	ldr	r1, [pc, #112]	; (8000458 <enter_login+0xa8>)
 80003e8:	481c      	ldr	r0, [pc, #112]	; (800045c <enter_login+0xac>)
 80003ea:	f000 ff3f 	bl	800126c <HAL_ADC_Start_DMA>
	    while (adcConvComplete == 0)
 80003ee:	bf00      	nop
 80003f0:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <enter_login+0xb0>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d0fb      	beq.n	80003f0 <enter_login+0x40>
	    {

	    }
	    adcConvComplete = 0;
 80003f8:	4b19      	ldr	r3, [pc, #100]	; (8000460 <enter_login+0xb0>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]

  	    pitch = adcResults[0]/(4000/24);
 80003fe:	4b16      	ldr	r3, [pc, #88]	; (8000458 <enter_login+0xa8>)
 8000400:	881b      	ldrh	r3, [r3, #0]
 8000402:	b29b      	uxth	r3, r3
 8000404:	4a17      	ldr	r2, [pc, #92]	; (8000464 <enter_login+0xb4>)
 8000406:	fba2 2303 	umull	r2, r3, r2, r3
 800040a:	095b      	lsrs	r3, r3, #5
 800040c:	b29b      	uxth	r3, r3
 800040e:	b2da      	uxtb	r2, r3
 8000410:	4b15      	ldr	r3, [pc, #84]	; (8000468 <enter_login+0xb8>)
 8000412:	701a      	strb	r2, [r3, #0]


	    yaw = adcResults[1]/(4000/24);
 8000414:	4b10      	ldr	r3, [pc, #64]	; (8000458 <enter_login+0xa8>)
 8000416:	885b      	ldrh	r3, [r3, #2]
 8000418:	b29b      	uxth	r3, r3
 800041a:	4a12      	ldr	r2, [pc, #72]	; (8000464 <enter_login+0xb4>)
 800041c:	fba2 2303 	umull	r2, r3, r2, r3
 8000420:	095b      	lsrs	r3, r3, #5
 8000422:	b29b      	uxth	r3, r3
 8000424:	b2da      	uxtb	r2, r3
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <enter_login+0xbc>)
 8000428:	701a      	strb	r2, [r3, #0]
	    sprintf(string,"AA554%2hu%2hu!",pitch,yaw);
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <enter_login+0xb8>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	461a      	mov	r2, r3
 8000430:	4b0e      	ldr	r3, [pc, #56]	; (800046c <enter_login+0xbc>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	490e      	ldr	r1, [pc, #56]	; (8000470 <enter_login+0xc0>)
 8000436:	480f      	ldr	r0, [pc, #60]	; (8000474 <enter_login+0xc4>)
 8000438:	f003 fea2 	bl	8004180 <siprintf>
	    SerialOutputString(string, &USART1_PORT);
 800043c:	4904      	ldr	r1, [pc, #16]	; (8000450 <enter_login+0xa0>)
 800043e:	480d      	ldr	r0, [pc, #52]	; (8000474 <enter_login+0xc4>)
 8000440:	f000 fae5 	bl	8000a0e <SerialOutputString>
	    HAL_Delay(10);
 8000444:	200a      	movs	r0, #10
 8000446:	f000 fcf9 	bl	8000e3c <HAL_Delay>
		if (current_game_state == 9){
 800044a:	e7b6      	b.n	80003ba <enter_login+0xa>
 800044c:	200001d0 	.word	0x200001d0
 8000450:	20000000 	.word	0x20000000
 8000454:	080049ec 	.word	0x080049ec
 8000458:	20000160 	.word	0x20000160
 800045c:	200000cc 	.word	0x200000cc
 8000460:	20000164 	.word	0x20000164
 8000464:	3159721f 	.word	0x3159721f
 8000468:	20000168 	.word	0x20000168
 800046c:	20000169 	.word	0x20000169
 8000470:	080049f0 	.word	0x080049f0
 8000474:	2000016c 	.word	0x2000016c

08000478 <enter_waiting>:
	}
}

void enter_waiting(){
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	set_led(0b11001100);
 800047c:	20cc      	movs	r0, #204	; 0xcc
 800047e:	f7ff ff19 	bl	80002b4 <set_led>
	while(1){
		check_state(current_game_state);
 8000482:	4b03      	ldr	r3, [pc, #12]	; (8000490 <enter_waiting+0x18>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ff02 	bl	8000290 <check_state>
 800048c:	e7f9      	b.n	8000482 <enter_waiting+0xa>
 800048e:	bf00      	nop
 8000490:	200001d0 	.word	0x200001d0

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fc69 	bl	8000d70 <HAL_Init>

  /* USER CODE BEGIN Init */

  SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 800049e:	2200      	movs	r2, #0
 80004a0:	490a      	ldr	r1, [pc, #40]	; (80004cc <main+0x38>)
 80004a2:	2004      	movs	r0, #4
 80004a4:	f000 fa0e 	bl	80008c4 <SerialInitialise>
  enable_interrupts_RX();
 80004a8:	f000 fa80 	bl	80009ac <enable_interrupts_RX>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ac:	f000 f812 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b0:	f000 f904 	bl	80006bc <MX_GPIO_Init>
  MX_DMA_Init();
 80004b4:	f000 f8e4 	bl	8000680 <MX_DMA_Init>
  MX_ADC1_Init();
 80004b8:	f000 f864 	bl	8000584 <MX_ADC1_Init>



  /* USER CODE BEGIN 2 */
  uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <main+0x3c>)
 80004be:	607b      	str	r3, [r7, #4]
  *led_register = 0b10101010;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	22aa      	movs	r2, #170	; 0xaa
 80004c4:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  enter_waiting();
 80004c6:	f7ff ffd7 	bl	8000478 <enter_waiting>
 80004ca:	e7fc      	b.n	80004c6 <main+0x32>
 80004cc:	20000000 	.word	0x20000000
 80004d0:	48001015 	.word	0x48001015

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b09e      	sub	sp, #120	; 0x78
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004de:	2228      	movs	r2, #40	; 0x28
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f003 fd54 	bl	8003f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f8:	463b      	mov	r3, r7
 80004fa:	223c      	movs	r2, #60	; 0x3c
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f003 fd46 	bl	8003f90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000504:	2302      	movs	r3, #2
 8000506:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000508:	2301      	movs	r3, #1
 800050a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800050c:	2310      	movs	r3, #16
 800050e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000510:	2302      	movs	r3, #2
 8000512:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000514:	2300      	movs	r3, #0
 8000516:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000518:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 800051c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000522:	4618      	mov	r0, r3
 8000524:	f002 f922 	bl	800276c <HAL_RCC_OscConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800052e:	f000 f97b 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000532:	230f      	movs	r3, #15
 8000534:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000536:	2302      	movs	r3, #2
 8000538:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800053e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000542:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000548:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800054c:	2101      	movs	r1, #1
 800054e:	4618      	mov	r0, r3
 8000550:	f003 f94a 	bl	80037e8 <HAL_RCC_ClockConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800055a:	f000 f965 	bl	8000828 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800055e:	2380      	movs	r3, #128	; 0x80
 8000560:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000566:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	4618      	mov	r0, r3
 800056c:	f003 fb22 	bl	8003bb4 <HAL_RCCEx_PeriphCLKConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000576:	f000 f957 	bl	8000828 <Error_Handler>
  }
}
 800057a:	bf00      	nop
 800057c:	3778      	adds	r7, #120	; 0x78
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
 80005a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005a6:	4b35      	ldr	r3, [pc, #212]	; (800067c <MX_ADC1_Init+0xf8>)
 80005a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005ae:	4b33      	ldr	r3, [pc, #204]	; (800067c <MX_ADC1_Init+0xf8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005b4:	4b31      	ldr	r3, [pc, #196]	; (800067c <MX_ADC1_Init+0xf8>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005ba:	4b30      	ldr	r3, [pc, #192]	; (800067c <MX_ADC1_Init+0xf8>)
 80005bc:	2201      	movs	r2, #1
 80005be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c0:	4b2e      	ldr	r3, [pc, #184]	; (800067c <MX_ADC1_Init+0xf8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c6:	4b2d      	ldr	r3, [pc, #180]	; (800067c <MX_ADC1_Init+0xf8>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ce:	4b2b      	ldr	r3, [pc, #172]	; (800067c <MX_ADC1_Init+0xf8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <MX_ADC1_Init+0xf8>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005da:	4b28      	ldr	r3, [pc, #160]	; (800067c <MX_ADC1_Init+0xf8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <MX_ADC1_Init+0xf8>)
 80005e2:	2202      	movs	r2, #2
 80005e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <MX_ADC1_Init+0xf8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ee:	4b23      	ldr	r3, [pc, #140]	; (800067c <MX_ADC1_Init+0xf8>)
 80005f0:	2204      	movs	r2, #4
 80005f2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <MX_ADC1_Init+0xf8>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005fa:	4b20      	ldr	r3, [pc, #128]	; (800067c <MX_ADC1_Init+0xf8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000600:	481e      	ldr	r0, [pc, #120]	; (800067c <MX_ADC1_Init+0xf8>)
 8000602:	f000 fc53 	bl	8000eac <HAL_ADC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800060c:	f000 f90c 	bl	8000828 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4619      	mov	r1, r3
 800061a:	4818      	ldr	r0, [pc, #96]	; (800067c <MX_ADC1_Init+0xf8>)
 800061c:	f001 fa2e 	bl	8001a7c <HAL_ADCEx_MultiModeConfigChannel>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000626:	f000 f8ff 	bl	8000828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800062a:	2302      	movs	r3, #2
 800062c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800062e:	2301      	movs	r3, #1
 8000630:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	4619      	mov	r1, r3
 8000646:	480d      	ldr	r0, [pc, #52]	; (800067c <MX_ADC1_Init+0xf8>)
 8000648:	f000 ff2c 	bl	80014a4 <HAL_ADC_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000652:	f000 f8e9 	bl	8000828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000656:	2301      	movs	r3, #1
 8000658:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800065a:	2302      	movs	r3, #2
 800065c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4619      	mov	r1, r3
 8000662:	4806      	ldr	r0, [pc, #24]	; (800067c <MX_ADC1_Init+0xf8>)
 8000664:	f000 ff1e 	bl	80014a4 <HAL_ADC_ConfigChannel>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800066e:	f000 f8db 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	3728      	adds	r7, #40	; 0x28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200000cc 	.word	0x200000cc

08000680 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_DMA_Init+0x38>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <MX_DMA_Init+0x38>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_DMA_Init+0x38>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	200b      	movs	r0, #11
 80006a4:	f001 fce7 	bl	8002076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006a8:	200b      	movs	r0, #11
 80006aa:	f001 fd00 	bl	80020ae <HAL_NVIC_EnableIRQ>

}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	; 0x28
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d2:	4b4a      	ldr	r3, [pc, #296]	; (80007fc <MX_GPIO_Init+0x140>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4a49      	ldr	r2, [pc, #292]	; (80007fc <MX_GPIO_Init+0x140>)
 80006d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006dc:	6153      	str	r3, [r2, #20]
 80006de:	4b47      	ldr	r3, [pc, #284]	; (80007fc <MX_GPIO_Init+0x140>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	4b44      	ldr	r3, [pc, #272]	; (80007fc <MX_GPIO_Init+0x140>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a43      	ldr	r2, [pc, #268]	; (80007fc <MX_GPIO_Init+0x140>)
 80006f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b41      	ldr	r3, [pc, #260]	; (80007fc <MX_GPIO_Init+0x140>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000702:	4b3e      	ldr	r3, [pc, #248]	; (80007fc <MX_GPIO_Init+0x140>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	4a3d      	ldr	r2, [pc, #244]	; (80007fc <MX_GPIO_Init+0x140>)
 8000708:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800070c:	6153      	str	r3, [r2, #20]
 800070e:	4b3b      	ldr	r3, [pc, #236]	; (80007fc <MX_GPIO_Init+0x140>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b38      	ldr	r3, [pc, #224]	; (80007fc <MX_GPIO_Init+0x140>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a37      	ldr	r2, [pc, #220]	; (80007fc <MX_GPIO_Init+0x140>)
 8000720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b35      	ldr	r3, [pc, #212]	; (80007fc <MX_GPIO_Init+0x140>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b32      	ldr	r3, [pc, #200]	; (80007fc <MX_GPIO_Init+0x140>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	4a31      	ldr	r2, [pc, #196]	; (80007fc <MX_GPIO_Init+0x140>)
 8000738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800073c:	6153      	str	r3, [r2, #20]
 800073e:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <MX_GPIO_Init+0x140>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800074a:	2200      	movs	r2, #0
 800074c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000750:	482b      	ldr	r0, [pc, #172]	; (8000800 <MX_GPIO_Init+0x144>)
 8000752:	f001 fff3 	bl	800273c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000756:	2337      	movs	r3, #55	; 0x37
 8000758:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800075a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	4825      	ldr	r0, [pc, #148]	; (8000800 <MX_GPIO_Init+0x144>)
 800076c:	f001 fe6c 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000770:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000774:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	481d      	ldr	r0, [pc, #116]	; (8000800 <MX_GPIO_Init+0x144>)
 800078a:	f001 fe5d 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800078e:	23e0      	movs	r3, #224	; 0xe0
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800079e:	2305      	movs	r3, #5
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f001 fe4c 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80007b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007be:	2303      	movs	r3, #3
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80007c2:	230e      	movs	r3, #14
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d0:	f001 fe3a 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80007d4:	23c0      	movs	r3, #192	; 0xc0
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d8:	2312      	movs	r3, #18
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007e4:	2304      	movs	r3, #4
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_GPIO_Init+0x148>)
 80007f0:	f001 fe2a 	bl	8002448 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	; 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	48001000 	.word	0x48001000
 8000804:	48000400 	.word	0x48000400

08000808 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* h)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

	adcConvComplete = 1;
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000812:	2201      	movs	r2, #1
 8000814:	601a      	str	r2, [r3, #0]


}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20000164 	.word	0x20000164

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	e7fe      	b.n	8000830 <Error_Handler+0x8>
	...

08000834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	2b00      	cmp	r3, #0
 8000844:	db0b      	blt.n	800085e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	f003 021f 	and.w	r2, r3, #31
 800084c:	4907      	ldr	r1, [pc, #28]	; (800086c <__NVIC_EnableIRQ+0x38>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	095b      	lsrs	r3, r3, #5
 8000854:	2001      	movs	r0, #1
 8000856:	fa00 f202 	lsl.w	r2, r0, r2
 800085a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000e100 	.word	0xe000e100

08000870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	db0a      	blt.n	800089a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	b2da      	uxtb	r2, r3
 8000888:	490c      	ldr	r1, [pc, #48]	; (80008bc <__NVIC_SetPriority+0x4c>)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	0112      	lsls	r2, r2, #4
 8000890:	b2d2      	uxtb	r2, r2
 8000892:	440b      	add	r3, r1
 8000894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000898:	e00a      	b.n	80008b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4908      	ldr	r1, [pc, #32]	; (80008c0 <__NVIC_SetPriority+0x50>)
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	3b04      	subs	r3, #4
 80008a8:	0112      	lsls	r2, r2, #4
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	440b      	add	r3, r1
 80008ae:	761a      	strb	r2, [r3, #24]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000e100 	.word	0xe000e100
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 80008c4:	b480      	push	{r7}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	63da      	str	r2, [r3, #60]	; 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80008d6:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <SerialInitialise+0xe4>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	4a33      	ldr	r2, [pc, #204]	; (80009a8 <SerialInitialise+0xe4>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80008e2:	4b31      	ldr	r3, [pc, #196]	; (80009a8 <SerialInitialise+0xe4>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a30      	ldr	r2, [pc, #192]	; (80009a8 <SerialInitialise+0xe4>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	6a1b      	ldr	r3, [r3, #32]
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d106      	bne.n	8000904 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80008f6:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <SerialInitialise+0xe4>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a2b      	ldr	r2, [pc, #172]	; (80009a8 <SerialInitialise+0xe4>)
 80008fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000900:	6153      	str	r3, [r2, #20]
		break;
 8000902:	e000      	b.n	8000906 <SerialInitialise+0x42>
	default:
		break;
 8000904:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800090e:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000914:	68ba      	ldr	r2, [r7, #8]
 8000916:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000918:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	69d9      	ldr	r1, [r3, #28]
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	430a      	orrs	r2, r1
 8000938:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b04      	cmp	r3, #4
 8000944:	d821      	bhi.n	800098a <SerialInitialise+0xc6>
 8000946:	a201      	add	r2, pc, #4	; (adr r2, 800094c <SerialInitialise+0x88>)
 8000948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094c:	08000961 	.word	0x08000961
 8000950:	08000969 	.word	0x08000969
 8000954:	08000971 	.word	0x08000971
 8000958:	08000979 	.word	0x08000979
 800095c:	08000981 	.word	0x08000981
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	2246      	movs	r2, #70	; 0x46
 8000964:	801a      	strh	r2, [r3, #0]
		break;
 8000966:	e010      	b.n	800098a <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	2246      	movs	r2, #70	; 0x46
 800096c:	801a      	strh	r2, [r3, #0]
		break;
 800096e:	e00c      	b.n	800098a <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	2246      	movs	r2, #70	; 0x46
 8000974:	801a      	strh	r2, [r3, #0]
		break;
 8000976:	e008      	b.n	800098a <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	2246      	movs	r2, #70	; 0x46
 800097c:	801a      	strh	r2, [r3, #0]
		break;
 800097e:	e004      	b.n	800098a <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8000986:	801a      	strh	r2, [r3, #0]
		break;
 8000988:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f042 020d 	orr.w	r2, r2, #13
 8000998:	601a      	str	r2, [r3, #0]
}
 800099a:	bf00      	nop
 800099c:	371c      	adds	r7, #28
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000

080009ac <enable_interrupts_RX>:

void enable_interrupts_RX()
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
	__disable_irq();

	// Generate an interrupt upon receiving data
	USART1->CR1 |= USART_CR1_RXNEIE_Msk;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <enable_interrupts_RX+0x2c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <enable_interrupts_RX+0x2c>)
 80009ba:	f043 0320 	orr.w	r3, r3, #32
 80009be:	6013      	str	r3, [r2, #0]

	// Set priority and enable interrupts
	NVIC_SetPriority(USART1_IRQn, 2);
 80009c0:	2102      	movs	r1, #2
 80009c2:	2025      	movs	r0, #37	; 0x25
 80009c4:	f7ff ff54 	bl	8000870 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 80009c8:	2025      	movs	r0, #37	; 0x25
 80009ca:	f7ff ff33 	bl	8000834 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80009ce:	b662      	cpsie	i
}
 80009d0:	bf00      	nop

	__enable_irq();
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40013800 	.word	0x40013800

080009dc <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 80009e8:	bf00      	nop
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0f8      	beq.n	80009ea <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	691b      	ldr	r3, [r3, #16]
 80009fc:	79fa      	ldrb	r2, [r7, #7]
 80009fe:	b292      	uxth	r2, r2
 8000a00:	801a      	strh	r2, [r3, #0]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b084      	sub	sp, #16
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8000a1c:	e00b      	b.n	8000a36 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	6839      	ldr	r1, [r7, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ffd9 	bl	80009dc <SerialOutputChar>
		counter++;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
		pt++;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3301      	adds	r3, #1
 8000a34:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d1ef      	bne.n	8000a1e <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	4798      	blx	r3
}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <SerialReceiveChar>:


// returns 1 if valid char, 0 if timeout
uint8_t SerialReceiveChar(SerialPort *serial_port, uint8_t *received_char)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b085      	sub	sp, #20
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
	uint8_t latest_character = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	737b      	strb	r3, [r7, #13]

	uint16_t timeout = 0xffff;
 8000a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a68:	81fb      	strh	r3, [r7, #14]
  while (1) {
	  timeout--;
 8000a6a:	89fb      	ldrh	r3, [r7, #14]
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	81fb      	strh	r3, [r7, #14]
	  if (timeout == 0)
 8000a70:	89fb      	ldrh	r3, [r7, #14]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d101      	bne.n	8000a7a <SerialReceiveChar+0x24>
		  return 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e026      	b.n	8000ac8 <SerialReceiveChar+0x72>

	if (*(serial_port->StatusRegister) & USART_ISR_ORE || *(serial_port->StatusRegister) & USART_ISR_FE) {
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d106      	bne.n	8000a96 <SerialReceiveChar+0x40>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d007      	beq.n	8000aa6 <SerialReceiveChar+0x50>
		*(serial_port->FlagClearRegister) |= USART_ICR_ORECF | USART_ICR_FECF;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	f042 020a 	orr.w	r2, r2, #10
 8000aa4:	601a      	str	r2, [r3, #0]
	}

	if (*(serial_port->StatusRegister) & USART_ISR_RXNE) { // Wait for RXNE flag to be set
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f003 0320 	and.w	r3, r3, #32
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d100      	bne.n	8000ab6 <SerialReceiveChar+0x60>
	  timeout--;
 8000ab4:	e7d9      	b.n	8000a6a <SerialReceiveChar+0x14>
		break;
 8000ab6:	bf00      	nop
	}
  }
  *received_char = *(serial_port->DataInputRegister);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	695b      	ldr	r3, [r3, #20]
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	701a      	strb	r2, [r3, #0]
  return 1;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <empty_buffer>:
// Constants
//#define SENTINEL_1 0xAA
//#define SENTINEL_2 0x55


void empty_buffer(char *array, int size){
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++){
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	e007      	b.n	8000af4 <empty_buffer+0x20>
		array[i] = 0;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3301      	adds	r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	dbf3      	blt.n	8000ae4 <empty_buffer+0x10>
	}
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_MspInit+0x44>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <HAL_MspInit+0x44>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6193      	str	r3, [r2, #24]
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_MspInit+0x44>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x44>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x44>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	61d3      	str	r3, [r2, #28]
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x44>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b42:	2007      	movs	r0, #7
 8000b44:	f001 fa8c 	bl	8002060 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40021000 	.word	0x40021000

08000b54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b74:	d14c      	bne.n	8000c10 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b76:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <HAL_ADC_MspInit+0xc4>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	4a27      	ldr	r2, [pc, #156]	; (8000c18 <HAL_ADC_MspInit+0xc4>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6153      	str	r3, [r2, #20]
 8000b82:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <HAL_ADC_MspInit+0xc4>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <HAL_ADC_MspInit+0xc4>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	4a21      	ldr	r2, [pc, #132]	; (8000c18 <HAL_ADC_MspInit+0xc4>)
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	6153      	str	r3, [r2, #20]
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <HAL_ADC_MspInit+0xc4>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000baa:	2303      	movs	r3, #3
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbc:	f001 fc44 	bl	8002448 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <HAL_ADC_MspInit+0xc8>)
 8000bc2:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <HAL_ADC_MspInit+0xcc>)
 8000bc4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_ADC_MspInit+0xc8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <HAL_ADC_MspInit+0xc8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_ADC_MspInit+0xc8>)
 8000bd4:	2280      	movs	r2, #128	; 0x80
 8000bd6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_ADC_MspInit+0xc8>)
 8000bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bde:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_ADC_MspInit+0xc8>)
 8000be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000be6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_ADC_MspInit+0xc8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_ADC_MspInit+0xc8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bf4:	4809      	ldr	r0, [pc, #36]	; (8000c1c <HAL_ADC_MspInit+0xc8>)
 8000bf6:	f001 fa74 	bl	80020e2 <HAL_DMA_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000c00:	f7ff fe12 	bl	8000828 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <HAL_ADC_MspInit+0xc8>)
 8000c08:	639a      	str	r2, [r3, #56]	; 0x38
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_ADC_MspInit+0xc8>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	2000011c 	.word	0x2000011c
 8000c20:	40020008 	.word	0x40020008

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x4>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 f8c4 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <DMA1_Channel1_IRQHandler+0x10>)
 8000c7e:	f001 fad6 	bl	800222e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2000011c 	.word	0x2000011c

08000c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c94:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <_sbrk+0x5c>)
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <_sbrk+0x60>)
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <_sbrk+0x64>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <_sbrk+0x68>)
 8000cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d207      	bcs.n	8000ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cbc:	f003 f92e 	bl	8003f1c <__errno>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cca:	e009      	b.n	8000ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <_sbrk+0x64>)
 8000cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	2000a000 	.word	0x2000a000
 8000cec:	00000400 	.word	0x00000400
 8000cf0:	2000023c 	.word	0x2000023c
 8000cf4:	20000258 	.word	0x20000258

08000cf8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <SystemInit+0x20>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d02:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <SystemInit+0x20>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d54 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d20:	f7ff ffea 	bl	8000cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d26:	490d      	ldr	r1, [pc, #52]	; (8000d5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d28:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <LoopForever+0xe>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d3c:	4c0a      	ldr	r4, [pc, #40]	; (8000d68 <LoopForever+0x16>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d4a:	f003 f8ed 	bl	8003f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d4e:	f7ff fba1 	bl	8000494 <main>

08000d52 <LoopForever>:

LoopForever:
    b LoopForever
 8000d52:	e7fe      	b.n	8000d52 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d54:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000d60:	08004b6c 	.word	0x08004b6c
  ldr r2, =_sbss
 8000d64:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000d68:	20000254 	.word	0x20000254

08000d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC1_2_IRQHandler>
	...

08000d70 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_Init+0x28>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <HAL_Init+0x28>)
 8000d7a:	f043 0310 	orr.w	r3, r3, #16
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f001 f96d 	bl	8002060 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 f808 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8c:	f7ff febe 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40022000 	.word	0x40022000

08000d9c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_InitTick+0x54>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_InitTick+0x58>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 f985 	bl	80020ca <HAL_SYSTICK_Config>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00e      	b.n	8000de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d80a      	bhi.n	8000de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd8:	f001 f94d 	bl	8002076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ddc:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <HAL_InitTick+0x5c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e000      	b.n	8000de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000040 	.word	0x20000040
 8000df4:	20000048 	.word	0x20000048
 8000df8:	20000044 	.word	0x20000044

08000dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000048 	.word	0x20000048
 8000e20:	20000240 	.word	0x20000240

08000e24 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000240 	.word	0x20000240

08000e3c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff ffee 	bl	8000e24 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_Delay+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffde 	bl	8000e24 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000048 	.word	0x20000048

08000e84 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b09a      	sub	sp, #104	; 0x68
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d101      	bne.n	8000ecc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e1c9      	b.n	8001260 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d176      	bne.n	8000fcc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d152      	bne.n	8000f8c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fe27 	bl	8000b54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d13b      	bne.n	8000f8c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 ff6d 	bl	8001df4 <ADC_Disable>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d12f      	bne.n	8000f8c <HAL_ADC_Init+0xe0>
 8000f2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d12b      	bne.n	8000f8c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f3c:	f023 0302 	bic.w	r3, r3, #2
 8000f40:	f043 0202 	orr.w	r2, r3, #2
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f56:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f66:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f68:	4b86      	ldr	r3, [pc, #536]	; (8001184 <HAL_ADC_Init+0x2d8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a86      	ldr	r2, [pc, #536]	; (8001188 <HAL_ADC_Init+0x2dc>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	0c9a      	lsrs	r2, r3, #18
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f7e:	e002      	b.n	8000f86 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1f9      	bne.n	8000f80 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d007      	beq.n	8000faa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fa8:	d110      	bne.n	8000fcc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f023 0312 	bic.w	r3, r3, #18
 8000fb2:	f043 0210 	orr.w	r2, r3, #16
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f043 0201 	orr.w	r2, r3, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f003 0310 	and.w	r3, r3, #16
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f040 8136 	bne.w	8001246 <HAL_ADC_Init+0x39a>
 8000fda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f040 8131 	bne.w	8001246 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f040 8129 	bne.w	8001246 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ffc:	f043 0202 	orr.w	r2, r3, #2
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800100c:	d004      	beq.n	8001018 <HAL_ADC_Init+0x16c>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a5e      	ldr	r2, [pc, #376]	; (800118c <HAL_ADC_Init+0x2e0>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d101      	bne.n	800101c <HAL_ADC_Init+0x170>
 8001018:	4b5d      	ldr	r3, [pc, #372]	; (8001190 <HAL_ADC_Init+0x2e4>)
 800101a:	e000      	b.n	800101e <HAL_ADC_Init+0x172>
 800101c:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <HAL_ADC_Init+0x2e8>)
 800101e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001028:	d102      	bne.n	8001030 <HAL_ADC_Init+0x184>
 800102a:	4b58      	ldr	r3, [pc, #352]	; (800118c <HAL_ADC_Init+0x2e0>)
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e01a      	b.n	8001066 <HAL_ADC_Init+0x1ba>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a55      	ldr	r2, [pc, #340]	; (800118c <HAL_ADC_Init+0x2e0>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d103      	bne.n	8001042 <HAL_ADC_Init+0x196>
 800103a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	e011      	b.n	8001066 <HAL_ADC_Init+0x1ba>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a54      	ldr	r2, [pc, #336]	; (8001198 <HAL_ADC_Init+0x2ec>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d102      	bne.n	8001052 <HAL_ADC_Init+0x1a6>
 800104c:	4b53      	ldr	r3, [pc, #332]	; (800119c <HAL_ADC_Init+0x2f0>)
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	e009      	b.n	8001066 <HAL_ADC_Init+0x1ba>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a51      	ldr	r2, [pc, #324]	; (800119c <HAL_ADC_Init+0x2f0>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d102      	bne.n	8001062 <HAL_ADC_Init+0x1b6>
 800105c:	4b4e      	ldr	r3, [pc, #312]	; (8001198 <HAL_ADC_Init+0x2ec>)
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	e001      	b.n	8001066 <HAL_ADC_Init+0x1ba>
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b01      	cmp	r3, #1
 8001072:	d108      	bne.n	8001086 <HAL_ADC_Init+0x1da>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b01      	cmp	r3, #1
 8001080:	d101      	bne.n	8001086 <HAL_ADC_Init+0x1da>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_ADC_Init+0x1dc>
 8001086:	2300      	movs	r3, #0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d11c      	bne.n	80010c6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800108c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800108e:	2b00      	cmp	r3, #0
 8001090:	d010      	beq.n	80010b4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b01      	cmp	r3, #1
 800109c:	d107      	bne.n	80010ae <HAL_ADC_Init+0x202>
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d101      	bne.n	80010ae <HAL_ADC_Init+0x202>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_ADC_Init+0x204>
 80010ae:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d108      	bne.n	80010c6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80010b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010c4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	7e5b      	ldrb	r3, [r3, #25]
 80010ca:	035b      	lsls	r3, r3, #13
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80010d0:	2a01      	cmp	r2, #1
 80010d2:	d002      	beq.n	80010da <HAL_ADC_Init+0x22e>
 80010d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010d8:	e000      	b.n	80010dc <HAL_ADC_Init+0x230>
 80010da:	2200      	movs	r2, #0
 80010dc:	431a      	orrs	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010ec:	4313      	orrs	r3, r2
 80010ee:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d11b      	bne.n	8001132 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7e5b      	ldrb	r3, [r3, #25]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d109      	bne.n	8001116 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	3b01      	subs	r3, #1
 8001108:	045a      	lsls	r2, r3, #17
 800110a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800110c:	4313      	orrs	r3, r2
 800110e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001112:	663b      	str	r3, [r7, #96]	; 0x60
 8001114:	e00d      	b.n	8001132 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800111e:	f043 0220 	orr.w	r2, r3, #32
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f043 0201 	orr.w	r2, r3, #1
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001136:	2b01      	cmp	r3, #1
 8001138:	d03a      	beq.n	80011b0 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a16      	ldr	r2, [pc, #88]	; (8001198 <HAL_ADC_Init+0x2ec>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d004      	beq.n	800114e <HAL_ADC_Init+0x2a2>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a14      	ldr	r2, [pc, #80]	; (800119c <HAL_ADC_Init+0x2f0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d128      	bne.n	80011a0 <HAL_ADC_Init+0x2f4>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001152:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001156:	d012      	beq.n	800117e <HAL_ADC_Init+0x2d2>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001160:	d00a      	beq.n	8001178 <HAL_ADC_Init+0x2cc>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001166:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800116a:	d002      	beq.n	8001172 <HAL_ADC_Init+0x2c6>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001170:	e018      	b.n	80011a4 <HAL_ADC_Init+0x2f8>
 8001172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001176:	e015      	b.n	80011a4 <HAL_ADC_Init+0x2f8>
 8001178:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800117c:	e012      	b.n	80011a4 <HAL_ADC_Init+0x2f8>
 800117e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001182:	e00f      	b.n	80011a4 <HAL_ADC_Init+0x2f8>
 8001184:	20000040 	.word	0x20000040
 8001188:	431bde83 	.word	0x431bde83
 800118c:	50000100 	.word	0x50000100
 8001190:	50000300 	.word	0x50000300
 8001194:	50000700 	.word	0x50000700
 8001198:	50000400 	.word	0x50000400
 800119c:	50000500 	.word	0x50000500
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80011a8:	4313      	orrs	r3, r2
 80011aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011ac:	4313      	orrs	r3, r2
 80011ae:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d114      	bne.n	80011e8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011cc:	f023 0302 	bic.w	r3, r3, #2
 80011d0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7e1b      	ldrb	r3, [r3, #24]
 80011d6:	039a      	lsls	r2, r3, #14
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4313      	orrs	r3, r2
 80011e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011e4:	4313      	orrs	r3, r2
 80011e6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <HAL_ADC_Init+0x3bc>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80011f8:	430b      	orrs	r3, r1
 80011fa:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d10c      	bne.n	800121e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f023 010f 	bic.w	r1, r3, #15
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	1e5a      	subs	r2, r3, #1
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	631a      	str	r2, [r3, #48]	; 0x30
 800121c:	e007      	b.n	800122e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 020f 	bic.w	r2, r2, #15
 800122c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	f023 0303 	bic.w	r3, r3, #3
 800123c:	f043 0201 	orr.w	r2, r3, #1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	641a      	str	r2, [r3, #64]	; 0x40
 8001244:	e00a      	b.n	800125c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f023 0312 	bic.w	r3, r3, #18
 800124e:	f043 0210 	orr.w	r2, r3, #16
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001256:	2301      	movs	r3, #1
 8001258:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800125c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001260:	4618      	mov	r0, r3
 8001262:	3768      	adds	r7, #104	; 0x68
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	fff0c007 	.word	0xfff0c007

0800126c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	2b00      	cmp	r3, #0
 8001288:	f040 80f7 	bne.w	800147a <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001292:	2b01      	cmp	r3, #1
 8001294:	d101      	bne.n	800129a <HAL_ADC_Start_DMA+0x2e>
 8001296:	2302      	movs	r3, #2
 8001298:	e0f2      	b.n	8001480 <HAL_ADC_Start_DMA+0x214>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012aa:	d004      	beq.n	80012b6 <HAL_ADC_Start_DMA+0x4a>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a75      	ldr	r2, [pc, #468]	; (8001488 <HAL_ADC_Start_DMA+0x21c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d109      	bne.n	80012ca <HAL_ADC_Start_DMA+0x5e>
 80012b6:	4b75      	ldr	r3, [pc, #468]	; (800148c <HAL_ADC_Start_DMA+0x220>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bf0c      	ite	eq
 80012c2:	2301      	moveq	r3, #1
 80012c4:	2300      	movne	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	e008      	b.n	80012dc <HAL_ADC_Start_DMA+0x70>
 80012ca:	4b71      	ldr	r3, [pc, #452]	; (8001490 <HAL_ADC_Start_DMA+0x224>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 031f 	and.w	r3, r3, #31
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	bf0c      	ite	eq
 80012d6:	2301      	moveq	r3, #1
 80012d8:	2300      	movne	r3, #0
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80c5 	beq.w	800146c <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f000 fd22 	bl	8001d2c <ADC_Enable>
 80012e8:	4603      	mov	r3, r0
 80012ea:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f040 80b7 	bne.w	8001462 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012fc:	f023 0301 	bic.w	r3, r3, #1
 8001300:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001310:	d004      	beq.n	800131c <HAL_ADC_Start_DMA+0xb0>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a5c      	ldr	r2, [pc, #368]	; (8001488 <HAL_ADC_Start_DMA+0x21c>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d106      	bne.n	800132a <HAL_ADC_Start_DMA+0xbe>
 800131c:	4b5b      	ldr	r3, [pc, #364]	; (800148c <HAL_ADC_Start_DMA+0x220>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 031f 	and.w	r3, r3, #31
 8001324:	2b00      	cmp	r3, #0
 8001326:	d010      	beq.n	800134a <HAL_ADC_Start_DMA+0xde>
 8001328:	e005      	b.n	8001336 <HAL_ADC_Start_DMA+0xca>
 800132a:	4b59      	ldr	r3, [pc, #356]	; (8001490 <HAL_ADC_Start_DMA+0x224>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	2b00      	cmp	r3, #0
 8001334:	d009      	beq.n	800134a <HAL_ADC_Start_DMA+0xde>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800133e:	d004      	beq.n	800134a <HAL_ADC_Start_DMA+0xde>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a53      	ldr	r2, [pc, #332]	; (8001494 <HAL_ADC_Start_DMA+0x228>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d115      	bne.n	8001376 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d036      	beq.n	80013d2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800136c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001374:	e02d      	b.n	80013d2 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800138a:	d004      	beq.n	8001396 <HAL_ADC_Start_DMA+0x12a>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a3d      	ldr	r2, [pc, #244]	; (8001488 <HAL_ADC_Start_DMA+0x21c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d10a      	bne.n	80013ac <HAL_ADC_Start_DMA+0x140>
 8001396:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf14      	ite	ne
 80013a4:	2301      	movne	r3, #1
 80013a6:	2300      	moveq	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	e008      	b.n	80013be <HAL_ADC_Start_DMA+0x152>
 80013ac:	4b39      	ldr	r3, [pc, #228]	; (8001494 <HAL_ADC_Start_DMA+0x228>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	bf14      	ite	ne
 80013b8:	2301      	movne	r3, #1
 80013ba:	2300      	moveq	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d007      	beq.n	80013d2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013de:	d106      	bne.n	80013ee <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e4:	f023 0206 	bic.w	r2, r3, #6
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	645a      	str	r2, [r3, #68]	; 0x44
 80013ec:	e002      	b.n	80013f4 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001400:	4a25      	ldr	r2, [pc, #148]	; (8001498 <HAL_ADC_Start_DMA+0x22c>)
 8001402:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001408:	4a24      	ldr	r2, [pc, #144]	; (800149c <HAL_ADC_Start_DMA+0x230>)
 800140a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001410:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <HAL_ADC_Start_DMA+0x234>)
 8001412:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	221c      	movs	r2, #28
 800141a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0210 	orr.w	r2, r2, #16
 800142a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0201 	orr.w	r2, r2, #1
 800143a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3340      	adds	r3, #64	; 0x40
 8001446:	4619      	mov	r1, r3
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f000 fe90 	bl	8002170 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0204 	orr.w	r2, r2, #4
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	e00d      	b.n	800147e <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800146a:	e008      	b.n	800147e <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001478:	e001      	b.n	800147e <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800147a:	2302      	movs	r3, #2
 800147c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800147e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	50000100 	.word	0x50000100
 800148c:	50000300 	.word	0x50000300
 8001490:	50000700 	.word	0x50000700
 8001494:	50000400 	.word	0x50000400
 8001498:	08001c61 	.word	0x08001c61
 800149c:	08001cdb 	.word	0x08001cdb
 80014a0:	08001cf7 	.word	0x08001cf7

080014a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b09b      	sub	sp, #108	; 0x6c
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x22>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e2ca      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x5b8>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f040 82ae 	bne.w	8001a3a <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	d81c      	bhi.n	8001520 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	461a      	mov	r2, r3
 80014fa:	231f      	movs	r3, #31
 80014fc:	4093      	lsls	r3, r2
 80014fe:	43db      	mvns	r3, r3
 8001500:	4019      	ands	r1, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fa00 f203 	lsl.w	r2, r0, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	631a      	str	r2, [r3, #48]	; 0x30
 800151e:	e063      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b09      	cmp	r3, #9
 8001526:	d81e      	bhi.n	8001566 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	3b1e      	subs	r3, #30
 800153c:	221f      	movs	r2, #31
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	4019      	ands	r1, r3
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4413      	add	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	3b1e      	subs	r3, #30
 8001558:	fa00 f203 	lsl.w	r2, r0, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	635a      	str	r2, [r3, #52]	; 0x34
 8001564:	e040      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b0e      	cmp	r3, #14
 800156c:	d81e      	bhi.n	80015ac <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	3b3c      	subs	r3, #60	; 0x3c
 8001582:	221f      	movs	r2, #31
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	4019      	ands	r1, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	3b3c      	subs	r3, #60	; 0x3c
 800159e:	fa00 f203 	lsl.w	r2, r0, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	639a      	str	r2, [r3, #56]	; 0x38
 80015aa:	e01d      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	3b5a      	subs	r3, #90	; 0x5a
 80015c0:	221f      	movs	r2, #31
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	4019      	ands	r1, r3
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	6818      	ldr	r0, [r3, #0]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	3b5a      	subs	r3, #90	; 0x5a
 80015dc:	fa00 f203 	lsl.w	r2, r0, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f040 80e5 	bne.w	80017c2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b09      	cmp	r3, #9
 80015fe:	d91c      	bls.n	800163a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6999      	ldr	r1, [r3, #24]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	3b1e      	subs	r3, #30
 8001612:	2207      	movs	r2, #7
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	4019      	ands	r1, r3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	6898      	ldr	r0, [r3, #8]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	3b1e      	subs	r3, #30
 800162c:	fa00 f203 	lsl.w	r2, r0, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	619a      	str	r2, [r3, #24]
 8001638:	e019      	b.n	800166e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6959      	ldr	r1, [r3, #20]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4613      	mov	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	2207      	movs	r2, #7
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	4019      	ands	r1, r3
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	6898      	ldr	r0, [r3, #8]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	fa00 f203 	lsl.w	r2, r0, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	695a      	ldr	r2, [r3, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	08db      	lsrs	r3, r3, #3
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	3b01      	subs	r3, #1
 800168c:	2b03      	cmp	r3, #3
 800168e:	d84f      	bhi.n	8001730 <HAL_ADC_ConfigChannel+0x28c>
 8001690:	a201      	add	r2, pc, #4	; (adr r2, 8001698 <HAL_ADC_ConfigChannel+0x1f4>)
 8001692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001696:	bf00      	nop
 8001698:	080016a9 	.word	0x080016a9
 800169c:	080016cb 	.word	0x080016cb
 80016a0:	080016ed 	.word	0x080016ed
 80016a4:	0800170f 	.word	0x0800170f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016ae:	4b9a      	ldr	r3, [pc, #616]	; (8001918 <HAL_ADC_ConfigChannel+0x474>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	0691      	lsls	r1, r2, #26
 80016b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016ba:	430a      	orrs	r2, r1
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016c6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016c8:	e07e      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016d0:	4b91      	ldr	r3, [pc, #580]	; (8001918 <HAL_ADC_ConfigChannel+0x474>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	0691      	lsls	r1, r2, #26
 80016da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016dc:	430a      	orrs	r2, r1
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016e8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016ea:	e06d      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80016f2:	4b89      	ldr	r3, [pc, #548]	; (8001918 <HAL_ADC_ConfigChannel+0x474>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	0691      	lsls	r1, r2, #26
 80016fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016fe:	430a      	orrs	r2, r1
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800170a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800170c:	e05c      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001714:	4b80      	ldr	r3, [pc, #512]	; (8001918 <HAL_ADC_ConfigChannel+0x474>)
 8001716:	4013      	ands	r3, r2
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	0691      	lsls	r1, r2, #26
 800171e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001720:	430a      	orrs	r2, r1
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800172c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800172e:	e04b      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001736:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	069b      	lsls	r3, r3, #26
 8001740:	429a      	cmp	r2, r3
 8001742:	d107      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001752:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800175a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	069b      	lsls	r3, r3, #26
 8001764:	429a      	cmp	r2, r3
 8001766:	d107      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001776:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800177e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	069b      	lsls	r3, r3, #26
 8001788:	429a      	cmp	r2, r3
 800178a:	d107      	bne.n	800179c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800179a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	069b      	lsls	r3, r3, #26
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d10a      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017be:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80017c0:	e001      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80017c2:	bf00      	nop
 80017c4:	e000      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80017c6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d108      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x344>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x344>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <HAL_ADC_ConfigChannel+0x346>
 80017e8:	2300      	movs	r3, #0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f040 8130 	bne.w	8001a50 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d00f      	beq.n	8001818 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	400a      	ands	r2, r1
 8001812:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001816:	e049      	b.n	80018ac <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2201      	movs	r2, #1
 8001826:	409a      	lsls	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b09      	cmp	r3, #9
 8001838:	d91c      	bls.n	8001874 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6999      	ldr	r1, [r3, #24]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	3b1b      	subs	r3, #27
 800184c:	2207      	movs	r2, #7
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	4019      	ands	r1, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	6898      	ldr	r0, [r3, #8]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	3b1b      	subs	r3, #27
 8001866:	fa00 f203 	lsl.w	r2, r0, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	619a      	str	r2, [r3, #24]
 8001872:	e01b      	b.n	80018ac <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6959      	ldr	r1, [r3, #20]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	2207      	movs	r2, #7
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	4019      	ands	r1, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	6898      	ldr	r0, [r3, #8]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	fa00 f203 	lsl.w	r2, r0, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018b4:	d004      	beq.n	80018c0 <HAL_ADC_ConfigChannel+0x41c>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a18      	ldr	r2, [pc, #96]	; (800191c <HAL_ADC_ConfigChannel+0x478>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d101      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x420>
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_ADC_ConfigChannel+0x47c>)
 80018c2:	e000      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x422>
 80018c4:	4b17      	ldr	r3, [pc, #92]	; (8001924 <HAL_ADC_ConfigChannel+0x480>)
 80018c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b10      	cmp	r3, #16
 80018ce:	d105      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80018d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d015      	beq.n	8001908 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80018e0:	2b11      	cmp	r3, #17
 80018e2:	d105      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80018e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00b      	beq.n	8001908 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80018f4:	2b12      	cmp	r3, #18
 80018f6:	f040 80ab 	bne.w	8001a50 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80018fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 80a4 	bne.w	8001a50 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001910:	d10a      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x484>
 8001912:	4b02      	ldr	r3, [pc, #8]	; (800191c <HAL_ADC_ConfigChannel+0x478>)
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	e022      	b.n	800195e <HAL_ADC_ConfigChannel+0x4ba>
 8001918:	83fff000 	.word	0x83fff000
 800191c:	50000100 	.word	0x50000100
 8001920:	50000300 	.word	0x50000300
 8001924:	50000700 	.word	0x50000700
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a4e      	ldr	r2, [pc, #312]	; (8001a68 <HAL_ADC_ConfigChannel+0x5c4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d103      	bne.n	800193a <HAL_ADC_ConfigChannel+0x496>
 8001932:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	e011      	b.n	800195e <HAL_ADC_ConfigChannel+0x4ba>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a4b      	ldr	r2, [pc, #300]	; (8001a6c <HAL_ADC_ConfigChannel+0x5c8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d102      	bne.n	800194a <HAL_ADC_ConfigChannel+0x4a6>
 8001944:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <HAL_ADC_ConfigChannel+0x5cc>)
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	e009      	b.n	800195e <HAL_ADC_ConfigChannel+0x4ba>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a48      	ldr	r2, [pc, #288]	; (8001a70 <HAL_ADC_ConfigChannel+0x5cc>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d102      	bne.n	800195a <HAL_ADC_ConfigChannel+0x4b6>
 8001954:	4b45      	ldr	r3, [pc, #276]	; (8001a6c <HAL_ADC_ConfigChannel+0x5c8>)
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e001      	b.n	800195e <HAL_ADC_ConfigChannel+0x4ba>
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b01      	cmp	r3, #1
 800196a:	d108      	bne.n	800197e <HAL_ADC_ConfigChannel+0x4da>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_ADC_ConfigChannel+0x4da>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_ADC_ConfigChannel+0x4dc>
 800197e:	2300      	movs	r3, #0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d150      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001984:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001986:	2b00      	cmp	r3, #0
 8001988:	d010      	beq.n	80019ac <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d107      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x502>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x502>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x504>
 80019a6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d13c      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b10      	cmp	r3, #16
 80019b2:	d11d      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x54c>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019bc:	d118      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80019be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019c8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019ca:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <HAL_ADC_ConfigChannel+0x5d0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a2a      	ldr	r2, [pc, #168]	; (8001a78 <HAL_ADC_ConfigChannel+0x5d4>)
 80019d0:	fba2 2303 	umull	r2, r3, r2, r3
 80019d4:	0c9a      	lsrs	r2, r3, #18
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019e0:	e002      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f9      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019ee:	e02e      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b11      	cmp	r3, #17
 80019f6:	d10b      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x56c>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a00:	d106      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a0c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a0e:	e01e      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b12      	cmp	r3, #18
 8001a16:	d11a      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a22:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a24:	e013      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f043 0220 	orr.w	r2, r3, #32
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001a38:	e00a      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f043 0220 	orr.w	r2, r3, #32
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001a4c:	e000      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a4e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	376c      	adds	r7, #108	; 0x6c
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	50000100 	.word	0x50000100
 8001a6c:	50000400 	.word	0x50000400
 8001a70:	50000500 	.word	0x50000500
 8001a74:	20000040 	.word	0x20000040
 8001a78:	431bde83 	.word	0x431bde83

08001a7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b099      	sub	sp, #100	; 0x64
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a94:	d102      	bne.n	8001a9c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001a96:	4b6d      	ldr	r3, [pc, #436]	; (8001c4c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	e01a      	b.n	8001ad2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a6a      	ldr	r2, [pc, #424]	; (8001c4c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d103      	bne.n	8001aae <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001aa6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	e011      	b.n	8001ad2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a67      	ldr	r2, [pc, #412]	; (8001c50 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d102      	bne.n	8001abe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001ab8:	4b66      	ldr	r3, [pc, #408]	; (8001c54 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	e009      	b.n	8001ad2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a64      	ldr	r2, [pc, #400]	; (8001c54 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d102      	bne.n	8001ace <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001ac8:	4b61      	ldr	r3, [pc, #388]	; (8001c50 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	e001      	b.n	8001ad2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0b0      	b.n	8001c3e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e0a9      	b.n	8001c3e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f040 808d 	bne.w	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f040 8086 	bne.w	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b18:	d004      	beq.n	8001b24 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a4b      	ldr	r2, [pc, #300]	; (8001c4c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d101      	bne.n	8001b28 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001b24:	4b4c      	ldr	r3, [pc, #304]	; (8001c58 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001b26:	e000      	b.n	8001b2a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001b28:	4b4c      	ldr	r3, [pc, #304]	; (8001c5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001b2a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d040      	beq.n	8001bb6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001b34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6859      	ldr	r1, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b46:	035b      	lsls	r3, r3, #13
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b4e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d108      	bne.n	8001b70 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001b70:	2300      	movs	r3, #0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d15c      	bne.n	8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d107      	bne.n	8001b92 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001b92:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d14b      	bne.n	8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ba0:	f023 030f 	bic.w	r3, r3, #15
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	6811      	ldr	r1, [r2, #0]
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	6892      	ldr	r2, [r2, #8]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bb2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bb4:	e03c      	b.n	8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bc0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d108      	bne.n	8001be2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001be2:	2300      	movs	r3, #0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d123      	bne.n	8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d107      	bne.n	8001c04 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001c04:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d112      	bne.n	8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001c0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c12:	f023 030f 	bic.w	r3, r3, #15
 8001c16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c18:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c1a:	e009      	b.n	8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f043 0220 	orr.w	r2, r3, #32
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001c2e:	e000      	b.n	8001c32 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c30:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3764      	adds	r7, #100	; 0x64
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	50000100 	.word	0x50000100
 8001c50:	50000400 	.word	0x50000400
 8001c54:	50000500 	.word	0x50000500
 8001c58:	50000300 	.word	0x50000300
 8001c5c:	50000700 	.word	0x50000700

08001c60 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d126      	bne.n	8001cc8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d115      	bne.n	8001cc0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d111      	bne.n	8001cc0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f043 0201 	orr.w	r2, r3, #1
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f7fe fda1 	bl	8000808 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001cc6:	e004      	b.n	8001cd2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f7ff f8cb 	bl	8000e84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d14:	f043 0204 	orr.w	r2, r3, #4
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f7ff f8bb 	bl	8000e98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d108      	bne.n	8001d58 <ADC_Enable+0x2c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <ADC_Enable+0x2c>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <ADC_Enable+0x2e>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d143      	bne.n	8001de6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <ADC_Enable+0xc4>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00d      	beq.n	8001d88 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f043 0210 	orr.w	r2, r3, #16
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7c:	f043 0201 	orr.w	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e02f      	b.n	8001de8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001d98:	f7ff f844 	bl	8000e24 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d9e:	e01b      	b.n	8001dd8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001da0:	f7ff f840 	bl	8000e24 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d914      	bls.n	8001dd8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d00d      	beq.n	8001dd8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f043 0210 	orr.w	r2, r3, #16
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dcc:	f043 0201 	orr.w	r2, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e007      	b.n	8001de8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d1dc      	bne.n	8001da0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	8000003f 	.word	0x8000003f

08001df4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d108      	bne.n	8001e20 <ADC_Disable+0x2c>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <ADC_Disable+0x2c>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <ADC_Disable+0x2e>
 8001e20:	2300      	movs	r3, #0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d047      	beq.n	8001eb6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 030d 	and.w	r3, r3, #13
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d10f      	bne.n	8001e54 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0202 	orr.w	r2, r2, #2
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2203      	movs	r2, #3
 8001e4a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001e4c:	f7fe ffea 	bl	8000e24 <HAL_GetTick>
 8001e50:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e52:	e029      	b.n	8001ea8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f043 0210 	orr.w	r2, r3, #16
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e64:	f043 0201 	orr.w	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e023      	b.n	8001eb8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e70:	f7fe ffd8 	bl	8000e24 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d914      	bls.n	8001ea8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d10d      	bne.n	8001ea8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	f043 0210 	orr.w	r2, r3, #16
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9c:	f043 0201 	orr.w	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e007      	b.n	8001eb8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d0dc      	beq.n	8001e70 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <__NVIC_SetPriorityGrouping>:
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_GetPriorityGrouping>:
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_EnableIRQ>:
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db0b      	blt.n	8001f4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	4907      	ldr	r1, [pc, #28]	; (8001f5c <__NVIC_EnableIRQ+0x38>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	2001      	movs	r0, #1
 8001f46:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100

08001f60 <__NVIC_SetPriority>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	; (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	; (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	; 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f1c3 0307 	rsb	r3, r3, #7
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	bf28      	it	cs
 8001fd2:	2304      	movcs	r3, #4
 8001fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d902      	bls.n	8001fe4 <NVIC_EncodePriority+0x30>
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3b03      	subs	r3, #3
 8001fe2:	e000      	b.n	8001fe6 <NVIC_EncodePriority+0x32>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43d9      	mvns	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	4313      	orrs	r3, r2
         );
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	; 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800202c:	d301      	bcc.n	8002032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202e:	2301      	movs	r3, #1
 8002030:	e00f      	b.n	8002052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <SysTick_Config+0x40>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203a:	210f      	movs	r1, #15
 800203c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002040:	f7ff ff8e 	bl	8001f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <SysTick_Config+0x40>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204a:	4b04      	ldr	r3, [pc, #16]	; (800205c <SysTick_Config+0x40>)
 800204c:	2207      	movs	r2, #7
 800204e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	e000e010 	.word	0xe000e010

08002060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ff29 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002088:	f7ff ff3e 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 800208c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	f7ff ff8e 	bl	8001fb4 <NVIC_EncodePriority>
 8002098:	4602      	mov	r2, r0
 800209a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff5d 	bl	8001f60 <__NVIC_SetPriority>
}
 80020a6:	bf00      	nop
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff31 	bl	8001f24 <__NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ffa2 	bl	800201c <SysTick_Config>
 80020d8:	4603      	mov	r3, r0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e037      	b.n	8002168 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800210e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002112:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800211c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002128:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002134:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f940 	bl	80023d0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}  
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_DMA_Start_IT+0x20>
 800218c:	2302      	movs	r3, #2
 800218e:	e04a      	b.n	8002226 <HAL_DMA_Start_IT+0xb6>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d13a      	bne.n	8002218 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2202      	movs	r2, #2
 80021a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f8d4 	bl	8002374 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 020e 	orr.w	r2, r2, #14
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	e00f      	b.n	8002206 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 020a 	orr.w	r2, r2, #10
 80021f4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0204 	bic.w	r2, r2, #4
 8002204:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 0201 	orr.w	r2, r2, #1
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	e005      	b.n	8002224 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002220:	2302      	movs	r3, #2
 8002222:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002224:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	2204      	movs	r2, #4
 800224c:	409a      	lsls	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d024      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x72>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01f      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b00      	cmp	r3, #0
 800226c:	d107      	bne.n	800227e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0204 	bic.w	r2, r2, #4
 800227c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002286:	2104      	movs	r1, #4
 8002288:	fa01 f202 	lsl.w	r2, r1, r2
 800228c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	2b00      	cmp	r3, #0
 8002294:	d06a      	beq.n	800236c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800229e:	e065      	b.n	800236c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	2202      	movs	r2, #2
 80022a6:	409a      	lsls	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d02c      	beq.n	800230a <HAL_DMA_IRQHandler+0xdc>
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d027      	beq.n	800230a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10b      	bne.n	80022e0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 020a 	bic.w	r2, r2, #10
 80022d6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e8:	2102      	movs	r1, #2
 80022ea:	fa01 f202 	lsl.w	r2, r1, r2
 80022ee:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d035      	beq.n	800236c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002308:	e030      	b.n	800236c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	2208      	movs	r2, #8
 8002310:	409a      	lsls	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4013      	ands	r3, r2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d028      	beq.n	800236c <HAL_DMA_IRQHandler+0x13e>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d023      	beq.n	800236c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 020e 	bic.w	r2, r2, #14
 8002332:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f202 	lsl.w	r2, r1, r2
 8002342:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	4798      	blx	r3
    }
  }
}  
 800236a:	e7ff      	b.n	800236c <HAL_DMA_IRQHandler+0x13e>
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238a:	2101      	movs	r1, #1
 800238c:	fa01 f202 	lsl.w	r2, r1, r2
 8002390:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b10      	cmp	r3, #16
 80023a0:	d108      	bne.n	80023b4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023b2:	e007      	b.n	80023c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	60da      	str	r2, [r3, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	4b14      	ldr	r3, [pc, #80]	; (8002430 <DMA_CalcBaseAndBitshift+0x60>)
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d80f      	bhi.n	8002404 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <DMA_CalcBaseAndBitshift+0x64>)
 80023ec:	4413      	add	r3, r2
 80023ee:	4a12      	ldr	r2, [pc, #72]	; (8002438 <DMA_CalcBaseAndBitshift+0x68>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	009a      	lsls	r2, r3, #2
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a0f      	ldr	r2, [pc, #60]	; (800243c <DMA_CalcBaseAndBitshift+0x6c>)
 8002400:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002402:	e00e      	b.n	8002422 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <DMA_CalcBaseAndBitshift+0x70>)
 800240c:	4413      	add	r3, r2
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <DMA_CalcBaseAndBitshift+0x68>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	009a      	lsls	r2, r3, #2
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a09      	ldr	r2, [pc, #36]	; (8002444 <DMA_CalcBaseAndBitshift+0x74>)
 8002420:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40020407 	.word	0x40020407
 8002434:	bffdfff8 	.word	0xbffdfff8
 8002438:	cccccccd 	.word	0xcccccccd
 800243c:	40020000 	.word	0x40020000
 8002440:	bffdfbf8 	.word	0xbffdfbf8
 8002444:	40020400 	.word	0x40020400

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002456:	e154      	b.n	8002702 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	2101      	movs	r1, #1
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	4013      	ands	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8146 	beq.w	80026fc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d005      	beq.n	8002488 <HAL_GPIO_Init+0x40>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d130      	bne.n	80024ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024be:	2201      	movs	r2, #1
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 0201 	and.w	r2, r3, #1
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d017      	beq.n	8002526 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d123      	bne.n	800257a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	08da      	lsrs	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3208      	adds	r2, #8
 800253a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	220f      	movs	r2, #15
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	08da      	lsrs	r2, r3, #3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3208      	adds	r2, #8
 8002574:	6939      	ldr	r1, [r7, #16]
 8002576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	2203      	movs	r2, #3
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0203 	and.w	r2, r3, #3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 80a0 	beq.w	80026fc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025bc:	4b58      	ldr	r3, [pc, #352]	; (8002720 <HAL_GPIO_Init+0x2d8>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	4a57      	ldr	r2, [pc, #348]	; (8002720 <HAL_GPIO_Init+0x2d8>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6193      	str	r3, [r2, #24]
 80025c8:	4b55      	ldr	r3, [pc, #340]	; (8002720 <HAL_GPIO_Init+0x2d8>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025d4:	4a53      	ldr	r2, [pc, #332]	; (8002724 <HAL_GPIO_Init+0x2dc>)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	089b      	lsrs	r3, r3, #2
 80025da:	3302      	adds	r3, #2
 80025dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	220f      	movs	r2, #15
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025fe:	d019      	beq.n	8002634 <HAL_GPIO_Init+0x1ec>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a49      	ldr	r2, [pc, #292]	; (8002728 <HAL_GPIO_Init+0x2e0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d013      	beq.n	8002630 <HAL_GPIO_Init+0x1e8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a48      	ldr	r2, [pc, #288]	; (800272c <HAL_GPIO_Init+0x2e4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d00d      	beq.n	800262c <HAL_GPIO_Init+0x1e4>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a47      	ldr	r2, [pc, #284]	; (8002730 <HAL_GPIO_Init+0x2e8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d007      	beq.n	8002628 <HAL_GPIO_Init+0x1e0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a46      	ldr	r2, [pc, #280]	; (8002734 <HAL_GPIO_Init+0x2ec>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d101      	bne.n	8002624 <HAL_GPIO_Init+0x1dc>
 8002620:	2304      	movs	r3, #4
 8002622:	e008      	b.n	8002636 <HAL_GPIO_Init+0x1ee>
 8002624:	2305      	movs	r3, #5
 8002626:	e006      	b.n	8002636 <HAL_GPIO_Init+0x1ee>
 8002628:	2303      	movs	r3, #3
 800262a:	e004      	b.n	8002636 <HAL_GPIO_Init+0x1ee>
 800262c:	2302      	movs	r3, #2
 800262e:	e002      	b.n	8002636 <HAL_GPIO_Init+0x1ee>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <HAL_GPIO_Init+0x1ee>
 8002634:	2300      	movs	r3, #0
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	f002 0203 	and.w	r2, r2, #3
 800263c:	0092      	lsls	r2, r2, #2
 800263e:	4093      	lsls	r3, r2
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002646:	4937      	ldr	r1, [pc, #220]	; (8002724 <HAL_GPIO_Init+0x2dc>)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	089b      	lsrs	r3, r3, #2
 800264c:	3302      	adds	r3, #2
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002654:	4b38      	ldr	r3, [pc, #224]	; (8002738 <HAL_GPIO_Init+0x2f0>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	43db      	mvns	r3, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002678:	4a2f      	ldr	r2, [pc, #188]	; (8002738 <HAL_GPIO_Init+0x2f0>)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800267e:	4b2e      	ldr	r3, [pc, #184]	; (8002738 <HAL_GPIO_Init+0x2f0>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	43db      	mvns	r3, r3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4013      	ands	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026a2:	4a25      	ldr	r2, [pc, #148]	; (8002738 <HAL_GPIO_Init+0x2f0>)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026a8:	4b23      	ldr	r3, [pc, #140]	; (8002738 <HAL_GPIO_Init+0x2f0>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026cc:	4a1a      	ldr	r2, [pc, #104]	; (8002738 <HAL_GPIO_Init+0x2f0>)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d2:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_GPIO_Init+0x2f0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	43db      	mvns	r3, r3
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4013      	ands	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026f6:	4a10      	ldr	r2, [pc, #64]	; (8002738 <HAL_GPIO_Init+0x2f0>)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	3301      	adds	r3, #1
 8002700:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	f47f aea3 	bne.w	8002458 <HAL_GPIO_Init+0x10>
  }
}
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	371c      	adds	r7, #28
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40021000 	.word	0x40021000
 8002724:	40010000 	.word	0x40010000
 8002728:	48000400 	.word	0x48000400
 800272c:	48000800 	.word	0x48000800
 8002730:	48000c00 	.word	0x48000c00
 8002734:	48001000 	.word	0x48001000
 8002738:	40010400 	.word	0x40010400

0800273c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
 8002748:	4613      	mov	r3, r2
 800274a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800274c:	787b      	ldrb	r3, [r7, #1]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002752:	887a      	ldrh	r2, [r7, #2]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002758:	e002      	b.n	8002760 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002772:	af00      	add	r7, sp, #0
 8002774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002778:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800277c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800277e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002782:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	f001 b823 	b.w	80037d8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002796:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 817d 	beq.w	8002aa2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027a8:	4bbc      	ldr	r3, [pc, #752]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 030c 	and.w	r3, r3, #12
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d00c      	beq.n	80027ce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027b4:	4bb9      	ldr	r3, [pc, #740]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d15c      	bne.n	800287a <HAL_RCC_OscConfig+0x10e>
 80027c0:	4bb6      	ldr	r3, [pc, #728]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027cc:	d155      	bne.n	800287a <HAL_RCC_OscConfig+0x10e>
 80027ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d102      	bne.n	8002800 <HAL_RCC_OscConfig+0x94>
 80027fa:	4ba8      	ldr	r3, [pc, #672]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	e015      	b.n	800282c <HAL_RCC_OscConfig+0xc0>
 8002800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002804:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002818:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800281c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002828:	4b9c      	ldr	r3, [pc, #624]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002830:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002834:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002838:	fa92 f2a2 	rbit	r2, r2
 800283c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002840:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002844:	fab2 f282 	clz	r2, r2
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	f042 0220 	orr.w	r2, r2, #32
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	f002 021f 	and.w	r2, r2, #31
 8002854:	2101      	movs	r1, #1
 8002856:	fa01 f202 	lsl.w	r2, r1, r2
 800285a:	4013      	ands	r3, r2
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 811f 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x334>
 8002862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002866:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 8116 	bne.w	8002aa0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	f000 bfaf 	b.w	80037d8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800287a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288a:	d106      	bne.n	800289a <HAL_RCC_OscConfig+0x12e>
 800288c:	4b83      	ldr	r3, [pc, #524]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a82      	ldr	r2, [pc, #520]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	e036      	b.n	8002908 <HAL_RCC_OscConfig+0x19c>
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x158>
 80028aa:	4b7c      	ldr	r3, [pc, #496]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a7b      	ldr	r2, [pc, #492]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 80028b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	4b79      	ldr	r3, [pc, #484]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a78      	ldr	r2, [pc, #480]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 80028bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e021      	b.n	8002908 <HAL_RCC_OscConfig+0x19c>
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x184>
 80028d6:	4b71      	ldr	r3, [pc, #452]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a70      	ldr	r2, [pc, #448]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 80028dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	4b6e      	ldr	r3, [pc, #440]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a6d      	ldr	r2, [pc, #436]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e00b      	b.n	8002908 <HAL_RCC_OscConfig+0x19c>
 80028f0:	4b6a      	ldr	r3, [pc, #424]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a69      	ldr	r2, [pc, #420]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 80028f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4b67      	ldr	r3, [pc, #412]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a66      	ldr	r2, [pc, #408]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 8002902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002906:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002908:	4b64      	ldr	r3, [pc, #400]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	f023 020f 	bic.w	r2, r3, #15
 8002910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002914:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	495f      	ldr	r1, [pc, #380]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 800291e:	4313      	orrs	r3, r2
 8002920:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d059      	beq.n	80029e6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7fe fa77 	bl	8000e24 <HAL_GetTick>
 8002936:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800293c:	f7fe fa72 	bl	8000e24 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b64      	cmp	r3, #100	; 0x64
 800294a:	d902      	bls.n	8002952 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	f000 bf43 	b.w	80037d8 <HAL_RCC_OscConfig+0x106c>
 8002952:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002956:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002966:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d102      	bne.n	8002984 <HAL_RCC_OscConfig+0x218>
 800297e:	4b47      	ldr	r3, [pc, #284]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	e015      	b.n	80029b0 <HAL_RCC_OscConfig+0x244>
 8002984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002988:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002998:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800299c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80029a0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80029a4:	fa93 f3a3 	rbit	r3, r3
 80029a8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80029ac:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029b4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80029b8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80029bc:	fa92 f2a2 	rbit	r2, r2
 80029c0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80029c4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80029c8:	fab2 f282 	clz	r2, r2
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	f042 0220 	orr.w	r2, r2, #32
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	f002 021f 	and.w	r2, r2, #31
 80029d8:	2101      	movs	r1, #1
 80029da:	fa01 f202 	lsl.w	r2, r1, r2
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0ab      	beq.n	800293c <HAL_RCC_OscConfig+0x1d0>
 80029e4:	e05d      	b.n	8002aa2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e6:	f7fe fa1d 	bl	8000e24 <HAL_GetTick>
 80029ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fe fa18 	bl	8000e24 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b64      	cmp	r3, #100	; 0x64
 80029fe:	d902      	bls.n	8002a06 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	f000 bee9 	b.w	80037d8 <HAL_RCC_OscConfig+0x106c>
 8002a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a0a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002a1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d102      	bne.n	8002a38 <HAL_RCC_OscConfig+0x2cc>
 8002a32:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	e015      	b.n	8002a64 <HAL_RCC_OscConfig+0x2f8>
 8002a38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a3c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a50:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a54:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002a60:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <HAL_RCC_OscConfig+0x330>)
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a68:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002a6c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a70:	fa92 f2a2 	rbit	r2, r2
 8002a74:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002a78:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a7c:	fab2 f282 	clz	r2, r2
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	f042 0220 	orr.w	r2, r2, #32
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	f002 021f 	and.w	r2, r2, #31
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1ab      	bne.n	80029f0 <HAL_RCC_OscConfig+0x284>
 8002a98:	e003      	b.n	8002aa2 <HAL_RCC_OscConfig+0x336>
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 817d 	beq.w	8002db2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ab8:	4ba6      	ldr	r3, [pc, #664]	; (8002d54 <HAL_RCC_OscConfig+0x5e8>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 030c 	and.w	r3, r3, #12
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00b      	beq.n	8002adc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ac4:	4ba3      	ldr	r3, [pc, #652]	; (8002d54 <HAL_RCC_OscConfig+0x5e8>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d172      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x44a>
 8002ad0:	4ba0      	ldr	r3, [pc, #640]	; (8002d54 <HAL_RCC_OscConfig+0x5e8>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d16c      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x44a>
 8002adc:	2302      	movs	r3, #2
 8002ade:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002aee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d102      	bne.n	8002b0c <HAL_RCC_OscConfig+0x3a0>
 8002b06:	4b93      	ldr	r3, [pc, #588]	; (8002d54 <HAL_RCC_OscConfig+0x5e8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	e013      	b.n	8002b34 <HAL_RCC_OscConfig+0x3c8>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b1e:	2302      	movs	r3, #2
 8002b20:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b24:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b30:	4b88      	ldr	r3, [pc, #544]	; (8002d54 <HAL_RCC_OscConfig+0x5e8>)
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	2202      	movs	r2, #2
 8002b36:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002b3a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b3e:	fa92 f2a2 	rbit	r2, r2
 8002b42:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002b46:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002b4a:	fab2 f282 	clz	r2, r2
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	f042 0220 	orr.w	r2, r2, #32
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	f002 021f 	and.w	r2, r2, #31
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCC_OscConfig+0x410>
 8002b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d002      	beq.n	8002b7c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f000 be2e 	b.w	80037d8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7c:	4b75      	ldr	r3, [pc, #468]	; (8002d54 <HAL_RCC_OscConfig+0x5e8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	21f8      	movs	r1, #248	; 0xf8
 8002b92:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b9a:	fa91 f1a1 	rbit	r1, r1
 8002b9e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002ba2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002ba6:	fab1 f181 	clz	r1, r1
 8002baa:	b2c9      	uxtb	r1, r1
 8002bac:	408b      	lsls	r3, r1
 8002bae:	4969      	ldr	r1, [pc, #420]	; (8002d54 <HAL_RCC_OscConfig+0x5e8>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb4:	e0fd      	b.n	8002db2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8088 	beq.w	8002cd8 <HAL_RCC_OscConfig+0x56c>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002bda:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002be8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe f916 	bl	8000e24 <HAL_GetTick>
 8002bf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfc:	e00a      	b.n	8002c14 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bfe:	f7fe f911 	bl	8000e24 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d902      	bls.n	8002c14 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	f000 bde2 	b.w	80037d8 <HAL_RCC_OscConfig+0x106c>
 8002c14:	2302      	movs	r3, #2
 8002c16:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002c26:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	095b      	lsrs	r3, r3, #5
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d102      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4d8>
 8002c3e:	4b45      	ldr	r3, [pc, #276]	; (8002d54 <HAL_RCC_OscConfig+0x5e8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	e013      	b.n	8002c6c <HAL_RCC_OscConfig+0x500>
 8002c44:	2302      	movs	r3, #2
 8002c46:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c56:	2302      	movs	r3, #2
 8002c58:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c5c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002c68:	4b3a      	ldr	r3, [pc, #232]	; (8002d54 <HAL_RCC_OscConfig+0x5e8>)
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002c72:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c76:	fa92 f2a2 	rbit	r2, r2
 8002c7a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002c7e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002c82:	fab2 f282 	clz	r2, r2
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	f042 0220 	orr.w	r2, r2, #32
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	f002 021f 	and.w	r2, r2, #31
 8002c92:	2101      	movs	r1, #1
 8002c94:	fa01 f202 	lsl.w	r2, r1, r2
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0af      	beq.n	8002bfe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9e:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <HAL_RCC_OscConfig+0x5e8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002caa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	21f8      	movs	r1, #248	; 0xf8
 8002cb4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002cbc:	fa91 f1a1 	rbit	r1, r1
 8002cc0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002cc4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002cc8:	fab1 f181 	clz	r1, r1
 8002ccc:	b2c9      	uxtb	r1, r1
 8002cce:	408b      	lsls	r3, r1
 8002cd0:	4920      	ldr	r1, [pc, #128]	; (8002d54 <HAL_RCC_OscConfig+0x5e8>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]
 8002cd6:	e06c      	b.n	8002db2 <HAL_RCC_OscConfig+0x646>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002cea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cf8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2300      	movs	r3, #0
 8002d02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fe f88e 	bl	8000e24 <HAL_GetTick>
 8002d08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0e:	f7fe f889 	bl	8000e24 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d902      	bls.n	8002d24 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	f000 bd5a 	b.w	80037d8 <HAL_RCC_OscConfig+0x106c>
 8002d24:	2302      	movs	r3, #2
 8002d26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d104      	bne.n	8002d58 <HAL_RCC_OscConfig+0x5ec>
 8002d4e:	4b01      	ldr	r3, [pc, #4]	; (8002d54 <HAL_RCC_OscConfig+0x5e8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	e015      	b.n	8002d80 <HAL_RCC_OscConfig+0x614>
 8002d54:	40021000 	.word	0x40021000
 8002d58:	2302      	movs	r3, #2
 8002d5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d70:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002d7c:	4bc8      	ldr	r3, [pc, #800]	; (80030a0 <HAL_RCC_OscConfig+0x934>)
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	2202      	movs	r2, #2
 8002d82:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002d86:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d8a:	fa92 f2a2 	rbit	r2, r2
 8002d8e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002d92:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d96:	fab2 f282 	clz	r2, r2
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f042 0220 	orr.w	r2, r2, #32
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	f002 021f 	and.w	r2, r2, #31
 8002da6:	2101      	movs	r1, #1
 8002da8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1ad      	bne.n	8002d0e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 8110 	beq.w	8002fe8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d079      	beq.n	8002ecc <HAL_RCC_OscConfig+0x760>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	4bab      	ldr	r3, [pc, #684]	; (80030a4 <HAL_RCC_OscConfig+0x938>)
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2301      	movs	r3, #1
 8002e00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e02:	f7fe f80f 	bl	8000e24 <HAL_GetTick>
 8002e06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0a:	e00a      	b.n	8002e22 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e0c:	f7fe f80a 	bl	8000e24 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d902      	bls.n	8002e22 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	f000 bcdb 	b.w	80037d8 <HAL_RCC_OscConfig+0x106c>
 8002e22:	2302      	movs	r3, #2
 8002e24:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e2c:	fa93 f3a3 	rbit	r3, r3
 8002e30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e38:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e44:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	fa93 f2a3 	rbit	r2, r3
 8002e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e60:	2202      	movs	r2, #2
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	fa93 f2a3 	rbit	r2, r3
 8002e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e7a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7c:	4b88      	ldr	r3, [pc, #544]	; (80030a0 <HAL_RCC_OscConfig+0x934>)
 8002e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e88:	2102      	movs	r1, #2
 8002e8a:	6019      	str	r1, [r3, #0]
 8002e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	fa93 f1a3 	rbit	r1, r3
 8002e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ea2:	6019      	str	r1, [r3, #0]
  return result;
 8002ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0a0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x6a0>
 8002eca:	e08d      	b.n	8002fe8 <HAL_RCC_OscConfig+0x87c>
 8002ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002edc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	fa93 f2a3 	rbit	r2, r3
 8002ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002eee:	601a      	str	r2, [r3, #0]
  return result;
 8002ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ef8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	4b68      	ldr	r3, [pc, #416]	; (80030a4 <HAL_RCC_OscConfig+0x938>)
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0e:	f7fd ff89 	bl	8000e24 <HAL_GetTick>
 8002f12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f18:	f7fd ff84 	bl	8000e24 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d902      	bls.n	8002f2e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	f000 bc55 	b.w	80037d8 <HAL_RCC_OscConfig+0x106c>
 8002f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f36:	2202      	movs	r2, #2
 8002f38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	fa93 f2a3 	rbit	r2, r3
 8002f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f56:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f62:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	fa93 f2a3 	rbit	r2, r3
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f7e:	2202      	movs	r2, #2
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	fa93 f2a3 	rbit	r2, r3
 8002f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f94:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f98:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9a:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <HAL_RCC_OscConfig+0x934>)
 8002f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002fa6:	2102      	movs	r1, #2
 8002fa8:	6019      	str	r1, [r3, #0]
 8002faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	fa93 f1a3 	rbit	r1, r3
 8002fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fc0:	6019      	str	r1, [r3, #0]
  return result;
 8002fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	fab3 f383 	clz	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	2101      	movs	r1, #1
 8002fde:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d197      	bne.n	8002f18 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 81a1 	beq.w	8003340 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003004:	4b26      	ldr	r3, [pc, #152]	; (80030a0 <HAL_RCC_OscConfig+0x934>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d116      	bne.n	800303e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003010:	4b23      	ldr	r3, [pc, #140]	; (80030a0 <HAL_RCC_OscConfig+0x934>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	4a22      	ldr	r2, [pc, #136]	; (80030a0 <HAL_RCC_OscConfig+0x934>)
 8003016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301a:	61d3      	str	r3, [r2, #28]
 800301c:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <HAL_RCC_OscConfig+0x934>)
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003028:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003032:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003036:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003038:	2301      	movs	r3, #1
 800303a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303e:	4b1a      	ldr	r3, [pc, #104]	; (80030a8 <HAL_RCC_OscConfig+0x93c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d11a      	bne.n	8003080 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800304a:	4b17      	ldr	r3, [pc, #92]	; (80030a8 <HAL_RCC_OscConfig+0x93c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a16      	ldr	r2, [pc, #88]	; (80030a8 <HAL_RCC_OscConfig+0x93c>)
 8003050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003054:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003056:	f7fd fee5 	bl	8000e24 <HAL_GetTick>
 800305a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305e:	e009      	b.n	8003074 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003060:	f7fd fee0 	bl	8000e24 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b64      	cmp	r3, #100	; 0x64
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e3b1      	b.n	80037d8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <HAL_RCC_OscConfig+0x93c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ef      	beq.n	8003060 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003084:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d10d      	bne.n	80030ac <HAL_RCC_OscConfig+0x940>
 8003090:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <HAL_RCC_OscConfig+0x934>)
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	4a02      	ldr	r2, [pc, #8]	; (80030a0 <HAL_RCC_OscConfig+0x934>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	6213      	str	r3, [r2, #32]
 800309c:	e03c      	b.n	8003118 <HAL_RCC_OscConfig+0x9ac>
 800309e:	bf00      	nop
 80030a0:	40021000 	.word	0x40021000
 80030a4:	10908120 	.word	0x10908120
 80030a8:	40007000 	.word	0x40007000
 80030ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10c      	bne.n	80030d6 <HAL_RCC_OscConfig+0x96a>
 80030bc:	4bc1      	ldr	r3, [pc, #772]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4ac0      	ldr	r2, [pc, #768]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 80030c2:	f023 0301 	bic.w	r3, r3, #1
 80030c6:	6213      	str	r3, [r2, #32]
 80030c8:	4bbe      	ldr	r3, [pc, #760]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4abd      	ldr	r2, [pc, #756]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 80030ce:	f023 0304 	bic.w	r3, r3, #4
 80030d2:	6213      	str	r3, [r2, #32]
 80030d4:	e020      	b.n	8003118 <HAL_RCC_OscConfig+0x9ac>
 80030d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b05      	cmp	r3, #5
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x994>
 80030e6:	4bb7      	ldr	r3, [pc, #732]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4ab6      	ldr	r2, [pc, #728]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 80030ec:	f043 0304 	orr.w	r3, r3, #4
 80030f0:	6213      	str	r3, [r2, #32]
 80030f2:	4bb4      	ldr	r3, [pc, #720]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	4ab3      	ldr	r2, [pc, #716]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6213      	str	r3, [r2, #32]
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0x9ac>
 8003100:	4bb0      	ldr	r3, [pc, #704]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	4aaf      	ldr	r2, [pc, #700]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	6213      	str	r3, [r2, #32]
 800310c:	4bad      	ldr	r3, [pc, #692]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4aac      	ldr	r2, [pc, #688]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 8003112:	f023 0304 	bic.w	r3, r3, #4
 8003116:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8081 	beq.w	800322c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312a:	f7fd fe7b 	bl	8000e24 <HAL_GetTick>
 800312e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003132:	e00b      	b.n	800314c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003134:	f7fd fe76 	bl	8000e24 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	f241 3288 	movw	r2, #5000	; 0x1388
 8003144:	4293      	cmp	r3, r2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e345      	b.n	80037d8 <HAL_RCC_OscConfig+0x106c>
 800314c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003150:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003154:	2202      	movs	r2, #2
 8003156:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	fa93 f2a3 	rbit	r2, r3
 8003166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003174:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003178:	2202      	movs	r2, #2
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003180:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	fa93 f2a3 	rbit	r2, r3
 800318a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003192:	601a      	str	r2, [r3, #0]
  return result;
 8003194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003198:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800319c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319e:	fab3 f383 	clz	r3, r3
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	095b      	lsrs	r3, r3, #5
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	f043 0302 	orr.w	r3, r3, #2
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d102      	bne.n	80031b8 <HAL_RCC_OscConfig+0xa4c>
 80031b2:	4b84      	ldr	r3, [pc, #528]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	e013      	b.n	80031e0 <HAL_RCC_OscConfig+0xa74>
 80031b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031c0:	2202      	movs	r2, #2
 80031c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	fa93 f2a3 	rbit	r2, r3
 80031d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	4b79      	ldr	r3, [pc, #484]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031e4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031e8:	2102      	movs	r1, #2
 80031ea:	6011      	str	r1, [r2, #0]
 80031ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	fa92 f1a2 	rbit	r1, r2
 80031fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031fe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003202:	6011      	str	r1, [r2, #0]
  return result;
 8003204:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003208:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	fab2 f282 	clz	r2, r2
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	f002 021f 	and.w	r2, r2, #31
 800321e:	2101      	movs	r1, #1
 8003220:	fa01 f202 	lsl.w	r2, r1, r2
 8003224:	4013      	ands	r3, r2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d084      	beq.n	8003134 <HAL_RCC_OscConfig+0x9c8>
 800322a:	e07f      	b.n	800332c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322c:	f7fd fdfa 	bl	8000e24 <HAL_GetTick>
 8003230:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003234:	e00b      	b.n	800324e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003236:	f7fd fdf5 	bl	8000e24 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e2c4      	b.n	80037d8 <HAL_RCC_OscConfig+0x106c>
 800324e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003252:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003256:	2202      	movs	r2, #2
 8003258:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fa93 f2a3 	rbit	r2, r3
 8003268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003276:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800327a:	2202      	movs	r2, #2
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003282:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	fa93 f2a3 	rbit	r2, r3
 800328c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003290:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003294:	601a      	str	r2, [r3, #0]
  return result;
 8003296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800329e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f043 0302 	orr.w	r3, r3, #2
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d102      	bne.n	80032ba <HAL_RCC_OscConfig+0xb4e>
 80032b4:	4b43      	ldr	r3, [pc, #268]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	e013      	b.n	80032e2 <HAL_RCC_OscConfig+0xb76>
 80032ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032c2:	2202      	movs	r2, #2
 80032c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	fa93 f2a3 	rbit	r2, r3
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032ea:	2102      	movs	r1, #2
 80032ec:	6011      	str	r1, [r2, #0]
 80032ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	fa92 f1a2 	rbit	r1, r2
 80032fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003300:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003304:	6011      	str	r1, [r2, #0]
  return result;
 8003306:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800330a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	fab2 f282 	clz	r2, r2
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	f002 021f 	and.w	r2, r2, #31
 8003320:	2101      	movs	r1, #1
 8003322:	fa01 f202 	lsl.w	r2, r1, r2
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d184      	bne.n	8003236 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800332c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003334:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	4a22      	ldr	r2, [pc, #136]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 800333a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003344:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8242 	beq.w	80037d6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003352:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <HAL_RCC_OscConfig+0xc58>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	2b08      	cmp	r3, #8
 800335c:	f000 8213 	beq.w	8003786 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003364:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	2b02      	cmp	r3, #2
 800336e:	f040 8162 	bne.w	8003636 <HAL_RCC_OscConfig+0xeca>
 8003372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003376:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800337a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800337e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003384:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	fa93 f2a3 	rbit	r2, r3
 800338e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003392:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003396:	601a      	str	r2, [r3, #0]
  return result;
 8003398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80033a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a2:	fab3 f383 	clz	r3, r3
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	461a      	mov	r2, r3
 80033b4:	2300      	movs	r3, #0
 80033b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7fd fd34 	bl	8000e24 <HAL_GetTick>
 80033bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033c0:	e00c      	b.n	80033dc <HAL_RCC_OscConfig+0xc70>
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fd fd2c 	bl	8000e24 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e1fd      	b.n	80037d8 <HAL_RCC_OscConfig+0x106c>
 80033dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	fa93 f2a3 	rbit	r2, r3
 80033f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003400:	601a      	str	r2, [r3, #0]
  return result;
 8003402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003406:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800340a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d102      	bne.n	8003426 <HAL_RCC_OscConfig+0xcba>
 8003420:	4bb0      	ldr	r3, [pc, #704]	; (80036e4 <HAL_RCC_OscConfig+0xf78>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	e027      	b.n	8003476 <HAL_RCC_OscConfig+0xd0a>
 8003426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800342e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003432:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003438:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	fa93 f2a3 	rbit	r2, r3
 8003442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003446:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003450:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003454:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	fa93 f2a3 	rbit	r2, r3
 8003468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	4b9c      	ldr	r3, [pc, #624]	; (80036e4 <HAL_RCC_OscConfig+0xf78>)
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800347a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800347e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003482:	6011      	str	r1, [r2, #0]
 8003484:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003488:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	fa92 f1a2 	rbit	r1, r2
 8003492:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003496:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800349a:	6011      	str	r1, [r2, #0]
  return result;
 800349c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034a0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	fab2 f282 	clz	r2, r2
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	f042 0220 	orr.w	r2, r2, #32
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	f002 021f 	and.w	r2, r2, #31
 80034b6:	2101      	movs	r1, #1
 80034b8:	fa01 f202 	lsl.w	r2, r1, r2
 80034bc:	4013      	ands	r3, r2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d182      	bne.n	80033c8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c2:	4b88      	ldr	r3, [pc, #544]	; (80036e4 <HAL_RCC_OscConfig+0xf78>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	430b      	orrs	r3, r1
 80034e4:	497f      	ldr	r1, [pc, #508]	; (80036e4 <HAL_RCC_OscConfig+0xf78>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	604b      	str	r3, [r1, #4]
 80034ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ee:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	fa93 f2a3 	rbit	r2, r3
 8003506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800350e:	601a      	str	r2, [r3, #0]
  return result;
 8003510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003514:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003518:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800351a:	fab3 f383 	clz	r3, r3
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003524:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	461a      	mov	r2, r3
 800352c:	2301      	movs	r3, #1
 800352e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fd fc78 	bl	8000e24 <HAL_GetTick>
 8003534:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003538:	e009      	b.n	800354e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800353a:	f7fd fc73 	bl	8000e24 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e144      	b.n	80037d8 <HAL_RCC_OscConfig+0x106c>
 800354e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003552:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003556:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800355a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003560:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	fa93 f2a3 	rbit	r2, r3
 800356a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003572:	601a      	str	r2, [r3, #0]
  return result;
 8003574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003578:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800357c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d102      	bne.n	8003598 <HAL_RCC_OscConfig+0xe2c>
 8003592:	4b54      	ldr	r3, [pc, #336]	; (80036e4 <HAL_RCC_OscConfig+0xf78>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	e027      	b.n	80035e8 <HAL_RCC_OscConfig+0xe7c>
 8003598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80035a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035aa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	fa93 f2a3 	rbit	r2, r3
 80035b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	fa93 f2a3 	rbit	r2, r3
 80035da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035de:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	4b3f      	ldr	r3, [pc, #252]	; (80036e4 <HAL_RCC_OscConfig+0xf78>)
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ec:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035f4:	6011      	str	r1, [r2, #0]
 80035f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035fa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	fa92 f1a2 	rbit	r1, r2
 8003604:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003608:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800360c:	6011      	str	r1, [r2, #0]
  return result;
 800360e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003612:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	fab2 f282 	clz	r2, r2
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	f042 0220 	orr.w	r2, r2, #32
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	f002 021f 	and.w	r2, r2, #31
 8003628:	2101      	movs	r1, #1
 800362a:	fa01 f202 	lsl.w	r2, r1, r2
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d082      	beq.n	800353a <HAL_RCC_OscConfig+0xdce>
 8003634:	e0cf      	b.n	80037d6 <HAL_RCC_OscConfig+0x106a>
 8003636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800363e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003642:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003648:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	fa93 f2a3 	rbit	r2, r3
 8003652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003656:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800365a:	601a      	str	r2, [r3, #0]
  return result;
 800365c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003660:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003664:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003670:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	461a      	mov	r2, r3
 8003678:	2300      	movs	r3, #0
 800367a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7fd fbd2 	bl	8000e24 <HAL_GetTick>
 8003680:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003684:	e009      	b.n	800369a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003686:	f7fd fbcd 	bl	8000e24 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e09e      	b.n	80037d8 <HAL_RCC_OscConfig+0x106c>
 800369a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80036a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	fa93 f2a3 	rbit	r2, r3
 80036b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036be:	601a      	str	r2, [r3, #0]
  return result;
 80036c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d104      	bne.n	80036e8 <HAL_RCC_OscConfig+0xf7c>
 80036de:	4b01      	ldr	r3, [pc, #4]	; (80036e4 <HAL_RCC_OscConfig+0xf78>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	e029      	b.n	8003738 <HAL_RCC_OscConfig+0xfcc>
 80036e4:	40021000 	.word	0x40021000
 80036e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	fa93 f2a3 	rbit	r2, r3
 8003704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003708:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003712:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003716:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003720:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	fa93 f2a3 	rbit	r2, r3
 800372a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	4b2b      	ldr	r3, [pc, #172]	; (80037e4 <HAL_RCC_OscConfig+0x1078>)
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800373c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003740:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003744:	6011      	str	r1, [r2, #0]
 8003746:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800374a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	fa92 f1a2 	rbit	r1, r2
 8003754:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003758:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800375c:	6011      	str	r1, [r2, #0]
  return result;
 800375e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003762:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	fab2 f282 	clz	r2, r2
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	f042 0220 	orr.w	r2, r2, #32
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	f002 021f 	and.w	r2, r2, #31
 8003778:	2101      	movs	r1, #1
 800377a:	fa01 f202 	lsl.w	r2, r1, r2
 800377e:	4013      	ands	r3, r2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d180      	bne.n	8003686 <HAL_RCC_OscConfig+0xf1a>
 8003784:	e027      	b.n	80037d6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e01e      	b.n	80037d8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_RCC_OscConfig+0x1078>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037a6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d10b      	bne.n	80037d2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80037ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d001      	beq.n	80037d6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40021000 	.word	0x40021000

080037e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b09e      	sub	sp, #120	; 0x78
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e162      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003800:	4b90      	ldr	r3, [pc, #576]	; (8003a44 <HAL_RCC_ClockConfig+0x25c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d910      	bls.n	8003830 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b8d      	ldr	r3, [pc, #564]	; (8003a44 <HAL_RCC_ClockConfig+0x25c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 0207 	bic.w	r2, r3, #7
 8003816:	498b      	ldr	r1, [pc, #556]	; (8003a44 <HAL_RCC_ClockConfig+0x25c>)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381e:	4b89      	ldr	r3, [pc, #548]	; (8003a44 <HAL_RCC_ClockConfig+0x25c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e14a      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800383c:	4b82      	ldr	r3, [pc, #520]	; (8003a48 <HAL_RCC_ClockConfig+0x260>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	497f      	ldr	r1, [pc, #508]	; (8003a48 <HAL_RCC_ClockConfig+0x260>)
 800384a:	4313      	orrs	r3, r2
 800384c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80dc 	beq.w	8003a14 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d13c      	bne.n	80038de <HAL_RCC_ClockConfig+0xf6>
 8003864:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003868:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800386c:	fa93 f3a3 	rbit	r3, r3
 8003870:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003874:	fab3 f383 	clz	r3, r3
 8003878:	b2db      	uxtb	r3, r3
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	b2db      	uxtb	r3, r3
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b01      	cmp	r3, #1
 8003886:	d102      	bne.n	800388e <HAL_RCC_ClockConfig+0xa6>
 8003888:	4b6f      	ldr	r3, [pc, #444]	; (8003a48 <HAL_RCC_ClockConfig+0x260>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	e00f      	b.n	80038ae <HAL_RCC_ClockConfig+0xc6>
 800388e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003892:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	667b      	str	r3, [r7, #100]	; 0x64
 800389c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038a0:	663b      	str	r3, [r7, #96]	; 0x60
 80038a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038a4:	fa93 f3a3 	rbit	r3, r3
 80038a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038aa:	4b67      	ldr	r3, [pc, #412]	; (8003a48 <HAL_RCC_ClockConfig+0x260>)
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80038b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038b6:	fa92 f2a2 	rbit	r2, r2
 80038ba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80038bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038be:	fab2 f282 	clz	r2, r2
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	f042 0220 	orr.w	r2, r2, #32
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	f002 021f 	and.w	r2, r2, #31
 80038ce:	2101      	movs	r1, #1
 80038d0:	fa01 f202 	lsl.w	r2, r1, r2
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d17b      	bne.n	80039d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e0f3      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d13c      	bne.n	8003960 <HAL_RCC_ClockConfig+0x178>
 80038e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b01      	cmp	r3, #1
 8003908:	d102      	bne.n	8003910 <HAL_RCC_ClockConfig+0x128>
 800390a:	4b4f      	ldr	r3, [pc, #316]	; (8003a48 <HAL_RCC_ClockConfig+0x260>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	e00f      	b.n	8003930 <HAL_RCC_ClockConfig+0x148>
 8003910:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003914:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003918:	fa93 f3a3 	rbit	r3, r3
 800391c:	647b      	str	r3, [r7, #68]	; 0x44
 800391e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003922:	643b      	str	r3, [r7, #64]	; 0x40
 8003924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003926:	fa93 f3a3 	rbit	r3, r3
 800392a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800392c:	4b46      	ldr	r3, [pc, #280]	; (8003a48 <HAL_RCC_ClockConfig+0x260>)
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003934:	63ba      	str	r2, [r7, #56]	; 0x38
 8003936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003938:	fa92 f2a2 	rbit	r2, r2
 800393c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800393e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003940:	fab2 f282 	clz	r2, r2
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	f042 0220 	orr.w	r2, r2, #32
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f002 021f 	and.w	r2, r2, #31
 8003950:	2101      	movs	r1, #1
 8003952:	fa01 f202 	lsl.w	r2, r1, r2
 8003956:	4013      	ands	r3, r2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d13a      	bne.n	80039d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0b2      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x2de>
 8003960:	2302      	movs	r3, #2
 8003962:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003966:	fa93 f3a3 	rbit	r3, r3
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396e:	fab3 f383 	clz	r3, r3
 8003972:	b2db      	uxtb	r3, r3
 8003974:	095b      	lsrs	r3, r3, #5
 8003976:	b2db      	uxtb	r3, r3
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b01      	cmp	r3, #1
 8003980:	d102      	bne.n	8003988 <HAL_RCC_ClockConfig+0x1a0>
 8003982:	4b31      	ldr	r3, [pc, #196]	; (8003a48 <HAL_RCC_ClockConfig+0x260>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	e00d      	b.n	80039a4 <HAL_RCC_ClockConfig+0x1bc>
 8003988:	2302      	movs	r3, #2
 800398a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
 8003994:	2302      	movs	r3, #2
 8003996:	623b      	str	r3, [r7, #32]
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	61fb      	str	r3, [r7, #28]
 80039a0:	4b29      	ldr	r3, [pc, #164]	; (8003a48 <HAL_RCC_ClockConfig+0x260>)
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	2202      	movs	r2, #2
 80039a6:	61ba      	str	r2, [r7, #24]
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	fa92 f2a2 	rbit	r2, r2
 80039ae:	617a      	str	r2, [r7, #20]
  return result;
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	fab2 f282 	clz	r2, r2
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	f042 0220 	orr.w	r2, r2, #32
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	f002 021f 	and.w	r2, r2, #31
 80039c2:	2101      	movs	r1, #1
 80039c4:	fa01 f202 	lsl.w	r2, r1, r2
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e079      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039d2:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <HAL_RCC_ClockConfig+0x260>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f023 0203 	bic.w	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	491a      	ldr	r1, [pc, #104]	; (8003a48 <HAL_RCC_ClockConfig+0x260>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e4:	f7fd fa1e 	bl	8000e24 <HAL_GetTick>
 80039e8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ec:	f7fd fa1a 	bl	8000e24 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e061      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <HAL_RCC_ClockConfig+0x260>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 020c 	and.w	r2, r3, #12
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d1eb      	bne.n	80039ec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_RCC_ClockConfig+0x25c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d214      	bcs.n	8003a4c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <HAL_RCC_ClockConfig+0x25c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 0207 	bic.w	r2, r3, #7
 8003a2a:	4906      	ldr	r1, [pc, #24]	; (8003a44 <HAL_RCC_ClockConfig+0x25c>)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <HAL_RCC_ClockConfig+0x25c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e040      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x2de>
 8003a44:	40022000 	.word	0x40022000
 8003a48:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a58:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <HAL_RCC_ClockConfig+0x2e8>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	491a      	ldr	r1, [pc, #104]	; (8003ad0 <HAL_RCC_ClockConfig+0x2e8>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a76:	4b16      	ldr	r3, [pc, #88]	; (8003ad0 <HAL_RCC_ClockConfig+0x2e8>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4912      	ldr	r1, [pc, #72]	; (8003ad0 <HAL_RCC_ClockConfig+0x2e8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a8a:	f000 f829 	bl	8003ae0 <HAL_RCC_GetSysClockFreq>
 8003a8e:	4601      	mov	r1, r0
 8003a90:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <HAL_RCC_ClockConfig+0x2e8>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a98:	22f0      	movs	r2, #240	; 0xf0
 8003a9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	fa92 f2a2 	rbit	r2, r2
 8003aa2:	60fa      	str	r2, [r7, #12]
  return result;
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	fab2 f282 	clz	r2, r2
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	40d3      	lsrs	r3, r2
 8003aae:	4a09      	ldr	r2, [pc, #36]	; (8003ad4 <HAL_RCC_ClockConfig+0x2ec>)
 8003ab0:	5cd3      	ldrb	r3, [r2, r3]
 8003ab2:	fa21 f303 	lsr.w	r3, r1, r3
 8003ab6:	4a08      	ldr	r2, [pc, #32]	; (8003ad8 <HAL_RCC_ClockConfig+0x2f0>)
 8003ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003aba:	4b08      	ldr	r3, [pc, #32]	; (8003adc <HAL_RCC_ClockConfig+0x2f4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fd f96c 	bl	8000d9c <HAL_InitTick>
  
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3778      	adds	r7, #120	; 0x78
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	08004a00 	.word	0x08004a00
 8003ad8:	20000040 	.word	0x20000040
 8003adc:	20000044 	.word	0x20000044

08003ae0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b08b      	sub	sp, #44	; 0x2c
 8003ae4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	2300      	movs	r3, #0
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	2300      	movs	r3, #0
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003afa:	4b29      	ldr	r3, [pc, #164]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d002      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0x30>
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d003      	beq.n	8003b16 <HAL_RCC_GetSysClockFreq+0x36>
 8003b0e:	e03c      	b.n	8003b8a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b10:	4b24      	ldr	r3, [pc, #144]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b12:	623b      	str	r3, [r7, #32]
      break;
 8003b14:	e03c      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b1c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b20:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	fa92 f2a2 	rbit	r2, r2
 8003b28:	607a      	str	r2, [r7, #4]
  return result;
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	fab2 f282 	clz	r2, r2
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	40d3      	lsrs	r3, r2
 8003b34:	4a1c      	ldr	r2, [pc, #112]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b36:	5cd3      	ldrb	r3, [r2, r3]
 8003b38:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b3a:	4b19      	ldr	r3, [pc, #100]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	220f      	movs	r2, #15
 8003b44:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	fa92 f2a2 	rbit	r2, r2
 8003b4c:	60fa      	str	r2, [r7, #12]
  return result;
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	fab2 f282 	clz	r2, r2
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	40d3      	lsrs	r3, r2
 8003b58:	4a14      	ldr	r2, [pc, #80]	; (8003bac <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b5a:	5cd3      	ldrb	r3, [r2, r3]
 8003b5c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b68:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	fb02 f303 	mul.w	r3, r2, r3
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
 8003b78:	e004      	b.n	8003b84 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	4a0c      	ldr	r2, [pc, #48]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b7e:	fb02 f303 	mul.w	r3, r2, r3
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	623b      	str	r3, [r7, #32]
      break;
 8003b88:	e002      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b8c:	623b      	str	r3, [r7, #32]
      break;
 8003b8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b90:	6a3b      	ldr	r3, [r7, #32]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	372c      	adds	r7, #44	; 0x2c
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	007a1200 	.word	0x007a1200
 8003ba8:	08004a10 	.word	0x08004a10
 8003bac:	08004a20 	.word	0x08004a20
 8003bb0:	003d0900 	.word	0x003d0900

08003bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b092      	sub	sp, #72	; 0x48
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 80d4 	beq.w	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd8:	4b4e      	ldr	r3, [pc, #312]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10e      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be4:	4b4b      	ldr	r3, [pc, #300]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	4a4a      	ldr	r2, [pc, #296]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bee:	61d3      	str	r3, [r2, #28]
 8003bf0:	4b48      	ldr	r3, [pc, #288]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c02:	4b45      	ldr	r3, [pc, #276]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d118      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0e:	4b42      	ldr	r3, [pc, #264]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a41      	ldr	r2, [pc, #260]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c18:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1a:	f7fd f903 	bl	8000e24 <HAL_GetTick>
 8003c1e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c20:	e008      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c22:	f7fd f8ff 	bl	8000e24 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b64      	cmp	r3, #100	; 0x64
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e169      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	4b38      	ldr	r3, [pc, #224]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c40:	4b34      	ldr	r3, [pc, #208]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c48:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8084 	beq.w	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d07c      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c60:	4b2c      	ldr	r3, [pc, #176]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	4b26      	ldr	r3, [pc, #152]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c84:	4413      	add	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c96:	fa93 f3a3 	rbit	r3, r3
 8003c9a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	461a      	mov	r2, r3
 8003cae:	2300      	movs	r3, #0
 8003cb0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cb2:	4a18      	ldr	r2, [pc, #96]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d04b      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc2:	f7fd f8af 	bl	8000e24 <HAL_GetTick>
 8003cc6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc8:	e00a      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cca:	f7fd f8ab 	bl	8000e24 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e113      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	fa93 f3a3 	rbit	r3, r3
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
 8003cec:	2302      	movs	r3, #2
 8003cee:	623b      	str	r3, [r7, #32]
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	61fb      	str	r3, [r7, #28]
  return result;
 8003cf8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfa:	fab3 f383 	clz	r3, r3
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f043 0302 	orr.w	r3, r3, #2
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d108      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003d0e:	4b01      	ldr	r3, [pc, #4]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	e00d      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003d14:	40021000 	.word	0x40021000
 8003d18:	40007000 	.word	0x40007000
 8003d1c:	10908100 	.word	0x10908100
 8003d20:	2302      	movs	r3, #2
 8003d22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	fa93 f3a3 	rbit	r3, r3
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	4b78      	ldr	r3, [pc, #480]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	2202      	movs	r2, #2
 8003d32:	613a      	str	r2, [r7, #16]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	fa92 f2a2 	rbit	r2, r2
 8003d3a:	60fa      	str	r2, [r7, #12]
  return result;
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	fab2 f282 	clz	r2, r2
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	f002 021f 	and.w	r2, r2, #31
 8003d4e:	2101      	movs	r1, #1
 8003d50:	fa01 f202 	lsl.w	r2, r1, r2
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0b7      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d5a:	4b6d      	ldr	r3, [pc, #436]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	496a      	ldr	r1, [pc, #424]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d105      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d74:	4b66      	ldr	r3, [pc, #408]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	4a65      	ldr	r2, [pc, #404]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d8c:	4b60      	ldr	r3, [pc, #384]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	f023 0203 	bic.w	r2, r3, #3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	495d      	ldr	r1, [pc, #372]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003daa:	4b59      	ldr	r3, [pc, #356]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	4956      	ldr	r1, [pc, #344]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dc8:	4b51      	ldr	r3, [pc, #324]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	494e      	ldr	r1, [pc, #312]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003de6:	4b4a      	ldr	r3, [pc, #296]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	f023 0210 	bic.w	r2, r3, #16
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	4947      	ldr	r1, [pc, #284]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003e04:	4b42      	ldr	r3, [pc, #264]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	493f      	ldr	r1, [pc, #252]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e22:	4b3b      	ldr	r3, [pc, #236]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	f023 0220 	bic.w	r2, r3, #32
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	4938      	ldr	r1, [pc, #224]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e40:	4b33      	ldr	r3, [pc, #204]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	4930      	ldr	r1, [pc, #192]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0310 	and.w	r3, r3, #16
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e5e:	4b2c      	ldr	r3, [pc, #176]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	4929      	ldr	r1, [pc, #164]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e7c:	4b24      	ldr	r3, [pc, #144]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	4921      	ldr	r1, [pc, #132]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d008      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e9a:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	491a      	ldr	r1, [pc, #104]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003eb8:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	4912      	ldr	r1, [pc, #72]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d008      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ed6:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	490b      	ldr	r1, [pc, #44]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f00:	4903      	ldr	r1, [pc, #12]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3748      	adds	r7, #72	; 0x48
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40021000 	.word	0x40021000

08003f14 <atoi>:
 8003f14:	220a      	movs	r2, #10
 8003f16:	2100      	movs	r1, #0
 8003f18:	f000 b9f0 	b.w	80042fc <strtol>

08003f1c <__errno>:
 8003f1c:	4b01      	ldr	r3, [pc, #4]	; (8003f24 <__errno+0x8>)
 8003f1e:	6818      	ldr	r0, [r3, #0]
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	2000004c 	.word	0x2000004c

08003f28 <__libc_init_array>:
 8003f28:	b570      	push	{r4, r5, r6, lr}
 8003f2a:	4d0d      	ldr	r5, [pc, #52]	; (8003f60 <__libc_init_array+0x38>)
 8003f2c:	4c0d      	ldr	r4, [pc, #52]	; (8003f64 <__libc_init_array+0x3c>)
 8003f2e:	1b64      	subs	r4, r4, r5
 8003f30:	10a4      	asrs	r4, r4, #2
 8003f32:	2600      	movs	r6, #0
 8003f34:	42a6      	cmp	r6, r4
 8003f36:	d109      	bne.n	8003f4c <__libc_init_array+0x24>
 8003f38:	4d0b      	ldr	r5, [pc, #44]	; (8003f68 <__libc_init_array+0x40>)
 8003f3a:	4c0c      	ldr	r4, [pc, #48]	; (8003f6c <__libc_init_array+0x44>)
 8003f3c:	f000 fd46 	bl	80049cc <_init>
 8003f40:	1b64      	subs	r4, r4, r5
 8003f42:	10a4      	asrs	r4, r4, #2
 8003f44:	2600      	movs	r6, #0
 8003f46:	42a6      	cmp	r6, r4
 8003f48:	d105      	bne.n	8003f56 <__libc_init_array+0x2e>
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}
 8003f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f50:	4798      	blx	r3
 8003f52:	3601      	adds	r6, #1
 8003f54:	e7ee      	b.n	8003f34 <__libc_init_array+0xc>
 8003f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f5a:	4798      	blx	r3
 8003f5c:	3601      	adds	r6, #1
 8003f5e:	e7f2      	b.n	8003f46 <__libc_init_array+0x1e>
 8003f60:	08004b64 	.word	0x08004b64
 8003f64:	08004b64 	.word	0x08004b64
 8003f68:	08004b64 	.word	0x08004b64
 8003f6c:	08004b68 	.word	0x08004b68

08003f70 <malloc>:
 8003f70:	4b02      	ldr	r3, [pc, #8]	; (8003f7c <malloc+0xc>)
 8003f72:	4601      	mov	r1, r0
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	f000 b87f 	b.w	8004078 <_malloc_r>
 8003f7a:	bf00      	nop
 8003f7c:	2000004c 	.word	0x2000004c

08003f80 <free>:
 8003f80:	4b02      	ldr	r3, [pc, #8]	; (8003f8c <free+0xc>)
 8003f82:	4601      	mov	r1, r0
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	f000 b80b 	b.w	8003fa0 <_free_r>
 8003f8a:	bf00      	nop
 8003f8c:	2000004c 	.word	0x2000004c

08003f90 <memset>:
 8003f90:	4402      	add	r2, r0
 8003f92:	4603      	mov	r3, r0
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d100      	bne.n	8003f9a <memset+0xa>
 8003f98:	4770      	bx	lr
 8003f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f9e:	e7f9      	b.n	8003f94 <memset+0x4>

08003fa0 <_free_r>:
 8003fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fa2:	2900      	cmp	r1, #0
 8003fa4:	d044      	beq.n	8004030 <_free_r+0x90>
 8003fa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003faa:	9001      	str	r0, [sp, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f1a1 0404 	sub.w	r4, r1, #4
 8003fb2:	bfb8      	it	lt
 8003fb4:	18e4      	addlt	r4, r4, r3
 8003fb6:	f000 f9ab 	bl	8004310 <__malloc_lock>
 8003fba:	4a1e      	ldr	r2, [pc, #120]	; (8004034 <_free_r+0x94>)
 8003fbc:	9801      	ldr	r0, [sp, #4]
 8003fbe:	6813      	ldr	r3, [r2, #0]
 8003fc0:	b933      	cbnz	r3, 8003fd0 <_free_r+0x30>
 8003fc2:	6063      	str	r3, [r4, #4]
 8003fc4:	6014      	str	r4, [r2, #0]
 8003fc6:	b003      	add	sp, #12
 8003fc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fcc:	f000 b9a6 	b.w	800431c <__malloc_unlock>
 8003fd0:	42a3      	cmp	r3, r4
 8003fd2:	d908      	bls.n	8003fe6 <_free_r+0x46>
 8003fd4:	6825      	ldr	r5, [r4, #0]
 8003fd6:	1961      	adds	r1, r4, r5
 8003fd8:	428b      	cmp	r3, r1
 8003fda:	bf01      	itttt	eq
 8003fdc:	6819      	ldreq	r1, [r3, #0]
 8003fde:	685b      	ldreq	r3, [r3, #4]
 8003fe0:	1949      	addeq	r1, r1, r5
 8003fe2:	6021      	streq	r1, [r4, #0]
 8003fe4:	e7ed      	b.n	8003fc2 <_free_r+0x22>
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	b10b      	cbz	r3, 8003ff0 <_free_r+0x50>
 8003fec:	42a3      	cmp	r3, r4
 8003fee:	d9fa      	bls.n	8003fe6 <_free_r+0x46>
 8003ff0:	6811      	ldr	r1, [r2, #0]
 8003ff2:	1855      	adds	r5, r2, r1
 8003ff4:	42a5      	cmp	r5, r4
 8003ff6:	d10b      	bne.n	8004010 <_free_r+0x70>
 8003ff8:	6824      	ldr	r4, [r4, #0]
 8003ffa:	4421      	add	r1, r4
 8003ffc:	1854      	adds	r4, r2, r1
 8003ffe:	42a3      	cmp	r3, r4
 8004000:	6011      	str	r1, [r2, #0]
 8004002:	d1e0      	bne.n	8003fc6 <_free_r+0x26>
 8004004:	681c      	ldr	r4, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	6053      	str	r3, [r2, #4]
 800400a:	4421      	add	r1, r4
 800400c:	6011      	str	r1, [r2, #0]
 800400e:	e7da      	b.n	8003fc6 <_free_r+0x26>
 8004010:	d902      	bls.n	8004018 <_free_r+0x78>
 8004012:	230c      	movs	r3, #12
 8004014:	6003      	str	r3, [r0, #0]
 8004016:	e7d6      	b.n	8003fc6 <_free_r+0x26>
 8004018:	6825      	ldr	r5, [r4, #0]
 800401a:	1961      	adds	r1, r4, r5
 800401c:	428b      	cmp	r3, r1
 800401e:	bf04      	itt	eq
 8004020:	6819      	ldreq	r1, [r3, #0]
 8004022:	685b      	ldreq	r3, [r3, #4]
 8004024:	6063      	str	r3, [r4, #4]
 8004026:	bf04      	itt	eq
 8004028:	1949      	addeq	r1, r1, r5
 800402a:	6021      	streq	r1, [r4, #0]
 800402c:	6054      	str	r4, [r2, #4]
 800402e:	e7ca      	b.n	8003fc6 <_free_r+0x26>
 8004030:	b003      	add	sp, #12
 8004032:	bd30      	pop	{r4, r5, pc}
 8004034:	20000244 	.word	0x20000244

08004038 <sbrk_aligned>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	4e0e      	ldr	r6, [pc, #56]	; (8004074 <sbrk_aligned+0x3c>)
 800403c:	460c      	mov	r4, r1
 800403e:	6831      	ldr	r1, [r6, #0]
 8004040:	4605      	mov	r5, r0
 8004042:	b911      	cbnz	r1, 800404a <sbrk_aligned+0x12>
 8004044:	f000 f88c 	bl	8004160 <_sbrk_r>
 8004048:	6030      	str	r0, [r6, #0]
 800404a:	4621      	mov	r1, r4
 800404c:	4628      	mov	r0, r5
 800404e:	f000 f887 	bl	8004160 <_sbrk_r>
 8004052:	1c43      	adds	r3, r0, #1
 8004054:	d00a      	beq.n	800406c <sbrk_aligned+0x34>
 8004056:	1cc4      	adds	r4, r0, #3
 8004058:	f024 0403 	bic.w	r4, r4, #3
 800405c:	42a0      	cmp	r0, r4
 800405e:	d007      	beq.n	8004070 <sbrk_aligned+0x38>
 8004060:	1a21      	subs	r1, r4, r0
 8004062:	4628      	mov	r0, r5
 8004064:	f000 f87c 	bl	8004160 <_sbrk_r>
 8004068:	3001      	adds	r0, #1
 800406a:	d101      	bne.n	8004070 <sbrk_aligned+0x38>
 800406c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004070:	4620      	mov	r0, r4
 8004072:	bd70      	pop	{r4, r5, r6, pc}
 8004074:	20000248 	.word	0x20000248

08004078 <_malloc_r>:
 8004078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800407c:	1ccd      	adds	r5, r1, #3
 800407e:	f025 0503 	bic.w	r5, r5, #3
 8004082:	3508      	adds	r5, #8
 8004084:	2d0c      	cmp	r5, #12
 8004086:	bf38      	it	cc
 8004088:	250c      	movcc	r5, #12
 800408a:	2d00      	cmp	r5, #0
 800408c:	4607      	mov	r7, r0
 800408e:	db01      	blt.n	8004094 <_malloc_r+0x1c>
 8004090:	42a9      	cmp	r1, r5
 8004092:	d905      	bls.n	80040a0 <_malloc_r+0x28>
 8004094:	230c      	movs	r3, #12
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	2600      	movs	r6, #0
 800409a:	4630      	mov	r0, r6
 800409c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040a0:	4e2e      	ldr	r6, [pc, #184]	; (800415c <_malloc_r+0xe4>)
 80040a2:	f000 f935 	bl	8004310 <__malloc_lock>
 80040a6:	6833      	ldr	r3, [r6, #0]
 80040a8:	461c      	mov	r4, r3
 80040aa:	bb34      	cbnz	r4, 80040fa <_malloc_r+0x82>
 80040ac:	4629      	mov	r1, r5
 80040ae:	4638      	mov	r0, r7
 80040b0:	f7ff ffc2 	bl	8004038 <sbrk_aligned>
 80040b4:	1c43      	adds	r3, r0, #1
 80040b6:	4604      	mov	r4, r0
 80040b8:	d14d      	bne.n	8004156 <_malloc_r+0xde>
 80040ba:	6834      	ldr	r4, [r6, #0]
 80040bc:	4626      	mov	r6, r4
 80040be:	2e00      	cmp	r6, #0
 80040c0:	d140      	bne.n	8004144 <_malloc_r+0xcc>
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	4631      	mov	r1, r6
 80040c6:	4638      	mov	r0, r7
 80040c8:	eb04 0803 	add.w	r8, r4, r3
 80040cc:	f000 f848 	bl	8004160 <_sbrk_r>
 80040d0:	4580      	cmp	r8, r0
 80040d2:	d13a      	bne.n	800414a <_malloc_r+0xd2>
 80040d4:	6821      	ldr	r1, [r4, #0]
 80040d6:	3503      	adds	r5, #3
 80040d8:	1a6d      	subs	r5, r5, r1
 80040da:	f025 0503 	bic.w	r5, r5, #3
 80040de:	3508      	adds	r5, #8
 80040e0:	2d0c      	cmp	r5, #12
 80040e2:	bf38      	it	cc
 80040e4:	250c      	movcc	r5, #12
 80040e6:	4629      	mov	r1, r5
 80040e8:	4638      	mov	r0, r7
 80040ea:	f7ff ffa5 	bl	8004038 <sbrk_aligned>
 80040ee:	3001      	adds	r0, #1
 80040f0:	d02b      	beq.n	800414a <_malloc_r+0xd2>
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	442b      	add	r3, r5
 80040f6:	6023      	str	r3, [r4, #0]
 80040f8:	e00e      	b.n	8004118 <_malloc_r+0xa0>
 80040fa:	6822      	ldr	r2, [r4, #0]
 80040fc:	1b52      	subs	r2, r2, r5
 80040fe:	d41e      	bmi.n	800413e <_malloc_r+0xc6>
 8004100:	2a0b      	cmp	r2, #11
 8004102:	d916      	bls.n	8004132 <_malloc_r+0xba>
 8004104:	1961      	adds	r1, r4, r5
 8004106:	42a3      	cmp	r3, r4
 8004108:	6025      	str	r5, [r4, #0]
 800410a:	bf18      	it	ne
 800410c:	6059      	strne	r1, [r3, #4]
 800410e:	6863      	ldr	r3, [r4, #4]
 8004110:	bf08      	it	eq
 8004112:	6031      	streq	r1, [r6, #0]
 8004114:	5162      	str	r2, [r4, r5]
 8004116:	604b      	str	r3, [r1, #4]
 8004118:	4638      	mov	r0, r7
 800411a:	f104 060b 	add.w	r6, r4, #11
 800411e:	f000 f8fd 	bl	800431c <__malloc_unlock>
 8004122:	f026 0607 	bic.w	r6, r6, #7
 8004126:	1d23      	adds	r3, r4, #4
 8004128:	1af2      	subs	r2, r6, r3
 800412a:	d0b6      	beq.n	800409a <_malloc_r+0x22>
 800412c:	1b9b      	subs	r3, r3, r6
 800412e:	50a3      	str	r3, [r4, r2]
 8004130:	e7b3      	b.n	800409a <_malloc_r+0x22>
 8004132:	6862      	ldr	r2, [r4, #4]
 8004134:	42a3      	cmp	r3, r4
 8004136:	bf0c      	ite	eq
 8004138:	6032      	streq	r2, [r6, #0]
 800413a:	605a      	strne	r2, [r3, #4]
 800413c:	e7ec      	b.n	8004118 <_malloc_r+0xa0>
 800413e:	4623      	mov	r3, r4
 8004140:	6864      	ldr	r4, [r4, #4]
 8004142:	e7b2      	b.n	80040aa <_malloc_r+0x32>
 8004144:	4634      	mov	r4, r6
 8004146:	6876      	ldr	r6, [r6, #4]
 8004148:	e7b9      	b.n	80040be <_malloc_r+0x46>
 800414a:	230c      	movs	r3, #12
 800414c:	603b      	str	r3, [r7, #0]
 800414e:	4638      	mov	r0, r7
 8004150:	f000 f8e4 	bl	800431c <__malloc_unlock>
 8004154:	e7a1      	b.n	800409a <_malloc_r+0x22>
 8004156:	6025      	str	r5, [r4, #0]
 8004158:	e7de      	b.n	8004118 <_malloc_r+0xa0>
 800415a:	bf00      	nop
 800415c:	20000244 	.word	0x20000244

08004160 <_sbrk_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	4d06      	ldr	r5, [pc, #24]	; (800417c <_sbrk_r+0x1c>)
 8004164:	2300      	movs	r3, #0
 8004166:	4604      	mov	r4, r0
 8004168:	4608      	mov	r0, r1
 800416a:	602b      	str	r3, [r5, #0]
 800416c:	f7fc fd8e 	bl	8000c8c <_sbrk>
 8004170:	1c43      	adds	r3, r0, #1
 8004172:	d102      	bne.n	800417a <_sbrk_r+0x1a>
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	b103      	cbz	r3, 800417a <_sbrk_r+0x1a>
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	bd38      	pop	{r3, r4, r5, pc}
 800417c:	2000024c 	.word	0x2000024c

08004180 <siprintf>:
 8004180:	b40e      	push	{r1, r2, r3}
 8004182:	b500      	push	{lr}
 8004184:	b09c      	sub	sp, #112	; 0x70
 8004186:	ab1d      	add	r3, sp, #116	; 0x74
 8004188:	9002      	str	r0, [sp, #8]
 800418a:	9006      	str	r0, [sp, #24]
 800418c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004190:	4809      	ldr	r0, [pc, #36]	; (80041b8 <siprintf+0x38>)
 8004192:	9107      	str	r1, [sp, #28]
 8004194:	9104      	str	r1, [sp, #16]
 8004196:	4909      	ldr	r1, [pc, #36]	; (80041bc <siprintf+0x3c>)
 8004198:	f853 2b04 	ldr.w	r2, [r3], #4
 800419c:	9105      	str	r1, [sp, #20]
 800419e:	6800      	ldr	r0, [r0, #0]
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	a902      	add	r1, sp, #8
 80041a4:	f000 f91c 	bl	80043e0 <_svfiprintf_r>
 80041a8:	9b02      	ldr	r3, [sp, #8]
 80041aa:	2200      	movs	r2, #0
 80041ac:	701a      	strb	r2, [r3, #0]
 80041ae:	b01c      	add	sp, #112	; 0x70
 80041b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80041b4:	b003      	add	sp, #12
 80041b6:	4770      	bx	lr
 80041b8:	2000004c 	.word	0x2000004c
 80041bc:	ffff0208 	.word	0xffff0208

080041c0 <strcpy>:
 80041c0:	4603      	mov	r3, r0
 80041c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041c6:	f803 2b01 	strb.w	r2, [r3], #1
 80041ca:	2a00      	cmp	r2, #0
 80041cc:	d1f9      	bne.n	80041c2 <strcpy+0x2>
 80041ce:	4770      	bx	lr

080041d0 <strncmp>:
 80041d0:	b510      	push	{r4, lr}
 80041d2:	b17a      	cbz	r2, 80041f4 <strncmp+0x24>
 80041d4:	4603      	mov	r3, r0
 80041d6:	3901      	subs	r1, #1
 80041d8:	1884      	adds	r4, r0, r2
 80041da:	f813 0b01 	ldrb.w	r0, [r3], #1
 80041de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80041e2:	4290      	cmp	r0, r2
 80041e4:	d101      	bne.n	80041ea <strncmp+0x1a>
 80041e6:	42a3      	cmp	r3, r4
 80041e8:	d101      	bne.n	80041ee <strncmp+0x1e>
 80041ea:	1a80      	subs	r0, r0, r2
 80041ec:	bd10      	pop	{r4, pc}
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d1f3      	bne.n	80041da <strncmp+0xa>
 80041f2:	e7fa      	b.n	80041ea <strncmp+0x1a>
 80041f4:	4610      	mov	r0, r2
 80041f6:	e7f9      	b.n	80041ec <strncmp+0x1c>

080041f8 <_strtol_l.constprop.0>:
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041fe:	d001      	beq.n	8004204 <_strtol_l.constprop.0+0xc>
 8004200:	2b24      	cmp	r3, #36	; 0x24
 8004202:	d906      	bls.n	8004212 <_strtol_l.constprop.0+0x1a>
 8004204:	f7ff fe8a 	bl	8003f1c <__errno>
 8004208:	2316      	movs	r3, #22
 800420a:	6003      	str	r3, [r0, #0]
 800420c:	2000      	movs	r0, #0
 800420e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004212:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80042f8 <_strtol_l.constprop.0+0x100>
 8004216:	460d      	mov	r5, r1
 8004218:	462e      	mov	r6, r5
 800421a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800421e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004222:	f017 0708 	ands.w	r7, r7, #8
 8004226:	d1f7      	bne.n	8004218 <_strtol_l.constprop.0+0x20>
 8004228:	2c2d      	cmp	r4, #45	; 0x2d
 800422a:	d132      	bne.n	8004292 <_strtol_l.constprop.0+0x9a>
 800422c:	782c      	ldrb	r4, [r5, #0]
 800422e:	2701      	movs	r7, #1
 8004230:	1cb5      	adds	r5, r6, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d05b      	beq.n	80042ee <_strtol_l.constprop.0+0xf6>
 8004236:	2b10      	cmp	r3, #16
 8004238:	d109      	bne.n	800424e <_strtol_l.constprop.0+0x56>
 800423a:	2c30      	cmp	r4, #48	; 0x30
 800423c:	d107      	bne.n	800424e <_strtol_l.constprop.0+0x56>
 800423e:	782c      	ldrb	r4, [r5, #0]
 8004240:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004244:	2c58      	cmp	r4, #88	; 0x58
 8004246:	d14d      	bne.n	80042e4 <_strtol_l.constprop.0+0xec>
 8004248:	786c      	ldrb	r4, [r5, #1]
 800424a:	2310      	movs	r3, #16
 800424c:	3502      	adds	r5, #2
 800424e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004252:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004256:	f04f 0c00 	mov.w	ip, #0
 800425a:	fbb8 f9f3 	udiv	r9, r8, r3
 800425e:	4666      	mov	r6, ip
 8004260:	fb03 8a19 	mls	sl, r3, r9, r8
 8004264:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004268:	f1be 0f09 	cmp.w	lr, #9
 800426c:	d816      	bhi.n	800429c <_strtol_l.constprop.0+0xa4>
 800426e:	4674      	mov	r4, lr
 8004270:	42a3      	cmp	r3, r4
 8004272:	dd24      	ble.n	80042be <_strtol_l.constprop.0+0xc6>
 8004274:	f1bc 0f00 	cmp.w	ip, #0
 8004278:	db1e      	blt.n	80042b8 <_strtol_l.constprop.0+0xc0>
 800427a:	45b1      	cmp	r9, r6
 800427c:	d31c      	bcc.n	80042b8 <_strtol_l.constprop.0+0xc0>
 800427e:	d101      	bne.n	8004284 <_strtol_l.constprop.0+0x8c>
 8004280:	45a2      	cmp	sl, r4
 8004282:	db19      	blt.n	80042b8 <_strtol_l.constprop.0+0xc0>
 8004284:	fb06 4603 	mla	r6, r6, r3, r4
 8004288:	f04f 0c01 	mov.w	ip, #1
 800428c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004290:	e7e8      	b.n	8004264 <_strtol_l.constprop.0+0x6c>
 8004292:	2c2b      	cmp	r4, #43	; 0x2b
 8004294:	bf04      	itt	eq
 8004296:	782c      	ldrbeq	r4, [r5, #0]
 8004298:	1cb5      	addeq	r5, r6, #2
 800429a:	e7ca      	b.n	8004232 <_strtol_l.constprop.0+0x3a>
 800429c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80042a0:	f1be 0f19 	cmp.w	lr, #25
 80042a4:	d801      	bhi.n	80042aa <_strtol_l.constprop.0+0xb2>
 80042a6:	3c37      	subs	r4, #55	; 0x37
 80042a8:	e7e2      	b.n	8004270 <_strtol_l.constprop.0+0x78>
 80042aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80042ae:	f1be 0f19 	cmp.w	lr, #25
 80042b2:	d804      	bhi.n	80042be <_strtol_l.constprop.0+0xc6>
 80042b4:	3c57      	subs	r4, #87	; 0x57
 80042b6:	e7db      	b.n	8004270 <_strtol_l.constprop.0+0x78>
 80042b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80042bc:	e7e6      	b.n	800428c <_strtol_l.constprop.0+0x94>
 80042be:	f1bc 0f00 	cmp.w	ip, #0
 80042c2:	da05      	bge.n	80042d0 <_strtol_l.constprop.0+0xd8>
 80042c4:	2322      	movs	r3, #34	; 0x22
 80042c6:	6003      	str	r3, [r0, #0]
 80042c8:	4646      	mov	r6, r8
 80042ca:	b942      	cbnz	r2, 80042de <_strtol_l.constprop.0+0xe6>
 80042cc:	4630      	mov	r0, r6
 80042ce:	e79e      	b.n	800420e <_strtol_l.constprop.0+0x16>
 80042d0:	b107      	cbz	r7, 80042d4 <_strtol_l.constprop.0+0xdc>
 80042d2:	4276      	negs	r6, r6
 80042d4:	2a00      	cmp	r2, #0
 80042d6:	d0f9      	beq.n	80042cc <_strtol_l.constprop.0+0xd4>
 80042d8:	f1bc 0f00 	cmp.w	ip, #0
 80042dc:	d000      	beq.n	80042e0 <_strtol_l.constprop.0+0xe8>
 80042de:	1e69      	subs	r1, r5, #1
 80042e0:	6011      	str	r1, [r2, #0]
 80042e2:	e7f3      	b.n	80042cc <_strtol_l.constprop.0+0xd4>
 80042e4:	2430      	movs	r4, #48	; 0x30
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1b1      	bne.n	800424e <_strtol_l.constprop.0+0x56>
 80042ea:	2308      	movs	r3, #8
 80042ec:	e7af      	b.n	800424e <_strtol_l.constprop.0+0x56>
 80042ee:	2c30      	cmp	r4, #48	; 0x30
 80042f0:	d0a5      	beq.n	800423e <_strtol_l.constprop.0+0x46>
 80042f2:	230a      	movs	r3, #10
 80042f4:	e7ab      	b.n	800424e <_strtol_l.constprop.0+0x56>
 80042f6:	bf00      	nop
 80042f8:	08004a31 	.word	0x08004a31

080042fc <strtol>:
 80042fc:	4613      	mov	r3, r2
 80042fe:	460a      	mov	r2, r1
 8004300:	4601      	mov	r1, r0
 8004302:	4802      	ldr	r0, [pc, #8]	; (800430c <strtol+0x10>)
 8004304:	6800      	ldr	r0, [r0, #0]
 8004306:	f7ff bf77 	b.w	80041f8 <_strtol_l.constprop.0>
 800430a:	bf00      	nop
 800430c:	2000004c 	.word	0x2000004c

08004310 <__malloc_lock>:
 8004310:	4801      	ldr	r0, [pc, #4]	; (8004318 <__malloc_lock+0x8>)
 8004312:	f000 baf9 	b.w	8004908 <__retarget_lock_acquire_recursive>
 8004316:	bf00      	nop
 8004318:	20000250 	.word	0x20000250

0800431c <__malloc_unlock>:
 800431c:	4801      	ldr	r0, [pc, #4]	; (8004324 <__malloc_unlock+0x8>)
 800431e:	f000 baf4 	b.w	800490a <__retarget_lock_release_recursive>
 8004322:	bf00      	nop
 8004324:	20000250 	.word	0x20000250

08004328 <__ssputs_r>:
 8004328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800432c:	688e      	ldr	r6, [r1, #8]
 800432e:	429e      	cmp	r6, r3
 8004330:	4682      	mov	sl, r0
 8004332:	460c      	mov	r4, r1
 8004334:	4690      	mov	r8, r2
 8004336:	461f      	mov	r7, r3
 8004338:	d838      	bhi.n	80043ac <__ssputs_r+0x84>
 800433a:	898a      	ldrh	r2, [r1, #12]
 800433c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004340:	d032      	beq.n	80043a8 <__ssputs_r+0x80>
 8004342:	6825      	ldr	r5, [r4, #0]
 8004344:	6909      	ldr	r1, [r1, #16]
 8004346:	eba5 0901 	sub.w	r9, r5, r1
 800434a:	6965      	ldr	r5, [r4, #20]
 800434c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004350:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004354:	3301      	adds	r3, #1
 8004356:	444b      	add	r3, r9
 8004358:	106d      	asrs	r5, r5, #1
 800435a:	429d      	cmp	r5, r3
 800435c:	bf38      	it	cc
 800435e:	461d      	movcc	r5, r3
 8004360:	0553      	lsls	r3, r2, #21
 8004362:	d531      	bpl.n	80043c8 <__ssputs_r+0xa0>
 8004364:	4629      	mov	r1, r5
 8004366:	f7ff fe87 	bl	8004078 <_malloc_r>
 800436a:	4606      	mov	r6, r0
 800436c:	b950      	cbnz	r0, 8004384 <__ssputs_r+0x5c>
 800436e:	230c      	movs	r3, #12
 8004370:	f8ca 3000 	str.w	r3, [sl]
 8004374:	89a3      	ldrh	r3, [r4, #12]
 8004376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800437a:	81a3      	strh	r3, [r4, #12]
 800437c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004384:	6921      	ldr	r1, [r4, #16]
 8004386:	464a      	mov	r2, r9
 8004388:	f000 fac0 	bl	800490c <memcpy>
 800438c:	89a3      	ldrh	r3, [r4, #12]
 800438e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004396:	81a3      	strh	r3, [r4, #12]
 8004398:	6126      	str	r6, [r4, #16]
 800439a:	6165      	str	r5, [r4, #20]
 800439c:	444e      	add	r6, r9
 800439e:	eba5 0509 	sub.w	r5, r5, r9
 80043a2:	6026      	str	r6, [r4, #0]
 80043a4:	60a5      	str	r5, [r4, #8]
 80043a6:	463e      	mov	r6, r7
 80043a8:	42be      	cmp	r6, r7
 80043aa:	d900      	bls.n	80043ae <__ssputs_r+0x86>
 80043ac:	463e      	mov	r6, r7
 80043ae:	6820      	ldr	r0, [r4, #0]
 80043b0:	4632      	mov	r2, r6
 80043b2:	4641      	mov	r1, r8
 80043b4:	f000 fab8 	bl	8004928 <memmove>
 80043b8:	68a3      	ldr	r3, [r4, #8]
 80043ba:	1b9b      	subs	r3, r3, r6
 80043bc:	60a3      	str	r3, [r4, #8]
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	4433      	add	r3, r6
 80043c2:	6023      	str	r3, [r4, #0]
 80043c4:	2000      	movs	r0, #0
 80043c6:	e7db      	b.n	8004380 <__ssputs_r+0x58>
 80043c8:	462a      	mov	r2, r5
 80043ca:	f000 fac7 	bl	800495c <_realloc_r>
 80043ce:	4606      	mov	r6, r0
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d1e1      	bne.n	8004398 <__ssputs_r+0x70>
 80043d4:	6921      	ldr	r1, [r4, #16]
 80043d6:	4650      	mov	r0, sl
 80043d8:	f7ff fde2 	bl	8003fa0 <_free_r>
 80043dc:	e7c7      	b.n	800436e <__ssputs_r+0x46>
	...

080043e0 <_svfiprintf_r>:
 80043e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e4:	4698      	mov	r8, r3
 80043e6:	898b      	ldrh	r3, [r1, #12]
 80043e8:	061b      	lsls	r3, r3, #24
 80043ea:	b09d      	sub	sp, #116	; 0x74
 80043ec:	4607      	mov	r7, r0
 80043ee:	460d      	mov	r5, r1
 80043f0:	4614      	mov	r4, r2
 80043f2:	d50e      	bpl.n	8004412 <_svfiprintf_r+0x32>
 80043f4:	690b      	ldr	r3, [r1, #16]
 80043f6:	b963      	cbnz	r3, 8004412 <_svfiprintf_r+0x32>
 80043f8:	2140      	movs	r1, #64	; 0x40
 80043fa:	f7ff fe3d 	bl	8004078 <_malloc_r>
 80043fe:	6028      	str	r0, [r5, #0]
 8004400:	6128      	str	r0, [r5, #16]
 8004402:	b920      	cbnz	r0, 800440e <_svfiprintf_r+0x2e>
 8004404:	230c      	movs	r3, #12
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800440c:	e0d1      	b.n	80045b2 <_svfiprintf_r+0x1d2>
 800440e:	2340      	movs	r3, #64	; 0x40
 8004410:	616b      	str	r3, [r5, #20]
 8004412:	2300      	movs	r3, #0
 8004414:	9309      	str	r3, [sp, #36]	; 0x24
 8004416:	2320      	movs	r3, #32
 8004418:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800441c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004420:	2330      	movs	r3, #48	; 0x30
 8004422:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80045cc <_svfiprintf_r+0x1ec>
 8004426:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800442a:	f04f 0901 	mov.w	r9, #1
 800442e:	4623      	mov	r3, r4
 8004430:	469a      	mov	sl, r3
 8004432:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004436:	b10a      	cbz	r2, 800443c <_svfiprintf_r+0x5c>
 8004438:	2a25      	cmp	r2, #37	; 0x25
 800443a:	d1f9      	bne.n	8004430 <_svfiprintf_r+0x50>
 800443c:	ebba 0b04 	subs.w	fp, sl, r4
 8004440:	d00b      	beq.n	800445a <_svfiprintf_r+0x7a>
 8004442:	465b      	mov	r3, fp
 8004444:	4622      	mov	r2, r4
 8004446:	4629      	mov	r1, r5
 8004448:	4638      	mov	r0, r7
 800444a:	f7ff ff6d 	bl	8004328 <__ssputs_r>
 800444e:	3001      	adds	r0, #1
 8004450:	f000 80aa 	beq.w	80045a8 <_svfiprintf_r+0x1c8>
 8004454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004456:	445a      	add	r2, fp
 8004458:	9209      	str	r2, [sp, #36]	; 0x24
 800445a:	f89a 3000 	ldrb.w	r3, [sl]
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 80a2 	beq.w	80045a8 <_svfiprintf_r+0x1c8>
 8004464:	2300      	movs	r3, #0
 8004466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800446a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800446e:	f10a 0a01 	add.w	sl, sl, #1
 8004472:	9304      	str	r3, [sp, #16]
 8004474:	9307      	str	r3, [sp, #28]
 8004476:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800447a:	931a      	str	r3, [sp, #104]	; 0x68
 800447c:	4654      	mov	r4, sl
 800447e:	2205      	movs	r2, #5
 8004480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004484:	4851      	ldr	r0, [pc, #324]	; (80045cc <_svfiprintf_r+0x1ec>)
 8004486:	f7fb fea3 	bl	80001d0 <memchr>
 800448a:	9a04      	ldr	r2, [sp, #16]
 800448c:	b9d8      	cbnz	r0, 80044c6 <_svfiprintf_r+0xe6>
 800448e:	06d0      	lsls	r0, r2, #27
 8004490:	bf44      	itt	mi
 8004492:	2320      	movmi	r3, #32
 8004494:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004498:	0711      	lsls	r1, r2, #28
 800449a:	bf44      	itt	mi
 800449c:	232b      	movmi	r3, #43	; 0x2b
 800449e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044a2:	f89a 3000 	ldrb.w	r3, [sl]
 80044a6:	2b2a      	cmp	r3, #42	; 0x2a
 80044a8:	d015      	beq.n	80044d6 <_svfiprintf_r+0xf6>
 80044aa:	9a07      	ldr	r2, [sp, #28]
 80044ac:	4654      	mov	r4, sl
 80044ae:	2000      	movs	r0, #0
 80044b0:	f04f 0c0a 	mov.w	ip, #10
 80044b4:	4621      	mov	r1, r4
 80044b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044ba:	3b30      	subs	r3, #48	; 0x30
 80044bc:	2b09      	cmp	r3, #9
 80044be:	d94e      	bls.n	800455e <_svfiprintf_r+0x17e>
 80044c0:	b1b0      	cbz	r0, 80044f0 <_svfiprintf_r+0x110>
 80044c2:	9207      	str	r2, [sp, #28]
 80044c4:	e014      	b.n	80044f0 <_svfiprintf_r+0x110>
 80044c6:	eba0 0308 	sub.w	r3, r0, r8
 80044ca:	fa09 f303 	lsl.w	r3, r9, r3
 80044ce:	4313      	orrs	r3, r2
 80044d0:	9304      	str	r3, [sp, #16]
 80044d2:	46a2      	mov	sl, r4
 80044d4:	e7d2      	b.n	800447c <_svfiprintf_r+0x9c>
 80044d6:	9b03      	ldr	r3, [sp, #12]
 80044d8:	1d19      	adds	r1, r3, #4
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	9103      	str	r1, [sp, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	bfbb      	ittet	lt
 80044e2:	425b      	neglt	r3, r3
 80044e4:	f042 0202 	orrlt.w	r2, r2, #2
 80044e8:	9307      	strge	r3, [sp, #28]
 80044ea:	9307      	strlt	r3, [sp, #28]
 80044ec:	bfb8      	it	lt
 80044ee:	9204      	strlt	r2, [sp, #16]
 80044f0:	7823      	ldrb	r3, [r4, #0]
 80044f2:	2b2e      	cmp	r3, #46	; 0x2e
 80044f4:	d10c      	bne.n	8004510 <_svfiprintf_r+0x130>
 80044f6:	7863      	ldrb	r3, [r4, #1]
 80044f8:	2b2a      	cmp	r3, #42	; 0x2a
 80044fa:	d135      	bne.n	8004568 <_svfiprintf_r+0x188>
 80044fc:	9b03      	ldr	r3, [sp, #12]
 80044fe:	1d1a      	adds	r2, r3, #4
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	9203      	str	r2, [sp, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	bfb8      	it	lt
 8004508:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800450c:	3402      	adds	r4, #2
 800450e:	9305      	str	r3, [sp, #20]
 8004510:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80045dc <_svfiprintf_r+0x1fc>
 8004514:	7821      	ldrb	r1, [r4, #0]
 8004516:	2203      	movs	r2, #3
 8004518:	4650      	mov	r0, sl
 800451a:	f7fb fe59 	bl	80001d0 <memchr>
 800451e:	b140      	cbz	r0, 8004532 <_svfiprintf_r+0x152>
 8004520:	2340      	movs	r3, #64	; 0x40
 8004522:	eba0 000a 	sub.w	r0, r0, sl
 8004526:	fa03 f000 	lsl.w	r0, r3, r0
 800452a:	9b04      	ldr	r3, [sp, #16]
 800452c:	4303      	orrs	r3, r0
 800452e:	3401      	adds	r4, #1
 8004530:	9304      	str	r3, [sp, #16]
 8004532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004536:	4826      	ldr	r0, [pc, #152]	; (80045d0 <_svfiprintf_r+0x1f0>)
 8004538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800453c:	2206      	movs	r2, #6
 800453e:	f7fb fe47 	bl	80001d0 <memchr>
 8004542:	2800      	cmp	r0, #0
 8004544:	d038      	beq.n	80045b8 <_svfiprintf_r+0x1d8>
 8004546:	4b23      	ldr	r3, [pc, #140]	; (80045d4 <_svfiprintf_r+0x1f4>)
 8004548:	bb1b      	cbnz	r3, 8004592 <_svfiprintf_r+0x1b2>
 800454a:	9b03      	ldr	r3, [sp, #12]
 800454c:	3307      	adds	r3, #7
 800454e:	f023 0307 	bic.w	r3, r3, #7
 8004552:	3308      	adds	r3, #8
 8004554:	9303      	str	r3, [sp, #12]
 8004556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004558:	4433      	add	r3, r6
 800455a:	9309      	str	r3, [sp, #36]	; 0x24
 800455c:	e767      	b.n	800442e <_svfiprintf_r+0x4e>
 800455e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004562:	460c      	mov	r4, r1
 8004564:	2001      	movs	r0, #1
 8004566:	e7a5      	b.n	80044b4 <_svfiprintf_r+0xd4>
 8004568:	2300      	movs	r3, #0
 800456a:	3401      	adds	r4, #1
 800456c:	9305      	str	r3, [sp, #20]
 800456e:	4619      	mov	r1, r3
 8004570:	f04f 0c0a 	mov.w	ip, #10
 8004574:	4620      	mov	r0, r4
 8004576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800457a:	3a30      	subs	r2, #48	; 0x30
 800457c:	2a09      	cmp	r2, #9
 800457e:	d903      	bls.n	8004588 <_svfiprintf_r+0x1a8>
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0c5      	beq.n	8004510 <_svfiprintf_r+0x130>
 8004584:	9105      	str	r1, [sp, #20]
 8004586:	e7c3      	b.n	8004510 <_svfiprintf_r+0x130>
 8004588:	fb0c 2101 	mla	r1, ip, r1, r2
 800458c:	4604      	mov	r4, r0
 800458e:	2301      	movs	r3, #1
 8004590:	e7f0      	b.n	8004574 <_svfiprintf_r+0x194>
 8004592:	ab03      	add	r3, sp, #12
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	462a      	mov	r2, r5
 8004598:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <_svfiprintf_r+0x1f8>)
 800459a:	a904      	add	r1, sp, #16
 800459c:	4638      	mov	r0, r7
 800459e:	f3af 8000 	nop.w
 80045a2:	1c42      	adds	r2, r0, #1
 80045a4:	4606      	mov	r6, r0
 80045a6:	d1d6      	bne.n	8004556 <_svfiprintf_r+0x176>
 80045a8:	89ab      	ldrh	r3, [r5, #12]
 80045aa:	065b      	lsls	r3, r3, #25
 80045ac:	f53f af2c 	bmi.w	8004408 <_svfiprintf_r+0x28>
 80045b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045b2:	b01d      	add	sp, #116	; 0x74
 80045b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045b8:	ab03      	add	r3, sp, #12
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	462a      	mov	r2, r5
 80045be:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <_svfiprintf_r+0x1f8>)
 80045c0:	a904      	add	r1, sp, #16
 80045c2:	4638      	mov	r0, r7
 80045c4:	f000 f87a 	bl	80046bc <_printf_i>
 80045c8:	e7eb      	b.n	80045a2 <_svfiprintf_r+0x1c2>
 80045ca:	bf00      	nop
 80045cc:	08004b31 	.word	0x08004b31
 80045d0:	08004b3b 	.word	0x08004b3b
 80045d4:	00000000 	.word	0x00000000
 80045d8:	08004329 	.word	0x08004329
 80045dc:	08004b37 	.word	0x08004b37

080045e0 <_printf_common>:
 80045e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045e4:	4616      	mov	r6, r2
 80045e6:	4699      	mov	r9, r3
 80045e8:	688a      	ldr	r2, [r1, #8]
 80045ea:	690b      	ldr	r3, [r1, #16]
 80045ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045f0:	4293      	cmp	r3, r2
 80045f2:	bfb8      	it	lt
 80045f4:	4613      	movlt	r3, r2
 80045f6:	6033      	str	r3, [r6, #0]
 80045f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045fc:	4607      	mov	r7, r0
 80045fe:	460c      	mov	r4, r1
 8004600:	b10a      	cbz	r2, 8004606 <_printf_common+0x26>
 8004602:	3301      	adds	r3, #1
 8004604:	6033      	str	r3, [r6, #0]
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	0699      	lsls	r1, r3, #26
 800460a:	bf42      	ittt	mi
 800460c:	6833      	ldrmi	r3, [r6, #0]
 800460e:	3302      	addmi	r3, #2
 8004610:	6033      	strmi	r3, [r6, #0]
 8004612:	6825      	ldr	r5, [r4, #0]
 8004614:	f015 0506 	ands.w	r5, r5, #6
 8004618:	d106      	bne.n	8004628 <_printf_common+0x48>
 800461a:	f104 0a19 	add.w	sl, r4, #25
 800461e:	68e3      	ldr	r3, [r4, #12]
 8004620:	6832      	ldr	r2, [r6, #0]
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	42ab      	cmp	r3, r5
 8004626:	dc26      	bgt.n	8004676 <_printf_common+0x96>
 8004628:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800462c:	1e13      	subs	r3, r2, #0
 800462e:	6822      	ldr	r2, [r4, #0]
 8004630:	bf18      	it	ne
 8004632:	2301      	movne	r3, #1
 8004634:	0692      	lsls	r2, r2, #26
 8004636:	d42b      	bmi.n	8004690 <_printf_common+0xb0>
 8004638:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800463c:	4649      	mov	r1, r9
 800463e:	4638      	mov	r0, r7
 8004640:	47c0      	blx	r8
 8004642:	3001      	adds	r0, #1
 8004644:	d01e      	beq.n	8004684 <_printf_common+0xa4>
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	68e5      	ldr	r5, [r4, #12]
 800464a:	6832      	ldr	r2, [r6, #0]
 800464c:	f003 0306 	and.w	r3, r3, #6
 8004650:	2b04      	cmp	r3, #4
 8004652:	bf08      	it	eq
 8004654:	1aad      	subeq	r5, r5, r2
 8004656:	68a3      	ldr	r3, [r4, #8]
 8004658:	6922      	ldr	r2, [r4, #16]
 800465a:	bf0c      	ite	eq
 800465c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004660:	2500      	movne	r5, #0
 8004662:	4293      	cmp	r3, r2
 8004664:	bfc4      	itt	gt
 8004666:	1a9b      	subgt	r3, r3, r2
 8004668:	18ed      	addgt	r5, r5, r3
 800466a:	2600      	movs	r6, #0
 800466c:	341a      	adds	r4, #26
 800466e:	42b5      	cmp	r5, r6
 8004670:	d11a      	bne.n	80046a8 <_printf_common+0xc8>
 8004672:	2000      	movs	r0, #0
 8004674:	e008      	b.n	8004688 <_printf_common+0xa8>
 8004676:	2301      	movs	r3, #1
 8004678:	4652      	mov	r2, sl
 800467a:	4649      	mov	r1, r9
 800467c:	4638      	mov	r0, r7
 800467e:	47c0      	blx	r8
 8004680:	3001      	adds	r0, #1
 8004682:	d103      	bne.n	800468c <_printf_common+0xac>
 8004684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800468c:	3501      	adds	r5, #1
 800468e:	e7c6      	b.n	800461e <_printf_common+0x3e>
 8004690:	18e1      	adds	r1, r4, r3
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	2030      	movs	r0, #48	; 0x30
 8004696:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800469a:	4422      	add	r2, r4
 800469c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046a4:	3302      	adds	r3, #2
 80046a6:	e7c7      	b.n	8004638 <_printf_common+0x58>
 80046a8:	2301      	movs	r3, #1
 80046aa:	4622      	mov	r2, r4
 80046ac:	4649      	mov	r1, r9
 80046ae:	4638      	mov	r0, r7
 80046b0:	47c0      	blx	r8
 80046b2:	3001      	adds	r0, #1
 80046b4:	d0e6      	beq.n	8004684 <_printf_common+0xa4>
 80046b6:	3601      	adds	r6, #1
 80046b8:	e7d9      	b.n	800466e <_printf_common+0x8e>
	...

080046bc <_printf_i>:
 80046bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046c0:	7e0f      	ldrb	r7, [r1, #24]
 80046c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046c4:	2f78      	cmp	r7, #120	; 0x78
 80046c6:	4691      	mov	r9, r2
 80046c8:	4680      	mov	r8, r0
 80046ca:	460c      	mov	r4, r1
 80046cc:	469a      	mov	sl, r3
 80046ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046d2:	d807      	bhi.n	80046e4 <_printf_i+0x28>
 80046d4:	2f62      	cmp	r7, #98	; 0x62
 80046d6:	d80a      	bhi.n	80046ee <_printf_i+0x32>
 80046d8:	2f00      	cmp	r7, #0
 80046da:	f000 80d8 	beq.w	800488e <_printf_i+0x1d2>
 80046de:	2f58      	cmp	r7, #88	; 0x58
 80046e0:	f000 80a3 	beq.w	800482a <_printf_i+0x16e>
 80046e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046ec:	e03a      	b.n	8004764 <_printf_i+0xa8>
 80046ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046f2:	2b15      	cmp	r3, #21
 80046f4:	d8f6      	bhi.n	80046e4 <_printf_i+0x28>
 80046f6:	a101      	add	r1, pc, #4	; (adr r1, 80046fc <_printf_i+0x40>)
 80046f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046fc:	08004755 	.word	0x08004755
 8004700:	08004769 	.word	0x08004769
 8004704:	080046e5 	.word	0x080046e5
 8004708:	080046e5 	.word	0x080046e5
 800470c:	080046e5 	.word	0x080046e5
 8004710:	080046e5 	.word	0x080046e5
 8004714:	08004769 	.word	0x08004769
 8004718:	080046e5 	.word	0x080046e5
 800471c:	080046e5 	.word	0x080046e5
 8004720:	080046e5 	.word	0x080046e5
 8004724:	080046e5 	.word	0x080046e5
 8004728:	08004875 	.word	0x08004875
 800472c:	08004799 	.word	0x08004799
 8004730:	08004857 	.word	0x08004857
 8004734:	080046e5 	.word	0x080046e5
 8004738:	080046e5 	.word	0x080046e5
 800473c:	08004897 	.word	0x08004897
 8004740:	080046e5 	.word	0x080046e5
 8004744:	08004799 	.word	0x08004799
 8004748:	080046e5 	.word	0x080046e5
 800474c:	080046e5 	.word	0x080046e5
 8004750:	0800485f 	.word	0x0800485f
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	1d1a      	adds	r2, r3, #4
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	602a      	str	r2, [r5, #0]
 800475c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004760:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004764:	2301      	movs	r3, #1
 8004766:	e0a3      	b.n	80048b0 <_printf_i+0x1f4>
 8004768:	6820      	ldr	r0, [r4, #0]
 800476a:	6829      	ldr	r1, [r5, #0]
 800476c:	0606      	lsls	r6, r0, #24
 800476e:	f101 0304 	add.w	r3, r1, #4
 8004772:	d50a      	bpl.n	800478a <_printf_i+0xce>
 8004774:	680e      	ldr	r6, [r1, #0]
 8004776:	602b      	str	r3, [r5, #0]
 8004778:	2e00      	cmp	r6, #0
 800477a:	da03      	bge.n	8004784 <_printf_i+0xc8>
 800477c:	232d      	movs	r3, #45	; 0x2d
 800477e:	4276      	negs	r6, r6
 8004780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004784:	485e      	ldr	r0, [pc, #376]	; (8004900 <_printf_i+0x244>)
 8004786:	230a      	movs	r3, #10
 8004788:	e019      	b.n	80047be <_printf_i+0x102>
 800478a:	680e      	ldr	r6, [r1, #0]
 800478c:	602b      	str	r3, [r5, #0]
 800478e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004792:	bf18      	it	ne
 8004794:	b236      	sxthne	r6, r6
 8004796:	e7ef      	b.n	8004778 <_printf_i+0xbc>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	6820      	ldr	r0, [r4, #0]
 800479c:	1d19      	adds	r1, r3, #4
 800479e:	6029      	str	r1, [r5, #0]
 80047a0:	0601      	lsls	r1, r0, #24
 80047a2:	d501      	bpl.n	80047a8 <_printf_i+0xec>
 80047a4:	681e      	ldr	r6, [r3, #0]
 80047a6:	e002      	b.n	80047ae <_printf_i+0xf2>
 80047a8:	0646      	lsls	r6, r0, #25
 80047aa:	d5fb      	bpl.n	80047a4 <_printf_i+0xe8>
 80047ac:	881e      	ldrh	r6, [r3, #0]
 80047ae:	4854      	ldr	r0, [pc, #336]	; (8004900 <_printf_i+0x244>)
 80047b0:	2f6f      	cmp	r7, #111	; 0x6f
 80047b2:	bf0c      	ite	eq
 80047b4:	2308      	moveq	r3, #8
 80047b6:	230a      	movne	r3, #10
 80047b8:	2100      	movs	r1, #0
 80047ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047be:	6865      	ldr	r5, [r4, #4]
 80047c0:	60a5      	str	r5, [r4, #8]
 80047c2:	2d00      	cmp	r5, #0
 80047c4:	bfa2      	ittt	ge
 80047c6:	6821      	ldrge	r1, [r4, #0]
 80047c8:	f021 0104 	bicge.w	r1, r1, #4
 80047cc:	6021      	strge	r1, [r4, #0]
 80047ce:	b90e      	cbnz	r6, 80047d4 <_printf_i+0x118>
 80047d0:	2d00      	cmp	r5, #0
 80047d2:	d04d      	beq.n	8004870 <_printf_i+0x1b4>
 80047d4:	4615      	mov	r5, r2
 80047d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80047da:	fb03 6711 	mls	r7, r3, r1, r6
 80047de:	5dc7      	ldrb	r7, [r0, r7]
 80047e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047e4:	4637      	mov	r7, r6
 80047e6:	42bb      	cmp	r3, r7
 80047e8:	460e      	mov	r6, r1
 80047ea:	d9f4      	bls.n	80047d6 <_printf_i+0x11a>
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d10b      	bne.n	8004808 <_printf_i+0x14c>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	07de      	lsls	r6, r3, #31
 80047f4:	d508      	bpl.n	8004808 <_printf_i+0x14c>
 80047f6:	6923      	ldr	r3, [r4, #16]
 80047f8:	6861      	ldr	r1, [r4, #4]
 80047fa:	4299      	cmp	r1, r3
 80047fc:	bfde      	ittt	le
 80047fe:	2330      	movle	r3, #48	; 0x30
 8004800:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004804:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004808:	1b52      	subs	r2, r2, r5
 800480a:	6122      	str	r2, [r4, #16]
 800480c:	f8cd a000 	str.w	sl, [sp]
 8004810:	464b      	mov	r3, r9
 8004812:	aa03      	add	r2, sp, #12
 8004814:	4621      	mov	r1, r4
 8004816:	4640      	mov	r0, r8
 8004818:	f7ff fee2 	bl	80045e0 <_printf_common>
 800481c:	3001      	adds	r0, #1
 800481e:	d14c      	bne.n	80048ba <_printf_i+0x1fe>
 8004820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004824:	b004      	add	sp, #16
 8004826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800482a:	4835      	ldr	r0, [pc, #212]	; (8004900 <_printf_i+0x244>)
 800482c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004830:	6829      	ldr	r1, [r5, #0]
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	f851 6b04 	ldr.w	r6, [r1], #4
 8004838:	6029      	str	r1, [r5, #0]
 800483a:	061d      	lsls	r5, r3, #24
 800483c:	d514      	bpl.n	8004868 <_printf_i+0x1ac>
 800483e:	07df      	lsls	r7, r3, #31
 8004840:	bf44      	itt	mi
 8004842:	f043 0320 	orrmi.w	r3, r3, #32
 8004846:	6023      	strmi	r3, [r4, #0]
 8004848:	b91e      	cbnz	r6, 8004852 <_printf_i+0x196>
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	f023 0320 	bic.w	r3, r3, #32
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	2310      	movs	r3, #16
 8004854:	e7b0      	b.n	80047b8 <_printf_i+0xfc>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	f043 0320 	orr.w	r3, r3, #32
 800485c:	6023      	str	r3, [r4, #0]
 800485e:	2378      	movs	r3, #120	; 0x78
 8004860:	4828      	ldr	r0, [pc, #160]	; (8004904 <_printf_i+0x248>)
 8004862:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004866:	e7e3      	b.n	8004830 <_printf_i+0x174>
 8004868:	0659      	lsls	r1, r3, #25
 800486a:	bf48      	it	mi
 800486c:	b2b6      	uxthmi	r6, r6
 800486e:	e7e6      	b.n	800483e <_printf_i+0x182>
 8004870:	4615      	mov	r5, r2
 8004872:	e7bb      	b.n	80047ec <_printf_i+0x130>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	6826      	ldr	r6, [r4, #0]
 8004878:	6961      	ldr	r1, [r4, #20]
 800487a:	1d18      	adds	r0, r3, #4
 800487c:	6028      	str	r0, [r5, #0]
 800487e:	0635      	lsls	r5, r6, #24
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	d501      	bpl.n	8004888 <_printf_i+0x1cc>
 8004884:	6019      	str	r1, [r3, #0]
 8004886:	e002      	b.n	800488e <_printf_i+0x1d2>
 8004888:	0670      	lsls	r0, r6, #25
 800488a:	d5fb      	bpl.n	8004884 <_printf_i+0x1c8>
 800488c:	8019      	strh	r1, [r3, #0]
 800488e:	2300      	movs	r3, #0
 8004890:	6123      	str	r3, [r4, #16]
 8004892:	4615      	mov	r5, r2
 8004894:	e7ba      	b.n	800480c <_printf_i+0x150>
 8004896:	682b      	ldr	r3, [r5, #0]
 8004898:	1d1a      	adds	r2, r3, #4
 800489a:	602a      	str	r2, [r5, #0]
 800489c:	681d      	ldr	r5, [r3, #0]
 800489e:	6862      	ldr	r2, [r4, #4]
 80048a0:	2100      	movs	r1, #0
 80048a2:	4628      	mov	r0, r5
 80048a4:	f7fb fc94 	bl	80001d0 <memchr>
 80048a8:	b108      	cbz	r0, 80048ae <_printf_i+0x1f2>
 80048aa:	1b40      	subs	r0, r0, r5
 80048ac:	6060      	str	r0, [r4, #4]
 80048ae:	6863      	ldr	r3, [r4, #4]
 80048b0:	6123      	str	r3, [r4, #16]
 80048b2:	2300      	movs	r3, #0
 80048b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048b8:	e7a8      	b.n	800480c <_printf_i+0x150>
 80048ba:	6923      	ldr	r3, [r4, #16]
 80048bc:	462a      	mov	r2, r5
 80048be:	4649      	mov	r1, r9
 80048c0:	4640      	mov	r0, r8
 80048c2:	47d0      	blx	sl
 80048c4:	3001      	adds	r0, #1
 80048c6:	d0ab      	beq.n	8004820 <_printf_i+0x164>
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	079b      	lsls	r3, r3, #30
 80048cc:	d413      	bmi.n	80048f6 <_printf_i+0x23a>
 80048ce:	68e0      	ldr	r0, [r4, #12]
 80048d0:	9b03      	ldr	r3, [sp, #12]
 80048d2:	4298      	cmp	r0, r3
 80048d4:	bfb8      	it	lt
 80048d6:	4618      	movlt	r0, r3
 80048d8:	e7a4      	b.n	8004824 <_printf_i+0x168>
 80048da:	2301      	movs	r3, #1
 80048dc:	4632      	mov	r2, r6
 80048de:	4649      	mov	r1, r9
 80048e0:	4640      	mov	r0, r8
 80048e2:	47d0      	blx	sl
 80048e4:	3001      	adds	r0, #1
 80048e6:	d09b      	beq.n	8004820 <_printf_i+0x164>
 80048e8:	3501      	adds	r5, #1
 80048ea:	68e3      	ldr	r3, [r4, #12]
 80048ec:	9903      	ldr	r1, [sp, #12]
 80048ee:	1a5b      	subs	r3, r3, r1
 80048f0:	42ab      	cmp	r3, r5
 80048f2:	dcf2      	bgt.n	80048da <_printf_i+0x21e>
 80048f4:	e7eb      	b.n	80048ce <_printf_i+0x212>
 80048f6:	2500      	movs	r5, #0
 80048f8:	f104 0619 	add.w	r6, r4, #25
 80048fc:	e7f5      	b.n	80048ea <_printf_i+0x22e>
 80048fe:	bf00      	nop
 8004900:	08004b42 	.word	0x08004b42
 8004904:	08004b53 	.word	0x08004b53

08004908 <__retarget_lock_acquire_recursive>:
 8004908:	4770      	bx	lr

0800490a <__retarget_lock_release_recursive>:
 800490a:	4770      	bx	lr

0800490c <memcpy>:
 800490c:	440a      	add	r2, r1
 800490e:	4291      	cmp	r1, r2
 8004910:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004914:	d100      	bne.n	8004918 <memcpy+0xc>
 8004916:	4770      	bx	lr
 8004918:	b510      	push	{r4, lr}
 800491a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800491e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004922:	4291      	cmp	r1, r2
 8004924:	d1f9      	bne.n	800491a <memcpy+0xe>
 8004926:	bd10      	pop	{r4, pc}

08004928 <memmove>:
 8004928:	4288      	cmp	r0, r1
 800492a:	b510      	push	{r4, lr}
 800492c:	eb01 0402 	add.w	r4, r1, r2
 8004930:	d902      	bls.n	8004938 <memmove+0x10>
 8004932:	4284      	cmp	r4, r0
 8004934:	4623      	mov	r3, r4
 8004936:	d807      	bhi.n	8004948 <memmove+0x20>
 8004938:	1e43      	subs	r3, r0, #1
 800493a:	42a1      	cmp	r1, r4
 800493c:	d008      	beq.n	8004950 <memmove+0x28>
 800493e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004942:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004946:	e7f8      	b.n	800493a <memmove+0x12>
 8004948:	4402      	add	r2, r0
 800494a:	4601      	mov	r1, r0
 800494c:	428a      	cmp	r2, r1
 800494e:	d100      	bne.n	8004952 <memmove+0x2a>
 8004950:	bd10      	pop	{r4, pc}
 8004952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004956:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800495a:	e7f7      	b.n	800494c <memmove+0x24>

0800495c <_realloc_r>:
 800495c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004960:	4680      	mov	r8, r0
 8004962:	4614      	mov	r4, r2
 8004964:	460e      	mov	r6, r1
 8004966:	b921      	cbnz	r1, 8004972 <_realloc_r+0x16>
 8004968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800496c:	4611      	mov	r1, r2
 800496e:	f7ff bb83 	b.w	8004078 <_malloc_r>
 8004972:	b92a      	cbnz	r2, 8004980 <_realloc_r+0x24>
 8004974:	f7ff fb14 	bl	8003fa0 <_free_r>
 8004978:	4625      	mov	r5, r4
 800497a:	4628      	mov	r0, r5
 800497c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004980:	f000 f81b 	bl	80049ba <_malloc_usable_size_r>
 8004984:	4284      	cmp	r4, r0
 8004986:	4607      	mov	r7, r0
 8004988:	d802      	bhi.n	8004990 <_realloc_r+0x34>
 800498a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800498e:	d812      	bhi.n	80049b6 <_realloc_r+0x5a>
 8004990:	4621      	mov	r1, r4
 8004992:	4640      	mov	r0, r8
 8004994:	f7ff fb70 	bl	8004078 <_malloc_r>
 8004998:	4605      	mov	r5, r0
 800499a:	2800      	cmp	r0, #0
 800499c:	d0ed      	beq.n	800497a <_realloc_r+0x1e>
 800499e:	42bc      	cmp	r4, r7
 80049a0:	4622      	mov	r2, r4
 80049a2:	4631      	mov	r1, r6
 80049a4:	bf28      	it	cs
 80049a6:	463a      	movcs	r2, r7
 80049a8:	f7ff ffb0 	bl	800490c <memcpy>
 80049ac:	4631      	mov	r1, r6
 80049ae:	4640      	mov	r0, r8
 80049b0:	f7ff faf6 	bl	8003fa0 <_free_r>
 80049b4:	e7e1      	b.n	800497a <_realloc_r+0x1e>
 80049b6:	4635      	mov	r5, r6
 80049b8:	e7df      	b.n	800497a <_realloc_r+0x1e>

080049ba <_malloc_usable_size_r>:
 80049ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049be:	1f18      	subs	r0, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bfbc      	itt	lt
 80049c4:	580b      	ldrlt	r3, [r1, r0]
 80049c6:	18c0      	addlt	r0, r0, r3
 80049c8:	4770      	bx	lr
	...

080049cc <_init>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	bf00      	nop
 80049d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d2:	bc08      	pop	{r3}
 80049d4:	469e      	mov	lr, r3
 80049d6:	4770      	bx	lr

080049d8 <_fini>:
 80049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049da:	bf00      	nop
 80049dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049de:	bc08      	pop	{r3}
 80049e0:	469e      	mov	lr, r3
 80049e2:	4770      	bx	lr
