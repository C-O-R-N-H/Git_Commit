
escape_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000790c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08007a9c  08007a9c  00017a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cdc  08007cdc  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08007cdc  08007cdc  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cdc  08007cdc  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cdc  08007cdc  00017cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ce0  08007ce0  00017ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08007ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          00000850  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009b4  200009b4  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018fdf  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b75  00000000  00000000  00039173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  0003cce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001210  00000000  00000000  0003e0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022668  00000000  00000000  0003f308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e54f  00000000  00000000  00061970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000baf83  00000000  00000000  0007febf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013ae42  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000561c  00000000  00000000  0013ae94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a84 	.word	0x08007a84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	08007a84 	.word	0x08007a84

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	2b00      	cmp	r3, #0
 8000280:	db0b      	blt.n	800029a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 021f 	and.w	r2, r3, #31
 8000288:	4907      	ldr	r1, [pc, #28]	; (80002a8 <__NVIC_EnableIRQ+0x38>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	2001      	movs	r0, #1
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <enable_clocks>:
#include "board.h"
#include "ptu_definitions.h"
#include "ptu_i2c.h"

// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <enable_clocks+0x1c>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <enable_clocks+0x1c>)
 800030a:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 800030e:	6153      	str	r3, [r2, #20]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000

08000320 <initialise_board>:

// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000326:	4b06      	ldr	r3, [pc, #24]	; (8000340 <initialise_board+0x20>)
 8000328:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	f245 5255 	movw	r2, #21845	; 0x5555
 8000330:	801a      	strh	r2, [r3, #0]
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	48001002 	.word	0x48001002

08000344 <enable_interrupts_button>:

void enable_interrupts_button() {
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000348:	b672      	cpsid	i
}
 800034a:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Enable the system configuration controller (SYSCFG in RCC)
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800034c:	4b0f      	ldr	r3, [pc, #60]	; (800038c <enable_interrupts_button+0x48>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a0e      	ldr	r2, [pc, #56]	; (800038c <enable_interrupts_button+0x48>)
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	6193      	str	r3, [r2, #24]

	// External Interrupts details on large manual page 294)
	// PA0 is on interrupt EXTI0 large manual - page 250
	// EXTI0 in  SYSCFG_EXTICR1 needs to be 0x00 (SYSCFG_EXTICR1_EXTI0_PA)
	SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8000358:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <enable_interrupts_button+0x4c>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]

	//  Select EXTI0 interrupt on rising edge
	EXTI->RTSR |= EXTI_RTSR_TR0; // rising edge of EXTI line 0 (includes PA0)
 800035e:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <enable_interrupts_button+0x50>)
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	4a0c      	ldr	r2, [pc, #48]	; (8000394 <enable_interrupts_button+0x50>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6093      	str	r3, [r2, #8]

	// set the interrupt from EXTI line 0 as 'not masked' - as in, enable it.
	EXTI->IMR |= EXTI_IMR_MR0;
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <enable_interrupts_button+0x50>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a09      	ldr	r2, [pc, #36]	; (8000394 <enable_interrupts_button+0x50>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6013      	str	r3, [r2, #0]

	// Tell the NVIC module that EXTI0 interrupts should be handled
	NVIC_SetPriority(EXTI0_IRQn, 3);  // Set Priority
 8000376:	2103      	movs	r1, #3
 8000378:	2006      	movs	r0, #6
 800037a:	f7ff ff97 	bl	80002ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 800037e:	2006      	movs	r0, #6
 8000380:	f7ff ff76 	bl	8000270 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000384:	b662      	cpsie	i
}
 8000386:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40021000 	.word	0x40021000
 8000390:	40010000 	.word	0x40010000
 8000394:	40010400 	.word	0x40010400

08000398 <button_timer>:
uint16_t button_start_time;



void button_timer()
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
	// Set the compare value on timer 3 so that we can check if the button is still pressed
	uint16_t current_time = TIM3->CNT;
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <button_timer+0x34>)
 80003a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a2:	80fb      	strh	r3, [r7, #6]
	uint16_t compare_time = (current_time + poll_interval) % (TIM3->ARR);
 80003a4:	88fb      	ldrh	r3, [r7, #6]
 80003a6:	3364      	adds	r3, #100	; 0x64
 80003a8:	461a      	mov	r2, r3
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <button_timer+0x34>)
 80003ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ae:	fbb2 f1f3 	udiv	r1, r2, r3
 80003b2:	fb01 f303 	mul.w	r3, r1, r3
 80003b6:	1ad3      	subs	r3, r2, r3
 80003b8:	80bb      	strh	r3, [r7, #4]
	TIM3->CCR1 = compare_time;
 80003ba:	4a04      	ldr	r2, [pc, #16]	; (80003cc <button_timer+0x34>)
 80003bc:	88bb      	ldrh	r3, [r7, #4]
 80003be:	6353      	str	r3, [r2, #52]	; 0x34
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	40000400 	.word	0x40000400

080003d0 <enter_challenge_1>:
#include "led.h"
#include "data_handler.h"
#include "serial.h"
#include "stm32f303xc.h"

void enter_challenge_1(){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	set_led(0b11111110);
 80003d4:	20fe      	movs	r0, #254	; 0xfe
 80003d6:	f000 fb45 	bl	8000a64 <set_led>
	extern int current_game_state;
	while(1){
		if (current_game_state == 2){
 80003da:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <enter_challenge_1+0x78>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b02      	cmp	r3, #2
 80003e0:	d106      	bne.n	80003f0 <enter_challenge_1+0x20>
			SerialOutputString("!", &USART1_PORT);
 80003e2:	491a      	ldr	r1, [pc, #104]	; (800044c <enter_challenge_1+0x7c>)
 80003e4:	481a      	ldr	r0, [pc, #104]	; (8000450 <enter_challenge_1+0x80>)
 80003e6:	f001 fd26 	bl	8001e36 <SerialOutputString>
			enter_challenge_2();
 80003ea:	f000 f833 	bl	8000454 <enter_challenge_2>
 80003ee:	e7f4      	b.n	80003da <enter_challenge_1+0xa>
		}
		else if (current_game_state == 3){
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <enter_challenge_1+0x78>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b03      	cmp	r3, #3
 80003f6:	d106      	bne.n	8000406 <enter_challenge_1+0x36>
			SerialOutputString("!", &USART1_PORT);
 80003f8:	4914      	ldr	r1, [pc, #80]	; (800044c <enter_challenge_1+0x7c>)
 80003fa:	4815      	ldr	r0, [pc, #84]	; (8000450 <enter_challenge_1+0x80>)
 80003fc:	f001 fd1b 	bl	8001e36 <SerialOutputString>
			enter_challenge_3();
 8000400:	f000 f928 	bl	8000654 <enter_challenge_3>
 8000404:	e7e9      	b.n	80003da <enter_challenge_1+0xa>
		}
		else if (current_game_state == 4){
 8000406:	4b10      	ldr	r3, [pc, #64]	; (8000448 <enter_challenge_1+0x78>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b04      	cmp	r3, #4
 800040c:	d106      	bne.n	800041c <enter_challenge_1+0x4c>
			SerialOutputString("!", &USART1_PORT);
 800040e:	490f      	ldr	r1, [pc, #60]	; (800044c <enter_challenge_1+0x7c>)
 8000410:	480f      	ldr	r0, [pc, #60]	; (8000450 <enter_challenge_1+0x80>)
 8000412:	f001 fd10 	bl	8001e36 <SerialOutputString>
			enter_challenge_4();
 8000416:	f000 f95f 	bl	80006d8 <enter_challenge_4>
 800041a:	e7de      	b.n	80003da <enter_challenge_1+0xa>
		}
		else if (current_game_state == 5){
 800041c:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <enter_challenge_1+0x78>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b05      	cmp	r3, #5
 8000422:	d106      	bne.n	8000432 <enter_challenge_1+0x62>
			SerialOutputString("!", &USART1_PORT);
 8000424:	4909      	ldr	r1, [pc, #36]	; (800044c <enter_challenge_1+0x7c>)
 8000426:	480a      	ldr	r0, [pc, #40]	; (8000450 <enter_challenge_1+0x80>)
 8000428:	f001 fd05 	bl	8001e36 <SerialOutputString>
			enter_login();
 800042c:	f000 fc56 	bl	8000cdc <enter_login>
 8000430:	e7d3      	b.n	80003da <enter_challenge_1+0xa>
		}
		else if (current_game_state == 0){
 8000432:	4b05      	ldr	r3, [pc, #20]	; (8000448 <enter_challenge_1+0x78>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d1cf      	bne.n	80003da <enter_challenge_1+0xa>
			SerialOutputString("!", &USART1_PORT);
 800043a:	4904      	ldr	r1, [pc, #16]	; (800044c <enter_challenge_1+0x7c>)
 800043c:	4804      	ldr	r0, [pc, #16]	; (8000450 <enter_challenge_1+0x80>)
 800043e:	f001 fcfa 	bl	8001e36 <SerialOutputString>
			enter_waiting();
 8000442:	f002 f937 	bl	80026b4 <enter_waiting>
		if (current_game_state == 2){
 8000446:	e7c8      	b.n	80003da <enter_challenge_1+0xa>
 8000448:	200006a8 	.word	0x200006a8
 800044c:	20000044 	.word	0x20000044
 8000450:	08007a9c 	.word	0x08007a9c

08000454 <enter_challenge_2>:
bool unlocked = false;

extern int target_distance;


void enter_challenge_2(){
 8000454:	b5b0      	push	{r4, r5, r7, lr}
 8000456:	b092      	sub	sp, #72	; 0x48
 8000458:	af00      	add	r7, sp, #0
	set_led(0b11);
 800045a:	2003      	movs	r0, #3
 800045c:	f000 fb02 	bl	8000a64 <set_led>

	uint8_t string_to_send[64] = "This is a string !\r\n";
 8000460:	4b4a      	ldr	r3, [pc, #296]	; (800058c <enter_challenge_2+0x138>)
 8000462:	1d3c      	adds	r4, r7, #4
 8000464:	461d      	mov	r5, r3
 8000466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800046a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800046e:	6020      	str	r0, [r4, #0]
 8000470:	3404      	adds	r4, #4
 8000472:	7021      	strb	r1, [r4, #0]
 8000474:	f107 0319 	add.w	r3, r7, #25
 8000478:	222b      	movs	r2, #43	; 0x2b
 800047a:	2100      	movs	r1, #0
 800047c:	4618      	mov	r0, r3
 800047e:	f006 fddd 	bl	800703c <memset>
	extern uint16_t button_start_time;
	bool flashed = false;
 8000482:	2300      	movs	r3, #0
 8000484:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	unlocked = false;
 8000488:	4b41      	ldr	r3, [pc, #260]	; (8000590 <enter_challenge_2+0x13c>)
 800048a:	2200      	movs	r2, #0
 800048c:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef return_value = 0x00;
 800048e:	2300      	movs	r3, #0
 8000490:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46



	extern int current_game_state;
	while(1){
		if (current_game_state == 1){
 8000494:	4b3f      	ldr	r3, [pc, #252]	; (8000594 <enter_challenge_2+0x140>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d106      	bne.n	80004aa <enter_challenge_2+0x56>
			SerialOutputString("!", &USART1_PORT);
 800049c:	493e      	ldr	r1, [pc, #248]	; (8000598 <enter_challenge_2+0x144>)
 800049e:	483f      	ldr	r0, [pc, #252]	; (800059c <enter_challenge_2+0x148>)
 80004a0:	f001 fcc9 	bl	8001e36 <SerialOutputString>
			enter_challenge_1();
 80004a4:	f7ff ff94 	bl	80003d0 <enter_challenge_1>
 80004a8:	e02a      	b.n	8000500 <enter_challenge_2+0xac>
		}
		else if (current_game_state == 3){
 80004aa:	4b3a      	ldr	r3, [pc, #232]	; (8000594 <enter_challenge_2+0x140>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b03      	cmp	r3, #3
 80004b0:	d106      	bne.n	80004c0 <enter_challenge_2+0x6c>
			SerialOutputString("!", &USART1_PORT);
 80004b2:	4939      	ldr	r1, [pc, #228]	; (8000598 <enter_challenge_2+0x144>)
 80004b4:	4839      	ldr	r0, [pc, #228]	; (800059c <enter_challenge_2+0x148>)
 80004b6:	f001 fcbe 	bl	8001e36 <SerialOutputString>
			enter_challenge_3();
 80004ba:	f000 f8cb 	bl	8000654 <enter_challenge_3>
 80004be:	e01f      	b.n	8000500 <enter_challenge_2+0xac>
		}
		else if (current_game_state == 4){
 80004c0:	4b34      	ldr	r3, [pc, #208]	; (8000594 <enter_challenge_2+0x140>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b04      	cmp	r3, #4
 80004c6:	d106      	bne.n	80004d6 <enter_challenge_2+0x82>
			SerialOutputString("!", &USART1_PORT);
 80004c8:	4933      	ldr	r1, [pc, #204]	; (8000598 <enter_challenge_2+0x144>)
 80004ca:	4834      	ldr	r0, [pc, #208]	; (800059c <enter_challenge_2+0x148>)
 80004cc:	f001 fcb3 	bl	8001e36 <SerialOutputString>
			enter_challenge_4();
 80004d0:	f000 f902 	bl	80006d8 <enter_challenge_4>
 80004d4:	e014      	b.n	8000500 <enter_challenge_2+0xac>
		}
		else if (current_game_state == 5){
 80004d6:	4b2f      	ldr	r3, [pc, #188]	; (8000594 <enter_challenge_2+0x140>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b05      	cmp	r3, #5
 80004dc:	d106      	bne.n	80004ec <enter_challenge_2+0x98>
			SerialOutputString("!", &USART1_PORT);
 80004de:	492e      	ldr	r1, [pc, #184]	; (8000598 <enter_challenge_2+0x144>)
 80004e0:	482e      	ldr	r0, [pc, #184]	; (800059c <enter_challenge_2+0x148>)
 80004e2:	f001 fca8 	bl	8001e36 <SerialOutputString>
			enter_login();
 80004e6:	f000 fbf9 	bl	8000cdc <enter_login>
 80004ea:	e009      	b.n	8000500 <enter_challenge_2+0xac>
		}
		else if (current_game_state == 0){
 80004ec:	4b29      	ldr	r3, [pc, #164]	; (8000594 <enter_challenge_2+0x140>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d105      	bne.n	8000500 <enter_challenge_2+0xac>
			SerialOutputString("!", &USART1_PORT);
 80004f4:	4928      	ldr	r1, [pc, #160]	; (8000598 <enter_challenge_2+0x144>)
 80004f6:	4829      	ldr	r0, [pc, #164]	; (800059c <enter_challenge_2+0x148>)
 80004f8:	f001 fc9d 	bl	8001e36 <SerialOutputString>
			enter_waiting();
 80004fc:	f002 f8da 	bl	80026b4 <enter_waiting>
		}

		vertical_PWM = 1500;
 8000500:	4b27      	ldr	r3, [pc, #156]	; (80005a0 <enter_challenge_2+0x14c>)
 8000502:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000506:	801a      	strh	r2, [r3, #0]
		horizontal_PWM = 1500;
 8000508:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <enter_challenge_2+0x150>)
 800050a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800050e:	801a      	strh	r2, [r3, #0]
		TIM2->CCR1 = vertical_PWM;
 8000510:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <enter_challenge_2+0x14c>)
 8000512:	881a      	ldrh	r2, [r3, #0]
 8000514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000518:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = horizontal_PWM;
 800051a:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <enter_challenge_2+0x150>)
 800051c:	881a      	ldrh	r2, [r3, #0]
 800051e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000522:	639a      	str	r2, [r3, #56]	; 0x38
//		while(1){
//			sprintf(string_to_send, "%d!", target_distance);
//			SerialOutputString(string_to_send, &USART1_PORT);
//		}

		read_LIDAR(&last_period, &dist_I2C);
 8000524:	4920      	ldr	r1, [pc, #128]	; (80005a8 <enter_challenge_2+0x154>)
 8000526:	4821      	ldr	r0, [pc, #132]	; (80005ac <enter_challenge_2+0x158>)
 8000528:	f000 fdc6 	bl	80010b8 <read_LIDAR>
		//main if
		if (unlocked)
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <enter_challenge_2+0x13c>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d00e      	beq.n	8000552 <enter_challenge_2+0xfe>
		{

			if (!flashed)
 8000534:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000538:	f083 0301 	eor.w	r3, r3, #1
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b00      	cmp	r3, #0
 8000540:	d007      	beq.n	8000552 <enter_challenge_2+0xfe>
			{
				set_led(0b10000000);
 8000542:	2080      	movs	r0, #128	; 0x80
 8000544:	f000 fa8e 	bl	8000a64 <set_led>
				completion_led();
 8000548:	f000 fabe 	bl	8000ac8 <completion_led>
				flashed = true;
 800054c:	2301      	movs	r3, #1
 800054e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}

		}


		if (flashed == true){
 8000552:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000556:	2b00      	cmp	r3, #0
 8000558:	d009      	beq.n	800056e <enter_challenge_2+0x11a>
			sprintf(string_to_send, "AA5521!");
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	4914      	ldr	r1, [pc, #80]	; (80005b0 <enter_challenge_2+0x15c>)
 800055e:	4618      	mov	r0, r3
 8000560:	f006 fe64 	bl	800722c <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	490c      	ldr	r1, [pc, #48]	; (8000598 <enter_challenge_2+0x144>)
 8000568:	4618      	mov	r0, r3
 800056a:	f001 fc64 	bl	8001e36 <SerialOutputString>
			//enter_waiting();
		}
		//ouput data for GUI to display
		sprintf(string_to_send, "AA555%04hu!", last_period);
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <enter_challenge_2+0x158>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	461a      	mov	r2, r3
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	490f      	ldr	r1, [pc, #60]	; (80005b4 <enter_challenge_2+0x160>)
 8000578:	4618      	mov	r0, r3
 800057a:	f006 fe57 	bl	800722c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	4905      	ldr	r1, [pc, #20]	; (8000598 <enter_challenge_2+0x144>)
 8000582:	4618      	mov	r0, r3
 8000584:	f001 fc57 	bl	8001e36 <SerialOutputString>
	while(1){
 8000588:	e784      	b.n	8000494 <enter_challenge_2+0x40>
 800058a:	bf00      	nop
 800058c:	08007ab8 	.word	0x08007ab8
 8000590:	20000184 	.word	0x20000184
 8000594:	200006a8 	.word	0x200006a8
 8000598:	20000044 	.word	0x20000044
 800059c:	08007aa0 	.word	0x08007aa0
 80005a0:	20000714 	.word	0x20000714
 80005a4:	20000716 	.word	0x20000716
 80005a8:	20000182 	.word	0x20000182
 80005ac:	2000071a 	.word	0x2000071a
 80005b0:	08007aa4 	.word	0x08007aa4
 80005b4:	08007aac 	.word	0x08007aac

080005b8 <HAL_TIM_IC_CaptureCallback>:

	}
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	// Instantiate sliding window for rolling average
	static Window last_period_window;
	static bool window_initialised = false;

	if (!window_initialised)
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <HAL_TIM_IC_CaptureCallback+0x84>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	f083 0301 	eor.w	r3, r3, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d005      	beq.n	80005da <HAL_TIM_IC_CaptureCallback+0x22>
	{
		window_init(&last_period_window);
 80005ce:	481c      	ldr	r0, [pc, #112]	; (8000640 <HAL_TIM_IC_CaptureCallback+0x88>)
 80005d0:	f000 f9bd 	bl	800094e <window_init>
		window_initialised = true;
 80005d4:	4b19      	ldr	r3, [pc, #100]	; (800063c <HAL_TIM_IC_CaptureCallback+0x84>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a19      	ldr	r2, [pc, #100]	; (8000644 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d127      	bne.n	8000634 <HAL_TIM_IC_CaptureCallback+0x7c>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	7f1b      	ldrb	r3, [r3, #28]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d123      	bne.n	8000634 <HAL_TIM_IC_CaptureCallback+0x7c>
	{
		uint16_t IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80005ec:	2100      	movs	r1, #0
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f005 fe4e 	bl	8006290 <HAL_TIM_ReadCapturedValue>
 80005f4:	4603      	mov	r3, r0
 80005f6:	81fb      	strh	r3, [r7, #14]

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1)
 80005f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000600:	f002 fbca 	bl	8002d98 <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	2b01      	cmp	r3, #1
 8000608:	d103      	bne.n	8000612 <HAL_TIM_IC_CaptureCallback+0x5a>
			rise_time = IC_Val1;
 800060a:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <HAL_TIM_IC_CaptureCallback+0x90>)
 800060c:	89fb      	ldrh	r3, [r7, #14]
 800060e:	8013      	strh	r3, [r2, #0]
 8000610:	e00d      	b.n	800062e <HAL_TIM_IC_CaptureCallback+0x76>
		else
		{
			uint16_t new_last_period = IC_Val1 - rise_time;
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	89fa      	ldrh	r2, [r7, #14]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	81bb      	strh	r3, [r7, #12]
			last_period = moving_average(&last_period_window, new_last_period);
 800061c:	89bb      	ldrh	r3, [r7, #12]
 800061e:	4619      	mov	r1, r3
 8000620:	4807      	ldr	r0, [pc, #28]	; (8000640 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000622:	f000 f9aa 	bl	800097a <moving_average>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <HAL_TIM_IC_CaptureCallback+0x94>)
 800062c:	801a      	strh	r2, [r3, #0]
		}


		last_capture = IC_Val1;
 800062e:	4a08      	ldr	r2, [pc, #32]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000630:	89fb      	ldrh	r3, [r7, #14]
 8000632:	8013      	strh	r3, [r2, #0]
	}
}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000185 	.word	0x20000185
 8000640:	20000188 	.word	0x20000188
 8000644:	40012c00 	.word	0x40012c00
 8000648:	20000718 	.word	0x20000718
 800064c:	2000071a 	.word	0x2000071a
 8000650:	2000071c 	.word	0x2000071c

08000654 <enter_challenge_3>:
#include "serial.h"
#include "led.h"
#include "data_handler.h"
#include "stm32f303xc.h"

void enter_challenge_3(){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	set_led(0b111);
 8000658:	2007      	movs	r0, #7
 800065a:	f000 fa03 	bl	8000a64 <set_led>
	extern int current_game_state;
	while(1){
		if (current_game_state == 1){
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <enter_challenge_3+0x78>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d106      	bne.n	8000674 <enter_challenge_3+0x20>
			SerialOutputString("!", &USART1_PORT);
 8000666:	491a      	ldr	r1, [pc, #104]	; (80006d0 <enter_challenge_3+0x7c>)
 8000668:	481a      	ldr	r0, [pc, #104]	; (80006d4 <enter_challenge_3+0x80>)
 800066a:	f001 fbe4 	bl	8001e36 <SerialOutputString>
			enter_challenge_1();
 800066e:	f7ff feaf 	bl	80003d0 <enter_challenge_1>
 8000672:	e7f4      	b.n	800065e <enter_challenge_3+0xa>
		}
		else if (current_game_state == 2){
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <enter_challenge_3+0x78>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b02      	cmp	r3, #2
 800067a:	d106      	bne.n	800068a <enter_challenge_3+0x36>
			SerialOutputString("!", &USART1_PORT);
 800067c:	4914      	ldr	r1, [pc, #80]	; (80006d0 <enter_challenge_3+0x7c>)
 800067e:	4815      	ldr	r0, [pc, #84]	; (80006d4 <enter_challenge_3+0x80>)
 8000680:	f001 fbd9 	bl	8001e36 <SerialOutputString>
			enter_challenge_2();
 8000684:	f7ff fee6 	bl	8000454 <enter_challenge_2>
 8000688:	e7e9      	b.n	800065e <enter_challenge_3+0xa>
		}
		else if (current_game_state == 4){
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <enter_challenge_3+0x78>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b04      	cmp	r3, #4
 8000690:	d106      	bne.n	80006a0 <enter_challenge_3+0x4c>
			SerialOutputString("!", &USART1_PORT);
 8000692:	490f      	ldr	r1, [pc, #60]	; (80006d0 <enter_challenge_3+0x7c>)
 8000694:	480f      	ldr	r0, [pc, #60]	; (80006d4 <enter_challenge_3+0x80>)
 8000696:	f001 fbce 	bl	8001e36 <SerialOutputString>
			enter_challenge_4();
 800069a:	f000 f81d 	bl	80006d8 <enter_challenge_4>
 800069e:	e7de      	b.n	800065e <enter_challenge_3+0xa>
		}
		else if (current_game_state == 5){
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <enter_challenge_3+0x78>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b05      	cmp	r3, #5
 80006a6:	d106      	bne.n	80006b6 <enter_challenge_3+0x62>
			SerialOutputString("!", &USART1_PORT);
 80006a8:	4909      	ldr	r1, [pc, #36]	; (80006d0 <enter_challenge_3+0x7c>)
 80006aa:	480a      	ldr	r0, [pc, #40]	; (80006d4 <enter_challenge_3+0x80>)
 80006ac:	f001 fbc3 	bl	8001e36 <SerialOutputString>
			enter_login();
 80006b0:	f000 fb14 	bl	8000cdc <enter_login>
 80006b4:	e7d3      	b.n	800065e <enter_challenge_3+0xa>
		}
		else if (current_game_state == 0){
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <enter_challenge_3+0x78>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d1cf      	bne.n	800065e <enter_challenge_3+0xa>
			SerialOutputString("!", &USART1_PORT);
 80006be:	4904      	ldr	r1, [pc, #16]	; (80006d0 <enter_challenge_3+0x7c>)
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <enter_challenge_3+0x80>)
 80006c2:	f001 fbb8 	bl	8001e36 <SerialOutputString>
			enter_waiting();
 80006c6:	f001 fff5 	bl	80026b4 <enter_waiting>
		if (current_game_state == 1){
 80006ca:	e7c8      	b.n	800065e <enter_challenge_3+0xa>
 80006cc:	200006a8 	.word	0x200006a8
 80006d0:	20000044 	.word	0x20000044
 80006d4:	08007af8 	.word	0x08007af8

080006d8 <enter_challenge_4>:
uint16_t delay = 0;

extern uint16_t vertical_PWM;
extern uint16_t horizontal_PWM;

void enter_challenge_4(){
 80006d8:	b5b0      	push	{r4, r5, r7, lr}
 80006da:	b092      	sub	sp, #72	; 0x48
 80006dc:	af00      	add	r7, sp, #0
	set_led(0b1111);
 80006de:	200f      	movs	r0, #15
 80006e0:	f000 f9c0 	bl	8000a64 <set_led>
	extern int current_game_state;
	uint8_t string_to_send[64] = "This is a string !\r\n";
 80006e4:	4b70      	ldr	r3, [pc, #448]	; (80008a8 <enter_challenge_4+0x1d0>)
 80006e6:	1d3c      	adds	r4, r7, #4
 80006e8:	461d      	mov	r5, r3
 80006ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006f2:	6020      	str	r0, [r4, #0]
 80006f4:	3404      	adds	r4, #4
 80006f6:	7021      	strb	r1, [r4, #0]
 80006f8:	f107 0319 	add.w	r3, r7, #25
 80006fc:	222b      	movs	r2, #43	; 0x2b
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f006 fc9b 	bl	800703c <memset>
	set_pitch(1500);
 8000706:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800070a:	f001 fc20 	bl	8001f4e <set_pitch>
	set_yaw(1500);
 800070e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000712:	f001 fc0e 	bl	8001f32 <set_yaw>
	vertical_PWM = 1500;
 8000716:	4b65      	ldr	r3, [pc, #404]	; (80008ac <enter_challenge_4+0x1d4>)
 8000718:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800071c:	801a      	strh	r2, [r3, #0]
	horizontal_PWM = 1500;
 800071e:	4b64      	ldr	r3, [pc, #400]	; (80008b0 <enter_challenge_4+0x1d8>)
 8000720:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000724:	801a      	strh	r2, [r3, #0]
	solved = false;
 8000726:	4b63      	ldr	r3, [pc, #396]	; (80008b4 <enter_challenge_4+0x1dc>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]


	while(1){
		if (current_game_state == 1){
 800072c:	4b62      	ldr	r3, [pc, #392]	; (80008b8 <enter_challenge_4+0x1e0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d106      	bne.n	8000742 <enter_challenge_4+0x6a>
			SerialOutputString("!", &USART1_PORT);
 8000734:	4961      	ldr	r1, [pc, #388]	; (80008bc <enter_challenge_4+0x1e4>)
 8000736:	4862      	ldr	r0, [pc, #392]	; (80008c0 <enter_challenge_4+0x1e8>)
 8000738:	f001 fb7d 	bl	8001e36 <SerialOutputString>
			enter_challenge_1();
 800073c:	f7ff fe48 	bl	80003d0 <enter_challenge_1>
 8000740:	e02a      	b.n	8000798 <enter_challenge_4+0xc0>
		}
		else if (current_game_state == 3){
 8000742:	4b5d      	ldr	r3, [pc, #372]	; (80008b8 <enter_challenge_4+0x1e0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b03      	cmp	r3, #3
 8000748:	d106      	bne.n	8000758 <enter_challenge_4+0x80>
			SerialOutputString("!", &USART1_PORT);
 800074a:	495c      	ldr	r1, [pc, #368]	; (80008bc <enter_challenge_4+0x1e4>)
 800074c:	485c      	ldr	r0, [pc, #368]	; (80008c0 <enter_challenge_4+0x1e8>)
 800074e:	f001 fb72 	bl	8001e36 <SerialOutputString>
			enter_challenge_3();
 8000752:	f7ff ff7f 	bl	8000654 <enter_challenge_3>
 8000756:	e01f      	b.n	8000798 <enter_challenge_4+0xc0>
		}
		else if (current_game_state == 2){
 8000758:	4b57      	ldr	r3, [pc, #348]	; (80008b8 <enter_challenge_4+0x1e0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b02      	cmp	r3, #2
 800075e:	d106      	bne.n	800076e <enter_challenge_4+0x96>
			SerialOutputString("!", &USART1_PORT);
 8000760:	4956      	ldr	r1, [pc, #344]	; (80008bc <enter_challenge_4+0x1e4>)
 8000762:	4857      	ldr	r0, [pc, #348]	; (80008c0 <enter_challenge_4+0x1e8>)
 8000764:	f001 fb67 	bl	8001e36 <SerialOutputString>
			enter_challenge_2();
 8000768:	f7ff fe74 	bl	8000454 <enter_challenge_2>
 800076c:	e014      	b.n	8000798 <enter_challenge_4+0xc0>
		}
		else if (current_game_state == 5){
 800076e:	4b52      	ldr	r3, [pc, #328]	; (80008b8 <enter_challenge_4+0x1e0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b05      	cmp	r3, #5
 8000774:	d106      	bne.n	8000784 <enter_challenge_4+0xac>
			SerialOutputString("!", &USART1_PORT);
 8000776:	4951      	ldr	r1, [pc, #324]	; (80008bc <enter_challenge_4+0x1e4>)
 8000778:	4851      	ldr	r0, [pc, #324]	; (80008c0 <enter_challenge_4+0x1e8>)
 800077a:	f001 fb5c 	bl	8001e36 <SerialOutputString>
			enter_login();
 800077e:	f000 faad 	bl	8000cdc <enter_login>
 8000782:	e009      	b.n	8000798 <enter_challenge_4+0xc0>
		}
		else if (current_game_state == 0){
 8000784:	4b4c      	ldr	r3, [pc, #304]	; (80008b8 <enter_challenge_4+0x1e0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d105      	bne.n	8000798 <enter_challenge_4+0xc0>
			SerialOutputString("!", &USART1_PORT);
 800078c:	494b      	ldr	r1, [pc, #300]	; (80008bc <enter_challenge_4+0x1e4>)
 800078e:	484c      	ldr	r0, [pc, #304]	; (80008c0 <enter_challenge_4+0x1e8>)
 8000790:	f001 fb51 	bl	8001e36 <SerialOutputString>
			enter_waiting();
 8000794:	f001 ff8e 	bl	80026b4 <enter_waiting>
//		sprintf(string_to_send, "AA550, %d, %d!", horizontal_PWM, vertical_PWM);
//		SerialOutputString(string_to_send, &USART1_PORT);


		//set and check
		if (!solved)
 8000798:	4b46      	ldr	r3, [pc, #280]	; (80008b4 <enter_challenge_4+0x1dc>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	f083 0301 	eor.w	r3, r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d077      	beq.n	8000896 <enter_challenge_4+0x1be>
		{

			show_correct_pos_led();  // Display 4 LEDs if the position is correct
 80007a6:	f000 fa7f 	bl	8000ca8 <show_correct_pos_led>
//			if (horizontal_PWM < 100 + 800 && horizontal_PWM > 800 - 100){
//				set_led(0b11111111);
//			}

			if (delay)
 80007aa:	4b46      	ldr	r3, [pc, #280]	; (80008c4 <enter_challenge_4+0x1ec>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d00c      	beq.n	80007cc <enter_challenge_4+0xf4>
			{
				HAL_Delay(delay);
 80007b2:	4b44      	ldr	r3, [pc, #272]	; (80008c4 <enter_challenge_4+0x1ec>)
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 f83e 	bl	8002838 <HAL_Delay>
				delay = 0;
 80007bc:	4b41      	ldr	r3, [pc, #260]	; (80008c4 <enter_challenge_4+0x1ec>)
 80007be:	2200      	movs	r2, #0
 80007c0:	801a      	strh	r2, [r3, #0]
				set_next_compare_time(&TIMER3, HOLD_TIME);  // After recording a value, set compare time
 80007c2:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80007c6:	4840      	ldr	r0, [pc, #256]	; (80008c8 <enter_challenge_4+0x1f0>)
 80007c8:	f001 fe7e 	bl	80024c8 <set_next_compare_time>
				// Without the above function, the velocity may be 0 for > HOLD_TIME without timer compare triggering
			}

			// Move the PTU -- For some reason, this doesn't work inside the function `move_ptu`
			const uint16_t PWM_min = 600;
 80007cc:	f44f 7316 	mov.w	r3, #600	; 0x258
 80007d0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			const uint16_t PWM_max = 2000;
 80007d4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

			horizontal_PWM += (yaw_vel - 12);
 80007dc:	4b3b      	ldr	r3, [pc, #236]	; (80008cc <enter_challenge_4+0x1f4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <enter_challenge_4+0x1d8>)
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	4413      	add	r3, r2
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	3b0c      	subs	r3, #12
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <enter_challenge_4+0x1d8>)
 80007f0:	801a      	strh	r2, [r3, #0]
			vertical_PWM += (pitch_vel - 12);
 80007f2:	4b37      	ldr	r3, [pc, #220]	; (80008d0 <enter_challenge_4+0x1f8>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	4b2c      	ldr	r3, [pc, #176]	; (80008ac <enter_challenge_4+0x1d4>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	4413      	add	r3, r2
 80007fe:	b29b      	uxth	r3, r3
 8000800:	3b0c      	subs	r3, #12
 8000802:	b29a      	uxth	r2, r3
 8000804:	4b29      	ldr	r3, [pc, #164]	; (80008ac <enter_challenge_4+0x1d4>)
 8000806:	801a      	strh	r2, [r3, #0]

			if (horizontal_PWM > PWM_max)
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <enter_challenge_4+0x1d8>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000810:	429a      	cmp	r2, r3
 8000812:	d203      	bcs.n	800081c <enter_challenge_4+0x144>
			{
				horizontal_PWM = PWM_max;
 8000814:	4a26      	ldr	r2, [pc, #152]	; (80008b0 <enter_challenge_4+0x1d8>)
 8000816:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800081a:	8013      	strh	r3, [r2, #0]
			}

			if (horizontal_PWM < PWM_min)
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <enter_challenge_4+0x1d8>)
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000824:	429a      	cmp	r2, r3
 8000826:	d903      	bls.n	8000830 <enter_challenge_4+0x158>
			{
				horizontal_PWM = PWM_min;
 8000828:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <enter_challenge_4+0x1d8>)
 800082a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800082e:	8013      	strh	r3, [r2, #0]
			}

			if (vertical_PWM > PWM_max)
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <enter_challenge_4+0x1d4>)
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000838:	429a      	cmp	r2, r3
 800083a:	d203      	bcs.n	8000844 <enter_challenge_4+0x16c>
			{
				vertical_PWM = PWM_max;
 800083c:	4a1b      	ldr	r2, [pc, #108]	; (80008ac <enter_challenge_4+0x1d4>)
 800083e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000842:	8013      	strh	r3, [r2, #0]
			}

			if (vertical_PWM < PWM_min)
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <enter_challenge_4+0x1d4>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800084c:	429a      	cmp	r2, r3
 800084e:	d903      	bls.n	8000858 <enter_challenge_4+0x180>
			{
				vertical_PWM = PWM_min;
 8000850:	4a16      	ldr	r2, [pc, #88]	; (80008ac <enter_challenge_4+0x1d4>)
 8000852:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000856:	8013      	strh	r3, [r2, #0]
			}

			TIM2->CCR1 = vertical_PWM;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <enter_challenge_4+0x1d4>)
 800085a:	881a      	ldrh	r2, [r3, #0]
 800085c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000860:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = horizontal_PWM;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <enter_challenge_4+0x1d8>)
 8000864:	881a      	ldrh	r2, [r3, #0]
 8000866:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800086a:	639a      	str	r2, [r3, #56]	; 0x38

			set_compare_if_vel_not_zero(&TIMER3, yaw_vel - 12, pitch_vel - 12, HOLD_TIME);  // Keep PTU still for 2000 ms to record value
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <enter_challenge_4+0x1f4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	3b0c      	subs	r3, #12
 8000874:	b2db      	uxtb	r3, r3
 8000876:	b259      	sxtb	r1, r3
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <enter_challenge_4+0x1f8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	3b0c      	subs	r3, #12
 8000880:	b2db      	uxtb	r3, r3
 8000882:	b25a      	sxtb	r2, r3
 8000884:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000888:	480f      	ldr	r0, [pc, #60]	; (80008c8 <enter_challenge_4+0x1f0>)
 800088a:	f001 fe3e 	bl	800250a <set_compare_if_vel_not_zero>

			HAL_Delay(10);
 800088e:	200a      	movs	r0, #10
 8000890:	f001 ffd2 	bl	8002838 <HAL_Delay>
 8000894:	e74a      	b.n	800072c <enter_challenge_4+0x54>
		}

		else
		{
			set_led(0b11111111);
 8000896:	20ff      	movs	r0, #255	; 0xff
 8000898:	f000 f8e4 	bl	8000a64 <set_led>
			SerialOutputString("AA5521!", &USART1_PORT);
 800089c:	4907      	ldr	r1, [pc, #28]	; (80008bc <enter_challenge_4+0x1e4>)
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <enter_challenge_4+0x1fc>)
 80008a0:	f001 fac9 	bl	8001e36 <SerialOutputString>
		if (current_game_state == 1){
 80008a4:	e742      	b.n	800072c <enter_challenge_4+0x54>
 80008a6:	bf00      	nop
 80008a8:	08007b08 	.word	0x08007b08
 80008ac:	20000714 	.word	0x20000714
 80008b0:	20000716 	.word	0x20000716
 80008b4:	2000025c 	.word	0x2000025c
 80008b8:	200006a8 	.word	0x200006a8
 80008bc:	20000044 	.word	0x20000044
 80008c0:	08007afc 	.word	0x08007afc
 80008c4:	2000025e 	.word	0x2000025e
 80008c8:	20000088 	.word	0x20000088
 80008cc:	20000258 	.word	0x20000258
 80008d0:	20000254 	.word	0x20000254
 80008d4:	08007b00 	.word	0x08007b00

080008d8 <state_handler>:
#include "login.h"
#include "waiting.h"
#include "stm32f303xc.h"
#include "led.h"

void state_handler(char *state, int *game_state){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
	int state_int = atoi(state);
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f006 fb5e 	bl	8006fa4 <atoi>
 80008e8:	60f8      	str	r0, [r7, #12]
	*game_state = state_int;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	601a      	str	r2, [r3, #0]
//	else if(state_int == 02){
//		enter_challenge_2();
//	}

	//set_led(0b10101010);
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <check_state>:

void check_state(int game_state){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	if (game_state == 1){
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d102      	bne.n	800090c <check_state+0x14>
		enter_challenge_1();
 8000906:	f7ff fd63 	bl	80003d0 <enter_challenge_1>
		enter_login();
	}
	else if (game_state == 0){
		enter_waiting();
	}
}
 800090a:	e01c      	b.n	8000946 <check_state+0x4e>
	else if (game_state == 2){
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b02      	cmp	r3, #2
 8000910:	d102      	bne.n	8000918 <check_state+0x20>
		enter_challenge_2();
 8000912:	f7ff fd9f 	bl	8000454 <enter_challenge_2>
}
 8000916:	e016      	b.n	8000946 <check_state+0x4e>
	else if (game_state == 3){
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b03      	cmp	r3, #3
 800091c:	d102      	bne.n	8000924 <check_state+0x2c>
		enter_challenge_3();
 800091e:	f7ff fe99 	bl	8000654 <enter_challenge_3>
}
 8000922:	e010      	b.n	8000946 <check_state+0x4e>
	else if (game_state == 4){
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b04      	cmp	r3, #4
 8000928:	d102      	bne.n	8000930 <check_state+0x38>
		enter_challenge_4();
 800092a:	f7ff fed5 	bl	80006d8 <enter_challenge_4>
}
 800092e:	e00a      	b.n	8000946 <check_state+0x4e>
	else if (game_state == 5){
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b05      	cmp	r3, #5
 8000934:	d102      	bne.n	800093c <check_state+0x44>
		enter_login();
 8000936:	f000 f9d1 	bl	8000cdc <enter_login>
}
 800093a:	e004      	b.n	8000946 <check_state+0x4e>
	else if (game_state == 0){
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d101      	bne.n	8000946 <check_state+0x4e>
		enter_waiting();
 8000942:	f001 feb7 	bl	80026b4 <enter_waiting>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <window_init>:

#include "filter.h"


void window_init(Window *window)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
	window->idx = 0;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2200      	movs	r2, #0
 800095a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	window->is_full = false;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	memset(window->arr, 0, WINDOW_SIZE * sizeof(uint16_t));
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	22c8      	movs	r2, #200	; 0xc8
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f006 fb65 	bl	800703c <memset>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <moving_average>:


uint16_t moving_average(Window *window, uint16_t new_value)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	460b      	mov	r3, r1
 8000984:	807b      	strh	r3, [r7, #2]
	update_window(window, new_value);
 8000986:	887b      	ldrh	r3, [r7, #2]
 8000988:	4619      	mov	r1, r3
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f000 f808 	bl	80009a0 <update_window>
	return mean(window);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 f837 	bl	8000a04 <mean>
 8000996:	4603      	mov	r3, r0
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <update_window>:


void update_window(Window *window, uint16_t new_value)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	807b      	strh	r3, [r7, #2]
	if (window->idx == WINDOW_SIZE - 1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80009b2:	2b63      	cmp	r3, #99	; 0x63
 80009b4:	d103      	bne.n	80009be <update_window+0x1e>
	{
		window->is_full = true;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2201      	movs	r2, #1
 80009ba:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	}

	window->arr[window->idx] = new_value;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80009c4:	461a      	mov	r2, r3
 80009c6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	window->idx = (window->idx + 1) % WINDOW_SIZE;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80009d6:	3301      	adds	r3, #1
 80009d8:	4a09      	ldr	r2, [pc, #36]	; (8000a00 <update_window+0x60>)
 80009da:	fb82 1203 	smull	r1, r2, r2, r3
 80009de:	1151      	asrs	r1, r2, #5
 80009e0:	17da      	asrs	r2, r3, #31
 80009e2:	1a8a      	subs	r2, r1, r2
 80009e4:	2164      	movs	r1, #100	; 0x64
 80009e6:	fb01 f202 	mul.w	r2, r1, r2
 80009ea:	1a9a      	subs	r2, r3, r2
 80009ec:	b2d2      	uxtb	r2, r2
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	51eb851f 	.word	0x51eb851f

08000a04 <mean>:


uint16_t mean(Window *window)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	int32_t sum = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < WINDOW_SIZE; i++)
 8000a10:	2300      	movs	r3, #0
 8000a12:	817b      	strh	r3, [r7, #10]
 8000a14:	e00a      	b.n	8000a2c <mean+0x28>
	{
		sum += window->arr[i];
 8000a16:	897a      	ldrh	r2, [r7, #10]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < WINDOW_SIZE; i++)
 8000a26:	897b      	ldrh	r3, [r7, #10]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	817b      	strh	r3, [r7, #10]
 8000a2c:	897b      	ldrh	r3, [r7, #10]
 8000a2e:	2b63      	cmp	r3, #99	; 0x63
 8000a30:	d9f1      	bls.n	8000a16 <mean+0x12>
	}

	int8_t n_samples = window->is_full ? WINDOW_SIZE : window->idx;  // If the window is not yet full,
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <mean+0x3c>
 8000a3c:	2364      	movs	r3, #100	; 0x64
 8000a3e:	e003      	b.n	8000a48 <mean+0x44>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8000a46:	b25b      	sxtb	r3, r3
 8000a48:	727b      	strb	r3, [r7, #9]
																	 // the number of samples is the idx

	return sum / n_samples;  // Error associated with integer division is negligible
 8000a4a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a54:	b29b      	uxth	r3, r3
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
	...

08000a64 <set_led>:

#include "stm32f303xc.h"

bool flashing = false;

void set_led(uint8_t led_mask){
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <set_led+0x20>)
 8000a70:	60fb      	str	r3, [r7, #12]
	*led_register = led_mask;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	79fa      	ldrb	r2, [r7, #7]
 8000a76:	701a      	strb	r2, [r3, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	48001015 	.word	0x48001015

08000a88 <chase_led>:
	*led_register &= ~led_mask;
}


void chase_led()
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
	uint8_t *led_register = ((uint8_t *)&(GPIOE->ODR)) + 1;
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <chase_led+0x3c>)
 8000a90:	607b      	str	r3, [r7, #4]
	uint8_t last_led = *led_register & (1 << 7);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a9a:	70fb      	strb	r3, [r7, #3]
	*led_register = ((*led_register) << 1) | (last_led >> 7);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	b25a      	sxtb	r2, r3
 8000aa4:	78fb      	ldrb	r3, [r7, #3]
 8000aa6:	09db      	lsrs	r3, r3, #7
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	b25b      	sxtb	r3, r3
 8000aac:	4313      	orrs	r3, r2
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	701a      	strb	r2, [r3, #0]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	48001015 	.word	0x48001015

08000ac8 <completion_led>:

void completion_led()
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
	HAL_Delay(LED_DELAY);
 8000ace:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ad2:	f001 feb1 	bl	8002838 <HAL_Delay>
	for (uint8_t i = 0; i < 8; i++)
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	73fb      	strb	r3, [r7, #15]
 8000ada:	e021      	b.n	8000b20 <completion_led+0x58>
	{
		uint8_t *led_register = ((uint8_t *)&(GPIOE->ODR)) + 1;
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <completion_led+0x68>)
 8000ade:	60bb      	str	r3, [r7, #8]
		uint8_t old_led_register = *led_register;
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	71fb      	strb	r3, [r7, #7]
		uint8_t last_led = *led_register & (1 << 7);
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000aee:	71bb      	strb	r3, [r7, #6]
		uint8_t new_led_register = ((*led_register) << 1) | (last_led >> 7);
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	b25a      	sxtb	r2, r3
 8000af8:	79bb      	ldrb	r3, [r7, #6]
 8000afa:	09db      	lsrs	r3, r3, #7
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	b25b      	sxtb	r3, r3
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	717b      	strb	r3, [r7, #5]
		*led_register = old_led_register | new_led_register;
 8000b06:	79fa      	ldrb	r2, [r7, #7]
 8000b08:	797b      	ldrb	r3, [r7, #5]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	701a      	strb	r2, [r3, #0]
		HAL_Delay(LED_DELAY);
 8000b12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b16:	f001 fe8f 	bl	8002838 <HAL_Delay>
	for (uint8_t i = 0; i < 8; i++)
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	73fb      	strb	r3, [r7, #15]
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	2b07      	cmp	r3, #7
 8000b24:	d9da      	bls.n	8000adc <completion_led+0x14>
	}
}
 8000b26:	bf00      	nop
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	48001015 	.word	0x48001015

08000b34 <flash_led>:

void flash_led(Colour colour, uint8_t n_times, uint16_t on_time, uint16_t off_time, Timer *timer)
{
 8000b34:	b490      	push	{r4, r7}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	4608      	mov	r0, r1
 8000b3e:	4611      	mov	r1, r2
 8000b40:	461a      	mov	r2, r3
 8000b42:	4623      	mov	r3, r4
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	4603      	mov	r3, r0
 8000b48:	71bb      	strb	r3, [r7, #6]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	80bb      	strh	r3, [r7, #4]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	807b      	strh	r3, [r7, #2]
	static uint8_t n_flashes_left;
	static uint16_t static_on_time;
	static uint16_t static_off_time;
	static uint8_t original_led_register;
	static bool led_on;
	LEDRegister *led_register = (LEDRegister *)(((uint8_t *)&(GPIOE->ODR)) + 1);
 8000b52:	4b4d      	ldr	r3, [pc, #308]	; (8000c88 <flash_led+0x154>)
 8000b54:	60fb      	str	r3, [r7, #12]

	if (n_times)  // n_times will always be > 0 when called from main and 0 when called from TIM4_IRQHandler
 8000b56:	79bb      	ldrb	r3, [r7, #6]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d020      	beq.n	8000b9e <flash_led+0x6a>
	{			  // We are only interested in the arguments when flash_led is called main
		// Save these arguments for future calls
		static_colour = colour;
 8000b5c:	4a4b      	ldr	r2, [pc, #300]	; (8000c8c <flash_led+0x158>)
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	7013      	strb	r3, [r2, #0]
		n_flashes_left = n_times;
 8000b62:	4a4b      	ldr	r2, [pc, #300]	; (8000c90 <flash_led+0x15c>)
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	7013      	strb	r3, [r2, #0]
		static_on_time = on_time;
 8000b68:	4a4a      	ldr	r2, [pc, #296]	; (8000c94 <flash_led+0x160>)
 8000b6a:	88bb      	ldrh	r3, [r7, #4]
 8000b6c:	8013      	strh	r3, [r2, #0]
		static_off_time = off_time;
 8000b6e:	4a4a      	ldr	r2, [pc, #296]	; (8000c98 <flash_led+0x164>)
 8000b70:	887b      	ldrh	r3, [r7, #2]
 8000b72:	8013      	strh	r3, [r2, #0]
		original_led_register = led_register->all_leds;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	781a      	ldrb	r2, [r3, #0]
 8000b78:	4b48      	ldr	r3, [pc, #288]	; (8000c9c <flash_led+0x168>)
 8000b7a:	701a      	strb	r2, [r3, #0]
		led_register->all_leds = 0;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
		led_on = false;
 8000b82:	4b47      	ldr	r3, [pc, #284]	; (8000ca0 <flash_led+0x16c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]

		// Enable compare interrupt
		*(timer->InterruptEnableRegister) |= TIM_DIER_CC1IE;
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b92:	f042 0202 	orr.w	r2, r2, #2
 8000b96:	601a      	str	r2, [r3, #0]
		flashing = true;
 8000b98:	4b42      	ldr	r3, [pc, #264]	; (8000ca4 <flash_led+0x170>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
	}


	if (!led_on)
 8000b9e:	4b40      	ldr	r3, [pc, #256]	; (8000ca0 <flash_led+0x16c>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	f083 0301 	eor.w	r3, r3, #1
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d044      	beq.n	8000c36 <flash_led+0x102>
	{
		// Turn on LEDs according to colour specified
		switch (static_colour)
 8000bac:	4b37      	ldr	r3, [pc, #220]	; (8000c8c <flash_led+0x158>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	d837      	bhi.n	8000c24 <flash_led+0xf0>
 8000bb4:	a201      	add	r2, pc, #4	; (adr r2, 8000bbc <flash_led+0x88>)
 8000bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bba:	bf00      	nop
 8000bbc:	08000bcd 	.word	0x08000bcd
 8000bc0:	08000be3 	.word	0x08000be3
 8000bc4:	08000bf9 	.word	0x08000bf9
 8000bc8:	08000c0f 	.word	0x08000c0f
		{
			case RED:
				led_register->colour.red_0 = 1;
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	7813      	ldrb	r3, [r2, #0]
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	7013      	strb	r3, [r2, #0]
				led_register->colour.red_1 = 1;
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	7813      	ldrb	r3, [r2, #0]
 8000bda:	f043 0320 	orr.w	r3, r3, #32
 8000bde:	7013      	strb	r3, [r2, #0]
				break;
 8000be0:	e020      	b.n	8000c24 <flash_led+0xf0>

			case GREEN:
				led_register->colour.green_0 = 1;
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	7813      	ldrb	r3, [r2, #0]
 8000be6:	f043 0308 	orr.w	r3, r3, #8
 8000bea:	7013      	strb	r3, [r2, #0]
				led_register->colour.green_1 = 1;
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	7813      	ldrb	r3, [r2, #0]
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf4:	7013      	strb	r3, [r2, #0]
				break;
 8000bf6:	e015      	b.n	8000c24 <flash_led+0xf0>

			case BLUE:
				led_register->colour.blue_0 = 1;
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	7813      	ldrb	r3, [r2, #0]
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	7013      	strb	r3, [r2, #0]
				led_register->colour.blue_1 = 1;
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	7813      	ldrb	r3, [r2, #0]
 8000c06:	f043 0310 	orr.w	r3, r3, #16
 8000c0a:	7013      	strb	r3, [r2, #0]
				break;
 8000c0c:	e00a      	b.n	8000c24 <flash_led+0xf0>

			case ORANGE:
				led_register->colour.orange_0 = 1;
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	7813      	ldrb	r3, [r2, #0]
 8000c12:	f043 0304 	orr.w	r3, r3, #4
 8000c16:	7013      	strb	r3, [r2, #0]
				led_register->colour.orange_1 = 1;
 8000c18:	68fa      	ldr	r2, [r7, #12]
 8000c1a:	7813      	ldrb	r3, [r2, #0]
 8000c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c20:	7013      	strb	r3, [r2, #0]
				break;
 8000c22:	bf00      	nop
		}

		led_on = true;
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <flash_led+0x16c>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]

		// Set the compare value so that the interrupt is called after `on_time`
		*(timer->CompareRegister1) = static_on_time;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <flash_led+0x160>)
 8000c2c:	881a      	ldrh	r2, [r3, #0]
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	e020      	b.n	8000c78 <flash_led+0x144>
	}

	else
	{
		// Turn off the LEDs
		led_register->all_leds = 0;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
		led_on = false;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <flash_led+0x16c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]

		// Set the compare value so that the interrupt is called after `off_time`
		*(timer->CompareRegister1) = static_off_time;
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <flash_led+0x164>)
 8000c44:	881a      	ldrh	r2, [r3, #0]
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4a:	601a      	str	r2, [r3, #0]

		n_flashes_left--;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <flash_led+0x15c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	3b01      	subs	r3, #1
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <flash_led+0x15c>)
 8000c56:	701a      	strb	r2, [r3, #0]
		if (n_flashes_left == 0)
 8000c58:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <flash_led+0x15c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d10b      	bne.n	8000c78 <flash_led+0x144>
		{
			// Disable compare interrupt
			*(timer->InterruptEnableRegister) &= ~TIM_DIER_CC1IE;
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6a:	f022 0202 	bic.w	r2, r2, #2
 8000c6e:	601a      	str	r2, [r3, #0]

			// Change the LEDs back to the way they were before the first function call
//			led_register->all_leds = original_led_register;
			flashing = false;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <flash_led+0x170>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
			return;
 8000c76:	e003      	b.n	8000c80 <flash_led+0x14c>
		}
	}

	// Reset the timer counter so that the interrupt is triggered again
	*(timer->TimerCount) = 0;
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc90      	pop	{r4, r7}
 8000c86:	4770      	bx	lr
 8000c88:	48001015 	.word	0x48001015
 8000c8c:	20000261 	.word	0x20000261
 8000c90:	20000262 	.word	0x20000262
 8000c94:	20000264 	.word	0x20000264
 8000c98:	20000266 	.word	0x20000266
 8000c9c:	20000268 	.word	0x20000268
 8000ca0:	20000269 	.word	0x20000269
 8000ca4:	20000260 	.word	0x20000260

08000ca8 <show_correct_pos_led>:


void show_correct_pos_led()
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	// Show the LEDs only when LEDs are not being used for flashing
	if (!flashing)
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <show_correct_pos_led+0x30>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	f083 0301 	eor.w	r3, r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d00b      	beq.n	8000cd2 <show_correct_pos_led+0x2a>
	{
		if (ptu_pos_is_correct())
 8000cba:	f000 fe75 	bl	80019a8 <ptu_pos_is_correct>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <show_correct_pos_led+0x24>
		{
			set_led(0b01010101);
 8000cc4:	2055      	movs	r0, #85	; 0x55
 8000cc6:	f7ff fecd 	bl	8000a64 <set_led>
		else
		{
			set_led(0b0);
		}
	}
}
 8000cca:	e002      	b.n	8000cd2 <show_correct_pos_led+0x2a>
			set_led(0b0);
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff fec9 	bl	8000a64 <set_led>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000260 	.word	0x20000260

08000cdc <enter_login>:


#define YAW 5
#define PITCH 8

void enter_login(){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af02      	add	r7, sp, #8
	set_led(0b00110011);
 8000ce2:	2033      	movs	r0, #51	; 0x33
 8000ce4:	f7ff febe 	bl	8000a64 <set_led>
	extern int current_game_state;
	int yaw_dir = 1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
	int pitch_dir = 1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
	int hor_pos = 1000;
 8000cf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf4:	607b      	str	r3, [r7, #4]
	int vir_pos = 1000;
 8000cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfa:	603b      	str	r3, [r7, #0]

	extern int yaw_vel;
	extern int pitch_vel;

	while(1){
		if (current_game_state == 1){
 8000cfc:	4b61      	ldr	r3, [pc, #388]	; (8000e84 <enter_login+0x1a8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d106      	bne.n	8000d12 <enter_login+0x36>
			SerialOutputString("!", &USART1_PORT);
 8000d04:	4960      	ldr	r1, [pc, #384]	; (8000e88 <enter_login+0x1ac>)
 8000d06:	4861      	ldr	r0, [pc, #388]	; (8000e8c <enter_login+0x1b0>)
 8000d08:	f001 f895 	bl	8001e36 <SerialOutputString>
			enter_challenge_1();
 8000d0c:	f7ff fb60 	bl	80003d0 <enter_challenge_1>
 8000d10:	e02a      	b.n	8000d68 <enter_login+0x8c>
		}
		else if (current_game_state == 2){
 8000d12:	4b5c      	ldr	r3, [pc, #368]	; (8000e84 <enter_login+0x1a8>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d106      	bne.n	8000d28 <enter_login+0x4c>
			SerialOutputString("!", &USART1_PORT);
 8000d1a:	495b      	ldr	r1, [pc, #364]	; (8000e88 <enter_login+0x1ac>)
 8000d1c:	485b      	ldr	r0, [pc, #364]	; (8000e8c <enter_login+0x1b0>)
 8000d1e:	f001 f88a 	bl	8001e36 <SerialOutputString>
			enter_challenge_2();
 8000d22:	f7ff fb97 	bl	8000454 <enter_challenge_2>
 8000d26:	e01f      	b.n	8000d68 <enter_login+0x8c>
		}
		else if (current_game_state == 3){
 8000d28:	4b56      	ldr	r3, [pc, #344]	; (8000e84 <enter_login+0x1a8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	d106      	bne.n	8000d3e <enter_login+0x62>
			SerialOutputString("!", &USART1_PORT);
 8000d30:	4955      	ldr	r1, [pc, #340]	; (8000e88 <enter_login+0x1ac>)
 8000d32:	4856      	ldr	r0, [pc, #344]	; (8000e8c <enter_login+0x1b0>)
 8000d34:	f001 f87f 	bl	8001e36 <SerialOutputString>
			enter_challenge_3();
 8000d38:	f7ff fc8c 	bl	8000654 <enter_challenge_3>
 8000d3c:	e014      	b.n	8000d68 <enter_login+0x8c>
		}
		else if (current_game_state == 4){
 8000d3e:	4b51      	ldr	r3, [pc, #324]	; (8000e84 <enter_login+0x1a8>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	d106      	bne.n	8000d54 <enter_login+0x78>
			SerialOutputString("!", &USART1_PORT);
 8000d46:	4950      	ldr	r1, [pc, #320]	; (8000e88 <enter_login+0x1ac>)
 8000d48:	4850      	ldr	r0, [pc, #320]	; (8000e8c <enter_login+0x1b0>)
 8000d4a:	f001 f874 	bl	8001e36 <SerialOutputString>
			enter_challenge_4();
 8000d4e:	f7ff fcc3 	bl	80006d8 <enter_challenge_4>
 8000d52:	e009      	b.n	8000d68 <enter_login+0x8c>
		}
		else if (current_game_state == 0){
 8000d54:	4b4b      	ldr	r3, [pc, #300]	; (8000e84 <enter_login+0x1a8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d105      	bne.n	8000d68 <enter_login+0x8c>
			SerialOutputString("!", &USART1_PORT);
 8000d5c:	494a      	ldr	r1, [pc, #296]	; (8000e88 <enter_login+0x1ac>)
 8000d5e:	484b      	ldr	r0, [pc, #300]	; (8000e8c <enter_login+0x1b0>)
 8000d60:	f001 f869 	bl	8001e36 <SerialOutputString>
			enter_waiting();
 8000d64:	f001 fca6 	bl	80026b4 <enter_waiting>
		}

		yaw_vel = yaw_vel - YAW;
 8000d68:	4b49      	ldr	r3, [pc, #292]	; (8000e90 <enter_login+0x1b4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	3b05      	subs	r3, #5
 8000d6e:	4a48      	ldr	r2, [pc, #288]	; (8000e90 <enter_login+0x1b4>)
 8000d70:	6013      	str	r3, [r2, #0]
		pitch_vel = pitch_vel - PITCH;
 8000d72:	4b48      	ldr	r3, [pc, #288]	; (8000e94 <enter_login+0x1b8>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3b08      	subs	r3, #8
 8000d78:	4a46      	ldr	r2, [pc, #280]	; (8000e94 <enter_login+0x1b8>)
 8000d7a:	6013      	str	r3, [r2, #0]

		if (yaw_dir == 1) {
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d104      	bne.n	8000d8c <enter_login+0xb0>
			hor_pos += yaw_vel;
 8000d82:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <enter_login+0x1b4>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	607b      	str	r3, [r7, #4]
		}
		if (yaw_dir == 0) {
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d104      	bne.n	8000d9c <enter_login+0xc0>
			hor_pos -= yaw_vel;
 8000d92:	4b3f      	ldr	r3, [pc, #252]	; (8000e90 <enter_login+0x1b4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	607b      	str	r3, [r7, #4]
		}
		if (pitch_dir == 1) {
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d105      	bne.n	8000dae <enter_login+0xd2>
			vir_pos += pitch_vel;
 8000da2:	4b3c      	ldr	r3, [pc, #240]	; (8000e94 <enter_login+0x1b8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	4413      	add	r3, r2
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	e004      	b.n	8000db8 <enter_login+0xdc>
		}
		else {
			vir_pos -= pitch_vel;
 8000dae:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <enter_login+0x1b8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	603b      	str	r3, [r7, #0]
		}

		if (vir_pos > 2400) {
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000dbe:	dd04      	ble.n	8000dca <enter_login+0xee>
			vir_pos = 2400;
 8000dc0:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8000dc4:	603b      	str	r3, [r7, #0]
			pitch_dir = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
		}
		if (vir_pos < 800) {
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000dd0:	da04      	bge.n	8000ddc <enter_login+0x100>
			vir_pos = 800;
 8000dd2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000dd6:	603b      	str	r3, [r7, #0]
			pitch_dir = 1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
		}
		if (hor_pos > 2400) {
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000de2:	dd04      	ble.n	8000dee <enter_login+0x112>
			hor_pos = 2400;
 8000de4:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8000de8:	607b      	str	r3, [r7, #4]
			yaw_dir = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
		}
		if (hor_pos < 800) {
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000df4:	da04      	bge.n	8000e00 <enter_login+0x124>
			hor_pos = 800;
 8000df6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000dfa:	607b      	str	r3, [r7, #4]
			yaw_dir = 1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
		}

		set_yaw(hor_pos);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f001 f896 	bl	8001f32 <set_yaw>
		set_pitch(vir_pos);
 8000e06:	6838      	ldr	r0, [r7, #0]
 8000e08:	f001 f8a1 	bl	8001f4e <set_pitch>

		read_gyro(&yaw_rate, &pitch_rate, &roll_rate);
 8000e0c:	4a22      	ldr	r2, [pc, #136]	; (8000e98 <enter_login+0x1bc>)
 8000e0e:	4923      	ldr	r1, [pc, #140]	; (8000e9c <enter_login+0x1c0>)
 8000e10:	4823      	ldr	r0, [pc, #140]	; (8000ea0 <enter_login+0x1c4>)
 8000e12:	f000 f84b 	bl	8000eac <read_gyro>
		roll_rate = abs(roll_rate);
 8000e16:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <enter_login+0x1bc>)
 8000e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	bfb8      	it	lt
 8000e20:	425b      	neglt	r3, r3
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b21a      	sxth	r2, r3
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <enter_login+0x1bc>)
 8000e28:	801a      	strh	r2, [r3, #0]
		pitch_rate = abs(pitch_rate);
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <enter_login+0x1c0>)
 8000e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	bfb8      	it	lt
 8000e34:	425b      	neglt	r3, r3
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	b21a      	sxth	r2, r3
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <enter_login+0x1c0>)
 8000e3c:	801a      	strh	r2, [r3, #0]
		yaw_rate = abs(yaw_rate);
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <enter_login+0x1c4>)
 8000e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	bfb8      	it	lt
 8000e48:	425b      	neglt	r3, r3
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <enter_login+0x1c4>)
 8000e50:	801a      	strh	r2, [r3, #0]



		sprintf(string_to_send, "AA557%5i%5i%5i!", roll_rate, pitch_rate, yaw_rate);
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <enter_login+0x1bc>)
 8000e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <enter_login+0x1c0>)
 8000e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e60:	4619      	mov	r1, r3
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <enter_login+0x1c4>)
 8000e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	490d      	ldr	r1, [pc, #52]	; (8000ea4 <enter_login+0x1c8>)
 8000e6e:	480e      	ldr	r0, [pc, #56]	; (8000ea8 <enter_login+0x1cc>)
 8000e70:	f006 f9dc 	bl	800722c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000e74:	4904      	ldr	r1, [pc, #16]	; (8000e88 <enter_login+0x1ac>)
 8000e76:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <enter_login+0x1cc>)
 8000e78:	f000 ffdd 	bl	8001e36 <SerialOutputString>


		HAL_Delay(10);
 8000e7c:	200a      	movs	r0, #10
 8000e7e:	f001 fcdb 	bl	8002838 <HAL_Delay>
		if (current_game_state == 1){
 8000e82:	e73b      	b.n	8000cfc <enter_login+0x20>
 8000e84:	200006a8 	.word	0x200006a8
 8000e88:	20000044 	.word	0x20000044
 8000e8c:	08007b48 	.word	0x08007b48
 8000e90:	20000258 	.word	0x20000258
 8000e94:	20000254 	.word	0x20000254
 8000e98:	20000722 	.word	0x20000722
 8000e9c:	20000720 	.word	0x20000720
 8000ea0:	2000071e 	.word	0x2000071e
 8000ea4:	08007b4c 	.word	0x08007b4c
 8000ea8:	20000004 	.word	0x20000004

08000eac <read_gyro>:
	uint8_t var6;
} struct_2;



void read_gyro(int16_t *yaw_rate, int16_t *pitch_rate, int16_t *roll_rate){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	; 0x30
 8000eb0:	af04      	add	r7, sp, #16
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
	uint8_t xMSB = 0x00;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x29, 1, &xMSB, 1, 10);
 8000ebc:	230a      	movs	r3, #10
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	f107 0319 	add.w	r3, r7, #25
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2301      	movs	r3, #1
 8000ecc:	2229      	movs	r2, #41	; 0x29
 8000ece:	21d3      	movs	r1, #211	; 0xd3
 8000ed0:	486d      	ldr	r0, [pc, #436]	; (8001088 <read_gyro+0x1dc>)
 8000ed2:	f002 f935 	bl	8003140 <HAL_I2C_Mem_Read>
	uint8_t xLSB = 0x00;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	763b      	strb	r3, [r7, #24]
	HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x28, 1, &xLSB, 1, 10);
 8000eda:	230a      	movs	r3, #10
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	f107 0318 	add.w	r3, r7, #24
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	2228      	movs	r2, #40	; 0x28
 8000eec:	21d3      	movs	r1, #211	; 0xd3
 8000eee:	4866      	ldr	r0, [pc, #408]	; (8001088 <read_gyro+0x1dc>)
 8000ef0:	f002 f926 	bl	8003140 <HAL_I2C_Mem_Read>
	int16_t temp_yaw = ((xMSB << 8) | xLSB);
 8000ef4:	7e7b      	ldrb	r3, [r7, #25]
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	b21a      	sxth	r2, r3
 8000efa:	7e3b      	ldrb	r3, [r7, #24]
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	4313      	orrs	r3, r2
 8000f00:	83fb      	strh	r3, [r7, #30]

	uint8_t yMSB = 0x00;
 8000f02:	2300      	movs	r3, #0
 8000f04:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2B, 1, &yMSB, 1, 10);
 8000f06:	230a      	movs	r3, #10
 8000f08:	9302      	str	r3, [sp, #8]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	f107 0317 	add.w	r3, r7, #23
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2301      	movs	r3, #1
 8000f16:	222b      	movs	r2, #43	; 0x2b
 8000f18:	21d3      	movs	r1, #211	; 0xd3
 8000f1a:	485b      	ldr	r0, [pc, #364]	; (8001088 <read_gyro+0x1dc>)
 8000f1c:	f002 f910 	bl	8003140 <HAL_I2C_Mem_Read>
	uint8_t yLSB = 0x00;
 8000f20:	2300      	movs	r3, #0
 8000f22:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2A, 1, &yLSB, 1, 10);
 8000f24:	230a      	movs	r3, #10
 8000f26:	9302      	str	r3, [sp, #8]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	f107 0316 	add.w	r3, r7, #22
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2301      	movs	r3, #1
 8000f34:	222a      	movs	r2, #42	; 0x2a
 8000f36:	21d3      	movs	r1, #211	; 0xd3
 8000f38:	4853      	ldr	r0, [pc, #332]	; (8001088 <read_gyro+0x1dc>)
 8000f3a:	f002 f901 	bl	8003140 <HAL_I2C_Mem_Read>
	int16_t temp_pitch = ((yMSB << 8) | yLSB);
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	b21a      	sxth	r2, r3
 8000f44:	7dbb      	ldrb	r3, [r7, #22]
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	83bb      	strh	r3, [r7, #28]

	uint8_t zMSB = 0x00;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2D, 1, &zMSB, 1, 10);
 8000f50:	230a      	movs	r3, #10
 8000f52:	9302      	str	r3, [sp, #8]
 8000f54:	2301      	movs	r3, #1
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	f107 0315 	add.w	r3, r7, #21
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	222d      	movs	r2, #45	; 0x2d
 8000f62:	21d3      	movs	r1, #211	; 0xd3
 8000f64:	4848      	ldr	r0, [pc, #288]	; (8001088 <read_gyro+0x1dc>)
 8000f66:	f002 f8eb 	bl	8003140 <HAL_I2C_Mem_Read>
	uint8_t zLSB = 0x00;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2C, 1, &zLSB, 1, 10);
 8000f6e:	230a      	movs	r3, #10
 8000f70:	9302      	str	r3, [sp, #8]
 8000f72:	2301      	movs	r3, #1
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	222c      	movs	r2, #44	; 0x2c
 8000f80:	21d3      	movs	r1, #211	; 0xd3
 8000f82:	4841      	ldr	r0, [pc, #260]	; (8001088 <read_gyro+0x1dc>)
 8000f84:	f002 f8dc 	bl	8003140 <HAL_I2C_Mem_Read>
	int16_t temp_roll = ((zMSB << 8) | zLSB);
 8000f88:	7d7b      	ldrb	r3, [r7, #21]
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	b21a      	sxth	r2, r3
 8000f8e:	7d3b      	ldrb	r3, [r7, #20]
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	837b      	strh	r3, [r7, #26]


	roll_avg_sum_yaw = roll_avg_sum_yaw - yaw_arr[roll_avg_index] + temp_yaw;
 8000f96:	4b3d      	ldr	r3, [pc, #244]	; (800108c <read_gyro+0x1e0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a3d      	ldr	r2, [pc, #244]	; (8001090 <read_gyro+0x1e4>)
 8000f9c:	6812      	ldr	r2, [r2, #0]
 8000f9e:	493d      	ldr	r1, [pc, #244]	; (8001094 <read_gyro+0x1e8>)
 8000fa0:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000fa4:	1a9a      	subs	r2, r3, r2
 8000fa6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a37      	ldr	r2, [pc, #220]	; (800108c <read_gyro+0x1e0>)
 8000fae:	6013      	str	r3, [r2, #0]
	yaw_arr[roll_avg_index] = temp_yaw;
 8000fb0:	4b37      	ldr	r3, [pc, #220]	; (8001090 <read_gyro+0x1e4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4937      	ldr	r1, [pc, #220]	; (8001094 <read_gyro+0x1e8>)
 8000fb6:	8bfa      	ldrh	r2, [r7, #30]
 8000fb8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	roll_avg_yaw = roll_avg_sum_yaw / 100;
 8000fbc:	4b33      	ldr	r3, [pc, #204]	; (800108c <read_gyro+0x1e0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a35      	ldr	r2, [pc, #212]	; (8001098 <read_gyro+0x1ec>)
 8000fc2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc6:	1152      	asrs	r2, r2, #5
 8000fc8:	17db      	asrs	r3, r3, #31
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	4a33      	ldr	r2, [pc, #204]	; (800109c <read_gyro+0x1f0>)
 8000fce:	6013      	str	r3, [r2, #0]

	roll_avg_sum_pitch = roll_avg_sum_pitch - pitch_arr[roll_avg_index] + temp_pitch;
 8000fd0:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <read_gyro+0x1f4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a2e      	ldr	r2, [pc, #184]	; (8001090 <read_gyro+0x1e4>)
 8000fd6:	6812      	ldr	r2, [r2, #0]
 8000fd8:	4932      	ldr	r1, [pc, #200]	; (80010a4 <read_gyro+0x1f8>)
 8000fda:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000fde:	1a9a      	subs	r2, r3, r2
 8000fe0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a2e      	ldr	r2, [pc, #184]	; (80010a0 <read_gyro+0x1f4>)
 8000fe8:	6013      	str	r3, [r2, #0]
	pitch_arr[roll_avg_index] = temp_pitch;
 8000fea:	4b29      	ldr	r3, [pc, #164]	; (8001090 <read_gyro+0x1e4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	492d      	ldr	r1, [pc, #180]	; (80010a4 <read_gyro+0x1f8>)
 8000ff0:	8bba      	ldrh	r2, [r7, #28]
 8000ff2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	roll_avg_pitch = roll_avg_sum_pitch / 100;
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <read_gyro+0x1f4>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a27      	ldr	r2, [pc, #156]	; (8001098 <read_gyro+0x1ec>)
 8000ffc:	fb82 1203 	smull	r1, r2, r2, r3
 8001000:	1152      	asrs	r2, r2, #5
 8001002:	17db      	asrs	r3, r3, #31
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <read_gyro+0x1fc>)
 8001008:	6013      	str	r3, [r2, #0]

	roll_avg_sum_roll = roll_avg_sum_roll - roll_arr[roll_avg_index] + temp_roll;
 800100a:	4b28      	ldr	r3, [pc, #160]	; (80010ac <read_gyro+0x200>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a20      	ldr	r2, [pc, #128]	; (8001090 <read_gyro+0x1e4>)
 8001010:	6812      	ldr	r2, [r2, #0]
 8001012:	4927      	ldr	r1, [pc, #156]	; (80010b0 <read_gyro+0x204>)
 8001014:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001018:	1a9a      	subs	r2, r3, r2
 800101a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800101e:	4413      	add	r3, r2
 8001020:	4a22      	ldr	r2, [pc, #136]	; (80010ac <read_gyro+0x200>)
 8001022:	6013      	str	r3, [r2, #0]
	roll_arr[roll_avg_index] = temp_roll;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <read_gyro+0x1e4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4921      	ldr	r1, [pc, #132]	; (80010b0 <read_gyro+0x204>)
 800102a:	8b7a      	ldrh	r2, [r7, #26]
 800102c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	roll_avg_roll = roll_avg_sum_roll / 100;
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <read_gyro+0x200>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a18      	ldr	r2, [pc, #96]	; (8001098 <read_gyro+0x1ec>)
 8001036:	fb82 1203 	smull	r1, r2, r2, r3
 800103a:	1152      	asrs	r2, r2, #5
 800103c:	17db      	asrs	r3, r3, #31
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <read_gyro+0x208>)
 8001042:	6013      	str	r3, [r2, #0]



	roll_avg_index = (roll_avg_index + 1) % 100;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <read_gyro+0x1e4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <read_gyro+0x1ec>)
 800104c:	fb83 1302 	smull	r1, r3, r3, r2
 8001050:	1159      	asrs	r1, r3, #5
 8001052:	17d3      	asrs	r3, r2, #31
 8001054:	1acb      	subs	r3, r1, r3
 8001056:	2164      	movs	r1, #100	; 0x64
 8001058:	fb01 f303 	mul.w	r3, r1, r3
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	4a0c      	ldr	r2, [pc, #48]	; (8001090 <read_gyro+0x1e4>)
 8001060:	6013      	str	r3, [r2, #0]

	*yaw_rate = roll_avg_yaw;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <read_gyro+0x1f0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	b21a      	sxth	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	801a      	strh	r2, [r3, #0]
	*pitch_rate = roll_avg_pitch;
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <read_gyro+0x1fc>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	b21a      	sxth	r2, r3
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	801a      	strh	r2, [r3, #0]
	*roll_rate = roll_avg_roll;
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <read_gyro+0x208>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	b21a      	sxth	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	801a      	strh	r2, [r3, #0]


}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2000026c 	.word	0x2000026c
 800108c:	20000980 	.word	0x20000980
 8001090:	2000097c 	.word	0x2000097c
 8001094:	20000724 	.word	0x20000724
 8001098:	51eb851f 	.word	0x51eb851f
 800109c:	2000098c 	.word	0x2000098c
 80010a0:	20000984 	.word	0x20000984
 80010a4:	200007ec 	.word	0x200007ec
 80010a8:	20000990 	.word	0x20000990
 80010ac:	20000988 	.word	0x20000988
 80010b0:	200008b4 	.word	0x200008b4
 80010b4:	20000994 	.word	0x20000994

080010b8 <read_LIDAR>:



void read_LIDAR(uint16_t *distance, uint16_t *distance_I2C){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af04      	add	r7, sp, #16
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
	uint8_t lidar_value = 0x03;
 80010c2:	2303      	movs	r3, #3
 80010c4:	733b      	strb	r3, [r7, #12]
	return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &lidar_value, 1, 100);
 80010c6:	2364      	movs	r3, #100	; 0x64
 80010c8:	9302      	str	r3, [sp, #8]
 80010ca:	2301      	movs	r3, #1
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	2200      	movs	r2, #0
 80010d8:	21c4      	movs	r1, #196	; 0xc4
 80010da:	4844      	ldr	r0, [pc, #272]	; (80011ec <read_LIDAR+0x134>)
 80010dc:	f001 ff1c 	bl	8002f18 <HAL_I2C_Mem_Write>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b42      	ldr	r3, [pc, #264]	; (80011f0 <read_LIDAR+0x138>)
 80010e6:	701a      	strb	r2, [r3, #0]


	lidar_value = 0xff;
 80010e8:	23ff      	movs	r3, #255	; 0xff
 80010ea:	733b      	strb	r3, [r7, #12]

	uint8_t lidar_MSBa = 0x00;
 80010ec:	2300      	movs	r3, #0
 80010ee:	72fb      	strb	r3, [r7, #11]
	uint8_t lidar_LSBa = 0x00;
 80010f0:	2300      	movs	r3, #0
 80010f2:	72bb      	strb	r3, [r7, #10]

	volatile uint16_t lidar_distance = 0xff;
 80010f4:	23ff      	movs	r3, #255	; 0xff
 80010f6:	813b      	strh	r3, [r7, #8]

	uint16_t timeout;

	while ((lidar_value & 0x01) != 0x00) {
 80010f8:	e041      	b.n	800117e <read_LIDAR+0xc6>
		return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x01, 1, &lidar_value, 1, 100);
 80010fa:	2364      	movs	r3, #100	; 0x64
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	2301      	movs	r3, #1
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	2201      	movs	r2, #1
 800110c:	21c5      	movs	r1, #197	; 0xc5
 800110e:	4837      	ldr	r0, [pc, #220]	; (80011ec <read_LIDAR+0x134>)
 8001110:	f002 f816 	bl	8003140 <HAL_I2C_Mem_Read>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <read_LIDAR+0x138>)
 800111a:	701a      	strb	r2, [r3, #0]

		return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x0f, 1, &lidar_MSBa, 1, 100);
 800111c:	2364      	movs	r3, #100	; 0x64
 800111e:	9302      	str	r3, [sp, #8]
 8001120:	2301      	movs	r3, #1
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	f107 030b 	add.w	r3, r7, #11
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2301      	movs	r3, #1
 800112c:	220f      	movs	r2, #15
 800112e:	21c5      	movs	r1, #197	; 0xc5
 8001130:	482e      	ldr	r0, [pc, #184]	; (80011ec <read_LIDAR+0x134>)
 8001132:	f002 f805 	bl	8003140 <HAL_I2C_Mem_Read>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <read_LIDAR+0x138>)
 800113c:	701a      	strb	r2, [r3, #0]
		return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x10, 1, &lidar_LSBa, 1, 100);
 800113e:	2364      	movs	r3, #100	; 0x64
 8001140:	9302      	str	r3, [sp, #8]
 8001142:	2301      	movs	r3, #1
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	f107 030a 	add.w	r3, r7, #10
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2301      	movs	r3, #1
 800114e:	2210      	movs	r2, #16
 8001150:	21c5      	movs	r1, #197	; 0xc5
 8001152:	4826      	ldr	r0, [pc, #152]	; (80011ec <read_LIDAR+0x134>)
 8001154:	f001 fff4 	bl	8003140 <HAL_I2C_Mem_Read>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <read_LIDAR+0x138>)
 800115e:	701a      	strb	r2, [r3, #0]

		lidar_distance = ((lidar_MSBa << 8) | lidar_LSBa);
 8001160:	7afb      	ldrb	r3, [r7, #11]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b21a      	sxth	r2, r3
 8001166:	7abb      	ldrb	r3, [r7, #10]
 8001168:	b21b      	sxth	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b21b      	sxth	r3, r3
 800116e:	b29b      	uxth	r3, r3
 8001170:	813b      	strh	r3, [r7, #8]
		timeout += 1;
 8001172:	89fb      	ldrh	r3, [r7, #14]
 8001174:	3301      	adds	r3, #1
 8001176:	81fb      	strh	r3, [r7, #14]
		if (timeout > 0xff)
 8001178:	89fb      	ldrh	r3, [r7, #14]
 800117a:	2bff      	cmp	r3, #255	; 0xff
 800117c:	d805      	bhi.n	800118a <read_LIDAR+0xd2>
	while ((lidar_value & 0x01) != 0x00) {
 800117e:	7b3b      	ldrb	r3, [r7, #12]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1b8      	bne.n	80010fa <read_LIDAR+0x42>
 8001188:	e000      	b.n	800118c <read_LIDAR+0xd4>
			break;
 800118a:	bf00      	nop
	}

	uint8_t lidar_ranges = lidar_distance / (100/4); // 100cm broken into 4 groups
 800118c:	893b      	ldrh	r3, [r7, #8]
 800118e:	b29b      	uxth	r3, r3
 8001190:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <read_LIDAR+0x13c>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	08db      	lsrs	r3, r3, #3
 8001198:	b29b      	uxth	r3, r3
 800119a:	737b      	strb	r3, [r7, #13]
	if (lidar_ranges > 3)
 800119c:	7b7b      	ldrb	r3, [r7, #13]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d901      	bls.n	80011a6 <read_LIDAR+0xee>
		lidar_ranges = 3;
 80011a2:	2303      	movs	r3, #3
 80011a4:	737b      	strb	r3, [r7, #13]
	if (lidar_distance > 300)
 80011a6:	893b      	ldrh	r3, [r7, #8]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011ae:	d902      	bls.n	80011b6 <read_LIDAR+0xfe>
		lidar_distance = 300;
 80011b0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80011b4:	813b      	strh	r3, [r7, #8]


	// set max value for lidar
	if (last_period > 3000)
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <read_LIDAR+0x140>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80011be:	4293      	cmp	r3, r2
 80011c0:	d903      	bls.n	80011ca <read_LIDAR+0x112>
		last_period = 3000;
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <read_LIDAR+0x140>)
 80011c4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80011c8:	801a      	strh	r2, [r3, #0]
	//volatile uint16_t lidar_distance = 0;
	*distance = last_period;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <read_LIDAR+0x140>)
 80011cc:	881a      	ldrh	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	801a      	strh	r2, [r3, #0]
	*distance_I2C = lidar_distance * 10;
 80011d2:	893b      	ldrh	r3, [r7, #8]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	0092      	lsls	r2, r2, #2
 80011da:	4413      	add	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	b29a      	uxth	r2, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	801a      	strh	r2, [r3, #0]

}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2000026c 	.word	0x2000026c
 80011f0:	20000998 	.word	0x20000998
 80011f4:	51eb851f 	.word	0x51eb851f
 80011f8:	2000071a 	.word	0x2000071a

080011fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af04      	add	r7, sp, #16

	// look at the size difference between these structs,
	//  they are because the 32 bit microcontroller
	//  packs the data so the divisions are in groups
	//  of 4bytes (4bytes=32bit)
	uint8_t size_1 = sizeof(struct_1);
 8001202:	2314      	movs	r3, #20
 8001204:	73fb      	strb	r3, [r7, #15]
	uint8_t size_2 = sizeof(struct_2);
 8001206:	230c      	movs	r3, #12
 8001208:	73bb      	strb	r3, [r7, #14]




	enable_clocks();
 800120a:	f7ff f879 	bl	8000300 <enable_clocks>
	initialise_board();
 800120e:	f7ff f887 	bl	8000320 <initialise_board>

	LedRegister *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8001212:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <main+0xd8>)
 8001214:	60bb      	str	r3, [r7, #8]

	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8001216:	2200      	movs	r2, #0
 8001218:	492f      	ldr	r1, [pc, #188]	; (80012d8 <main+0xdc>)
 800121a:	2004      	movs	r0, #4
 800121c:	f000 fd66 	bl	8001cec <SerialInitialise>



//	HAL_StatusTypeDef return_value = 0x00;

	vertical_PWM = 1000;
 8001220:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <main+0xe0>)
 8001222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001226:	801a      	strh	r2, [r3, #0]
	horizontal_PWM = 1000;
 8001228:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <main+0xe4>)
 800122a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800122e:	801a      	strh	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001230:	f001 fa9c 	bl	800276c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001234:	f000 f864 	bl	8001300 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001238:	f000 fa42 	bl	80016c0 <MX_GPIO_Init>
	MX_I2C1_Init();
 800123c:	f000 f8c4 	bl	80013c8 <MX_I2C1_Init>
	MX_SPI1_Init();
 8001240:	f000 f902 	bl	8001448 <MX_SPI1_Init>
	MX_USB_PCD_Init();
 8001244:	f000 fa1a 	bl	800167c <MX_USB_PCD_Init>
	MX_TIM2_Init();
 8001248:	f000 f9b2 	bl	80015b0 <MX_TIM2_Init>
	MX_TIM1_Init();
 800124c:	f000 f93a 	bl	80014c4 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001250:	2100      	movs	r1, #0
 8001252:	4824      	ldr	r0, [pc, #144]	; (80012e4 <main+0xe8>)
 8001254:	f004 f9de 	bl	8005614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001258:	2104      	movs	r1, #4
 800125a:	4822      	ldr	r0, [pc, #136]	; (80012e4 <main+0xe8>)
 800125c:	f004 f9da 	bl	8005614 <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001260:	2100      	movs	r1, #0
 8001262:	4821      	ldr	r0, [pc, #132]	; (80012e8 <main+0xec>)
 8001264:	f004 fb38 	bl	80058d8 <HAL_TIM_IC_Start_IT>

	// TIM 2 is setup with a prescaler that makes 1 count = 1 microsecond
	// Even with HAL, you can still set the values yourself
	TIM2->ARR = 20000; // 20000 = 20ms, which is the desired clock period for servos
 8001268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800126c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001270:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // this makes the timing not change until the next pulse is finished
 8001272:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800127c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001280:	6013      	str	r3, [r2, #0]

	// note: for PWM if you continually change the clock period
	// you can get unexpected results. To remove this, set ARPE so that the
	// ARR settings are not activated until the next cycle.

	initialise_ptu_i2c(&hi2c1);
 8001282:	481a      	ldr	r0, [pc, #104]	; (80012ec <main+0xf0>)
 8001284:	f000 fc38 	bl	8001af8 <initialise_ptu_i2c>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	// reset lidar board
	uint8_t reset_value = 0x00;
 8001288:	2300      	movs	r3, #0
 800128a:	71fb      	strb	r3, [r7, #7]
	return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 800128c:	230a      	movs	r3, #10
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	2301      	movs	r3, #1
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	1dfb      	adds	r3, r7, #7
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2301      	movs	r3, #1
 800129a:	2200      	movs	r2, #0
 800129c:	21c4      	movs	r1, #196	; 0xc4
 800129e:	4813      	ldr	r0, [pc, #76]	; (80012ec <main+0xf0>)
 80012a0:	f001 fe3a 	bl	8002f18 <HAL_I2C_Mem_Write>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <main+0xf4>)
 80012aa:	701a      	strb	r2, [r3, #0]



	// delay for initialisation of the lidar
	HAL_Delay(100);
 80012ac:	2064      	movs	r0, #100	; 0x64
 80012ae:	f001 fac3 	bl	8002838 <HAL_Delay>

	// Initialising Timer 3
	TimerInitialise(&TIMER3);
 80012b2:	4810      	ldr	r0, [pc, #64]	; (80012f4 <main+0xf8>)
 80012b4:	f001 f8df 	bl	8002476 <TimerInitialise>
	TimerInitialise(&TIMER4);  // For LED-related timing
 80012b8:	480f      	ldr	r0, [pc, #60]	; (80012f8 <main+0xfc>)
 80012ba:	f001 f8dc 	bl	8002476 <TimerInitialise>

	enable_interrupts_RX();
 80012be:	f000 fd89 	bl	8001dd4 <enable_interrupts_RX>
	enable_interrupts_button();
 80012c2:	f7ff f83f 	bl	8000344 <enable_interrupts_button>

	while (1)
	{
		check_state(current_game_state);
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <main+0x100>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fb14 	bl	80008f8 <check_state>
 80012d0:	e7f9      	b.n	80012c6 <main+0xca>
 80012d2:	bf00      	nop
 80012d4:	48001015 	.word	0x48001015
 80012d8:	20000044 	.word	0x20000044
 80012dc:	20000714 	.word	0x20000714
 80012e0:	20000716 	.word	0x20000716
 80012e4:	20000370 	.word	0x20000370
 80012e8:	20000324 	.word	0x20000324
 80012ec:	2000026c 	.word	0x2000026c
 80012f0:	20000998 	.word	0x20000998
 80012f4:	20000088 	.word	0x20000088
 80012f8:	200000c0 	.word	0x200000c0
 80012fc:	200006a8 	.word	0x200006a8

08001300 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b09e      	sub	sp, #120	; 0x78
 8001304:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001306:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800130a:	2228      	movs	r2, #40	; 0x28
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f005 fe94 	bl	800703c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001314:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001324:	463b      	mov	r3, r7
 8001326:	223c      	movs	r2, #60	; 0x3c
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f005 fe86 	bl	800703c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001330:	2303      	movs	r3, #3
 8001332:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001334:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001338:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133e:	2301      	movs	r3, #1
 8001340:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001342:	2310      	movs	r3, #16
 8001344:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001346:	2302      	movs	r3, #2
 8001348:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800134e:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001350:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001354:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001356:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800135a:	4618      	mov	r0, r3
 800135c:	f002 fc2c 	bl	8003bb8 <HAL_RCC_OscConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x6a>
	{
		Error_Handler();
 8001366:	f000 fb13 	bl	8001990 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136a:	230f      	movs	r3, #15
 800136c:	63fb      	str	r3, [r7, #60]	; 0x3c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136e:	2302      	movs	r3, #2
 8001370:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800137a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001380:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001384:	2101      	movs	r1, #1
 8001386:	4618      	mov	r0, r3
 8001388:	f003 fc54 	bl	8004c34 <HAL_RCC_ClockConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8001392:	f000 fafd 	bl	8001990 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <SystemClock_Config+0xc4>)
 8001398:	603b      	str	r3, [r7, #0]
			|RCC_PERIPHCLK_TIM1;
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800139e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013a2:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 fe28 	bl	8005000 <HAL_RCCEx_PeriphCLKConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0xba>
	{
		Error_Handler();
 80013b6:	f000 faeb 	bl	8001990 <Error_Handler>
	}
}
 80013ba:	bf00      	nop
 80013bc:	3778      	adds	r7, #120	; 0x78
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	00021020 	.word	0x00021020

080013c8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_I2C1_Init+0x74>)
 80013ce:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <MX_I2C1_Init+0x78>)
 80013d0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 80013d2:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_I2C1_Init+0x74>)
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <MX_I2C1_Init+0x7c>)
 80013d6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_I2C1_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013de:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_I2C1_Init+0x74>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <MX_I2C1_Init+0x74>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_I2C1_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <MX_I2C1_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_I2C1_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_I2C1_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001402:	480e      	ldr	r0, [pc, #56]	; (800143c <MX_I2C1_Init+0x74>)
 8001404:	f001 fcf8 	bl	8002df8 <HAL_I2C_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 800140e:	f000 fabf 	bl	8001990 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001412:	2100      	movs	r1, #0
 8001414:	4809      	ldr	r0, [pc, #36]	; (800143c <MX_I2C1_Init+0x74>)
 8001416:	f002 fa65 	bl	80038e4 <HAL_I2CEx_ConfigAnalogFilter>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001420:	f000 fab6 	bl	8001990 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001424:	2100      	movs	r1, #0
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_I2C1_Init+0x74>)
 8001428:	f002 faa7 	bl	800397a <HAL_I2CEx_ConfigDigitalFilter>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001432:	f000 faad 	bl	8001990 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000026c 	.word	0x2000026c
 8001440:	40005400 	.word	0x40005400
 8001444:	2000090e 	.word	0x2000090e

08001448 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <MX_SPI1_Init+0x74>)
 800144e:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <MX_SPI1_Init+0x78>)
 8001450:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_SPI1_Init+0x74>)
 8001454:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001458:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_SPI1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <MX_SPI1_Init+0x74>)
 8001462:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001466:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <MX_SPI1_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <MX_SPI1_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_SPI1_Init+0x74>)
 8001476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <MX_SPI1_Init+0x74>)
 800147e:	2208      	movs	r2, #8
 8001480:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_SPI1_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_SPI1_Init+0x74>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <MX_SPI1_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_SPI1_Init+0x74>)
 8001496:	2207      	movs	r2, #7
 8001498:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <MX_SPI1_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_SPI1_Init+0x74>)
 80014a2:	2208      	movs	r2, #8
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_SPI1_Init+0x74>)
 80014a8:	f003 ff5a 	bl	8005360 <HAL_SPI_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 80014b2:	f000 fa6d 	bl	8001990 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200002c0 	.word	0x200002c0
 80014c0:	40013000 	.word	0x40013000

080014c4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	; 0x30
 80014c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80014f0:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <MX_TIM1_Init+0xe4>)
 80014f2:	4a2e      	ldr	r2, [pc, #184]	; (80015ac <MX_TIM1_Init+0xe8>)
 80014f4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 47;
 80014f6:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <MX_TIM1_Init+0xe4>)
 80014f8:	222f      	movs	r2, #47	; 0x2f
 80014fa:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fc:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <MX_TIM1_Init+0xe4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001502:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <MX_TIM1_Init+0xe4>)
 8001504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001508:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150a:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <MX_TIM1_Init+0xe4>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <MX_TIM1_Init+0xe4>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <MX_TIM1_Init+0xe4>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800151c:	4822      	ldr	r0, [pc, #136]	; (80015a8 <MX_TIM1_Init+0xe4>)
 800151e:	f003 ffca 	bl	80054b6 <HAL_TIM_Base_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0x68>
	{
		Error_Handler();
 8001528:	f000 fa32 	bl	8001990 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001530:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	4619      	mov	r1, r3
 8001538:	481b      	ldr	r0, [pc, #108]	; (80015a8 <MX_TIM1_Init+0xe4>)
 800153a:	f004 fddf 	bl	80060fc <HAL_TIM_ConfigClockSource>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM1_Init+0x84>
	{
		Error_Handler();
 8001544:	f000 fa24 	bl	8001990 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001548:	4817      	ldr	r0, [pc, #92]	; (80015a8 <MX_TIM1_Init+0xe4>)
 800154a:	f004 f963 	bl	8005814 <HAL_TIM_IC_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM1_Init+0x94>
	{
		Error_Handler();
 8001554:	f000 fa1c 	bl	8001990 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	61bb      	str	r3, [r7, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	480f      	ldr	r0, [pc, #60]	; (80015a8 <MX_TIM1_Init+0xe4>)
 800156c:	f005 fc40 	bl	8006df0 <HAL_TIMEx_MasterConfigSynchronization>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM1_Init+0xb6>
	{
		Error_Handler();
 8001576:	f000 fa0b 	bl	8001990 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800157a:	230a      	movs	r3, #10
 800157c:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800157e:	2301      	movs	r3, #1
 8001580:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2200      	movs	r2, #0
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_TIM1_Init+0xe4>)
 8001592:	f004 fc02 	bl	8005d9a <HAL_TIM_IC_ConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM1_Init+0xdc>
	{
		Error_Handler();
 800159c:	f000 f9f8 	bl	8001990 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	3730      	adds	r7, #48	; 0x30
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000324 	.word	0x20000324
 80015ac:	40012c00 	.word	0x40012c00

080015b0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80015c2:	463b      	mov	r3, r7
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
 80015d0:	615a      	str	r2, [r3, #20]
 80015d2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80015d4:	4b28      	ldr	r3, [pc, #160]	; (8001678 <MX_TIM2_Init+0xc8>)
 80015d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015da:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 47;
 80015dc:	4b26      	ldr	r3, [pc, #152]	; (8001678 <MX_TIM2_Init+0xc8>)
 80015de:	222f      	movs	r2, #47	; 0x2f
 80015e0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e2:	4b25      	ldr	r3, [pc, #148]	; (8001678 <MX_TIM2_Init+0xc8>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 20000;
 80015e8:	4b23      	ldr	r3, [pc, #140]	; (8001678 <MX_TIM2_Init+0xc8>)
 80015ea:	f644 6220 	movw	r2, #20000	; 0x4e20
 80015ee:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f0:	4b21      	ldr	r3, [pc, #132]	; (8001678 <MX_TIM2_Init+0xc8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015f6:	4b20      	ldr	r3, [pc, #128]	; (8001678 <MX_TIM2_Init+0xc8>)
 80015f8:	2280      	movs	r2, #128	; 0x80
 80015fa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015fc:	481e      	ldr	r0, [pc, #120]	; (8001678 <MX_TIM2_Init+0xc8>)
 80015fe:	f003 ffb1 	bl	8005564 <HAL_TIM_PWM_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8001608:	f000 f9c2 	bl	8001990 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	4619      	mov	r1, r3
 800161a:	4817      	ldr	r0, [pc, #92]	; (8001678 <MX_TIM2_Init+0xc8>)
 800161c:	f005 fbe8 	bl	8006df0 <HAL_TIMEx_MasterConfigSynchronization>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 8001626:	f000 f9b3 	bl	8001990 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800162a:	2360      	movs	r3, #96	; 0x60
 800162c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 2000;
 800162e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001632:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800163c:	463b      	mov	r3, r7
 800163e:	2200      	movs	r2, #0
 8001640:	4619      	mov	r1, r3
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <MX_TIM2_Init+0xc8>)
 8001644:	f004 fc46 	bl	8005ed4 <HAL_TIM_PWM_ConfigChannel>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM2_Init+0xa2>
	{
		Error_Handler();
 800164e:	f000 f99f 	bl	8001990 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001652:	463b      	mov	r3, r7
 8001654:	2204      	movs	r2, #4
 8001656:	4619      	mov	r1, r3
 8001658:	4807      	ldr	r0, [pc, #28]	; (8001678 <MX_TIM2_Init+0xc8>)
 800165a:	f004 fc3b 	bl	8005ed4 <HAL_TIM_PWM_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM2_Init+0xb8>
	{
		Error_Handler();
 8001664:	f000 f994 	bl	8001990 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001668:	4803      	ldr	r0, [pc, #12]	; (8001678 <MX_TIM2_Init+0xc8>)
 800166a:	f000 fd99 	bl	80021a0 <HAL_TIM_MspPostInit>

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	; 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000370 	.word	0x20000370

0800167c <MX_USB_PCD_Init>:
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <MX_USB_PCD_Init+0x3c>)
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <MX_USB_PCD_Init+0x40>)
 8001684:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_USB_PCD_Init+0x3c>)
 8001688:	2208      	movs	r2, #8
 800168a:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MX_USB_PCD_Init+0x3c>)
 800168e:	2202      	movs	r2, #2
 8001690:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_USB_PCD_Init+0x3c>)
 8001694:	2202      	movs	r2, #2
 8001696:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <MX_USB_PCD_Init+0x3c>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_USB_PCD_Init+0x3c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <MX_USB_PCD_Init+0x3c>)
 80016a6:	f002 f9b4 	bl	8003a12 <HAL_PCD_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_USB_PCD_Init+0x38>
	{
		Error_Handler();
 80016b0:	f000 f96e 	bl	8001990 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200003bc 	.word	0x200003bc
 80016bc:	40005c00 	.word	0x40005c00

080016c0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80016d6:	4b37      	ldr	r3, [pc, #220]	; (80017b4 <MX_GPIO_Init+0xf4>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	4a36      	ldr	r2, [pc, #216]	; (80017b4 <MX_GPIO_Init+0xf4>)
 80016dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016e0:	6153      	str	r3, [r2, #20]
 80016e2:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <MX_GPIO_Init+0xf4>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <MX_GPIO_Init+0xf4>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	4a30      	ldr	r2, [pc, #192]	; (80017b4 <MX_GPIO_Init+0xf4>)
 80016f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016f8:	6153      	str	r3, [r2, #20]
 80016fa:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <MX_GPIO_Init+0xf4>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001706:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <MX_GPIO_Init+0xf4>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	4a2a      	ldr	r2, [pc, #168]	; (80017b4 <MX_GPIO_Init+0xf4>)
 800170c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001710:	6153      	str	r3, [r2, #20]
 8001712:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <MX_GPIO_Init+0xf4>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <MX_GPIO_Init+0xf4>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	4a24      	ldr	r2, [pc, #144]	; (80017b4 <MX_GPIO_Init+0xf4>)
 8001724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001728:	6153      	str	r3, [r2, #20]
 800172a:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <MX_GPIO_Init+0xf4>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <MX_GPIO_Init+0xf4>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	4a1e      	ldr	r2, [pc, #120]	; (80017b4 <MX_GPIO_Init+0xf4>)
 800173c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001740:	6153      	str	r3, [r2, #20]
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <MX_GPIO_Init+0xf4>)
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800174e:	2200      	movs	r2, #0
 8001750:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001754:	4818      	ldr	r0, [pc, #96]	; (80017b8 <MX_GPIO_Init+0xf8>)
 8001756:	f001 fb37 	bl	8002dc8 <HAL_GPIO_WritePin>
			|LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
			|LD6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800175a:	2337      	movs	r3, #55	; 0x37
 800175c:	617b      	str	r3, [r7, #20]
			|MEMS_INT2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800175e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001762:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	4812      	ldr	r0, [pc, #72]	; (80017b8 <MX_GPIO_Init+0xf8>)
 8001770:	f001 f998 	bl	8002aa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001774:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001778:	617b      	str	r3, [r7, #20]
			|LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
			|LD6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	480a      	ldr	r0, [pc, #40]	; (80017b8 <MX_GPIO_Init+0xf8>)
 800178e:	f001 f989 	bl	8002aa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001792:	2301      	movs	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	4619      	mov	r1, r3
 80017a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a8:	f001 f97c 	bl	8002aa4 <HAL_GPIO_Init>

}
 80017ac:	bf00      	nop
 80017ae:	3728      	adds	r7, #40	; 0x28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40021000 	.word	0x40021000
 80017b8:	48001000 	.word	0x48001000

080017bc <USART1_IRQHandler>:

/* USER CODE BEGIN 4 */
void USART1_IRQHandler(){
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0

	char single_inp;
	int test = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]

	test = SerialReceiveChar(&USART1_PORT, &single_inp);
 80017c6:	f107 0313 	add.w	r3, r7, #19
 80017ca:	4619      	mov	r1, r3
 80017cc:	4851      	ldr	r0, [pc, #324]	; (8001914 <USART1_IRQHandler+0x158>)
 80017ce:	f000 fb56 	bl	8001e7e <SerialReceiveChar>
 80017d2:	4603      	mov	r3, r0
 80017d4:	61fb      	str	r3, [r7, #28]
	if (test == 1){
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d109      	bne.n	80017f0 <USART1_IRQHandler+0x34>
		input_buffer[input_counter] = single_inp;
 80017dc:	4b4e      	ldr	r3, [pc, #312]	; (8001918 <USART1_IRQHandler+0x15c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	7cf9      	ldrb	r1, [r7, #19]
 80017e2:	4a4e      	ldr	r2, [pc, #312]	; (800191c <USART1_IRQHandler+0x160>)
 80017e4:	54d1      	strb	r1, [r2, r3]
		input_counter ++;
 80017e6:	4b4c      	ldr	r3, [pc, #304]	; (8001918 <USART1_IRQHandler+0x15c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	4a4a      	ldr	r2, [pc, #296]	; (8001918 <USART1_IRQHandler+0x15c>)
 80017ee:	6013      	str	r3, [r2, #0]
		//set_led(0b0101);
		//SerialOutputChar(single_inp, &USART1_PORT);
	}
	if (single_inp == 33){ //check for end of string character
 80017f0:	7cfb      	ldrb	r3, [r7, #19]
 80017f2:	2b21      	cmp	r3, #33	; 0x21
 80017f4:	f040 808a 	bne.w	800190c <USART1_IRQHandler+0x150>
		if (strncmp(input_buffer, "AA55", 4) == 0){ //check for sentinal char
 80017f8:	2204      	movs	r2, #4
 80017fa:	4949      	ldr	r1, [pc, #292]	; (8001920 <USART1_IRQHandler+0x164>)
 80017fc:	4847      	ldr	r0, [pc, #284]	; (800191c <USART1_IRQHandler+0x160>)
 80017fe:	f005 fd3d 	bl	800727c <strncmp>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d176      	bne.n	80018f6 <USART1_IRQHandler+0x13a>
			if (input_buffer[4] == 49){ //if msgtype is 1
 8001808:	4b44      	ldr	r3, [pc, #272]	; (800191c <USART1_IRQHandler+0x160>)
 800180a:	791b      	ldrb	r3, [r3, #4]
 800180c:	2b31      	cmp	r3, #49	; 0x31
 800180e:	d120      	bne.n	8001852 <USART1_IRQHandler+0x96>
				char *data = malloc(4);
 8001810:	2004      	movs	r0, #4
 8001812:	f005 fbf5 	bl	8007000 <malloc>
 8001816:	4603      	mov	r3, r0
 8001818:	617b      	str	r3, [r7, #20]
				strcpy(data, input_buffer + 5);
 800181a:	4b42      	ldr	r3, [pc, #264]	; (8001924 <USART1_IRQHandler+0x168>)
 800181c:	4619      	mov	r1, r3
 800181e:	6978      	ldr	r0, [r7, #20]
 8001820:	f005 fd24 	bl	800726c <strcpy>
				data[2] = 0;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3302      	adds	r3, #2
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]

				//SerialOutputString(data, &USART1_PORT);
				empty_buffer(input_buffer, BUFFER);
 800182c:	2164      	movs	r1, #100	; 0x64
 800182e:	483b      	ldr	r0, [pc, #236]	; (800191c <USART1_IRQHandler+0x160>)
 8001830:	f000 fb64 	bl	8001efc <empty_buffer>
				input_counter = 0;
 8001834:	4b38      	ldr	r3, [pc, #224]	; (8001918 <USART1_IRQHandler+0x15c>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
				test = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
				single_inp = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	74fb      	strb	r3, [r7, #19]

				state_handler(data, &current_game_state);
 8001842:	4939      	ldr	r1, [pc, #228]	; (8001928 <USART1_IRQHandler+0x16c>)
 8001844:	6978      	ldr	r0, [r7, #20]
 8001846:	f7ff f847 	bl	80008d8 <state_handler>
				free(data);
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f005 fbe0 	bl	8007010 <free>
 8001850:	e05c      	b.n	800190c <USART1_IRQHandler+0x150>

				return;
			}
			if (input_buffer[4] == 54){  //msg type 6
 8001852:	4b32      	ldr	r3, [pc, #200]	; (800191c <USART1_IRQHandler+0x160>)
 8001854:	791b      	ldrb	r3, [r3, #4]
 8001856:	2b36      	cmp	r3, #54	; 0x36
 8001858:	d112      	bne.n	8001880 <USART1_IRQHandler+0xc4>
				char *data = malloc(6);
 800185a:	2006      	movs	r0, #6
 800185c:	f005 fbd0 	bl	8007000 <malloc>
 8001860:	4603      	mov	r3, r0
 8001862:	61bb      	str	r3, [r7, #24]
				strcpy(data, input_buffer + 5);
 8001864:	4b2f      	ldr	r3, [pc, #188]	; (8001924 <USART1_IRQHandler+0x168>)
 8001866:	4619      	mov	r1, r3
 8001868:	69b8      	ldr	r0, [r7, #24]
 800186a:	f005 fcff 	bl	800726c <strcpy>
				//SerialOutputString(data, &USART1_PORT);
				target_distance = atoi(data);
 800186e:	69b8      	ldr	r0, [r7, #24]
 8001870:	f005 fb98 	bl	8006fa4 <atoi>
 8001874:	4603      	mov	r3, r0
 8001876:	4a2d      	ldr	r2, [pc, #180]	; (800192c <USART1_IRQHandler+0x170>)
 8001878:	6013      	str	r3, [r2, #0]
				free(data);
 800187a:	69b8      	ldr	r0, [r7, #24]
 800187c:	f005 fbc8 	bl	8007010 <free>

			}
			if (input_buffer[4] == 52){  //msg type 4  (set values for challenge 4
 8001880:	4b26      	ldr	r3, [pc, #152]	; (800191c <USART1_IRQHandler+0x160>)
 8001882:	791b      	ldrb	r3, [r3, #4]
 8001884:	2b34      	cmp	r3, #52	; 0x34
 8001886:	d136      	bne.n	80018f6 <USART1_IRQHandler+0x13a>

				input_buffer[4] = 48;
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <USART1_IRQHandler+0x160>)
 800188a:	2230      	movs	r2, #48	; 0x30
 800188c:	711a      	strb	r2, [r3, #4]
				//char *data = input_buffer + 5;
				//SerialOutputString(data, &USART1_PORT);
				//set_led(0b11111111);

				char data[5];
				strcpy(data, input_buffer + 5);
 800188e:	4a25      	ldr	r2, [pc, #148]	; (8001924 <USART1_IRQHandler+0x168>)
 8001890:	f107 030c 	add.w	r3, r7, #12
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f005 fce8 	bl	800726c <strcpy>
				char part1[2];
				strncpy(part1, data, 2);
 800189c:	f107 010c 	add.w	r1, r7, #12
 80018a0:	f107 0308 	add.w	r3, r7, #8
 80018a4:	2202      	movs	r2, #2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f005 fcfc 	bl	80072a4 <strncpy>
				char part2[2];
				strncpy(part2, data + 2, 2);
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	3302      	adds	r3, #2
 80018b2:	1d38      	adds	r0, r7, #4
 80018b4:	2202      	movs	r2, #2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f005 fcf4 	bl	80072a4 <strncpy>
				yaw_vel = atoi(part1);
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	4618      	mov	r0, r3
 80018c2:	f005 fb6f 	bl	8006fa4 <atoi>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4a19      	ldr	r2, [pc, #100]	; (8001930 <USART1_IRQHandler+0x174>)
 80018ca:	6013      	str	r3, [r2, #0]
				pitch_vel = atoi(part2);
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	4618      	mov	r0, r3
 80018d0:	f005 fb68 	bl	8006fa4 <atoi>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a17      	ldr	r2, [pc, #92]	; (8001934 <USART1_IRQHandler+0x178>)
 80018d8:	6013      	str	r3, [r2, #0]
				if(yaw_vel > 24){
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <USART1_IRQHandler+0x174>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b18      	cmp	r3, #24
 80018e0:	dd02      	ble.n	80018e8 <USART1_IRQHandler+0x12c>
					yaw_vel = 12;
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <USART1_IRQHandler+0x174>)
 80018e4:	220c      	movs	r2, #12
 80018e6:	601a      	str	r2, [r3, #0]
				}
				if(pitch_vel > 24){
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <USART1_IRQHandler+0x178>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b18      	cmp	r3, #24
 80018ee:	dd02      	ble.n	80018f6 <USART1_IRQHandler+0x13a>
					pitch_vel = 12;
 80018f0:	4b10      	ldr	r3, [pc, #64]	; (8001934 <USART1_IRQHandler+0x178>)
 80018f2:	220c      	movs	r2, #12
 80018f4:	601a      	str	r2, [r3, #0]
			//set_led(0b100010); //error
		}
		//SerialOutputString(input_buffer, &USART1_PORT);


		empty_buffer(input_buffer, BUFFER);
 80018f6:	2164      	movs	r1, #100	; 0x64
 80018f8:	4808      	ldr	r0, [pc, #32]	; (800191c <USART1_IRQHandler+0x160>)
 80018fa:	f000 faff 	bl	8001efc <empty_buffer>
		input_counter = 0;
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <USART1_IRQHandler+0x15c>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
		test = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
		single_inp = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	74fb      	strb	r3, [r7, #19]


	}

}
 800190c:	3720      	adds	r7, #32
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000044 	.word	0x20000044
 8001918:	20000710 	.word	0x20000710
 800191c:	200006ac 	.word	0x200006ac
 8001920:	08007b5c 	.word	0x08007b5c
 8001924:	200006b1 	.word	0x200006b1
 8001928:	200006a8 	.word	0x200006a8
 800192c:	20000000 	.word	0x20000000
 8001930:	20000258 	.word	0x20000258
 8001934:	20000254 	.word	0x20000254

08001938 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	//set_led(0b11111111);

	if (current_game_state == 2){
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <EXTI0_IRQHandler+0x48>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d115      	bne.n	8001970 <EXTI0_IRQHandler+0x38>

		set_led(0b1);
 8001944:	2001      	movs	r0, #1
 8001946:	f7ff f88d 	bl	8000a64 <set_led>
		button_start_time = TIM3->CNT;
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <EXTI0_IRQHandler+0x4c>)
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	b29a      	uxth	r2, r3
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <EXTI0_IRQHandler+0x50>)
 8001952:	801a      	strh	r2, [r3, #0]
		TIM3->DIER |= TIM_DIER_CC1IE;
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <EXTI0_IRQHandler+0x4c>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <EXTI0_IRQHandler+0x4c>)
 800195a:	f043 0302 	orr.w	r3, r3, #2
 800195e:	60d3      	str	r3, [r2, #12]
		button_timer();
 8001960:	f7fe fd1a 	bl	8000398 <button_timer>
		EXTI->PR |= EXTI_PR_PR0;
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <EXTI0_IRQHandler+0x54>)
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	4a08      	ldr	r2, [pc, #32]	; (800198c <EXTI0_IRQHandler+0x54>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6153      	str	r3, [r2, #20]
//	TIM3->DIER |= TIM_DIER_CC1IE;
//	button_timer();


	// reset the interrupt (so it doesn't keep firing until the next trigger)
	EXTI->PR |= EXTI_PR_PR0;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <EXTI0_IRQHandler+0x54>)
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	4a05      	ldr	r2, [pc, #20]	; (800198c <EXTI0_IRQHandler+0x54>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6153      	str	r3, [r2, #20]
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	200006a8 	.word	0x200006a8
 8001984:	40000400 	.word	0x40000400
 8001988:	20000180 	.word	0x20000180
 800198c:	40010400 	.word	0x40010400

08001990 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001994:	b672      	cpsid	i
}
 8001996:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		set_led(0b0);
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff f863 	bl	8000a64 <set_led>
		set_led(0b11111111);
 800199e:	20ff      	movs	r0, #255	; 0xff
 80019a0:	f7ff f860 	bl	8000a64 <set_led>
		set_led(0b0);
 80019a4:	e7f8      	b.n	8001998 <Error_Handler+0x8>
	...

080019a8 <ptu_pos_is_correct>:
	tim->CCR2 = vertical_PWM;
}


bool ptu_pos_is_correct()
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
	//sprintf(string_to_send, "AA550, %d, %d!", horizontal_PWM, vertical_PWM);
	//SerialOutputString(string_to_send, &USART1_PORT);
	bool horizontal_pos_is_correct = abs(horizontal_PWM - positions[curr_pos][0]) < TOLERANCE;
 80019ae:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <ptu_pos_is_correct+0xb0>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <ptu_pos_is_correct+0xb4>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <ptu_pos_is_correct+0xb8>)
 80019bc:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80019c6:	db0d      	blt.n	80019e4 <ptu_pos_is_correct+0x3c>
 80019c8:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <ptu_pos_is_correct+0xb0>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <ptu_pos_is_correct+0xb4>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <ptu_pos_is_correct+0xb8>)
 80019d6:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b63      	cmp	r3, #99	; 0x63
 80019de:	dc01      	bgt.n	80019e4 <ptu_pos_is_correct+0x3c>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <ptu_pos_is_correct+0x3e>
 80019e4:	2300      	movs	r3, #0
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	71fb      	strb	r3, [r7, #7]
	bool vertical_pos_is_correct = abs(vertical_PWM - positions[curr_pos][1]) < TOLERANCE;
 80019f0:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <ptu_pos_is_correct+0xbc>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	4619      	mov	r1, r3
 80019f6:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <ptu_pos_is_correct+0xb4>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	4a19      	ldr	r2, [pc, #100]	; (8001a60 <ptu_pos_is_correct+0xb8>)
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	885b      	ldrh	r3, [r3, #2]
 8001a02:	1acb      	subs	r3, r1, r3
 8001a04:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001a08:	db0d      	blt.n	8001a26 <ptu_pos_is_correct+0x7e>
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <ptu_pos_is_correct+0xbc>)
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <ptu_pos_is_correct+0xb4>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <ptu_pos_is_correct+0xb8>)
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	885b      	ldrh	r3, [r3, #2]
 8001a1c:	1acb      	subs	r3, r1, r3
 8001a1e:	2b63      	cmp	r3, #99	; 0x63
 8001a20:	dc01      	bgt.n	8001a26 <ptu_pos_is_correct+0x7e>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <ptu_pos_is_correct+0x80>
 8001a26:	2300      	movs	r3, #0
 8001a28:	71bb      	strb	r3, [r7, #6]
 8001a2a:	79bb      	ldrb	r3, [r7, #6]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	71bb      	strb	r3, [r7, #6]
	//bool horizontal_pos_is_correct = horizontal_PWM < TOLERANCE + 800 && horizontal_PWM > 800 - TOLERANCE;
	//bool vertical_pos_is_correct = vertical_PWM < TOLERANCE + 1800 && vertical_PWM > 1800 - TOLERANCE;
	return horizontal_pos_is_correct && vertical_pos_is_correct;
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d004      	beq.n	8001a42 <ptu_pos_is_correct+0x9a>
 8001a38:	79bb      	ldrb	r3, [r7, #6]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <ptu_pos_is_correct+0x9a>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <ptu_pos_is_correct+0x9c>
 8001a42:	2300      	movs	r3, #0
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	b2db      	uxtb	r3, r3
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000716 	.word	0x20000716
 8001a5c:	20000999 	.word	0x20000999
 8001a60:	08007b6c 	.word	0x08007b6c
 8001a64:	20000714 	.word	0x20000714

08001a68 <check_ptu_pos>:


void check_ptu_pos()
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af02      	add	r7, sp, #8
	if (ptu_pos_is_correct())
 8001a6e:	f7ff ff9b 	bl	80019a8 <ptu_pos_is_correct>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d021      	beq.n	8001abc <check_ptu_pos+0x54>
	{
		curr_pos++;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <check_ptu_pos+0x7c>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <check_ptu_pos+0x7c>)
 8001a82:	701a      	strb	r2, [r3, #0]
		if (curr_pos == NUM_POSITIONS)
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <check_ptu_pos+0x7c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d109      	bne.n	8001aa0 <check_ptu_pos+0x38>
		{
//			flash_led(GREEN, 3, 800, 400, &TIMER4);
//			delay = 3200;

			// Disable compare interrupts
			TIM3->DIER &= TIM_DIER_CC1IE;
 8001a8c:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <check_ptu_pos+0x80>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4a15      	ldr	r2, [pc, #84]	; (8001ae8 <check_ptu_pos+0x80>)
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	60d3      	str	r3, [r2, #12]

			solved = true;
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <check_ptu_pos+0x84>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
	{
		curr_pos = 0;
		flash_led(RED, 2, 800, 400, &TIMER4);
		delay = 2000;
	}
}
 8001a9e:	e01e      	b.n	8001ade <check_ptu_pos+0x76>
			flash_led(GREEN, 1, 800, 0, &TIMER4);
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <check_ptu_pos+0x88>)
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001aaa:	2101      	movs	r1, #1
 8001aac:	2001      	movs	r0, #1
 8001aae:	f7ff f841 	bl	8000b34 <flash_led>
			delay = 800;
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <check_ptu_pos+0x8c>)
 8001ab4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001ab8:	801a      	strh	r2, [r3, #0]
}
 8001aba:	e010      	b.n	8001ade <check_ptu_pos+0x76>
		curr_pos = 0;
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <check_ptu_pos+0x7c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
		flash_led(RED, 2, 800, 400, &TIMER4);
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <check_ptu_pos+0x88>)
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001aca:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001ace:	2102      	movs	r1, #2
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f7ff f82f 	bl	8000b34 <flash_led>
		delay = 2000;
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <check_ptu_pos+0x8c>)
 8001ad8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001adc:	801a      	strh	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000999 	.word	0x20000999
 8001ae8:	40000400 	.word	0x40000400
 8001aec:	2000025c 	.word	0x2000025c
 8001af0:	200000c0 	.word	0x200000c0
 8001af4:	2000025e 	.word	0x2000025e

08001af8 <initialise_ptu_i2c>:

#include "ptu_definitions.h"

ACCELEROMETER_CFG_STRUCT accelerometer_cfg = {ADXL345_POWER_CTL, 0x08, ADXL345_DATA_FORMAT, 0x08};

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b0d2      	sub	sp, #328	; 0x148
 8001afc:	af04      	add	r7, sp, #16
 8001afe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001b02:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b06:	6018      	str	r0, [r3, #0]

	  /* USER CODE BEGIN 1 */
		uint8_t i2cBuf[2];
		uint8_t accdata[6];
		uint16_t x,y,z;
		uint8_t reg1a = 0x00;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
		uint8_t reg2a = 0x00;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
		uint8_t reg4a = 0x00;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

	  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 8001b20:	2300      	movs	r3, #0
 8001b22:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135

	  HAL_StatusTypeDef return_value = 0x00;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
	  //CTRL_REG2_A
	  i2cBuf[0]=0x21;
	  i2cBuf[1]=0x38;
	  HAL_I2C_Master_Transmit(&hi2c1, gyro_wr, i2cBuf, 2, 10);
	*/
	  uint8_t reg_1 = 0b00001111;
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
	  // Enable x, y, z and turn off power down:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG1, 1, &reg_1, 1, 10);
 8001b32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001b36:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8001b3a:	230a      	movs	r3, #10
 8001b3c:	9302      	str	r3, [sp, #8]
 8001b3e:	2301      	movs	r3, #1
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	f207 1319 	addw	r3, r7, #281	; 0x119
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2301      	movs	r3, #1
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	21d2      	movs	r1, #210	; 0xd2
 8001b4e:	6800      	ldr	r0, [r0, #0]
 8001b50:	f001 f9e2 	bl	8002f18 <HAL_I2C_Mem_Write>


	  uint8_t reg_2 = 0b00000000;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	  // If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG2, 1, &reg_2, 1, 10);
 8001b5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001b5e:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8001b62:	230a      	movs	r3, #10
 8001b64:	9302      	str	r3, [sp, #8]
 8001b66:	2301      	movs	r3, #1
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2301      	movs	r3, #1
 8001b72:	2221      	movs	r2, #33	; 0x21
 8001b74:	21d2      	movs	r1, #210	; 0xd2
 8001b76:	6800      	ldr	r0, [r0, #0]
 8001b78:	f001 f9ce 	bl	8002f18 <HAL_I2C_Mem_Write>


	  // Configure CTRL_REG3 to generate data ready interrupt on INT2
	  // No interrupts used on INT1, if you'd like to configure INT1
	  // or INT2 otherwise, consult the datasheet:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG3, 1, &reg_2, 1, 10);
 8001b7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001b80:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8001b84:	230a      	movs	r3, #10
 8001b86:	9302      	str	r3, [sp, #8]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2301      	movs	r3, #1
 8001b94:	2222      	movs	r2, #34	; 0x22
 8001b96:	21d2      	movs	r1, #210	; 0xd2
 8001b98:	6800      	ldr	r0, [r0, #0]
 8001b9a:	f001 f9bd 	bl	8002f18 <HAL_I2C_Mem_Write>




	  //trying to read from the same registers where we wrote in
	  HAL_I2C_Mem_Read(i2c,gyro_rd,0x20,1,&reg1a,1,10);
 8001b9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001ba2:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8001ba6:	230a      	movs	r3, #10
 8001ba8:	9302      	str	r3, [sp, #8]
 8001baa:	2301      	movs	r3, #1
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	f207 131b 	addw	r3, r7, #283	; 0x11b
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	21d3      	movs	r1, #211	; 0xd3
 8001bba:	6800      	ldr	r0, [r0, #0]
 8001bbc:	f001 fac0 	bl	8003140 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(i2c,gyro_rd,0x21,1,&reg2a,1,10);
 8001bc0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001bc4:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8001bc8:	230a      	movs	r3, #10
 8001bca:	9302      	str	r3, [sp, #8]
 8001bcc:	2301      	movs	r3, #1
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	f507 738d 	add.w	r3, r7, #282	; 0x11a
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	2221      	movs	r2, #33	; 0x21
 8001bda:	21d3      	movs	r1, #211	; 0xd3
 8001bdc:	6800      	ldr	r0, [r0, #0]
 8001bde:	f001 faaf 	bl	8003140 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1,ACC_I2C_ADDRESS_READ,0x23,1,&reg4a,1,10);

	*/

	//uint8_t status = 0x00;
	uint8_t ready = 0x00;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
	uint8_t return_status = 0x00;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132

	uint8_t val_1[2];
	uint16_t* val_1p = &val_1[0];
 8001bee:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001bf2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	val_1p = 0x00;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint8_t text_buffer[255];

	uint16_t val_2 = 0x00;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
	uint16_t val_3 = 0x00;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128

	uint8_t Text[] = "Hello\r\n";
 8001c08:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001c0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c10:	4a11      	ldr	r2, [pc, #68]	; (8001c58 <initialise_ptu_i2c+0x160>)
 8001c12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c16:	e883 0003 	stmia.w	r3, {r0, r1}
//	BSP_LED_Toggle(LED_GREEN);
	//BSP_GYRO_Init();
	//BSP_ACCELERO_Init();

	// reset lidar board
	uint8_t reset_value = 0x00;
 8001c1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001c1e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8001c26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001c2a:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8001c2e:	230a      	movs	r3, #10
 8001c30:	9302      	str	r3, [sp, #8]
 8001c32:	2301      	movs	r3, #1
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	f107 030b 	add.w	r3, r7, #11
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	2200      	movs	r2, #0
 8001c40:	21c4      	movs	r1, #196	; 0xc4
 8001c42:	6800      	ldr	r0, [r0, #0]
 8001c44:	f001 f968 	bl	8002f18 <HAL_I2C_Mem_Write>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
	//return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &lidar_value, 1, 100);




}
 8001c4e:	bf00      	nop
 8001c50:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	08007b64 	.word	0x08007b64

08001c5c <__NVIC_EnableIRQ>:
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db0b      	blt.n	8001c86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	4907      	ldr	r1, [pc, #28]	; (8001c94 <__NVIC_EnableIRQ+0x38>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <__NVIC_SetPriority>:
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db0a      	blt.n	8001cc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	; (8001ce4 <__NVIC_SetPriority+0x4c>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cc0:	e00a      	b.n	8001cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4908      	ldr	r1, [pc, #32]	; (8001ce8 <__NVIC_SetPriority+0x50>)
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	761a      	strb	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	63da      	str	r2, [r3, #60]	; 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001cfe:	4b34      	ldr	r3, [pc, #208]	; (8001dd0 <SerialInitialise+0xe4>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4a33      	ldr	r2, [pc, #204]	; (8001dd0 <SerialInitialise+0xe4>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001d0a:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <SerialInitialise+0xe4>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	4a30      	ldr	r2, [pc, #192]	; (8001dd0 <SerialInitialise+0xe4>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d106      	bne.n	8001d2c <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <SerialInitialise+0xe4>)
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	4a2b      	ldr	r2, [pc, #172]	; (8001dd0 <SerialInitialise+0xe4>)
 8001d24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d28:	6153      	str	r3, [r2, #20]
		break;
 8001d2a:	e000      	b.n	8001d2e <SerialInitialise+0x42>
	default:
		break;
 8001d2c:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d36:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d40:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	69d9      	ldr	r1, [r3, #28]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d821      	bhi.n	8001db2 <SerialInitialise+0xc6>
 8001d6e:	a201      	add	r2, pc, #4	; (adr r2, 8001d74 <SerialInitialise+0x88>)
 8001d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d74:	08001d89 	.word	0x08001d89
 8001d78:	08001d91 	.word	0x08001d91
 8001d7c:	08001d99 	.word	0x08001d99
 8001d80:	08001da1 	.word	0x08001da1
 8001d84:	08001da9 	.word	0x08001da9
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2246      	movs	r2, #70	; 0x46
 8001d8c:	801a      	strh	r2, [r3, #0]
		break;
 8001d8e:	e010      	b.n	8001db2 <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2246      	movs	r2, #70	; 0x46
 8001d94:	801a      	strh	r2, [r3, #0]
		break;
 8001d96:	e00c      	b.n	8001db2 <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2246      	movs	r2, #70	; 0x46
 8001d9c:	801a      	strh	r2, [r3, #0]
		break;
 8001d9e:	e008      	b.n	8001db2 <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2246      	movs	r2, #70	; 0x46
 8001da4:	801a      	strh	r2, [r3, #0]
		break;
 8001da6:	e004      	b.n	8001db2 <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001dae:	801a      	strh	r2, [r3, #0]
		break;
 8001db0:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f042 020d 	orr.w	r2, r2, #13
 8001dc0:	601a      	str	r2, [r3, #0]
}
 8001dc2:	bf00      	nop
 8001dc4:	371c      	adds	r7, #28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <enable_interrupts_RX>:

void enable_interrupts_RX()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd8:	b672      	cpsid	i
}
 8001dda:	bf00      	nop
	__disable_irq();

	// Generate an interrupt upon receiving data
	USART1->CR1 |= USART_CR1_RXNEIE_Msk;
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <enable_interrupts_RX+0x2c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <enable_interrupts_RX+0x2c>)
 8001de2:	f043 0320 	orr.w	r3, r3, #32
 8001de6:	6013      	str	r3, [r2, #0]

	// Set priority and enable interrupts
	NVIC_SetPriority(USART1_IRQn, 2);
 8001de8:	2102      	movs	r1, #2
 8001dea:	2025      	movs	r0, #37	; 0x25
 8001dec:	f7ff ff54 	bl	8001c98 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8001df0:	2025      	movs	r0, #37	; 0x25
 8001df2:	f7ff ff33 	bl	8001c5c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001df6:	b662      	cpsie	i
}
 8001df8:	bf00      	nop

	__enable_irq();
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40013800 	.word	0x40013800

08001e04 <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8001e10:	bf00      	nop
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f8      	beq.n	8001e12 <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	79fa      	ldrb	r2, [r7, #7]
 8001e26:	b292      	uxth	r2, r2
 8001e28:	801a      	strh	r2, [r3, #0]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8001e44:	e00b      	b.n	8001e5e <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	6839      	ldr	r1, [r7, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ffd9 	bl	8001e04 <SerialOutputChar>
		counter++;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3301      	adds	r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
		pt++;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1ef      	bne.n	8001e46 <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	4798      	blx	r3
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <SerialReceiveChar>:


// returns 1 if valid char, 0 if timeout
uint8_t SerialReceiveChar(SerialPort *serial_port, uint8_t *received_char)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
	uint8_t latest_character = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	737b      	strb	r3, [r7, #13]

	uint16_t timeout = 0xffff;
 8001e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e90:	81fb      	strh	r3, [r7, #14]
  while (1) {
	  timeout--;
 8001e92:	89fb      	ldrh	r3, [r7, #14]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	81fb      	strh	r3, [r7, #14]
	  if (timeout == 0)
 8001e98:	89fb      	ldrh	r3, [r7, #14]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <SerialReceiveChar+0x24>
		  return 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e026      	b.n	8001ef0 <SerialReceiveChar+0x72>

	if (*(serial_port->StatusRegister) & USART_ISR_ORE || *(serial_port->StatusRegister) & USART_ISR_FE) {
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d106      	bne.n	8001ebe <SerialReceiveChar+0x40>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d007      	beq.n	8001ece <SerialReceiveChar+0x50>
		*(serial_port->FlagClearRegister) |= USART_ICR_ORECF | USART_ICR_FECF;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f042 020a 	orr.w	r2, r2, #10
 8001ecc:	601a      	str	r2, [r3, #0]
	}

	if (*(serial_port->StatusRegister) & USART_ISR_RXNE) { // Wait for RXNE flag to be set
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d100      	bne.n	8001ede <SerialReceiveChar+0x60>
	  timeout--;
 8001edc:	e7d9      	b.n	8001e92 <SerialReceiveChar+0x14>
		break;
 8001ede:	bf00      	nop
	}
  }
  *received_char = *(serial_port->DataInputRegister);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	701a      	strb	r2, [r3, #0]
  return 1;
 8001eee:	2301      	movs	r3, #1
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <empty_buffer>:

  return index;

}

void empty_buffer(char *array, int size){
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++){
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	e007      	b.n	8001f1c <empty_buffer+0x20>
		array[i] = 0;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	dbf3      	blt.n	8001f0c <empty_buffer+0x10>
	}
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <set_yaw>:
#include "servo.h"
#include "ptu_definitions.h"
#include "ptu_i2c.h"

void set_yaw(int value){
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
	TIM2->CCR2 = value;
 8001f3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <set_pitch>:

void set_pitch(int value){
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
	TIM2->CCR1 = value;
 8001f56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f72:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_MspInit+0x44>)
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <HAL_MspInit+0x44>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6193      	str	r3, [r2, #24]
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <HAL_MspInit+0x44>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_MspInit+0x44>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <HAL_MspInit+0x44>)
 8001f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f94:	61d3      	str	r3, [r2, #28]
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_MspInit+0x44>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fa2:	2007      	movs	r0, #7
 8001fa4:	f000 fd3c 	bl	8002a20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a17      	ldr	r2, [pc, #92]	; (8002030 <HAL_I2C_MspInit+0x7c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d127      	bne.n	8002026 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	4b17      	ldr	r3, [pc, #92]	; (8002034 <HAL_I2C_MspInit+0x80>)
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	4a16      	ldr	r2, [pc, #88]	; (8002034 <HAL_I2C_MspInit+0x80>)
 8001fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe0:	6153      	str	r3, [r2, #20]
 8001fe2:	4b14      	ldr	r3, [pc, #80]	; (8002034 <HAL_I2C_MspInit+0x80>)
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001fee:	23c0      	movs	r3, #192	; 0xc0
 8001ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ff2:	2312      	movs	r3, #18
 8001ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ffe:	2304      	movs	r3, #4
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002002:	f107 0314 	add.w	r3, r7, #20
 8002006:	4619      	mov	r1, r3
 8002008:	480b      	ldr	r0, [pc, #44]	; (8002038 <HAL_I2C_MspInit+0x84>)
 800200a:	f000 fd4b 	bl	8002aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_I2C_MspInit+0x80>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	4a08      	ldr	r2, [pc, #32]	; (8002034 <HAL_I2C_MspInit+0x80>)
 8002014:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002018:	61d3      	str	r3, [r2, #28]
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_I2C_MspInit+0x80>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002026:	bf00      	nop
 8002028:	3728      	adds	r7, #40	; 0x28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40005400 	.word	0x40005400
 8002034:	40021000 	.word	0x40021000
 8002038:	48000400 	.word	0x48000400

0800203c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <HAL_SPI_MspInit+0x7c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d128      	bne.n	80020b0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <HAL_SPI_MspInit+0x80>)
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	4a16      	ldr	r2, [pc, #88]	; (80020bc <HAL_SPI_MspInit+0x80>)
 8002064:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002068:	6193      	str	r3, [r2, #24]
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <HAL_SPI_MspInit+0x80>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <HAL_SPI_MspInit+0x80>)
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	4a10      	ldr	r2, [pc, #64]	; (80020bc <HAL_SPI_MspInit+0x80>)
 800207c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002080:	6153      	str	r3, [r2, #20]
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <HAL_SPI_MspInit+0x80>)
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800208e:	23e0      	movs	r3, #224	; 0xe0
 8002090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800209e:	2305      	movs	r3, #5
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a2:	f107 0314 	add.w	r3, r7, #20
 80020a6:	4619      	mov	r1, r3
 80020a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ac:	f000 fcfa 	bl	8002aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020b0:	bf00      	nop
 80020b2:	3728      	adds	r7, #40	; 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40013000 	.word	0x40013000
 80020bc:	40021000 	.word	0x40021000

080020c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1c      	ldr	r2, [pc, #112]	; (8002150 <HAL_TIM_Base_MspInit+0x90>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d131      	bne.n	8002146 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_TIM_Base_MspInit+0x94>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <HAL_TIM_Base_MspInit+0x94>)
 80020e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020ec:	6193      	str	r3, [r2, #24]
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_TIM_Base_MspInit+0x94>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_TIM_Base_MspInit+0x94>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	4a15      	ldr	r2, [pc, #84]	; (8002154 <HAL_TIM_Base_MspInit+0x94>)
 8002100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002104:	6153      	str	r3, [r2, #20]
 8002106:	4b13      	ldr	r3, [pc, #76]	; (8002154 <HAL_TIM_Base_MspInit+0x94>)
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	2300      	movs	r3, #0
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002124:	2306      	movs	r3, #6
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4619      	mov	r1, r3
 800212e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002132:	f000 fcb7 	bl	8002aa4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	201b      	movs	r0, #27
 800213c:	f000 fc7b 	bl	8002a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002140:	201b      	movs	r0, #27
 8002142:	f000 fc94 	bl	8002a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002146:	bf00      	nop
 8002148:	3728      	adds	r7, #40	; 0x28
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40012c00 	.word	0x40012c00
 8002154:	40021000 	.word	0x40021000

08002158 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002168:	d113      	bne.n	8002192 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <HAL_TIM_PWM_MspInit+0x44>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4a0b      	ldr	r2, [pc, #44]	; (800219c <HAL_TIM_PWM_MspInit+0x44>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	61d3      	str	r3, [r2, #28]
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_TIM_PWM_MspInit+0x44>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	201c      	movs	r0, #28
 8002188:	f000 fc55 	bl	8002a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800218c:	201c      	movs	r0, #28
 800218e:	f000 fc6e 	bl	8002a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000

080021a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c0:	d11d      	bne.n	80021fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <HAL_TIM_MspPostInit+0x68>)
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	4a10      	ldr	r2, [pc, #64]	; (8002208 <HAL_TIM_MspPostInit+0x68>)
 80021c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021cc:	6153      	str	r3, [r2, #20]
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <HAL_TIM_MspPostInit+0x68>)
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80021da:	f248 0302 	movw	r3, #32770	; 0x8002
 80021de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021ec:	2301      	movs	r3, #1
 80021ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f0:	f107 030c 	add.w	r3, r7, #12
 80021f4:	4619      	mov	r1, r3
 80021f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021fa:	f000 fc53 	bl	8002aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021fe:	bf00      	nop
 8002200:	3720      	adds	r7, #32
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000

0800220c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a18      	ldr	r2, [pc, #96]	; (800228c <HAL_PCD_MspInit+0x80>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d129      	bne.n	8002282 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_PCD_MspInit+0x84>)
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	4a17      	ldr	r2, [pc, #92]	; (8002290 <HAL_PCD_MspInit+0x84>)
 8002234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002238:	6153      	str	r3, [r2, #20]
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_PCD_MspInit+0x84>)
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8002246:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800224a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002254:	2303      	movs	r3, #3
 8002256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002258:	230e      	movs	r3, #14
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	4619      	mov	r1, r3
 8002262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002266:	f000 fc1d 	bl	8002aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_PCD_MspInit+0x84>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	4a08      	ldr	r2, [pc, #32]	; (8002290 <HAL_PCD_MspInit+0x84>)
 8002270:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002274:	61d3      	str	r3, [r2, #28]
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_PCD_MspInit+0x84>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002282:	bf00      	nop
 8002284:	3728      	adds	r7, #40	; 0x28
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40005c00 	.word	0x40005c00
 8002290:	40021000 	.word	0x40021000

08002294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <NMI_Handler+0x4>

0800229a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800229e:	e7fe      	b.n	800229e <HardFault_Handler+0x4>

080022a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <MemManage_Handler+0x4>

080022a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <BusFault_Handler+0x4>

080022ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <UsageFault_Handler+0x4>

080022b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e0:	f000 fa8a 	bl	80027f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <TIM1_CC_IRQHandler+0x10>)
 80022ee:	f003 fc35 	bl	8005b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000324 	.word	0x20000324

080022fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <TIM2_IRQHandler+0x10>)
 8002302:	f003 fc2b 	bl	8005b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000370 	.word	0x20000370

08002310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002318:	4a14      	ldr	r2, [pc, #80]	; (800236c <_sbrk+0x5c>)
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <_sbrk+0x60>)
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <_sbrk+0x64>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <_sbrk+0x64>)
 800232e:	4a12      	ldr	r2, [pc, #72]	; (8002378 <_sbrk+0x68>)
 8002330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <_sbrk+0x64>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	429a      	cmp	r2, r3
 800233e:	d207      	bcs.n	8002350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002340:	f004 fe34 	bl	8006fac <__errno>
 8002344:	4603      	mov	r3, r0
 8002346:	220c      	movs	r2, #12
 8002348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800234e:	e009      	b.n	8002364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <_sbrk+0x64>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <_sbrk+0x64>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	4a05      	ldr	r2, [pc, #20]	; (8002374 <_sbrk+0x64>)
 8002360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002362:	68fb      	ldr	r3, [r7, #12]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	2000a000 	.word	0x2000a000
 8002370:	00000400 	.word	0x00000400
 8002374:	2000099c 	.word	0x2000099c
 8002378:	200009b8 	.word	0x200009b8

0800237c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <SystemInit+0x20>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <SystemInit+0x20>)
 8002388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800238c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_EnableIRQ>:
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	db0b      	blt.n	80023ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	4907      	ldr	r1, [pc, #28]	; (80023d8 <__NVIC_EnableIRQ+0x38>)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	2001      	movs	r0, #1
 80023c2:	fa00 f202 	lsl.w	r2, r0, r2
 80023c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	e000e100 	.word	0xe000e100

080023dc <__NVIC_SetPriority>:
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	6039      	str	r1, [r7, #0]
 80023e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	db0a      	blt.n	8002406 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	490c      	ldr	r1, [pc, #48]	; (8002428 <__NVIC_SetPriority+0x4c>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	0112      	lsls	r2, r2, #4
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	440b      	add	r3, r1
 8002400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002404:	e00a      	b.n	800241c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4908      	ldr	r1, [pc, #32]	; (800242c <__NVIC_SetPriority+0x50>)
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	3b04      	subs	r3, #4
 8002414:	0112      	lsls	r2, r2, #4
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	440b      	add	r3, r1
 800241a:	761a      	strb	r2, [r3, #24]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000e100 	.word	0xe000e100
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <enable_timer_interrupt>:
		&(TIM4->DIER),
		4,
		TIM4_IRQn};

void enable_timer_interrupt(Timer *timer)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002438:	b672      	cpsid	i
}
 800243a:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	__disable_irq();

	// Enable compare interrupt
	*(timer->InterruptEnableRegister) |= TIM_DIER_CC1IE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	f042 0202 	orr.w	r2, r2, #2
 800244a:	601a      	str	r2, [r3, #0]

	// Tell the NVIC module that the timer interrupts should be handled
	NVIC_SetPriority(timer->TimerIRQn, timer->InterruptPriority);  // set priority
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002450:	b25a      	sxtb	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4619      	mov	r1, r3
 8002458:	4610      	mov	r0, r2
 800245a:	f7ff ffbf 	bl	80023dc <__NVIC_SetPriority>
	NVIC_EnableIRQ(timer->TimerIRQn);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002462:	b25b      	sxtb	r3, r3
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff9b 	bl	80023a0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800246a:	b662      	cpsie	i
}
 800246c:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <TimerInitialise>:


// TimerInitialise - Initialise the timer (timer 3)
void TimerInitialise(Timer *timer)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
	// Enable the clock for the timer
	*(timer->ClockEnableRegister) |= timer->ClockEnableMask;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6999      	ldr	r1, [r3, #24]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	430a      	orrs	r2, r1
 800248e:	601a      	str	r2, [r3, #0]

	// Set the prescaler
	*(timer->PrescalerRegister) = timer->PrescalerValue;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6a12      	ldr	r2, [r2, #32]
 8002498:	601a      	str	r2, [r3, #0]

	// Trigger the prescaler value
	*(timer->EventGenerationRegister) |= TIM_EGR_UG;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

	// Enable interrupts
	enable_timer_interrupt(timer);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff ffc0 	bl	8002430 <enable_timer_interrupt>

	// Start the timer counter
	*(timer->ControlRegister1) |= TIM_CR1_CEN;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <set_next_compare_time>:


void set_next_compare_time(Timer *timer, uint16_t time_ms)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
	uint16_t current_time = *(timer->TimerCount);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	81fb      	strh	r3, [r7, #14]
	uint16_t compare_time = (current_time + time_ms) % *(timer->AutoReloadRegister);
 80024dc:	89fa      	ldrh	r2, [r7, #14]
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	4413      	add	r3, r2
 80024e2:	461a      	mov	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	fbb2 f1f3 	udiv	r1, r2, r3
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	81bb      	strh	r3, [r7, #12]
	*(timer->CompareRegister1) = compare_time;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	89ba      	ldrh	r2, [r7, #12]
 80024fc:	601a      	str	r2, [r3, #0]
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <set_compare_if_vel_not_zero>:

void set_compare_if_vel_not_zero(Timer *timer, int8_t horizontal_vel, int8_t vertical_vel, uint16_t time_ms)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	4608      	mov	r0, r1
 8002514:	4611      	mov	r1, r2
 8002516:	461a      	mov	r2, r3
 8002518:	4603      	mov	r3, r0
 800251a:	70fb      	strb	r3, [r7, #3]
 800251c:	460b      	mov	r3, r1
 800251e:	70bb      	strb	r3, [r7, #2]
 8002520:	4613      	mov	r3, r2
 8002522:	803b      	strh	r3, [r7, #0]
	if (horizontal_vel != 0 || vertical_vel != 0)
 8002524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d103      	bne.n	8002534 <set_compare_if_vel_not_zero+0x2a>
 800252c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <set_compare_if_vel_not_zero+0x34>
	{
		set_next_compare_time(timer, time_ms);
 8002534:	883b      	ldrh	r3, [r7, #0]
 8002536:	4619      	mov	r1, r3
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ffc5 	bl	80024c8 <set_next_compare_time>
	}
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <check_condition>:

void check_condition()
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
	if (GPIOA->IDR & 0x01)  // Button is pressed
 800254e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d04d      	beq.n	80025f8 <check_condition+0xb0>
//		sprintf(test_buffer, "%d!\r\n", target_distance);
//		SerialOutputString(test_buffer, &USART1_PORT);


		// Check if LIDAR is in range
		if (abs(last_period - target_distance) <= LIDAR_THRESHOLD)
 800255c:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <check_condition+0xcc>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <check_condition+0xd0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f113 0f4b 	cmn.w	r3, #75	; 0x4b
 800256c:	db3a      	blt.n	80025e4 <check_condition+0x9c>
 800256e:	4b29      	ldr	r3, [pc, #164]	; (8002614 <check_condition+0xcc>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	4b28      	ldr	r3, [pc, #160]	; (8002618 <check_condition+0xd0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b4b      	cmp	r3, #75	; 0x4b
 800257c:	dc32      	bgt.n	80025e4 <check_condition+0x9c>
		{
			uint16_t current_time = TIM3->CNT;
 800257e:	4b27      	ldr	r3, [pc, #156]	; (800261c <check_condition+0xd4>)
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	80fb      	strh	r3, [r7, #6]
			uint16_t button_end_time = (button_start_time + button_hold_time) % (TIM3->ARR);
 8002584:	4b26      	ldr	r3, [pc, #152]	; (8002620 <check_condition+0xd8>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800258c:	461a      	mov	r2, r3
 800258e:	4b23      	ldr	r3, [pc, #140]	; (800261c <check_condition+0xd4>)
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	fbb2 f1f3 	udiv	r1, r2, r3
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	80bb      	strh	r3, [r7, #4]

			if ((button_end_time > button_start_time) && (current_time >= button_end_time))  // i.e no wraparound
 800259e:	4b20      	ldr	r3, [pc, #128]	; (8002620 <check_condition+0xd8>)
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	88ba      	ldrh	r2, [r7, #4]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d907      	bls.n	80025b8 <check_condition+0x70>
 80025a8:	88fa      	ldrh	r2, [r7, #6]
 80025aa:	88bb      	ldrh	r3, [r7, #4]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d303      	bcc.n	80025b8 <check_condition+0x70>
			{
				unlocked = true;
 80025b0:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <check_condition+0xdc>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	e014      	b.n	80025e2 <check_condition+0x9a>
			}
			else if ((button_end_time < button_start_time) && (current_time >= button_end_time) && (current_time < button_start_time))  // i.e. wraparound
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <check_condition+0xd8>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	88ba      	ldrh	r2, [r7, #4]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d20c      	bcs.n	80025dc <check_condition+0x94>
 80025c2:	88fa      	ldrh	r2, [r7, #6]
 80025c4:	88bb      	ldrh	r3, [r7, #4]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d308      	bcc.n	80025dc <check_condition+0x94>
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <check_condition+0xd8>)
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	88fa      	ldrh	r2, [r7, #6]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d203      	bcs.n	80025dc <check_condition+0x94>
			{
				unlocked = true;
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <check_condition+0xdc>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	e002      	b.n	80025e2 <check_condition+0x9a>
			}
			else
			{
				button_timer();
 80025dc:	f7fd fedc 	bl	8000398 <button_timer>
		{
 80025e0:	e014      	b.n	800260c <check_condition+0xc4>
 80025e2:	e013      	b.n	800260c <check_condition+0xc4>
			}
		}
		else
		{
			TIM3->DIER &= ~TIM_DIER_CC1IE;
 80025e4:	4b0d      	ldr	r3, [pc, #52]	; (800261c <check_condition+0xd4>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4a0c      	ldr	r2, [pc, #48]	; (800261c <check_condition+0xd4>)
 80025ea:	f023 0302 	bic.w	r3, r3, #2
 80025ee:	60d3      	str	r3, [r2, #12]
			set_led(0);
 80025f0:	2000      	movs	r0, #0
 80025f2:	f7fe fa37 	bl	8000a64 <set_led>
	else
	{
		TIM3->DIER &= ~TIM_DIER_CC1IE;
		set_led(0);
	}
}
 80025f6:	e009      	b.n	800260c <check_condition+0xc4>
		TIM3->DIER &= ~TIM_DIER_CC1IE;
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <check_condition+0xd4>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4a07      	ldr	r2, [pc, #28]	; (800261c <check_condition+0xd4>)
 80025fe:	f023 0302 	bic.w	r3, r3, #2
 8002602:	60d3      	str	r3, [r2, #12]
		set_led(0);
 8002604:	2000      	movs	r0, #0
 8002606:	f7fe fa2d 	bl	8000a64 <set_led>
}
 800260a:	e7ff      	b.n	800260c <check_condition+0xc4>
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	2000071a 	.word	0x2000071a
 8002618:	20000000 	.word	0x20000000
 800261c:	40000400 	.word	0x40000400
 8002620:	20000180 	.word	0x20000180
 8002624:	20000184 	.word	0x20000184

08002628 <TIM3_IRQHandler>:


void TIM3_IRQHandler()
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0

	if ((TIM3->SR & TIM_SR_CC1IF) != 0)
 800262c:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <TIM3_IRQHandler+0x3c>)
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d013      	beq.n	8002660 <TIM3_IRQHandler+0x38>
	{
		if (current_game_state == 2){
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <TIM3_IRQHandler+0x40>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d103      	bne.n	8002648 <TIM3_IRQHandler+0x20>
			chase_led();
 8002640:	f7fe fa22 	bl	8000a88 <chase_led>
			check_condition();
 8002644:	f7ff ff80 	bl	8002548 <check_condition>
		}
		if (current_game_state == 4){
 8002648:	4b07      	ldr	r3, [pc, #28]	; (8002668 <TIM3_IRQHandler+0x40>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b04      	cmp	r3, #4
 800264e:	d101      	bne.n	8002654 <TIM3_IRQHandler+0x2c>
			check_ptu_pos();
 8002650:	f7ff fa0a 	bl	8001a68 <check_ptu_pos>
		}
		TIM3->SR &= ~TIM_SR_CC1IF;
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <TIM3_IRQHandler+0x3c>)
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	4a02      	ldr	r2, [pc, #8]	; (8002664 <TIM3_IRQHandler+0x3c>)
 800265a:	f023 0302 	bic.w	r3, r3, #2
 800265e:	6113      	str	r3, [r2, #16]
//			TIM3->SR &= ~TIM_SR_CC1IF;
//		}
//	}


}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40000400 	.word	0x40000400
 8002668:	200006a8 	.word	0x200006a8

0800266c <TIM4_IRQHandler>:

void TIM4_IRQHandler()
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af02      	add	r7, sp, #8
	// If the interrupt was due to the channel 1 compare flag being raised
	if ((TIM4->SR & TIM_SR_CC1IF) != 0)
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <TIM4_IRQHandler+0x3c>)
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d011      	beq.n	80026a2 <TIM4_IRQHandler+0x36>
	{
		if (current_game_state == 4){
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <TIM4_IRQHandler+0x40>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b04      	cmp	r3, #4
 8002684:	d107      	bne.n	8002696 <TIM4_IRQHandler+0x2a>
			flash_led(0, 0, 0, 0, &TIMER4);  // Only the last argument is important, the rest are stored as static variables
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <TIM4_IRQHandler+0x44>)
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	2300      	movs	r3, #0
 800268c:	2200      	movs	r2, #0
 800268e:	2100      	movs	r1, #0
 8002690:	2000      	movs	r0, #0
 8002692:	f7fe fa4f 	bl	8000b34 <flash_led>

			// Reset channel 1 compare flag

		}
		TIM4->SR &= ~TIM_SR_CC1IF;
 8002696:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <TIM4_IRQHandler+0x3c>)
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	4a03      	ldr	r2, [pc, #12]	; (80026a8 <TIM4_IRQHandler+0x3c>)
 800269c:	f023 0302 	bic.w	r3, r3, #2
 80026a0:	6113      	str	r3, [r2, #16]
	}
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40000800 	.word	0x40000800
 80026ac:	200006a8 	.word	0x200006a8
 80026b0:	200000c0 	.word	0x200000c0

080026b4 <enter_waiting>:
#include "servo.h"
#include "data_handler.h"
#include "stm32f303xc.h"
#include "serial.h"

void enter_waiting(){
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
	set_led(0b11001100);
 80026b8:	20cc      	movs	r0, #204	; 0xcc
 80026ba:	f7fe f9d3 	bl	8000a64 <set_led>
	set_pitch(1000);
 80026be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026c2:	f7ff fc44 	bl	8001f4e <set_pitch>
	set_yaw(1000);
 80026c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026ca:	f7ff fc32 	bl	8001f32 <set_yaw>

	extern int current_game_state;
	while(1){
		if (current_game_state == 1){
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <enter_waiting+0x60>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d102      	bne.n	80026dc <enter_waiting+0x28>
			//SerialOutputString("!", &USART1_PORT);
			enter_challenge_1();
 80026d6:	f7fd fe7b 	bl	80003d0 <enter_challenge_1>
 80026da:	e7f8      	b.n	80026ce <enter_waiting+0x1a>
		}
		else if (current_game_state == 2){
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <enter_waiting+0x60>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d102      	bne.n	80026ea <enter_waiting+0x36>
			//SerialOutputString("!", &USART1_PORT);
			enter_challenge_2();
 80026e4:	f7fd feb6 	bl	8000454 <enter_challenge_2>
 80026e8:	e7f1      	b.n	80026ce <enter_waiting+0x1a>
		}
		else if (current_game_state == 3){
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <enter_waiting+0x60>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d102      	bne.n	80026f8 <enter_waiting+0x44>
			//SerialOutputString("!", &USART1_PORT);
			enter_challenge_3();
 80026f2:	f7fd ffaf 	bl	8000654 <enter_challenge_3>
 80026f6:	e7ea      	b.n	80026ce <enter_waiting+0x1a>
		}
		else if (current_game_state == 4){
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <enter_waiting+0x60>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d102      	bne.n	8002706 <enter_waiting+0x52>
			//SerialOutputString("!", &USART1_PORT);
			enter_challenge_4();
 8002700:	f7fd ffea 	bl	80006d8 <enter_challenge_4>
 8002704:	e7e3      	b.n	80026ce <enter_waiting+0x1a>
		}
		else if (current_game_state == 5){
 8002706:	4b03      	ldr	r3, [pc, #12]	; (8002714 <enter_waiting+0x60>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b05      	cmp	r3, #5
 800270c:	d1df      	bne.n	80026ce <enter_waiting+0x1a>
			//SerialOutputString("!", &USART1_PORT);
			enter_login();
 800270e:	f7fe fae5 	bl	8000cdc <enter_login>
		if (current_game_state == 1){
 8002712:	e7dc      	b.n	80026ce <enter_waiting+0x1a>
 8002714:	200006a8 	.word	0x200006a8

08002718 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002750 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800271c:	f7ff fe2e 	bl	800237c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002720:	480c      	ldr	r0, [pc, #48]	; (8002754 <LoopForever+0x6>)
  ldr r1, =_edata
 8002722:	490d      	ldr	r1, [pc, #52]	; (8002758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002724:	4a0d      	ldr	r2, [pc, #52]	; (800275c <LoopForever+0xe>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002728:	e002      	b.n	8002730 <LoopCopyDataInit>

0800272a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800272c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272e:	3304      	adds	r3, #4

08002730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002734:	d3f9      	bcc.n	800272a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002736:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002738:	4c0a      	ldr	r4, [pc, #40]	; (8002764 <LoopForever+0x16>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800273c:	e001      	b.n	8002742 <LoopFillZerobss>

0800273e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002740:	3204      	adds	r2, #4

08002742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002744:	d3fb      	bcc.n	800273e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002746:	f004 fc37 	bl	8006fb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800274a:	f7fe fd57 	bl	80011fc <main>

0800274e <LoopForever>:

LoopForever:
    b LoopForever
 800274e:	e7fe      	b.n	800274e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002750:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002758:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 800275c:	08007ce4 	.word	0x08007ce4
  ldr r2, =_sbss
 8002760:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8002764:	200009b4 	.word	0x200009b4

08002768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <ADC1_2_IRQHandler>
	...

0800276c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_Init+0x28>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a07      	ldr	r2, [pc, #28]	; (8002794 <HAL_Init+0x28>)
 8002776:	f043 0310 	orr.w	r3, r3, #16
 800277a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277c:	2003      	movs	r0, #3
 800277e:	f000 f94f 	bl	8002a20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002782:	2000      	movs	r0, #0
 8002784:	f000 f808 	bl	8002798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002788:	f7ff fbf0 	bl	8001f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40022000 	.word	0x40022000

08002798 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_InitTick+0x54>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_InitTick+0x58>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 f967 	bl	8002a8a <HAL_SYSTICK_Config>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00e      	b.n	80027e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b0f      	cmp	r3, #15
 80027ca:	d80a      	bhi.n	80027e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027cc:	2200      	movs	r2, #0
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027d4:	f000 f92f 	bl	8002a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d8:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <HAL_InitTick+0x5c>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000084 	.word	0x20000084
 80027f0:	200000fc 	.word	0x200000fc
 80027f4:	200000f8 	.word	0x200000f8

080027f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_IncTick+0x20>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_IncTick+0x24>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4413      	add	r3, r2
 8002808:	4a04      	ldr	r2, [pc, #16]	; (800281c <HAL_IncTick+0x24>)
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	200000fc 	.word	0x200000fc
 800281c:	200009a0 	.word	0x200009a0

08002820 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return uwTick;  
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <HAL_GetTick+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	200009a0 	.word	0x200009a0

08002838 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002840:	f7ff ffee 	bl	8002820 <HAL_GetTick>
 8002844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002850:	d005      	beq.n	800285e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_Delay+0x44>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800285e:	bf00      	nop
 8002860:	f7ff ffde 	bl	8002820 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	429a      	cmp	r2, r3
 800286e:	d8f7      	bhi.n	8002860 <HAL_Delay+0x28>
  {
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200000fc 	.word	0x200000fc

08002880 <__NVIC_SetPriorityGrouping>:
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800289c:	4013      	ands	r3, r2
 800289e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b2:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <__NVIC_SetPriorityGrouping+0x44>)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	60d3      	str	r3, [r2, #12]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <__NVIC_GetPriorityGrouping>:
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028cc:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	0a1b      	lsrs	r3, r3, #8
 80028d2:	f003 0307 	and.w	r3, r3, #7
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <__NVIC_EnableIRQ>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	db0b      	blt.n	800290e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	f003 021f 	and.w	r2, r3, #31
 80028fc:	4907      	ldr	r1, [pc, #28]	; (800291c <__NVIC_EnableIRQ+0x38>)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	2001      	movs	r0, #1
 8002906:	fa00 f202 	lsl.w	r2, r0, r2
 800290a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000e100 	.word	0xe000e100

08002920 <__NVIC_SetPriority>:
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	6039      	str	r1, [r7, #0]
 800292a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800292c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002930:	2b00      	cmp	r3, #0
 8002932:	db0a      	blt.n	800294a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	b2da      	uxtb	r2, r3
 8002938:	490c      	ldr	r1, [pc, #48]	; (800296c <__NVIC_SetPriority+0x4c>)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	0112      	lsls	r2, r2, #4
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	440b      	add	r3, r1
 8002944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002948:	e00a      	b.n	8002960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	b2da      	uxtb	r2, r3
 800294e:	4908      	ldr	r1, [pc, #32]	; (8002970 <__NVIC_SetPriority+0x50>)
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	3b04      	subs	r3, #4
 8002958:	0112      	lsls	r2, r2, #4
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	440b      	add	r3, r1
 800295e:	761a      	strb	r2, [r3, #24]
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000e100 	.word	0xe000e100
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002974:	b480      	push	{r7}
 8002976:	b089      	sub	sp, #36	; 0x24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f1c3 0307 	rsb	r3, r3, #7
 800298e:	2b04      	cmp	r3, #4
 8002990:	bf28      	it	cs
 8002992:	2304      	movcs	r3, #4
 8002994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3304      	adds	r3, #4
 800299a:	2b06      	cmp	r3, #6
 800299c:	d902      	bls.n	80029a4 <NVIC_EncodePriority+0x30>
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3b03      	subs	r3, #3
 80029a2:	e000      	b.n	80029a6 <NVIC_EncodePriority+0x32>
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43da      	mvns	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	401a      	ands	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	43d9      	mvns	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029cc:	4313      	orrs	r3, r2
         );
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3724      	adds	r7, #36	; 0x24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029ec:	d301      	bcc.n	80029f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ee:	2301      	movs	r3, #1
 80029f0:	e00f      	b.n	8002a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029f2:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <SysTick_Config+0x40>)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029fa:	210f      	movs	r1, #15
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a00:	f7ff ff8e 	bl	8002920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <SysTick_Config+0x40>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a0a:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <SysTick_Config+0x40>)
 8002a0c:	2207      	movs	r2, #7
 8002a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	e000e010 	.word	0xe000e010

08002a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff ff29 	bl	8002880 <__NVIC_SetPriorityGrouping>
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b086      	sub	sp, #24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a48:	f7ff ff3e 	bl	80028c8 <__NVIC_GetPriorityGrouping>
 8002a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	6978      	ldr	r0, [r7, #20]
 8002a54:	f7ff ff8e 	bl	8002974 <NVIC_EncodePriority>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff ff5d 	bl	8002920 <__NVIC_SetPriority>
}
 8002a66:	bf00      	nop
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ff31 	bl	80028e4 <__NVIC_EnableIRQ>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff ffa2 	bl	80029dc <SysTick_Config>
 8002a98:	4603      	mov	r3, r0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab2:	e154      	b.n	8002d5e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	2101      	movs	r1, #1
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8146 	beq.w	8002d58 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d005      	beq.n	8002ae4 <HAL_GPIO_Init+0x40>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d130      	bne.n	8002b46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2203      	movs	r2, #3
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	f003 0201 	and.w	r2, r3, #1
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d017      	beq.n	8002b82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d123      	bne.n	8002bd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	08da      	lsrs	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3208      	adds	r2, #8
 8002b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	220f      	movs	r2, #15
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	08da      	lsrs	r2, r3, #3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3208      	adds	r2, #8
 8002bd0:	6939      	ldr	r1, [r7, #16]
 8002bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	2203      	movs	r2, #3
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4013      	ands	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 0203 	and.w	r2, r3, #3
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80a0 	beq.w	8002d58 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c18:	4b58      	ldr	r3, [pc, #352]	; (8002d7c <HAL_GPIO_Init+0x2d8>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	4a57      	ldr	r2, [pc, #348]	; (8002d7c <HAL_GPIO_Init+0x2d8>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	6193      	str	r3, [r2, #24]
 8002c24:	4b55      	ldr	r3, [pc, #340]	; (8002d7c <HAL_GPIO_Init+0x2d8>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c30:	4a53      	ldr	r2, [pc, #332]	; (8002d80 <HAL_GPIO_Init+0x2dc>)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	089b      	lsrs	r3, r3, #2
 8002c36:	3302      	adds	r3, #2
 8002c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	220f      	movs	r2, #15
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c5a:	d019      	beq.n	8002c90 <HAL_GPIO_Init+0x1ec>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a49      	ldr	r2, [pc, #292]	; (8002d84 <HAL_GPIO_Init+0x2e0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d013      	beq.n	8002c8c <HAL_GPIO_Init+0x1e8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a48      	ldr	r2, [pc, #288]	; (8002d88 <HAL_GPIO_Init+0x2e4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00d      	beq.n	8002c88 <HAL_GPIO_Init+0x1e4>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a47      	ldr	r2, [pc, #284]	; (8002d8c <HAL_GPIO_Init+0x2e8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d007      	beq.n	8002c84 <HAL_GPIO_Init+0x1e0>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a46      	ldr	r2, [pc, #280]	; (8002d90 <HAL_GPIO_Init+0x2ec>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d101      	bne.n	8002c80 <HAL_GPIO_Init+0x1dc>
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	e008      	b.n	8002c92 <HAL_GPIO_Init+0x1ee>
 8002c80:	2305      	movs	r3, #5
 8002c82:	e006      	b.n	8002c92 <HAL_GPIO_Init+0x1ee>
 8002c84:	2303      	movs	r3, #3
 8002c86:	e004      	b.n	8002c92 <HAL_GPIO_Init+0x1ee>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e002      	b.n	8002c92 <HAL_GPIO_Init+0x1ee>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <HAL_GPIO_Init+0x1ee>
 8002c90:	2300      	movs	r3, #0
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	f002 0203 	and.w	r2, r2, #3
 8002c98:	0092      	lsls	r2, r2, #2
 8002c9a:	4093      	lsls	r3, r2
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ca2:	4937      	ldr	r1, [pc, #220]	; (8002d80 <HAL_GPIO_Init+0x2dc>)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	3302      	adds	r3, #2
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cb0:	4b38      	ldr	r3, [pc, #224]	; (8002d94 <HAL_GPIO_Init+0x2f0>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cd4:	4a2f      	ldr	r2, [pc, #188]	; (8002d94 <HAL_GPIO_Init+0x2f0>)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cda:	4b2e      	ldr	r3, [pc, #184]	; (8002d94 <HAL_GPIO_Init+0x2f0>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cfe:	4a25      	ldr	r2, [pc, #148]	; (8002d94 <HAL_GPIO_Init+0x2f0>)
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d04:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <HAL_GPIO_Init+0x2f0>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d28:	4a1a      	ldr	r2, [pc, #104]	; (8002d94 <HAL_GPIO_Init+0x2f0>)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d2e:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <HAL_GPIO_Init+0x2f0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d52:	4a10      	ldr	r2, [pc, #64]	; (8002d94 <HAL_GPIO_Init+0x2f0>)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	fa22 f303 	lsr.w	r3, r2, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f47f aea3 	bne.w	8002ab4 <HAL_GPIO_Init+0x10>
  }
}
 8002d6e:	bf00      	nop
 8002d70:	bf00      	nop
 8002d72:	371c      	adds	r7, #28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40010000 	.word	0x40010000
 8002d84:	48000400 	.word	0x48000400
 8002d88:	48000800 	.word	0x48000800
 8002d8c:	48000c00 	.word	0x48000c00
 8002d90:	48001000 	.word	0x48001000
 8002d94:	40010400 	.word	0x40010400

08002d98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	887b      	ldrh	r3, [r7, #2]
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
 8002db4:	e001      	b.n	8002dba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002db6:	2300      	movs	r3, #0
 8002db8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	807b      	strh	r3, [r7, #2]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd8:	787b      	ldrb	r3, [r7, #1]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002de4:	e002      	b.n	8002dec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e081      	b.n	8002f0e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff f8c8 	bl	8001fb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2224      	movs	r2, #36	; 0x24
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0201 	bic.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d107      	bne.n	8002e72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	e006      	b.n	8002e80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d104      	bne.n	8002e92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69d9      	ldr	r1, [r3, #28]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1a      	ldr	r2, [r3, #32]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	4608      	mov	r0, r1
 8002f22:	4611      	mov	r1, r2
 8002f24:	461a      	mov	r2, r3
 8002f26:	4603      	mov	r3, r0
 8002f28:	817b      	strh	r3, [r7, #10]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	813b      	strh	r3, [r7, #8]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	f040 80f9 	bne.w	8003132 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_I2C_Mem_Write+0x34>
 8002f46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0ed      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_I2C_Mem_Write+0x4e>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e0e6      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f6e:	f7ff fc57 	bl	8002820 <HAL_GetTick>
 8002f72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	2319      	movs	r3, #25
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 fac3 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0d1      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2221      	movs	r2, #33	; 0x21
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2240      	movs	r2, #64	; 0x40
 8002f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a3a      	ldr	r2, [r7, #32]
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fb8:	88f8      	ldrh	r0, [r7, #6]
 8002fba:	893a      	ldrh	r2, [r7, #8]
 8002fbc:	8979      	ldrh	r1, [r7, #10]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f9d3 	bl	8003374 <I2C_RequestMemoryWrite>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0a9      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2bff      	cmp	r3, #255	; 0xff
 8002fe8:	d90e      	bls.n	8003008 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	22ff      	movs	r2, #255	; 0xff
 8002fee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	8979      	ldrh	r1, [r7, #10]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fc3d 	bl	8003880 <I2C_TransferConfig>
 8003006:	e00f      	b.n	8003028 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003016:	b2da      	uxtb	r2, r3
 8003018:	8979      	ldrh	r1, [r7, #10]
 800301a:	2300      	movs	r3, #0
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fc2c 	bl	8003880 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fabc 	bl	80035aa <I2C_WaitOnTXISFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e07b      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d034      	beq.n	80030e0 <HAL_I2C_Mem_Write+0x1c8>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307a:	2b00      	cmp	r3, #0
 800307c:	d130      	bne.n	80030e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	2200      	movs	r2, #0
 8003086:	2180      	movs	r1, #128	; 0x80
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fa3f 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e04d      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	2bff      	cmp	r3, #255	; 0xff
 80030a0:	d90e      	bls.n	80030c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	22ff      	movs	r2, #255	; 0xff
 80030a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	8979      	ldrh	r1, [r7, #10]
 80030b0:	2300      	movs	r3, #0
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fbe1 	bl	8003880 <I2C_TransferConfig>
 80030be:	e00f      	b.n	80030e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	8979      	ldrh	r1, [r7, #10]
 80030d2:	2300      	movs	r3, #0
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 fbd0 	bl	8003880 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d19e      	bne.n	8003028 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 faa2 	bl	8003638 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e01a      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2220      	movs	r2, #32
 8003104:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <HAL_I2C_Mem_Write+0x224>)
 8003112:	400b      	ands	r3, r1
 8003114:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	e000      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003132:	2302      	movs	r3, #2
  }
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	fe00e800 	.word	0xfe00e800

08003140 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	4608      	mov	r0, r1
 800314a:	4611      	mov	r1, r2
 800314c:	461a      	mov	r2, r3
 800314e:	4603      	mov	r3, r0
 8003150:	817b      	strh	r3, [r7, #10]
 8003152:	460b      	mov	r3, r1
 8003154:	813b      	strh	r3, [r7, #8]
 8003156:	4613      	mov	r3, r2
 8003158:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b20      	cmp	r3, #32
 8003164:	f040 80fd 	bne.w	8003362 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_I2C_Mem_Read+0x34>
 800316e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800317a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0f1      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_I2C_Mem_Read+0x4e>
 800318a:	2302      	movs	r3, #2
 800318c:	e0ea      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003196:	f7ff fb43 	bl	8002820 <HAL_GetTick>
 800319a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	2319      	movs	r3, #25
 80031a2:	2201      	movs	r2, #1
 80031a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f9af 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0d5      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2222      	movs	r2, #34	; 0x22
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2240      	movs	r2, #64	; 0x40
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a3a      	ldr	r2, [r7, #32]
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031e0:	88f8      	ldrh	r0, [r7, #6]
 80031e2:	893a      	ldrh	r2, [r7, #8]
 80031e4:	8979      	ldrh	r1, [r7, #10]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	4603      	mov	r3, r0
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f913 	bl	800341c <I2C_RequestMemoryRead>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0ad      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	2bff      	cmp	r3, #255	; 0xff
 8003210:	d90e      	bls.n	8003230 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	22ff      	movs	r2, #255	; 0xff
 8003216:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	b2da      	uxtb	r2, r3
 800321e:	8979      	ldrh	r1, [r7, #10]
 8003220:	4b52      	ldr	r3, [pc, #328]	; (800336c <HAL_I2C_Mem_Read+0x22c>)
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fb29 	bl	8003880 <I2C_TransferConfig>
 800322e:	e00f      	b.n	8003250 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	b2da      	uxtb	r2, r3
 8003240:	8979      	ldrh	r1, [r7, #10]
 8003242:	4b4a      	ldr	r3, [pc, #296]	; (800336c <HAL_I2C_Mem_Read+0x22c>)
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fb18 	bl	8003880 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	2200      	movs	r2, #0
 8003258:	2104      	movs	r1, #4
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f956 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e07c      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d034      	beq.n	8003310 <HAL_I2C_Mem_Read+0x1d0>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d130      	bne.n	8003310 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	2200      	movs	r2, #0
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 f927 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e04d      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2bff      	cmp	r3, #255	; 0xff
 80032d0:	d90e      	bls.n	80032f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	22ff      	movs	r2, #255	; 0xff
 80032d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	8979      	ldrh	r1, [r7, #10]
 80032e0:	2300      	movs	r3, #0
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 fac9 	bl	8003880 <I2C_TransferConfig>
 80032ee:	e00f      	b.n	8003310 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	8979      	ldrh	r1, [r7, #10]
 8003302:	2300      	movs	r3, #0
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fab8 	bl	8003880 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d19a      	bne.n	8003250 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f98a 	bl	8003638 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e01a      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2220      	movs	r2, #32
 8003334:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_I2C_Mem_Read+0x230>)
 8003342:	400b      	ands	r3, r1
 8003344:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	e000      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003362:	2302      	movs	r3, #2
  }
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	80002400 	.word	0x80002400
 8003370:	fe00e800 	.word	0xfe00e800

08003374 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	4608      	mov	r0, r1
 800337e:	4611      	mov	r1, r2
 8003380:	461a      	mov	r2, r3
 8003382:	4603      	mov	r3, r0
 8003384:	817b      	strh	r3, [r7, #10]
 8003386:	460b      	mov	r3, r1
 8003388:	813b      	strh	r3, [r7, #8]
 800338a:	4613      	mov	r3, r2
 800338c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	8979      	ldrh	r1, [r7, #10]
 8003394:	4b20      	ldr	r3, [pc, #128]	; (8003418 <I2C_RequestMemoryWrite+0xa4>)
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 fa6f 	bl	8003880 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	69b9      	ldr	r1, [r7, #24]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f8ff 	bl	80035aa <I2C_WaitOnTXISFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e02c      	b.n	8003410 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d105      	bne.n	80033c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033bc:	893b      	ldrh	r3, [r7, #8]
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	629a      	str	r2, [r3, #40]	; 0x28
 80033c6:	e015      	b.n	80033f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033c8:	893b      	ldrh	r3, [r7, #8]
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	69b9      	ldr	r1, [r7, #24]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f8e5 	bl	80035aa <I2C_WaitOnTXISFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e012      	b.n	8003410 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033ea:	893b      	ldrh	r3, [r7, #8]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2200      	movs	r2, #0
 80033fc:	2180      	movs	r1, #128	; 0x80
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f884 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	80002000 	.word	0x80002000

0800341c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	4608      	mov	r0, r1
 8003426:	4611      	mov	r1, r2
 8003428:	461a      	mov	r2, r3
 800342a:	4603      	mov	r3, r0
 800342c:	817b      	strh	r3, [r7, #10]
 800342e:	460b      	mov	r3, r1
 8003430:	813b      	strh	r3, [r7, #8]
 8003432:	4613      	mov	r3, r2
 8003434:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	b2da      	uxtb	r2, r3
 800343a:	8979      	ldrh	r1, [r7, #10]
 800343c:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <I2C_RequestMemoryRead+0xa4>)
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	2300      	movs	r3, #0
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fa1c 	bl	8003880 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003448:	69fa      	ldr	r2, [r7, #28]
 800344a:	69b9      	ldr	r1, [r7, #24]
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f8ac 	bl	80035aa <I2C_WaitOnTXISFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e02c      	b.n	80034b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003462:	893b      	ldrh	r3, [r7, #8]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28
 800346c:	e015      	b.n	800349a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800346e:	893b      	ldrh	r3, [r7, #8]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	b29b      	uxth	r3, r3
 8003474:	b2da      	uxtb	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	69b9      	ldr	r1, [r7, #24]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f892 	bl	80035aa <I2C_WaitOnTXISFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e012      	b.n	80034b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003490:	893b      	ldrh	r3, [r7, #8]
 8003492:	b2da      	uxtb	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	2200      	movs	r2, #0
 80034a2:	2140      	movs	r1, #64	; 0x40
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f831 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	80002000 	.word	0x80002000

080034c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d103      	bne.n	80034e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2200      	movs	r2, #0
 80034e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d007      	beq.n	8003500 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	619a      	str	r2, [r3, #24]
  }
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800351c:	e031      	b.n	8003582 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003524:	d02d      	beq.n	8003582 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7ff f97b 	bl	8002820 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d122      	bne.n	8003582 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	4013      	ands	r3, r2
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	429a      	cmp	r2, r3
 800354a:	bf0c      	ite	eq
 800354c:	2301      	moveq	r3, #1
 800354e:	2300      	movne	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	461a      	mov	r2, r3
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	429a      	cmp	r2, r3
 8003558:	d113      	bne.n	8003582 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	f043 0220 	orr.w	r2, r3, #32
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e00f      	b.n	80035a2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699a      	ldr	r2, [r3, #24]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4013      	ands	r3, r2
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	429a      	cmp	r2, r3
 8003590:	bf0c      	ite	eq
 8003592:	2301      	moveq	r3, #1
 8003594:	2300      	movne	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	429a      	cmp	r2, r3
 800359e:	d0be      	beq.n	800351e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035b6:	e033      	b.n	8003620 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f87f 	bl	80036c0 <I2C_IsErrorOccurred>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e031      	b.n	8003630 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035d2:	d025      	beq.n	8003620 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d4:	f7ff f924 	bl	8002820 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d302      	bcc.n	80035ea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d11a      	bne.n	8003620 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d013      	beq.n	8003620 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e007      	b.n	8003630 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b02      	cmp	r3, #2
 800362c:	d1c4      	bne.n	80035b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003644:	e02f      	b.n	80036a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68b9      	ldr	r1, [r7, #8]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f838 	bl	80036c0 <I2C_IsErrorOccurred>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e02d      	b.n	80036b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365a:	f7ff f8e1 	bl	8002820 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	d302      	bcc.n	8003670 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d11a      	bne.n	80036a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b20      	cmp	r3, #32
 800367c:	d013      	beq.n	80036a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	f043 0220 	orr.w	r2, r3, #32
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e007      	b.n	80036b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d1c8      	bne.n	8003646 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d068      	beq.n	80037be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2210      	movs	r2, #16
 80036f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036f4:	e049      	b.n	800378a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036fc:	d045      	beq.n	800378a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036fe:	f7ff f88f 	bl	8002820 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	429a      	cmp	r2, r3
 800370c:	d302      	bcc.n	8003714 <I2C_IsErrorOccurred+0x54>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d13a      	bne.n	800378a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003726:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003736:	d121      	bne.n	800377c <I2C_IsErrorOccurred+0xbc>
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800373e:	d01d      	beq.n	800377c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	2b20      	cmp	r3, #32
 8003744:	d01a      	beq.n	800377c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003754:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003756:	f7ff f863 	bl	8002820 <HAL_GetTick>
 800375a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800375c:	e00e      	b.n	800377c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800375e:	f7ff f85f 	bl	8002820 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b19      	cmp	r3, #25
 800376a:	d907      	bls.n	800377c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	f043 0320 	orr.w	r3, r3, #32
 8003772:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800377a:	e006      	b.n	800378a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b20      	cmp	r3, #32
 8003788:	d1e9      	bne.n	800375e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b20      	cmp	r3, #32
 8003796:	d003      	beq.n	80037a0 <I2C_IsErrorOccurred+0xe0>
 8003798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0aa      	beq.n	80036f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d103      	bne.n	80037b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2220      	movs	r2, #32
 80037ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	f043 0304 	orr.w	r3, r3, #4
 80037b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00b      	beq.n	80037e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00b      	beq.n	800380a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	f043 0308 	orr.w	r3, r3, #8
 80037f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003802:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00b      	beq.n	800382c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	f043 0302 	orr.w	r3, r3, #2
 800381a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003824:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800382c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01c      	beq.n	800386e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f7ff fe45 	bl	80034c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6859      	ldr	r1, [r3, #4]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	4b0d      	ldr	r3, [pc, #52]	; (800387c <I2C_IsErrorOccurred+0x1bc>)
 8003846:	400b      	ands	r3, r1
 8003848:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	431a      	orrs	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800386e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003872:	4618      	mov	r0, r3
 8003874:	3728      	adds	r7, #40	; 0x28
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	fe00e800 	.word	0xfe00e800

08003880 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	460b      	mov	r3, r1
 800388c:	817b      	strh	r3, [r7, #10]
 800388e:	4613      	mov	r3, r2
 8003890:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003892:	897b      	ldrh	r3, [r7, #10]
 8003894:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003898:	7a7b      	ldrb	r3, [r7, #9]
 800389a:	041b      	lsls	r3, r3, #16
 800389c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	0d5b      	lsrs	r3, r3, #21
 80038ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038be:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <I2C_TransferConfig+0x60>)
 80038c0:	430b      	orrs	r3, r1
 80038c2:	43db      	mvns	r3, r3
 80038c4:	ea02 0103 	and.w	r1, r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	03ff63ff 	.word	0x03ff63ff

080038e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b20      	cmp	r3, #32
 80038f8:	d138      	bne.n	800396c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003904:	2302      	movs	r3, #2
 8003906:	e032      	b.n	800396e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2224      	movs	r2, #36	; 0x24
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0201 	bic.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003936:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6819      	ldr	r1, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	e000      	b.n	800396e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800396c:	2302      	movs	r3, #2
  }
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800397a:	b480      	push	{r7}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b20      	cmp	r3, #32
 800398e:	d139      	bne.n	8003a04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800399a:	2302      	movs	r3, #2
 800399c:	e033      	b.n	8003a06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2224      	movs	r2, #36	; 0x24
 80039aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e000      	b.n	8003a06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a04:	2302      	movs	r3, #2
  }
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a14:	b08b      	sub	sp, #44	; 0x2c
 8003a16:	af06      	add	r7, sp, #24
 8003a18:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0c4      	b.n	8003bae <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d106      	bne.n	8003a3e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7fe fbe7 	bl	800220c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2203      	movs	r2, #3
 8003a42:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f003 fa6e 	bl	8006f2c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a50:	2300      	movs	r3, #0
 8003a52:	73fb      	strb	r3, [r7, #15]
 8003a54:	e040      	b.n	8003ad8 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	440b      	add	r3, r1
 8003a66:	3301      	adds	r3, #1
 8003a68:	2201      	movs	r2, #1
 8003a6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	440b      	add	r3, r1
 8003a7c:	7bfa      	ldrb	r2, [r7, #15]
 8003a7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	440b      	add	r3, r1
 8003a90:	3303      	adds	r3, #3
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a96:	7bfa      	ldrb	r2, [r7, #15]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3338      	adds	r3, #56	; 0x38
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003aaa:	7bfa      	ldrb	r2, [r7, #15]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	440b      	add	r3, r1
 8003ab8:	333c      	adds	r3, #60	; 0x3c
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003abe:	7bfa      	ldrb	r2, [r7, #15]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	440b      	add	r3, r1
 8003acc:	3340      	adds	r3, #64	; 0x40
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
 8003ad8:	7bfa      	ldrb	r2, [r7, #15]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d3b9      	bcc.n	8003a56 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	73fb      	strb	r3, [r7, #15]
 8003ae6:	e044      	b.n	8003b72 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ae8:	7bfa      	ldrb	r2, [r7, #15]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	440b      	add	r3, r1
 8003af6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003afa:	2200      	movs	r2, #0
 8003afc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003afe:	7bfa      	ldrb	r2, [r7, #15]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	440b      	add	r3, r1
 8003b0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b10:	7bfa      	ldrb	r2, [r7, #15]
 8003b12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b14:	7bfa      	ldrb	r2, [r7, #15]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	440b      	add	r3, r1
 8003b22:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b2a:	7bfa      	ldrb	r2, [r7, #15]
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	440b      	add	r3, r1
 8003b38:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b40:	7bfa      	ldrb	r2, [r7, #15]
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	440b      	add	r3, r1
 8003b4e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	440b      	add	r3, r1
 8003b64:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	7bfa      	ldrb	r2, [r7, #15]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d3b5      	bcc.n	8003ae8 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	603b      	str	r3, [r7, #0]
 8003b82:	687e      	ldr	r6, [r7, #4]
 8003b84:	466d      	mov	r5, sp
 8003b86:	f106 0410 	add.w	r4, r6, #16
 8003b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	602b      	str	r3, [r5, #0]
 8003b92:	1d33      	adds	r3, r6, #4
 8003b94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b96:	6838      	ldr	r0, [r7, #0]
 8003b98:	f003 f9e3 	bl	8006f62 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bc8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d102      	bne.n	8003bde <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f001 b823 	b.w	8004c24 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 817d 	beq.w	8003eee <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bf4:	4bbc      	ldr	r3, [pc, #752]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 030c 	and.w	r3, r3, #12
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d00c      	beq.n	8003c1a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c00:	4bb9      	ldr	r3, [pc, #740]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d15c      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x10e>
 8003c0c:	4bb6      	ldr	r3, [pc, #728]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c18:	d155      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x10e>
 8003c1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c1e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c2e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c32:	fab3 f383 	clz	r3, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d102      	bne.n	8003c4c <HAL_RCC_OscConfig+0x94>
 8003c46:	4ba8      	ldr	r3, [pc, #672]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	e015      	b.n	8003c78 <HAL_RCC_OscConfig+0xc0>
 8003c4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c50:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003c58:	fa93 f3a3 	rbit	r3, r3
 8003c5c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c64:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003c68:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003c6c:	fa93 f3a3 	rbit	r3, r3
 8003c70:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003c74:	4b9c      	ldr	r3, [pc, #624]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c7c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003c80:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003c84:	fa92 f2a2 	rbit	r2, r2
 8003c88:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003c8c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003c90:	fab2 f282 	clz	r2, r2
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	f042 0220 	orr.w	r2, r2, #32
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	f002 021f 	and.w	r2, r2, #31
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 811f 	beq.w	8003eec <HAL_RCC_OscConfig+0x334>
 8003cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f040 8116 	bne.w	8003eec <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	f000 bfaf 	b.w	8004c24 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd6:	d106      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x12e>
 8003cd8:	4b83      	ldr	r3, [pc, #524]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a82      	ldr	r2, [pc, #520]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	e036      	b.n	8003d54 <HAL_RCC_OscConfig+0x19c>
 8003ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10c      	bne.n	8003d10 <HAL_RCC_OscConfig+0x158>
 8003cf6:	4b7c      	ldr	r3, [pc, #496]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a7b      	ldr	r2, [pc, #492]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	4b79      	ldr	r3, [pc, #484]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a78      	ldr	r2, [pc, #480]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	e021      	b.n	8003d54 <HAL_RCC_OscConfig+0x19c>
 8003d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x184>
 8003d22:	4b71      	ldr	r3, [pc, #452]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a70      	ldr	r2, [pc, #448]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	4b6e      	ldr	r3, [pc, #440]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a6d      	ldr	r2, [pc, #436]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCC_OscConfig+0x19c>
 8003d3c:	4b6a      	ldr	r3, [pc, #424]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a69      	ldr	r2, [pc, #420]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	4b67      	ldr	r3, [pc, #412]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a66      	ldr	r2, [pc, #408]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d52:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d54:	4b64      	ldr	r3, [pc, #400]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	f023 020f 	bic.w	r2, r3, #15
 8003d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	495f      	ldr	r1, [pc, #380]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d059      	beq.n	8003e32 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7e:	f7fe fd4f 	bl	8002820 <HAL_GetTick>
 8003d82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d88:	f7fe fd4a 	bl	8002820 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b64      	cmp	r3, #100	; 0x64
 8003d96:	d902      	bls.n	8003d9e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	f000 bf43 	b.w	8004c24 <HAL_RCC_OscConfig+0x106c>
 8003d9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003da2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003daa:	fa93 f3a3 	rbit	r3, r3
 8003dae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003db2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db6:	fab3 f383 	clz	r3, r3
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d102      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x218>
 8003dca:	4b47      	ldr	r3, [pc, #284]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	e015      	b.n	8003dfc <HAL_RCC_OscConfig+0x244>
 8003dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dd4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003ddc:	fa93 f3a3 	rbit	r3, r3
 8003de0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003de8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003dec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003df0:	fa93 f3a3 	rbit	r3, r3
 8003df4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003df8:	4b3b      	ldr	r3, [pc, #236]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e00:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003e04:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003e08:	fa92 f2a2 	rbit	r2, r2
 8003e0c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003e10:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003e14:	fab2 f282 	clz	r2, r2
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	f042 0220 	orr.w	r2, r2, #32
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	f002 021f 	and.w	r2, r2, #31
 8003e24:	2101      	movs	r1, #1
 8003e26:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0ab      	beq.n	8003d88 <HAL_RCC_OscConfig+0x1d0>
 8003e30:	e05d      	b.n	8003eee <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e32:	f7fe fcf5 	bl	8002820 <HAL_GetTick>
 8003e36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e3c:	f7fe fcf0 	bl	8002820 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b64      	cmp	r3, #100	; 0x64
 8003e4a:	d902      	bls.n	8003e52 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	f000 bee9 	b.w	8004c24 <HAL_RCC_OscConfig+0x106c>
 8003e52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e56:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003e5e:	fa93 f3a3 	rbit	r3, r3
 8003e62:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003e66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6a:	fab3 f383 	clz	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d102      	bne.n	8003e84 <HAL_RCC_OscConfig+0x2cc>
 8003e7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	e015      	b.n	8003eb0 <HAL_RCC_OscConfig+0x2f8>
 8003e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e88:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003e90:	fa93 f3a3 	rbit	r3, r3
 8003e94:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003e98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e9c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003ea0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003ea4:	fa93 f3a3 	rbit	r3, r3
 8003ea8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003eac:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <HAL_RCC_OscConfig+0x330>)
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003eb4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003eb8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003ebc:	fa92 f2a2 	rbit	r2, r2
 8003ec0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003ec4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003ec8:	fab2 f282 	clz	r2, r2
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	f042 0220 	orr.w	r2, r2, #32
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	f002 021f 	and.w	r2, r2, #31
 8003ed8:	2101      	movs	r1, #1
 8003eda:	fa01 f202 	lsl.w	r2, r1, r2
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1ab      	bne.n	8003e3c <HAL_RCC_OscConfig+0x284>
 8003ee4:	e003      	b.n	8003eee <HAL_RCC_OscConfig+0x336>
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 817d 	beq.w	80041fe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f04:	4ba6      	ldr	r3, [pc, #664]	; (80041a0 <HAL_RCC_OscConfig+0x5e8>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00b      	beq.n	8003f28 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f10:	4ba3      	ldr	r3, [pc, #652]	; (80041a0 <HAL_RCC_OscConfig+0x5e8>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 030c 	and.w	r3, r3, #12
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d172      	bne.n	8004002 <HAL_RCC_OscConfig+0x44a>
 8003f1c:	4ba0      	ldr	r3, [pc, #640]	; (80041a0 <HAL_RCC_OscConfig+0x5e8>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d16c      	bne.n	8004002 <HAL_RCC_OscConfig+0x44a>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003f32:	fa93 f3a3 	rbit	r3, r3
 8003f36:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003f3a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3e:	fab3 f383 	clz	r3, r3
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d102      	bne.n	8003f58 <HAL_RCC_OscConfig+0x3a0>
 8003f52:	4b93      	ldr	r3, [pc, #588]	; (80041a0 <HAL_RCC_OscConfig+0x5e8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	e013      	b.n	8003f80 <HAL_RCC_OscConfig+0x3c8>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003f62:	fa93 f3a3 	rbit	r3, r3
 8003f66:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003f70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003f74:	fa93 f3a3 	rbit	r3, r3
 8003f78:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003f7c:	4b88      	ldr	r3, [pc, #544]	; (80041a0 <HAL_RCC_OscConfig+0x5e8>)
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	2202      	movs	r2, #2
 8003f82:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003f86:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003f8a:	fa92 f2a2 	rbit	r2, r2
 8003f8e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003f92:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003f96:	fab2 f282 	clz	r2, r2
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	f042 0220 	orr.w	r2, r2, #32
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	f002 021f 	and.w	r2, r2, #31
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x410>
 8003fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d002      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f000 be2e 	b.w	8004c24 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc8:	4b75      	ldr	r3, [pc, #468]	; (80041a0 <HAL_RCC_OscConfig+0x5e8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	21f8      	movs	r1, #248	; 0xf8
 8003fde:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003fe6:	fa91 f1a1 	rbit	r1, r1
 8003fea:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003fee:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003ff2:	fab1 f181 	clz	r1, r1
 8003ff6:	b2c9      	uxtb	r1, r1
 8003ff8:	408b      	lsls	r3, r1
 8003ffa:	4969      	ldr	r1, [pc, #420]	; (80041a0 <HAL_RCC_OscConfig+0x5e8>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004000:	e0fd      	b.n	80041fe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 8088 	beq.w	8004124 <HAL_RCC_OscConfig+0x56c>
 8004014:	2301      	movs	r3, #1
 8004016:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800401e:	fa93 f3a3 	rbit	r3, r3
 8004022:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004026:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800402a:	fab3 f383 	clz	r3, r3
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004034:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	461a      	mov	r2, r3
 800403c:	2301      	movs	r3, #1
 800403e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004040:	f7fe fbee 	bl	8002820 <HAL_GetTick>
 8004044:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004048:	e00a      	b.n	8004060 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800404a:	f7fe fbe9 	bl	8002820 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d902      	bls.n	8004060 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	f000 bde2 	b.w	8004c24 <HAL_RCC_OscConfig+0x106c>
 8004060:	2302      	movs	r3, #2
 8004062:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800406a:	fa93 f3a3 	rbit	r3, r3
 800406e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004072:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004076:	fab3 f383 	clz	r3, r3
 800407a:	b2db      	uxtb	r3, r3
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d102      	bne.n	8004090 <HAL_RCC_OscConfig+0x4d8>
 800408a:	4b45      	ldr	r3, [pc, #276]	; (80041a0 <HAL_RCC_OscConfig+0x5e8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	e013      	b.n	80040b8 <HAL_RCC_OscConfig+0x500>
 8004090:	2302      	movs	r3, #2
 8004092:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800409a:	fa93 f3a3 	rbit	r3, r3
 800409e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80040a2:	2302      	movs	r3, #2
 80040a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80040a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80040ac:	fa93 f3a3 	rbit	r3, r3
 80040b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80040b4:	4b3a      	ldr	r3, [pc, #232]	; (80041a0 <HAL_RCC_OscConfig+0x5e8>)
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	2202      	movs	r2, #2
 80040ba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80040be:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80040c2:	fa92 f2a2 	rbit	r2, r2
 80040c6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80040ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80040ce:	fab2 f282 	clz	r2, r2
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	f042 0220 	orr.w	r2, r2, #32
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	f002 021f 	and.w	r2, r2, #31
 80040de:	2101      	movs	r1, #1
 80040e0:	fa01 f202 	lsl.w	r2, r1, r2
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0af      	beq.n	800404a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ea:	4b2d      	ldr	r3, [pc, #180]	; (80041a0 <HAL_RCC_OscConfig+0x5e8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	21f8      	movs	r1, #248	; 0xf8
 8004100:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004104:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004108:	fa91 f1a1 	rbit	r1, r1
 800410c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004110:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004114:	fab1 f181 	clz	r1, r1
 8004118:	b2c9      	uxtb	r1, r1
 800411a:	408b      	lsls	r3, r1
 800411c:	4920      	ldr	r1, [pc, #128]	; (80041a0 <HAL_RCC_OscConfig+0x5e8>)
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]
 8004122:	e06c      	b.n	80041fe <HAL_RCC_OscConfig+0x646>
 8004124:	2301      	movs	r3, #1
 8004126:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800412e:	fa93 f3a3 	rbit	r3, r3
 8004132:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004136:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004144:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	461a      	mov	r2, r3
 800414c:	2300      	movs	r3, #0
 800414e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004150:	f7fe fb66 	bl	8002820 <HAL_GetTick>
 8004154:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004158:	e00a      	b.n	8004170 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800415a:	f7fe fb61 	bl	8002820 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d902      	bls.n	8004170 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	f000 bd5a 	b.w	8004c24 <HAL_RCC_OscConfig+0x106c>
 8004170:	2302      	movs	r3, #2
 8004172:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004176:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800417a:	fa93 f3a3 	rbit	r3, r3
 800417e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004186:	fab3 f383 	clz	r3, r3
 800418a:	b2db      	uxtb	r3, r3
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	b2db      	uxtb	r3, r3
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b01      	cmp	r3, #1
 8004198:	d104      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5ec>
 800419a:	4b01      	ldr	r3, [pc, #4]	; (80041a0 <HAL_RCC_OscConfig+0x5e8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	e015      	b.n	80041cc <HAL_RCC_OscConfig+0x614>
 80041a0:	40021000 	.word	0x40021000
 80041a4:	2302      	movs	r3, #2
 80041a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041ae:	fa93 f3a3 	rbit	r3, r3
 80041b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80041b6:	2302      	movs	r3, #2
 80041b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80041bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80041c0:	fa93 f3a3 	rbit	r3, r3
 80041c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80041c8:	4bc8      	ldr	r3, [pc, #800]	; (80044ec <HAL_RCC_OscConfig+0x934>)
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	2202      	movs	r2, #2
 80041ce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80041d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80041d6:	fa92 f2a2 	rbit	r2, r2
 80041da:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80041de:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80041e2:	fab2 f282 	clz	r2, r2
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	f042 0220 	orr.w	r2, r2, #32
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	f002 021f 	and.w	r2, r2, #31
 80041f2:	2101      	movs	r1, #1
 80041f4:	fa01 f202 	lsl.w	r2, r1, r2
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1ad      	bne.n	800415a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8110 	beq.w	8004434 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004218:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d079      	beq.n	8004318 <HAL_RCC_OscConfig+0x760>
 8004224:	2301      	movs	r3, #1
 8004226:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800422e:	fa93 f3a3 	rbit	r3, r3
 8004232:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800423a:	fab3 f383 	clz	r3, r3
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	4bab      	ldr	r3, [pc, #684]	; (80044f0 <HAL_RCC_OscConfig+0x938>)
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	461a      	mov	r2, r3
 800424a:	2301      	movs	r3, #1
 800424c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424e:	f7fe fae7 	bl	8002820 <HAL_GetTick>
 8004252:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004256:	e00a      	b.n	800426e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004258:	f7fe fae2 	bl	8002820 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d902      	bls.n	800426e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	f000 bcdb 	b.w	8004c24 <HAL_RCC_OscConfig+0x106c>
 800426e:	2302      	movs	r3, #2
 8004270:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004274:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004278:	fa93 f3a3 	rbit	r3, r3
 800427c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004284:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004288:	2202      	movs	r2, #2
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004290:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	fa93 f2a3 	rbit	r2, r3
 800429a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042ac:	2202      	movs	r2, #2
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	fa93 f2a3 	rbit	r2, r3
 80042be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c8:	4b88      	ldr	r3, [pc, #544]	; (80044ec <HAL_RCC_OscConfig+0x934>)
 80042ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80042d4:	2102      	movs	r1, #2
 80042d6:	6019      	str	r1, [r3, #0]
 80042d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	fa93 f1a3 	rbit	r1, r3
 80042e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042ee:	6019      	str	r1, [r3, #0]
  return result;
 80042f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	fab3 f383 	clz	r3, r3
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004304:	b2db      	uxtb	r3, r3
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	2101      	movs	r1, #1
 800430c:	fa01 f303 	lsl.w	r3, r1, r3
 8004310:	4013      	ands	r3, r2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0a0      	beq.n	8004258 <HAL_RCC_OscConfig+0x6a0>
 8004316:	e08d      	b.n	8004434 <HAL_RCC_OscConfig+0x87c>
 8004318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004320:	2201      	movs	r2, #1
 8004322:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004328:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	fa93 f2a3 	rbit	r2, r3
 8004332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004336:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800433a:	601a      	str	r2, [r3, #0]
  return result;
 800433c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004340:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004344:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004346:	fab3 f383 	clz	r3, r3
 800434a:	b2db      	uxtb	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	4b68      	ldr	r3, [pc, #416]	; (80044f0 <HAL_RCC_OscConfig+0x938>)
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	461a      	mov	r2, r3
 8004356:	2300      	movs	r3, #0
 8004358:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435a:	f7fe fa61 	bl	8002820 <HAL_GetTick>
 800435e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004362:	e00a      	b.n	800437a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004364:	f7fe fa5c 	bl	8002820 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d902      	bls.n	800437a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	f000 bc55 	b.w	8004c24 <HAL_RCC_OscConfig+0x106c>
 800437a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004382:	2202      	movs	r2, #2
 8004384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800438a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	fa93 f2a3 	rbit	r2, r3
 8004394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004398:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043a6:	2202      	movs	r2, #2
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	fa93 f2a3 	rbit	r2, r3
 80043b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043ca:	2202      	movs	r2, #2
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	fa93 f2a3 	rbit	r2, r3
 80043dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80043e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e6:	4b41      	ldr	r3, [pc, #260]	; (80044ec <HAL_RCC_OscConfig+0x934>)
 80043e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80043f2:	2102      	movs	r1, #2
 80043f4:	6019      	str	r1, [r3, #0]
 80043f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	fa93 f1a3 	rbit	r1, r3
 8004404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004408:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800440c:	6019      	str	r1, [r3, #0]
  return result;
 800440e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004412:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	fab3 f383 	clz	r3, r3
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004422:	b2db      	uxtb	r3, r3
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	2101      	movs	r1, #1
 800442a:	fa01 f303 	lsl.w	r3, r1, r3
 800442e:	4013      	ands	r3, r2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d197      	bne.n	8004364 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004438:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 81a1 	beq.w	800478c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444a:	2300      	movs	r3, #0
 800444c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004450:	4b26      	ldr	r3, [pc, #152]	; (80044ec <HAL_RCC_OscConfig+0x934>)
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d116      	bne.n	800448a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445c:	4b23      	ldr	r3, [pc, #140]	; (80044ec <HAL_RCC_OscConfig+0x934>)
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	4a22      	ldr	r2, [pc, #136]	; (80044ec <HAL_RCC_OscConfig+0x934>)
 8004462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004466:	61d3      	str	r3, [r2, #28]
 8004468:	4b20      	ldr	r3, [pc, #128]	; (80044ec <HAL_RCC_OscConfig+0x934>)
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004474:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004482:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448a:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <HAL_RCC_OscConfig+0x93c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004492:	2b00      	cmp	r3, #0
 8004494:	d11a      	bne.n	80044cc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004496:	4b17      	ldr	r3, [pc, #92]	; (80044f4 <HAL_RCC_OscConfig+0x93c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a16      	ldr	r2, [pc, #88]	; (80044f4 <HAL_RCC_OscConfig+0x93c>)
 800449c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044a2:	f7fe f9bd 	bl	8002820 <HAL_GetTick>
 80044a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044aa:	e009      	b.n	80044c0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ac:	f7fe f9b8 	bl	8002820 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b64      	cmp	r3, #100	; 0x64
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e3b1      	b.n	8004c24 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c0:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <HAL_RCC_OscConfig+0x93c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0ef      	beq.n	80044ac <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d10d      	bne.n	80044f8 <HAL_RCC_OscConfig+0x940>
 80044dc:	4b03      	ldr	r3, [pc, #12]	; (80044ec <HAL_RCC_OscConfig+0x934>)
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	4a02      	ldr	r2, [pc, #8]	; (80044ec <HAL_RCC_OscConfig+0x934>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	6213      	str	r3, [r2, #32]
 80044e8:	e03c      	b.n	8004564 <HAL_RCC_OscConfig+0x9ac>
 80044ea:	bf00      	nop
 80044ec:	40021000 	.word	0x40021000
 80044f0:	10908120 	.word	0x10908120
 80044f4:	40007000 	.word	0x40007000
 80044f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10c      	bne.n	8004522 <HAL_RCC_OscConfig+0x96a>
 8004508:	4bc1      	ldr	r3, [pc, #772]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	4ac0      	ldr	r2, [pc, #768]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	6213      	str	r3, [r2, #32]
 8004514:	4bbe      	ldr	r3, [pc, #760]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	4abd      	ldr	r2, [pc, #756]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 800451a:	f023 0304 	bic.w	r3, r3, #4
 800451e:	6213      	str	r3, [r2, #32]
 8004520:	e020      	b.n	8004564 <HAL_RCC_OscConfig+0x9ac>
 8004522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004526:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	2b05      	cmp	r3, #5
 8004530:	d10c      	bne.n	800454c <HAL_RCC_OscConfig+0x994>
 8004532:	4bb7      	ldr	r3, [pc, #732]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	4ab6      	ldr	r2, [pc, #728]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 8004538:	f043 0304 	orr.w	r3, r3, #4
 800453c:	6213      	str	r3, [r2, #32]
 800453e:	4bb4      	ldr	r3, [pc, #720]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	4ab3      	ldr	r2, [pc, #716]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	6213      	str	r3, [r2, #32]
 800454a:	e00b      	b.n	8004564 <HAL_RCC_OscConfig+0x9ac>
 800454c:	4bb0      	ldr	r3, [pc, #704]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	4aaf      	ldr	r2, [pc, #700]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 8004552:	f023 0301 	bic.w	r3, r3, #1
 8004556:	6213      	str	r3, [r2, #32]
 8004558:	4bad      	ldr	r3, [pc, #692]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	4aac      	ldr	r2, [pc, #688]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 800455e:	f023 0304 	bic.w	r3, r3, #4
 8004562:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004568:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8081 	beq.w	8004678 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004576:	f7fe f953 	bl	8002820 <HAL_GetTick>
 800457a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457e:	e00b      	b.n	8004598 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004580:	f7fe f94e 	bl	8002820 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004590:	4293      	cmp	r3, r2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e345      	b.n	8004c24 <HAL_RCC_OscConfig+0x106c>
 8004598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800459c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80045a0:	2202      	movs	r2, #2
 80045a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	fa93 f2a3 	rbit	r2, r3
 80045b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80045c4:	2202      	movs	r2, #2
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	fa93 f2a3 	rbit	r2, r3
 80045d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045da:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80045de:	601a      	str	r2, [r3, #0]
  return result;
 80045e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80045e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ea:	fab3 f383 	clz	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f043 0302 	orr.w	r3, r3, #2
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d102      	bne.n	8004604 <HAL_RCC_OscConfig+0xa4c>
 80045fe:	4b84      	ldr	r3, [pc, #528]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	e013      	b.n	800462c <HAL_RCC_OscConfig+0xa74>
 8004604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004608:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800460c:	2202      	movs	r2, #2
 800460e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004614:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	fa93 f2a3 	rbit	r2, r3
 800461e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004622:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	4b79      	ldr	r3, [pc, #484]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004630:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004634:	2102      	movs	r1, #2
 8004636:	6011      	str	r1, [r2, #0]
 8004638:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800463c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	fa92 f1a2 	rbit	r1, r2
 8004646:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800464a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800464e:	6011      	str	r1, [r2, #0]
  return result;
 8004650:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004654:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	fab2 f282 	clz	r2, r2
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	f002 021f 	and.w	r2, r2, #31
 800466a:	2101      	movs	r1, #1
 800466c:	fa01 f202 	lsl.w	r2, r1, r2
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d084      	beq.n	8004580 <HAL_RCC_OscConfig+0x9c8>
 8004676:	e07f      	b.n	8004778 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004678:	f7fe f8d2 	bl	8002820 <HAL_GetTick>
 800467c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004680:	e00b      	b.n	800469a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004682:	f7fe f8cd 	bl	8002820 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e2c4      	b.n	8004c24 <HAL_RCC_OscConfig+0x106c>
 800469a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800469e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80046a2:	2202      	movs	r2, #2
 80046a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	fa93 f2a3 	rbit	r2, r3
 80046b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80046c6:	2202      	movs	r2, #2
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	fa93 f2a3 	rbit	r2, r3
 80046d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80046e0:	601a      	str	r2, [r3, #0]
  return result;
 80046e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80046ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ec:	fab3 f383 	clz	r3, r3
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	f043 0302 	orr.w	r3, r3, #2
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d102      	bne.n	8004706 <HAL_RCC_OscConfig+0xb4e>
 8004700:	4b43      	ldr	r3, [pc, #268]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	e013      	b.n	800472e <HAL_RCC_OscConfig+0xb76>
 8004706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800470e:	2202      	movs	r2, #2
 8004710:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004716:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	fa93 f2a3 	rbit	r2, r3
 8004720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004724:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	4b39      	ldr	r3, [pc, #228]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004732:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004736:	2102      	movs	r1, #2
 8004738:	6011      	str	r1, [r2, #0]
 800473a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800473e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	fa92 f1a2 	rbit	r1, r2
 8004748:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800474c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004750:	6011      	str	r1, [r2, #0]
  return result;
 8004752:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004756:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	fab2 f282 	clz	r2, r2
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	f002 021f 	and.w	r2, r2, #31
 800476c:	2101      	movs	r1, #1
 800476e:	fa01 f202 	lsl.w	r2, r1, r2
 8004772:	4013      	ands	r3, r2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d184      	bne.n	8004682 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004778:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800477c:	2b01      	cmp	r3, #1
 800477e:	d105      	bne.n	800478c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004780:	4b23      	ldr	r3, [pc, #140]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	4a22      	ldr	r2, [pc, #136]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 8004786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800478a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800478c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004790:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8242 	beq.w	8004c22 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800479e:	4b1c      	ldr	r3, [pc, #112]	; (8004810 <HAL_RCC_OscConfig+0xc58>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	f000 8213 	beq.w	8004bd2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	f040 8162 	bne.w	8004a82 <HAL_RCC_OscConfig+0xeca>
 80047be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80047c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	fa93 f2a3 	rbit	r2, r3
 80047da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047de:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80047e2:	601a      	str	r2, [r3, #0]
  return result;
 80047e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80047ec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ee:	fab3 f383 	clz	r3, r3
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	461a      	mov	r2, r3
 8004800:	2300      	movs	r3, #0
 8004802:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004804:	f7fe f80c 	bl	8002820 <HAL_GetTick>
 8004808:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800480c:	e00c      	b.n	8004828 <HAL_RCC_OscConfig+0xc70>
 800480e:	bf00      	nop
 8004810:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004814:	f7fe f804 	bl	8002820 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e1fd      	b.n	8004c24 <HAL_RCC_OscConfig+0x106c>
 8004828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004830:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004834:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800483a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	fa93 f2a3 	rbit	r2, r3
 8004844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004848:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800484c:	601a      	str	r2, [r3, #0]
  return result;
 800484e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004852:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004856:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004858:	fab3 f383 	clz	r3, r3
 800485c:	b2db      	uxtb	r3, r3
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	b2db      	uxtb	r3, r3
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	d102      	bne.n	8004872 <HAL_RCC_OscConfig+0xcba>
 800486c:	4bb0      	ldr	r3, [pc, #704]	; (8004b30 <HAL_RCC_OscConfig+0xf78>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	e027      	b.n	80048c2 <HAL_RCC_OscConfig+0xd0a>
 8004872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004876:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800487a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800487e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004884:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	fa93 f2a3 	rbit	r2, r3
 800488e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004892:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800489c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80048a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048aa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	fa93 f2a3 	rbit	r2, r3
 80048b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	4b9c      	ldr	r3, [pc, #624]	; (8004b30 <HAL_RCC_OscConfig+0xf78>)
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048c6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80048ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80048ce:	6011      	str	r1, [r2, #0]
 80048d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048d4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	fa92 f1a2 	rbit	r1, r2
 80048de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048e2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80048e6:	6011      	str	r1, [r2, #0]
  return result;
 80048e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048ec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	fab2 f282 	clz	r2, r2
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	f042 0220 	orr.w	r2, r2, #32
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	f002 021f 	and.w	r2, r2, #31
 8004902:	2101      	movs	r1, #1
 8004904:	fa01 f202 	lsl.w	r2, r1, r2
 8004908:	4013      	ands	r3, r2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d182      	bne.n	8004814 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800490e:	4b88      	ldr	r3, [pc, #544]	; (8004b30 <HAL_RCC_OscConfig+0xf78>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800491a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004926:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	430b      	orrs	r3, r1
 8004930:	497f      	ldr	r1, [pc, #508]	; (8004b30 <HAL_RCC_OscConfig+0xf78>)
 8004932:	4313      	orrs	r3, r2
 8004934:	604b      	str	r3, [r1, #4]
 8004936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800493e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004942:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004948:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	fa93 f2a3 	rbit	r2, r3
 8004952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004956:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800495a:	601a      	str	r2, [r3, #0]
  return result;
 800495c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004960:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004964:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004966:	fab3 f383 	clz	r3, r3
 800496a:	b2db      	uxtb	r3, r3
 800496c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004970:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	461a      	mov	r2, r3
 8004978:	2301      	movs	r3, #1
 800497a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497c:	f7fd ff50 	bl	8002820 <HAL_GetTick>
 8004980:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004984:	e009      	b.n	800499a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004986:	f7fd ff4b 	bl	8002820 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e144      	b.n	8004c24 <HAL_RCC_OscConfig+0x106c>
 800499a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800499e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80049a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	fa93 f2a3 	rbit	r2, r3
 80049b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80049be:	601a      	str	r2, [r3, #0]
  return result;
 80049c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80049c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049ca:	fab3 f383 	clz	r3, r3
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d102      	bne.n	80049e4 <HAL_RCC_OscConfig+0xe2c>
 80049de:	4b54      	ldr	r3, [pc, #336]	; (8004b30 <HAL_RCC_OscConfig+0xf78>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	e027      	b.n	8004a34 <HAL_RCC_OscConfig+0xe7c>
 80049e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80049ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	fa93 f2a3 	rbit	r2, r3
 8004a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a04:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a0e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a1c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	fa93 f2a3 	rbit	r2, r3
 8004a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	4b3f      	ldr	r3, [pc, #252]	; (8004b30 <HAL_RCC_OscConfig+0xf78>)
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a38:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a40:	6011      	str	r1, [r2, #0]
 8004a42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a46:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a4a:	6812      	ldr	r2, [r2, #0]
 8004a4c:	fa92 f1a2 	rbit	r1, r2
 8004a50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a54:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a58:	6011      	str	r1, [r2, #0]
  return result;
 8004a5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a5e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	fab2 f282 	clz	r2, r2
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	f042 0220 	orr.w	r2, r2, #32
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	f002 021f 	and.w	r2, r2, #31
 8004a74:	2101      	movs	r1, #1
 8004a76:	fa01 f202 	lsl.w	r2, r1, r2
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d082      	beq.n	8004986 <HAL_RCC_OscConfig+0xdce>
 8004a80:	e0cf      	b.n	8004c22 <HAL_RCC_OscConfig+0x106a>
 8004a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a86:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004a8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a94:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	fa93 f2a3 	rbit	r2, r3
 8004a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004aa6:	601a      	str	r2, [r3, #0]
  return result;
 8004aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004ab0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab2:	fab3 f383 	clz	r3, r3
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004abc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac8:	f7fd feaa 	bl	8002820 <HAL_GetTick>
 8004acc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad0:	e009      	b.n	8004ae6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad2:	f7fd fea5 	bl	8002820 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e09e      	b.n	8004c24 <HAL_RCC_OscConfig+0x106c>
 8004ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004aee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	fa93 f2a3 	rbit	r2, r3
 8004b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b06:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004b0a:	601a      	str	r2, [r3, #0]
  return result;
 8004b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b10:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004b14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b16:	fab3 f383 	clz	r3, r3
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d104      	bne.n	8004b34 <HAL_RCC_OscConfig+0xf7c>
 8004b2a:	4b01      	ldr	r3, [pc, #4]	; (8004b30 <HAL_RCC_OscConfig+0xf78>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	e029      	b.n	8004b84 <HAL_RCC_OscConfig+0xfcc>
 8004b30:	40021000 	.word	0x40021000
 8004b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b38:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b46:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	fa93 f2a3 	rbit	r2, r3
 8004b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b54:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b5e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b6c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	fa93 f2a3 	rbit	r2, r3
 8004b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b7a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	4b2b      	ldr	r3, [pc, #172]	; (8004c30 <HAL_RCC_OscConfig+0x1078>)
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b88:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004b8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b90:	6011      	str	r1, [r2, #0]
 8004b92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b96:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	fa92 f1a2 	rbit	r1, r2
 8004ba0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ba4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004ba8:	6011      	str	r1, [r2, #0]
  return result;
 8004baa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	fab2 f282 	clz	r2, r2
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	f042 0220 	orr.w	r2, r2, #32
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	f002 021f 	and.w	r2, r2, #31
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d180      	bne.n	8004ad2 <HAL_RCC_OscConfig+0xf1a>
 8004bd0:	e027      	b.n	8004c22 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e01e      	b.n	8004c24 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004be6:	4b12      	ldr	r3, [pc, #72]	; (8004c30 <HAL_RCC_OscConfig+0x1078>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004bee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004bf2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d10b      	bne.n	8004c1e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004c06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004c0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d001      	beq.n	8004c22 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000

08004c34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b09e      	sub	sp, #120	; 0x78
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e162      	b.n	8004f12 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c4c:	4b90      	ldr	r3, [pc, #576]	; (8004e90 <HAL_RCC_ClockConfig+0x25c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d910      	bls.n	8004c7c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5a:	4b8d      	ldr	r3, [pc, #564]	; (8004e90 <HAL_RCC_ClockConfig+0x25c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f023 0207 	bic.w	r2, r3, #7
 8004c62:	498b      	ldr	r1, [pc, #556]	; (8004e90 <HAL_RCC_ClockConfig+0x25c>)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6a:	4b89      	ldr	r3, [pc, #548]	; (8004e90 <HAL_RCC_ClockConfig+0x25c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d001      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e14a      	b.n	8004f12 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d008      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c88:	4b82      	ldr	r3, [pc, #520]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	497f      	ldr	r1, [pc, #508]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 80dc 	beq.w	8004e60 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d13c      	bne.n	8004d2a <HAL_RCC_ClockConfig+0xf6>
 8004cb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cb4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cb8:	fa93 f3a3 	rbit	r3, r3
 8004cbc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc0:	fab3 f383 	clz	r3, r3
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d102      	bne.n	8004cda <HAL_RCC_ClockConfig+0xa6>
 8004cd4:	4b6f      	ldr	r3, [pc, #444]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	e00f      	b.n	8004cfa <HAL_RCC_ClockConfig+0xc6>
 8004cda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cde:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ce2:	fa93 f3a3 	rbit	r3, r3
 8004ce6:	667b      	str	r3, [r7, #100]	; 0x64
 8004ce8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cec:	663b      	str	r3, [r7, #96]	; 0x60
 8004cee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cf0:	fa93 f3a3 	rbit	r3, r3
 8004cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cf6:	4b67      	ldr	r3, [pc, #412]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cfe:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d02:	fa92 f2a2 	rbit	r2, r2
 8004d06:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004d08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d0a:	fab2 f282 	clz	r2, r2
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	f042 0220 	orr.w	r2, r2, #32
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	f002 021f 	and.w	r2, r2, #31
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d20:	4013      	ands	r3, r2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d17b      	bne.n	8004e1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e0f3      	b.n	8004f12 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d13c      	bne.n	8004dac <HAL_RCC_ClockConfig+0x178>
 8004d32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d3a:	fa93 f3a3 	rbit	r3, r3
 8004d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d42:	fab3 f383 	clz	r3, r3
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d102      	bne.n	8004d5c <HAL_RCC_ClockConfig+0x128>
 8004d56:	4b4f      	ldr	r3, [pc, #316]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	e00f      	b.n	8004d7c <HAL_RCC_ClockConfig+0x148>
 8004d5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d64:	fa93 f3a3 	rbit	r3, r3
 8004d68:	647b      	str	r3, [r7, #68]	; 0x44
 8004d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d6e:	643b      	str	r3, [r7, #64]	; 0x40
 8004d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d72:	fa93 f3a3 	rbit	r3, r3
 8004d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d78:	4b46      	ldr	r3, [pc, #280]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d80:	63ba      	str	r2, [r7, #56]	; 0x38
 8004d82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d84:	fa92 f2a2 	rbit	r2, r2
 8004d88:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d8c:	fab2 f282 	clz	r2, r2
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	f042 0220 	orr.w	r2, r2, #32
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	f002 021f 	and.w	r2, r2, #31
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8004da2:	4013      	ands	r3, r2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d13a      	bne.n	8004e1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e0b2      	b.n	8004f12 <HAL_RCC_ClockConfig+0x2de>
 8004dac:	2302      	movs	r3, #2
 8004dae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	095b      	lsrs	r3, r3, #5
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	f043 0301 	orr.w	r3, r3, #1
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d102      	bne.n	8004dd4 <HAL_RCC_ClockConfig+0x1a0>
 8004dce:	4b31      	ldr	r3, [pc, #196]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	e00d      	b.n	8004df0 <HAL_RCC_ClockConfig+0x1bc>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	fa93 f3a3 	rbit	r3, r3
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
 8004de0:	2302      	movs	r3, #2
 8004de2:	623b      	str	r3, [r7, #32]
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	fa93 f3a3 	rbit	r3, r3
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	4b29      	ldr	r3, [pc, #164]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	2202      	movs	r2, #2
 8004df2:	61ba      	str	r2, [r7, #24]
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	fa92 f2a2 	rbit	r2, r2
 8004dfa:	617a      	str	r2, [r7, #20]
  return result;
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	fab2 f282 	clz	r2, r2
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	f042 0220 	orr.w	r2, r2, #32
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	f002 021f 	and.w	r2, r2, #31
 8004e0e:	2101      	movs	r1, #1
 8004e10:	fa01 f202 	lsl.w	r2, r1, r2
 8004e14:	4013      	ands	r3, r2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e079      	b.n	8004f12 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e1e:	4b1d      	ldr	r3, [pc, #116]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f023 0203 	bic.w	r2, r3, #3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	491a      	ldr	r1, [pc, #104]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e30:	f7fd fcf6 	bl	8002820 <HAL_GetTick>
 8004e34:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e36:	e00a      	b.n	8004e4e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e38:	f7fd fcf2 	bl	8002820 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e061      	b.n	8004f12 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4e:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 020c 	and.w	r2, r3, #12
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d1eb      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <HAL_RCC_ClockConfig+0x25c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d214      	bcs.n	8004e98 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6e:	4b08      	ldr	r3, [pc, #32]	; (8004e90 <HAL_RCC_ClockConfig+0x25c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f023 0207 	bic.w	r2, r3, #7
 8004e76:	4906      	ldr	r1, [pc, #24]	; (8004e90 <HAL_RCC_ClockConfig+0x25c>)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e7e:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <HAL_RCC_ClockConfig+0x25c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d005      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e040      	b.n	8004f12 <HAL_RCC_ClockConfig+0x2de>
 8004e90:	40022000 	.word	0x40022000
 8004e94:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d008      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ea4:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <HAL_RCC_ClockConfig+0x2e8>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	491a      	ldr	r1, [pc, #104]	; (8004f1c <HAL_RCC_ClockConfig+0x2e8>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d009      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ec2:	4b16      	ldr	r3, [pc, #88]	; (8004f1c <HAL_RCC_ClockConfig+0x2e8>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	4912      	ldr	r1, [pc, #72]	; (8004f1c <HAL_RCC_ClockConfig+0x2e8>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ed6:	f000 f829 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 8004eda:	4601      	mov	r1, r0
 8004edc:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <HAL_RCC_ClockConfig+0x2e8>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ee4:	22f0      	movs	r2, #240	; 0xf0
 8004ee6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	fa92 f2a2 	rbit	r2, r2
 8004eee:	60fa      	str	r2, [r7, #12]
  return result;
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	fab2 f282 	clz	r2, r2
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	40d3      	lsrs	r3, r2
 8004efa:	4a09      	ldr	r2, [pc, #36]	; (8004f20 <HAL_RCC_ClockConfig+0x2ec>)
 8004efc:	5cd3      	ldrb	r3, [r2, r3]
 8004efe:	fa21 f303 	lsr.w	r3, r1, r3
 8004f02:	4a08      	ldr	r2, [pc, #32]	; (8004f24 <HAL_RCC_ClockConfig+0x2f0>)
 8004f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004f06:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <HAL_RCC_ClockConfig+0x2f4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fd fc44 	bl	8002798 <HAL_InitTick>
  
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3778      	adds	r7, #120	; 0x78
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	08007b78 	.word	0x08007b78
 8004f24:	20000084 	.word	0x20000084
 8004f28:	200000f8 	.word	0x200000f8

08004f2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b08b      	sub	sp, #44	; 0x2c
 8004f30:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	2300      	movs	r3, #0
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3e:	2300      	movs	r3, #0
 8004f40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004f46:	4b29      	ldr	r3, [pc, #164]	; (8004fec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d002      	beq.n	8004f5c <HAL_RCC_GetSysClockFreq+0x30>
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d003      	beq.n	8004f62 <HAL_RCC_GetSysClockFreq+0x36>
 8004f5a:	e03c      	b.n	8004fd6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f5c:	4b24      	ldr	r3, [pc, #144]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f5e:	623b      	str	r3, [r7, #32]
      break;
 8004f60:	e03c      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004f68:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004f6c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	fa92 f2a2 	rbit	r2, r2
 8004f74:	607a      	str	r2, [r7, #4]
  return result;
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	fab2 f282 	clz	r2, r2
 8004f7c:	b2d2      	uxtb	r2, r2
 8004f7e:	40d3      	lsrs	r3, r2
 8004f80:	4a1c      	ldr	r2, [pc, #112]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004f82:	5cd3      	ldrb	r3, [r2, r3]
 8004f84:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004f86:	4b19      	ldr	r3, [pc, #100]	; (8004fec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	220f      	movs	r2, #15
 8004f90:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	fa92 f2a2 	rbit	r2, r2
 8004f98:	60fa      	str	r2, [r7, #12]
  return result;
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	fab2 f282 	clz	r2, r2
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	40d3      	lsrs	r3, r2
 8004fa4:	4a14      	ldr	r2, [pc, #80]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004fa6:	5cd3      	ldrb	r3, [r2, r3]
 8004fa8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004fb4:	4a0e      	ldr	r2, [pc, #56]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	fb02 f303 	mul.w	r3, r2, r3
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc4:	e004      	b.n	8004fd0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	4a0c      	ldr	r2, [pc, #48]	; (8004ffc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004fca:	fb02 f303 	mul.w	r3, r2, r3
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	623b      	str	r3, [r7, #32]
      break;
 8004fd4:	e002      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fd6:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004fd8:	623b      	str	r3, [r7, #32]
      break;
 8004fda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	372c      	adds	r7, #44	; 0x2c
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	007a1200 	.word	0x007a1200
 8004ff4:	08007b88 	.word	0x08007b88
 8004ff8:	08007b98 	.word	0x08007b98
 8004ffc:	003d0900 	.word	0x003d0900

08005000 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b092      	sub	sp, #72	; 0x48
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005010:	2300      	movs	r3, #0
 8005012:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 80d4 	beq.w	80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005024:	4b4e      	ldr	r3, [pc, #312]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10e      	bne.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005030:	4b4b      	ldr	r3, [pc, #300]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	4a4a      	ldr	r2, [pc, #296]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800503a:	61d3      	str	r3, [r2, #28]
 800503c:	4b48      	ldr	r3, [pc, #288]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005044:	60bb      	str	r3, [r7, #8]
 8005046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005048:	2301      	movs	r3, #1
 800504a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800504e:	4b45      	ldr	r3, [pc, #276]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005056:	2b00      	cmp	r3, #0
 8005058:	d118      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800505a:	4b42      	ldr	r3, [pc, #264]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a41      	ldr	r2, [pc, #260]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005064:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005066:	f7fd fbdb 	bl	8002820 <HAL_GetTick>
 800506a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506c:	e008      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800506e:	f7fd fbd7 	bl	8002820 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b64      	cmp	r3, #100	; 0x64
 800507a:	d901      	bls.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e169      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005080:	4b38      	ldr	r3, [pc, #224]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0f0      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800508c:	4b34      	ldr	r3, [pc, #208]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005094:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 8084 	beq.w	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d07c      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050ac:	4b2c      	ldr	r3, [pc, #176]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	fa93 f3a3 	rbit	r3, r3
 80050c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80050c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050c6:	fab3 f383 	clz	r3, r3
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	4b26      	ldr	r3, [pc, #152]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	461a      	mov	r2, r3
 80050d6:	2301      	movs	r3, #1
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e2:	fa93 f3a3 	rbit	r3, r3
 80050e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80050e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050ea:	fab3 f383 	clz	r3, r3
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	461a      	mov	r2, r3
 80050f2:	4b1d      	ldr	r3, [pc, #116]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	461a      	mov	r2, r3
 80050fa:	2300      	movs	r3, #0
 80050fc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050fe:	4a18      	ldr	r2, [pc, #96]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005102:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d04b      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510e:	f7fd fb87 	bl	8002820 <HAL_GetTick>
 8005112:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005114:	e00a      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005116:	f7fd fb83 	bl	8002820 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	f241 3288 	movw	r2, #5000	; 0x1388
 8005124:	4293      	cmp	r3, r2
 8005126:	d901      	bls.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e113      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800512c:	2302      	movs	r3, #2
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005132:	fa93 f3a3 	rbit	r3, r3
 8005136:	627b      	str	r3, [r7, #36]	; 0x24
 8005138:	2302      	movs	r3, #2
 800513a:	623b      	str	r3, [r7, #32]
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	fa93 f3a3 	rbit	r3, r3
 8005142:	61fb      	str	r3, [r7, #28]
  return result;
 8005144:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005146:	fab3 f383 	clz	r3, r3
 800514a:	b2db      	uxtb	r3, r3
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f043 0302 	orr.w	r3, r3, #2
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d108      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800515a:	4b01      	ldr	r3, [pc, #4]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	e00d      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005160:	40021000 	.word	0x40021000
 8005164:	40007000 	.word	0x40007000
 8005168:	10908100 	.word	0x10908100
 800516c:	2302      	movs	r3, #2
 800516e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	fa93 f3a3 	rbit	r3, r3
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	4b78      	ldr	r3, [pc, #480]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	2202      	movs	r2, #2
 800517e:	613a      	str	r2, [r7, #16]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	fa92 f2a2 	rbit	r2, r2
 8005186:	60fa      	str	r2, [r7, #12]
  return result;
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	fab2 f282 	clz	r2, r2
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	f002 021f 	and.w	r2, r2, #31
 800519a:	2101      	movs	r1, #1
 800519c:	fa01 f202 	lsl.w	r2, r1, r2
 80051a0:	4013      	ands	r3, r2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0b7      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80051a6:	4b6d      	ldr	r3, [pc, #436]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	496a      	ldr	r1, [pc, #424]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d105      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c0:	4b66      	ldr	r3, [pc, #408]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	4a65      	ldr	r2, [pc, #404]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d008      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051d8:	4b60      	ldr	r3, [pc, #384]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051dc:	f023 0203 	bic.w	r2, r3, #3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	495d      	ldr	r1, [pc, #372]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d008      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051f6:	4b59      	ldr	r3, [pc, #356]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	4956      	ldr	r1, [pc, #344]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005204:	4313      	orrs	r3, r2
 8005206:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d008      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005214:	4b51      	ldr	r3, [pc, #324]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	494e      	ldr	r1, [pc, #312]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005222:	4313      	orrs	r3, r2
 8005224:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d008      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005232:	4b4a      	ldr	r3, [pc, #296]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	f023 0210 	bic.w	r2, r3, #16
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	4947      	ldr	r1, [pc, #284]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005240:	4313      	orrs	r3, r2
 8005242:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d008      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005250:	4b42      	ldr	r3, [pc, #264]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	493f      	ldr	r1, [pc, #252]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800525e:	4313      	orrs	r3, r2
 8005260:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526a:	2b00      	cmp	r3, #0
 800526c:	d008      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800526e:	4b3b      	ldr	r3, [pc, #236]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	f023 0220 	bic.w	r2, r3, #32
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	4938      	ldr	r1, [pc, #224]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800527c:	4313      	orrs	r3, r2
 800527e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800528c:	4b33      	ldr	r3, [pc, #204]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800528e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005290:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	4930      	ldr	r1, [pc, #192]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800529a:	4313      	orrs	r3, r2
 800529c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d008      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052aa:	4b2c      	ldr	r3, [pc, #176]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	4929      	ldr	r1, [pc, #164]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052c8:	4b24      	ldr	r3, [pc, #144]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	4921      	ldr	r1, [pc, #132]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d008      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80052e6:	4b1d      	ldr	r3, [pc, #116]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	491a      	ldr	r1, [pc, #104]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005304:	4b15      	ldr	r3, [pc, #84]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005310:	4912      	ldr	r1, [pc, #72]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005312:	4313      	orrs	r3, r2
 8005314:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d008      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005322:	4b0e      	ldr	r3, [pc, #56]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	490b      	ldr	r1, [pc, #44]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005330:	4313      	orrs	r3, r2
 8005332:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d008      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005340:	4b06      	ldr	r3, [pc, #24]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534c:	4903      	ldr	r1, [pc, #12]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800534e:	4313      	orrs	r3, r2
 8005350:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3748      	adds	r7, #72	; 0x48
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40021000 	.word	0x40021000

08005360 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e09d      	b.n	80054ae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	2b00      	cmp	r3, #0
 8005378:	d108      	bne.n	800538c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005382:	d009      	beq.n	8005398 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	61da      	str	r2, [r3, #28]
 800538a:	e005      	b.n	8005398 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fc fe42 	bl	800203c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053d8:	d902      	bls.n	80053e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	e002      	b.n	80053e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80053ee:	d007      	beq.n	8005400 <HAL_SPI_Init+0xa0>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053f8:	d002      	beq.n	8005400 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005438:	431a      	orrs	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005442:	ea42 0103 	orr.w	r1, r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	0c1b      	lsrs	r3, r3, #16
 800545c:	f003 0204 	and.w	r2, r3, #4
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	f003 0310 	and.w	r3, r3, #16
 8005468:	431a      	orrs	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800547c:	ea42 0103 	orr.w	r1, r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69da      	ldr	r2, [r3, #28]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800549c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e049      	b.n	800555c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d106      	bne.n	80054e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7fc fdef 	bl	80020c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2202      	movs	r2, #2
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3304      	adds	r3, #4
 80054f2:	4619      	mov	r1, r3
 80054f4:	4610      	mov	r0, r2
 80054f6:	f000 ff37 	bl	8006368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e049      	b.n	800560a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fc fde4 	bl	8002158 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3304      	adds	r3, #4
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f000 fee0 	bl	8006368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d109      	bne.n	8005638 <HAL_TIM_PWM_Start+0x24>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b01      	cmp	r3, #1
 800562e:	bf14      	ite	ne
 8005630:	2301      	movne	r3, #1
 8005632:	2300      	moveq	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	e03c      	b.n	80056b2 <HAL_TIM_PWM_Start+0x9e>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2b04      	cmp	r3, #4
 800563c:	d109      	bne.n	8005652 <HAL_TIM_PWM_Start+0x3e>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b01      	cmp	r3, #1
 8005648:	bf14      	ite	ne
 800564a:	2301      	movne	r3, #1
 800564c:	2300      	moveq	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	e02f      	b.n	80056b2 <HAL_TIM_PWM_Start+0x9e>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b08      	cmp	r3, #8
 8005656:	d109      	bne.n	800566c <HAL_TIM_PWM_Start+0x58>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b01      	cmp	r3, #1
 8005662:	bf14      	ite	ne
 8005664:	2301      	movne	r3, #1
 8005666:	2300      	moveq	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	e022      	b.n	80056b2 <HAL_TIM_PWM_Start+0x9e>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b0c      	cmp	r3, #12
 8005670:	d109      	bne.n	8005686 <HAL_TIM_PWM_Start+0x72>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b01      	cmp	r3, #1
 800567c:	bf14      	ite	ne
 800567e:	2301      	movne	r3, #1
 8005680:	2300      	moveq	r3, #0
 8005682:	b2db      	uxtb	r3, r3
 8005684:	e015      	b.n	80056b2 <HAL_TIM_PWM_Start+0x9e>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b10      	cmp	r3, #16
 800568a:	d109      	bne.n	80056a0 <HAL_TIM_PWM_Start+0x8c>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b01      	cmp	r3, #1
 8005696:	bf14      	ite	ne
 8005698:	2301      	movne	r3, #1
 800569a:	2300      	moveq	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	e008      	b.n	80056b2 <HAL_TIM_PWM_Start+0x9e>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	bf14      	ite	ne
 80056ac:	2301      	movne	r3, #1
 80056ae:	2300      	moveq	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e097      	b.n	80057ea <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d104      	bne.n	80056ca <HAL_TIM_PWM_Start+0xb6>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056c8:	e023      	b.n	8005712 <HAL_TIM_PWM_Start+0xfe>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d104      	bne.n	80056da <HAL_TIM_PWM_Start+0xc6>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056d8:	e01b      	b.n	8005712 <HAL_TIM_PWM_Start+0xfe>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d104      	bne.n	80056ea <HAL_TIM_PWM_Start+0xd6>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056e8:	e013      	b.n	8005712 <HAL_TIM_PWM_Start+0xfe>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b0c      	cmp	r3, #12
 80056ee:	d104      	bne.n	80056fa <HAL_TIM_PWM_Start+0xe6>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056f8:	e00b      	b.n	8005712 <HAL_TIM_PWM_Start+0xfe>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d104      	bne.n	800570a <HAL_TIM_PWM_Start+0xf6>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005708:	e003      	b.n	8005712 <HAL_TIM_PWM_Start+0xfe>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2202      	movs	r2, #2
 800570e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2201      	movs	r2, #1
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f001 fb42 	bl	8006da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a33      	ldr	r2, [pc, #204]	; (80057f4 <HAL_TIM_PWM_Start+0x1e0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <HAL_TIM_PWM_Start+0x13e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a32      	ldr	r2, [pc, #200]	; (80057f8 <HAL_TIM_PWM_Start+0x1e4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00e      	beq.n	8005752 <HAL_TIM_PWM_Start+0x13e>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a30      	ldr	r2, [pc, #192]	; (80057fc <HAL_TIM_PWM_Start+0x1e8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d009      	beq.n	8005752 <HAL_TIM_PWM_Start+0x13e>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a2f      	ldr	r2, [pc, #188]	; (8005800 <HAL_TIM_PWM_Start+0x1ec>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d004      	beq.n	8005752 <HAL_TIM_PWM_Start+0x13e>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a2d      	ldr	r2, [pc, #180]	; (8005804 <HAL_TIM_PWM_Start+0x1f0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d101      	bne.n	8005756 <HAL_TIM_PWM_Start+0x142>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <HAL_TIM_PWM_Start+0x144>
 8005756:	2300      	movs	r3, #0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d007      	beq.n	800576c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800576a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a20      	ldr	r2, [pc, #128]	; (80057f4 <HAL_TIM_PWM_Start+0x1e0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d018      	beq.n	80057a8 <HAL_TIM_PWM_Start+0x194>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577e:	d013      	beq.n	80057a8 <HAL_TIM_PWM_Start+0x194>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a20      	ldr	r2, [pc, #128]	; (8005808 <HAL_TIM_PWM_Start+0x1f4>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00e      	beq.n	80057a8 <HAL_TIM_PWM_Start+0x194>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a1f      	ldr	r2, [pc, #124]	; (800580c <HAL_TIM_PWM_Start+0x1f8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d009      	beq.n	80057a8 <HAL_TIM_PWM_Start+0x194>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a17      	ldr	r2, [pc, #92]	; (80057f8 <HAL_TIM_PWM_Start+0x1e4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d004      	beq.n	80057a8 <HAL_TIM_PWM_Start+0x194>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a16      	ldr	r2, [pc, #88]	; (80057fc <HAL_TIM_PWM_Start+0x1e8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d115      	bne.n	80057d4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689a      	ldr	r2, [r3, #8]
 80057ae:	4b18      	ldr	r3, [pc, #96]	; (8005810 <HAL_TIM_PWM_Start+0x1fc>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b06      	cmp	r3, #6
 80057b8:	d015      	beq.n	80057e6 <HAL_TIM_PWM_Start+0x1d2>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c0:	d011      	beq.n	80057e6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 0201 	orr.w	r2, r2, #1
 80057d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d2:	e008      	b.n	80057e6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0201 	orr.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	e000      	b.n	80057e8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	40012c00 	.word	0x40012c00
 80057f8:	40013400 	.word	0x40013400
 80057fc:	40014000 	.word	0x40014000
 8005800:	40014400 	.word	0x40014400
 8005804:	40014800 	.word	0x40014800
 8005808:	40000400 	.word	0x40000400
 800580c:	40000800 	.word	0x40000800
 8005810:	00010007 	.word	0x00010007

08005814 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e049      	b.n	80058ba <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f841 	bl	80058c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3304      	adds	r3, #4
 8005850:	4619      	mov	r1, r3
 8005852:	4610      	mov	r0, r2
 8005854:	f000 fd88 	bl	8006368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
	...

080058d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d104      	bne.n	80058f6 <HAL_TIM_IC_Start_IT+0x1e>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	e023      	b.n	800593e <HAL_TIM_IC_Start_IT+0x66>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d104      	bne.n	8005906 <HAL_TIM_IC_Start_IT+0x2e>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005902:	b2db      	uxtb	r3, r3
 8005904:	e01b      	b.n	800593e <HAL_TIM_IC_Start_IT+0x66>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b08      	cmp	r3, #8
 800590a:	d104      	bne.n	8005916 <HAL_TIM_IC_Start_IT+0x3e>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005912:	b2db      	uxtb	r3, r3
 8005914:	e013      	b.n	800593e <HAL_TIM_IC_Start_IT+0x66>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b0c      	cmp	r3, #12
 800591a:	d104      	bne.n	8005926 <HAL_TIM_IC_Start_IT+0x4e>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005922:	b2db      	uxtb	r3, r3
 8005924:	e00b      	b.n	800593e <HAL_TIM_IC_Start_IT+0x66>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b10      	cmp	r3, #16
 800592a:	d104      	bne.n	8005936 <HAL_TIM_IC_Start_IT+0x5e>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005932:	b2db      	uxtb	r3, r3
 8005934:	e003      	b.n	800593e <HAL_TIM_IC_Start_IT+0x66>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800593c:	b2db      	uxtb	r3, r3
 800593e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d104      	bne.n	8005950 <HAL_TIM_IC_Start_IT+0x78>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800594c:	b2db      	uxtb	r3, r3
 800594e:	e013      	b.n	8005978 <HAL_TIM_IC_Start_IT+0xa0>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b04      	cmp	r3, #4
 8005954:	d104      	bne.n	8005960 <HAL_TIM_IC_Start_IT+0x88>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800595c:	b2db      	uxtb	r3, r3
 800595e:	e00b      	b.n	8005978 <HAL_TIM_IC_Start_IT+0xa0>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	2b08      	cmp	r3, #8
 8005964:	d104      	bne.n	8005970 <HAL_TIM_IC_Start_IT+0x98>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800596c:	b2db      	uxtb	r3, r3
 800596e:	e003      	b.n	8005978 <HAL_TIM_IC_Start_IT+0xa0>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005976:	b2db      	uxtb	r3, r3
 8005978:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800597a:	7bbb      	ldrb	r3, [r7, #14]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d102      	bne.n	8005986 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005980:	7b7b      	ldrb	r3, [r7, #13]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d001      	beq.n	800598a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e0d8      	b.n	8005b3c <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d104      	bne.n	800599a <HAL_TIM_IC_Start_IT+0xc2>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005998:	e023      	b.n	80059e2 <HAL_TIM_IC_Start_IT+0x10a>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b04      	cmp	r3, #4
 800599e:	d104      	bne.n	80059aa <HAL_TIM_IC_Start_IT+0xd2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059a8:	e01b      	b.n	80059e2 <HAL_TIM_IC_Start_IT+0x10a>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d104      	bne.n	80059ba <HAL_TIM_IC_Start_IT+0xe2>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059b8:	e013      	b.n	80059e2 <HAL_TIM_IC_Start_IT+0x10a>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b0c      	cmp	r3, #12
 80059be:	d104      	bne.n	80059ca <HAL_TIM_IC_Start_IT+0xf2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059c8:	e00b      	b.n	80059e2 <HAL_TIM_IC_Start_IT+0x10a>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b10      	cmp	r3, #16
 80059ce:	d104      	bne.n	80059da <HAL_TIM_IC_Start_IT+0x102>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059d8:	e003      	b.n	80059e2 <HAL_TIM_IC_Start_IT+0x10a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2202      	movs	r2, #2
 80059de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <HAL_TIM_IC_Start_IT+0x11a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059f0:	e013      	b.n	8005a1a <HAL_TIM_IC_Start_IT+0x142>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d104      	bne.n	8005a02 <HAL_TIM_IC_Start_IT+0x12a>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a00:	e00b      	b.n	8005a1a <HAL_TIM_IC_Start_IT+0x142>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d104      	bne.n	8005a12 <HAL_TIM_IC_Start_IT+0x13a>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a10:	e003      	b.n	8005a1a <HAL_TIM_IC_Start_IT+0x142>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2202      	movs	r2, #2
 8005a16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b0c      	cmp	r3, #12
 8005a1e:	d841      	bhi.n	8005aa4 <HAL_TIM_IC_Start_IT+0x1cc>
 8005a20:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <HAL_TIM_IC_Start_IT+0x150>)
 8005a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a26:	bf00      	nop
 8005a28:	08005a5d 	.word	0x08005a5d
 8005a2c:	08005aa5 	.word	0x08005aa5
 8005a30:	08005aa5 	.word	0x08005aa5
 8005a34:	08005aa5 	.word	0x08005aa5
 8005a38:	08005a6f 	.word	0x08005a6f
 8005a3c:	08005aa5 	.word	0x08005aa5
 8005a40:	08005aa5 	.word	0x08005aa5
 8005a44:	08005aa5 	.word	0x08005aa5
 8005a48:	08005a81 	.word	0x08005a81
 8005a4c:	08005aa5 	.word	0x08005aa5
 8005a50:	08005aa5 	.word	0x08005aa5
 8005a54:	08005aa5 	.word	0x08005aa5
 8005a58:	08005a93 	.word	0x08005a93
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0202 	orr.w	r2, r2, #2
 8005a6a:	60da      	str	r2, [r3, #12]
      break;
 8005a6c:	e01d      	b.n	8005aaa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0204 	orr.w	r2, r2, #4
 8005a7c:	60da      	str	r2, [r3, #12]
      break;
 8005a7e:	e014      	b.n	8005aaa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0208 	orr.w	r2, r2, #8
 8005a8e:	60da      	str	r2, [r3, #12]
      break;
 8005a90:	e00b      	b.n	8005aaa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f042 0210 	orr.w	r2, r2, #16
 8005aa0:	60da      	str	r2, [r3, #12]
      break;
 8005aa2:	e002      	b.n	8005aaa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d144      	bne.n	8005b3a <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	6839      	ldr	r1, [r7, #0]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 f973 	bl	8006da4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a20      	ldr	r2, [pc, #128]	; (8005b44 <HAL_TIM_IC_Start_IT+0x26c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d018      	beq.n	8005afa <HAL_TIM_IC_Start_IT+0x222>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad0:	d013      	beq.n	8005afa <HAL_TIM_IC_Start_IT+0x222>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a1c      	ldr	r2, [pc, #112]	; (8005b48 <HAL_TIM_IC_Start_IT+0x270>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d00e      	beq.n	8005afa <HAL_TIM_IC_Start_IT+0x222>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a1a      	ldr	r2, [pc, #104]	; (8005b4c <HAL_TIM_IC_Start_IT+0x274>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d009      	beq.n	8005afa <HAL_TIM_IC_Start_IT+0x222>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a19      	ldr	r2, [pc, #100]	; (8005b50 <HAL_TIM_IC_Start_IT+0x278>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d004      	beq.n	8005afa <HAL_TIM_IC_Start_IT+0x222>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a17      	ldr	r2, [pc, #92]	; (8005b54 <HAL_TIM_IC_Start_IT+0x27c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d115      	bne.n	8005b26 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	4b15      	ldr	r3, [pc, #84]	; (8005b58 <HAL_TIM_IC_Start_IT+0x280>)
 8005b02:	4013      	ands	r3, r2
 8005b04:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b06      	cmp	r3, #6
 8005b0a:	d015      	beq.n	8005b38 <HAL_TIM_IC_Start_IT+0x260>
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b12:	d011      	beq.n	8005b38 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b24:	e008      	b.n	8005b38 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0201 	orr.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	e000      	b.n	8005b3a <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b38:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40012c00 	.word	0x40012c00
 8005b48:	40000400 	.word	0x40000400
 8005b4c:	40000800 	.word	0x40000800
 8005b50:	40013400 	.word	0x40013400
 8005b54:	40014000 	.word	0x40014000
 8005b58:	00010007 	.word	0x00010007

08005b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d122      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d11b      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0202 	mvn.w	r2, #2
 8005b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fa fd0a 	bl	80005b8 <HAL_TIM_IC_CaptureCallback>
 8005ba4:	e005      	b.n	8005bb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fbc0 	bl	800632c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fbc7 	bl	8006340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0304 	and.w	r3, r3, #4
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d122      	bne.n	8005c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d11b      	bne.n	8005c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0204 	mvn.w	r2, #4
 8005bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2202      	movs	r2, #2
 8005be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fa fce0 	bl	80005b8 <HAL_TIM_IC_CaptureCallback>
 8005bf8:	e005      	b.n	8005c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fb96 	bl	800632c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fb9d 	bl	8006340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	2b08      	cmp	r3, #8
 8005c18:	d122      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0308 	and.w	r3, r3, #8
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d11b      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0208 	mvn.w	r2, #8
 8005c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2204      	movs	r2, #4
 8005c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7fa fcb6 	bl	80005b8 <HAL_TIM_IC_CaptureCallback>
 8005c4c:	e005      	b.n	8005c5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fb6c 	bl	800632c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fb73 	bl	8006340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0310 	and.w	r3, r3, #16
 8005c6a:	2b10      	cmp	r3, #16
 8005c6c:	d122      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b10      	cmp	r3, #16
 8005c7a:	d11b      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0210 	mvn.w	r2, #16
 8005c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2208      	movs	r2, #8
 8005c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7fa fc8c 	bl	80005b8 <HAL_TIM_IC_CaptureCallback>
 8005ca0:	e005      	b.n	8005cae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fb42 	bl	800632c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fb49 	bl	8006340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d10e      	bne.n	8005ce0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d107      	bne.n	8005ce0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0201 	mvn.w	r2, #1
 8005cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fb1c 	bl	8006318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cea:	2b80      	cmp	r3, #128	; 0x80
 8005cec:	d10e      	bne.n	8005d0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf8:	2b80      	cmp	r3, #128	; 0x80
 8005cfa:	d107      	bne.n	8005d0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f001 f8fc 	bl	8006f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d1a:	d10e      	bne.n	8005d3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d26:	2b80      	cmp	r3, #128	; 0x80
 8005d28:	d107      	bne.n	8005d3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f001 f8ef 	bl	8006f18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d44:	2b40      	cmp	r3, #64	; 0x40
 8005d46:	d10e      	bne.n	8005d66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d107      	bne.n	8005d66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 faf7 	bl	8006354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d10e      	bne.n	8005d92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d107      	bne.n	8005d92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f06f 0220 	mvn.w	r2, #32
 8005d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f001 f8af 	bl	8006ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d92:	bf00      	nop
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b086      	sub	sp, #24
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	60f8      	str	r0, [r7, #12]
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e088      	b.n	8005eca <HAL_TIM_IC_ConfigChannel+0x130>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d11b      	bne.n	8005dfe <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6818      	ldr	r0, [r3, #0]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	6819      	ldr	r1, [r3, #0]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f000 fe2d 	bl	8006a34 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699a      	ldr	r2, [r3, #24]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 020c 	bic.w	r2, r2, #12
 8005de8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6999      	ldr	r1, [r3, #24]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	619a      	str	r2, [r3, #24]
 8005dfc:	e060      	b.n	8005ec0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d11c      	bne.n	8005e3e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6818      	ldr	r0, [r3, #0]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	6819      	ldr	r1, [r3, #0]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f000 fea5 	bl	8006b62 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e26:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6999      	ldr	r1, [r3, #24]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	021a      	lsls	r2, r3, #8
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	619a      	str	r2, [r3, #24]
 8005e3c:	e040      	b.n	8005ec0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b08      	cmp	r3, #8
 8005e42:	d11b      	bne.n	8005e7c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6818      	ldr	r0, [r3, #0]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	6819      	ldr	r1, [r3, #0]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f000 fef2 	bl	8006c3c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	69da      	ldr	r2, [r3, #28]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 020c 	bic.w	r2, r2, #12
 8005e66:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69d9      	ldr	r1, [r3, #28]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	689a      	ldr	r2, [r3, #8]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	61da      	str	r2, [r3, #28]
 8005e7a:	e021      	b.n	8005ec0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b0c      	cmp	r3, #12
 8005e80:	d11c      	bne.n	8005ebc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	6819      	ldr	r1, [r3, #0]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f000 ff0f 	bl	8006cb4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69da      	ldr	r2, [r3, #28]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ea4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69d9      	ldr	r1, [r3, #28]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	021a      	lsls	r2, r3, #8
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	61da      	str	r2, [r3, #28]
 8005eba:	e001      	b.n	8005ec0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e0ff      	b.n	80060f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b14      	cmp	r3, #20
 8005efe:	f200 80f0 	bhi.w	80060e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f02:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08005f5d 	.word	0x08005f5d
 8005f0c:	080060e3 	.word	0x080060e3
 8005f10:	080060e3 	.word	0x080060e3
 8005f14:	080060e3 	.word	0x080060e3
 8005f18:	08005f9d 	.word	0x08005f9d
 8005f1c:	080060e3 	.word	0x080060e3
 8005f20:	080060e3 	.word	0x080060e3
 8005f24:	080060e3 	.word	0x080060e3
 8005f28:	08005fdf 	.word	0x08005fdf
 8005f2c:	080060e3 	.word	0x080060e3
 8005f30:	080060e3 	.word	0x080060e3
 8005f34:	080060e3 	.word	0x080060e3
 8005f38:	0800601f 	.word	0x0800601f
 8005f3c:	080060e3 	.word	0x080060e3
 8005f40:	080060e3 	.word	0x080060e3
 8005f44:	080060e3 	.word	0x080060e3
 8005f48:	08006061 	.word	0x08006061
 8005f4c:	080060e3 	.word	0x080060e3
 8005f50:	080060e3 	.word	0x080060e3
 8005f54:	080060e3 	.word	0x080060e3
 8005f58:	080060a1 	.word	0x080060a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 fa90 	bl	8006488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699a      	ldr	r2, [r3, #24]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0208 	orr.w	r2, r2, #8
 8005f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699a      	ldr	r2, [r3, #24]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0204 	bic.w	r2, r2, #4
 8005f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6999      	ldr	r1, [r3, #24]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	691a      	ldr	r2, [r3, #16]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	619a      	str	r2, [r3, #24]
      break;
 8005f9a:	e0a5      	b.n	80060e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68b9      	ldr	r1, [r7, #8]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 fb00 	bl	80065a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6999      	ldr	r1, [r3, #24]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	021a      	lsls	r2, r3, #8
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	619a      	str	r2, [r3, #24]
      break;
 8005fdc:	e084      	b.n	80060e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68b9      	ldr	r1, [r7, #8]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 fb69 	bl	80066bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69da      	ldr	r2, [r3, #28]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f042 0208 	orr.w	r2, r2, #8
 8005ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0204 	bic.w	r2, r2, #4
 8006008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69d9      	ldr	r1, [r3, #28]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	691a      	ldr	r2, [r3, #16]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	61da      	str	r2, [r3, #28]
      break;
 800601c:	e064      	b.n	80060e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68b9      	ldr	r1, [r7, #8]
 8006024:	4618      	mov	r0, r3
 8006026:	f000 fbd1 	bl	80067cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69da      	ldr	r2, [r3, #28]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69d9      	ldr	r1, [r3, #28]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	021a      	lsls	r2, r3, #8
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	61da      	str	r2, [r3, #28]
      break;
 800605e:	e043      	b.n	80060e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	4618      	mov	r0, r3
 8006068:	f000 fc1a 	bl	80068a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0208 	orr.w	r2, r2, #8
 800607a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0204 	bic.w	r2, r2, #4
 800608a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	691a      	ldr	r2, [r3, #16]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800609e:	e023      	b.n	80060e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68b9      	ldr	r1, [r7, #8]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 fc5e 	bl	8006968 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	021a      	lsls	r2, r3, #8
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060e0:	e002      	b.n	80060e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	75fb      	strb	r3, [r7, #23]
      break;
 80060e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop

080060fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_TIM_ConfigClockSource+0x1c>
 8006114:	2302      	movs	r3, #2
 8006116:	e0b6      	b.n	8006286 <HAL_TIM_ConfigClockSource+0x18a>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006136:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800613a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006142:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006154:	d03e      	beq.n	80061d4 <HAL_TIM_ConfigClockSource+0xd8>
 8006156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800615a:	f200 8087 	bhi.w	800626c <HAL_TIM_ConfigClockSource+0x170>
 800615e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006162:	f000 8086 	beq.w	8006272 <HAL_TIM_ConfigClockSource+0x176>
 8006166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616a:	d87f      	bhi.n	800626c <HAL_TIM_ConfigClockSource+0x170>
 800616c:	2b70      	cmp	r3, #112	; 0x70
 800616e:	d01a      	beq.n	80061a6 <HAL_TIM_ConfigClockSource+0xaa>
 8006170:	2b70      	cmp	r3, #112	; 0x70
 8006172:	d87b      	bhi.n	800626c <HAL_TIM_ConfigClockSource+0x170>
 8006174:	2b60      	cmp	r3, #96	; 0x60
 8006176:	d050      	beq.n	800621a <HAL_TIM_ConfigClockSource+0x11e>
 8006178:	2b60      	cmp	r3, #96	; 0x60
 800617a:	d877      	bhi.n	800626c <HAL_TIM_ConfigClockSource+0x170>
 800617c:	2b50      	cmp	r3, #80	; 0x50
 800617e:	d03c      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0xfe>
 8006180:	2b50      	cmp	r3, #80	; 0x50
 8006182:	d873      	bhi.n	800626c <HAL_TIM_ConfigClockSource+0x170>
 8006184:	2b40      	cmp	r3, #64	; 0x40
 8006186:	d058      	beq.n	800623a <HAL_TIM_ConfigClockSource+0x13e>
 8006188:	2b40      	cmp	r3, #64	; 0x40
 800618a:	d86f      	bhi.n	800626c <HAL_TIM_ConfigClockSource+0x170>
 800618c:	2b30      	cmp	r3, #48	; 0x30
 800618e:	d064      	beq.n	800625a <HAL_TIM_ConfigClockSource+0x15e>
 8006190:	2b30      	cmp	r3, #48	; 0x30
 8006192:	d86b      	bhi.n	800626c <HAL_TIM_ConfigClockSource+0x170>
 8006194:	2b20      	cmp	r3, #32
 8006196:	d060      	beq.n	800625a <HAL_TIM_ConfigClockSource+0x15e>
 8006198:	2b20      	cmp	r3, #32
 800619a:	d867      	bhi.n	800626c <HAL_TIM_ConfigClockSource+0x170>
 800619c:	2b00      	cmp	r3, #0
 800619e:	d05c      	beq.n	800625a <HAL_TIM_ConfigClockSource+0x15e>
 80061a0:	2b10      	cmp	r3, #16
 80061a2:	d05a      	beq.n	800625a <HAL_TIM_ConfigClockSource+0x15e>
 80061a4:	e062      	b.n	800626c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6818      	ldr	r0, [r3, #0]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	6899      	ldr	r1, [r3, #8]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	f000 fdd5 	bl	8006d64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	609a      	str	r2, [r3, #8]
      break;
 80061d2:	e04f      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6818      	ldr	r0, [r3, #0]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	6899      	ldr	r1, [r3, #8]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f000 fdbe 	bl	8006d64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689a      	ldr	r2, [r3, #8]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061f6:	609a      	str	r2, [r3, #8]
      break;
 80061f8:	e03c      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6818      	ldr	r0, [r3, #0]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	6859      	ldr	r1, [r3, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	461a      	mov	r2, r3
 8006208:	f000 fc7c 	bl	8006b04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2150      	movs	r1, #80	; 0x50
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fd8b 	bl	8006d2e <TIM_ITRx_SetConfig>
      break;
 8006218:	e02c      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6818      	ldr	r0, [r3, #0]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	6859      	ldr	r1, [r3, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	461a      	mov	r2, r3
 8006228:	f000 fcd8 	bl	8006bdc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2160      	movs	r1, #96	; 0x60
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fd7b 	bl	8006d2e <TIM_ITRx_SetConfig>
      break;
 8006238:	e01c      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	6859      	ldr	r1, [r3, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	461a      	mov	r2, r3
 8006248:	f000 fc5c 	bl	8006b04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2140      	movs	r1, #64	; 0x40
 8006252:	4618      	mov	r0, r3
 8006254:	f000 fd6b 	bl	8006d2e <TIM_ITRx_SetConfig>
      break;
 8006258:	e00c      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4619      	mov	r1, r3
 8006264:	4610      	mov	r0, r2
 8006266:	f000 fd62 	bl	8006d2e <TIM_ITRx_SetConfig>
      break;
 800626a:	e003      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	73fb      	strb	r3, [r7, #15]
      break;
 8006270:	e000      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006284:	7bfb      	ldrb	r3, [r7, #15]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b0c      	cmp	r3, #12
 80062a2:	d831      	bhi.n	8006308 <HAL_TIM_ReadCapturedValue+0x78>
 80062a4:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <HAL_TIM_ReadCapturedValue+0x1c>)
 80062a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062aa:	bf00      	nop
 80062ac:	080062e1 	.word	0x080062e1
 80062b0:	08006309 	.word	0x08006309
 80062b4:	08006309 	.word	0x08006309
 80062b8:	08006309 	.word	0x08006309
 80062bc:	080062eb 	.word	0x080062eb
 80062c0:	08006309 	.word	0x08006309
 80062c4:	08006309 	.word	0x08006309
 80062c8:	08006309 	.word	0x08006309
 80062cc:	080062f5 	.word	0x080062f5
 80062d0:	08006309 	.word	0x08006309
 80062d4:	08006309 	.word	0x08006309
 80062d8:	08006309 	.word	0x08006309
 80062dc:	080062ff 	.word	0x080062ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e6:	60fb      	str	r3, [r7, #12]

      break;
 80062e8:	e00f      	b.n	800630a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f0:	60fb      	str	r3, [r7, #12]

      break;
 80062f2:	e00a      	b.n	800630a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fa:	60fb      	str	r3, [r7, #12]

      break;
 80062fc:	e005      	b.n	800630a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006304:	60fb      	str	r3, [r7, #12]

      break;
 8006306:	e000      	b.n	800630a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006308:	bf00      	nop
  }

  return tmpreg;
 800630a:	68fb      	ldr	r3, [r7, #12]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a3c      	ldr	r2, [pc, #240]	; (800646c <TIM_Base_SetConfig+0x104>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00f      	beq.n	80063a0 <TIM_Base_SetConfig+0x38>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006386:	d00b      	beq.n	80063a0 <TIM_Base_SetConfig+0x38>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a39      	ldr	r2, [pc, #228]	; (8006470 <TIM_Base_SetConfig+0x108>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d007      	beq.n	80063a0 <TIM_Base_SetConfig+0x38>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a38      	ldr	r2, [pc, #224]	; (8006474 <TIM_Base_SetConfig+0x10c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d003      	beq.n	80063a0 <TIM_Base_SetConfig+0x38>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a37      	ldr	r2, [pc, #220]	; (8006478 <TIM_Base_SetConfig+0x110>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d108      	bne.n	80063b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a2d      	ldr	r2, [pc, #180]	; (800646c <TIM_Base_SetConfig+0x104>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d01b      	beq.n	80063f2 <TIM_Base_SetConfig+0x8a>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c0:	d017      	beq.n	80063f2 <TIM_Base_SetConfig+0x8a>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a2a      	ldr	r2, [pc, #168]	; (8006470 <TIM_Base_SetConfig+0x108>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d013      	beq.n	80063f2 <TIM_Base_SetConfig+0x8a>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a29      	ldr	r2, [pc, #164]	; (8006474 <TIM_Base_SetConfig+0x10c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00f      	beq.n	80063f2 <TIM_Base_SetConfig+0x8a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a28      	ldr	r2, [pc, #160]	; (8006478 <TIM_Base_SetConfig+0x110>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00b      	beq.n	80063f2 <TIM_Base_SetConfig+0x8a>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a27      	ldr	r2, [pc, #156]	; (800647c <TIM_Base_SetConfig+0x114>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d007      	beq.n	80063f2 <TIM_Base_SetConfig+0x8a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a26      	ldr	r2, [pc, #152]	; (8006480 <TIM_Base_SetConfig+0x118>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d003      	beq.n	80063f2 <TIM_Base_SetConfig+0x8a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a25      	ldr	r2, [pc, #148]	; (8006484 <TIM_Base_SetConfig+0x11c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d108      	bne.n	8006404 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	4313      	orrs	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a10      	ldr	r2, [pc, #64]	; (800646c <TIM_Base_SetConfig+0x104>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00f      	beq.n	8006450 <TIM_Base_SetConfig+0xe8>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a11      	ldr	r2, [pc, #68]	; (8006478 <TIM_Base_SetConfig+0x110>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d00b      	beq.n	8006450 <TIM_Base_SetConfig+0xe8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a10      	ldr	r2, [pc, #64]	; (800647c <TIM_Base_SetConfig+0x114>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d007      	beq.n	8006450 <TIM_Base_SetConfig+0xe8>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a0f      	ldr	r2, [pc, #60]	; (8006480 <TIM_Base_SetConfig+0x118>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d003      	beq.n	8006450 <TIM_Base_SetConfig+0xe8>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a0e      	ldr	r2, [pc, #56]	; (8006484 <TIM_Base_SetConfig+0x11c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d103      	bne.n	8006458 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	615a      	str	r2, [r3, #20]
}
 800645e:	bf00      	nop
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	40012c00 	.word	0x40012c00
 8006470:	40000400 	.word	0x40000400
 8006474:	40000800 	.word	0x40000800
 8006478:	40013400 	.word	0x40013400
 800647c:	40014000 	.word	0x40014000
 8006480:	40014400 	.word	0x40014400
 8006484:	40014800 	.word	0x40014800

08006488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	f023 0201 	bic.w	r2, r3, #1
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0303 	bic.w	r3, r3, #3
 80064c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f023 0302 	bic.w	r3, r3, #2
 80064d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a2c      	ldr	r2, [pc, #176]	; (8006594 <TIM_OC1_SetConfig+0x10c>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00f      	beq.n	8006508 <TIM_OC1_SetConfig+0x80>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a2b      	ldr	r2, [pc, #172]	; (8006598 <TIM_OC1_SetConfig+0x110>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00b      	beq.n	8006508 <TIM_OC1_SetConfig+0x80>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a2a      	ldr	r2, [pc, #168]	; (800659c <TIM_OC1_SetConfig+0x114>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d007      	beq.n	8006508 <TIM_OC1_SetConfig+0x80>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a29      	ldr	r2, [pc, #164]	; (80065a0 <TIM_OC1_SetConfig+0x118>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d003      	beq.n	8006508 <TIM_OC1_SetConfig+0x80>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a28      	ldr	r2, [pc, #160]	; (80065a4 <TIM_OC1_SetConfig+0x11c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d10c      	bne.n	8006522 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f023 0308 	bic.w	r3, r3, #8
 800650e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	4313      	orrs	r3, r2
 8006518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f023 0304 	bic.w	r3, r3, #4
 8006520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a1b      	ldr	r2, [pc, #108]	; (8006594 <TIM_OC1_SetConfig+0x10c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d00f      	beq.n	800654a <TIM_OC1_SetConfig+0xc2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a1a      	ldr	r2, [pc, #104]	; (8006598 <TIM_OC1_SetConfig+0x110>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d00b      	beq.n	800654a <TIM_OC1_SetConfig+0xc2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a19      	ldr	r2, [pc, #100]	; (800659c <TIM_OC1_SetConfig+0x114>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d007      	beq.n	800654a <TIM_OC1_SetConfig+0xc2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a18      	ldr	r2, [pc, #96]	; (80065a0 <TIM_OC1_SetConfig+0x118>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d003      	beq.n	800654a <TIM_OC1_SetConfig+0xc2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a17      	ldr	r2, [pc, #92]	; (80065a4 <TIM_OC1_SetConfig+0x11c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d111      	bne.n	800656e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	4313      	orrs	r3, r2
 8006562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	4313      	orrs	r3, r2
 800656c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	621a      	str	r2, [r3, #32]
}
 8006588:	bf00      	nop
 800658a:	371c      	adds	r7, #28
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	40012c00 	.word	0x40012c00
 8006598:	40013400 	.word	0x40013400
 800659c:	40014000 	.word	0x40014000
 80065a0:	40014400 	.word	0x40014400
 80065a4:	40014800 	.word	0x40014800

080065a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	f023 0210 	bic.w	r2, r3, #16
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	021b      	lsls	r3, r3, #8
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f023 0320 	bic.w	r3, r3, #32
 80065f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	011b      	lsls	r3, r3, #4
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a28      	ldr	r2, [pc, #160]	; (80066a8 <TIM_OC2_SetConfig+0x100>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d003      	beq.n	8006614 <TIM_OC2_SetConfig+0x6c>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a27      	ldr	r2, [pc, #156]	; (80066ac <TIM_OC2_SetConfig+0x104>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d10d      	bne.n	8006630 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800661a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	011b      	lsls	r3, r3, #4
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	4313      	orrs	r3, r2
 8006626:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800662e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a1d      	ldr	r2, [pc, #116]	; (80066a8 <TIM_OC2_SetConfig+0x100>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d00f      	beq.n	8006658 <TIM_OC2_SetConfig+0xb0>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a1c      	ldr	r2, [pc, #112]	; (80066ac <TIM_OC2_SetConfig+0x104>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d00b      	beq.n	8006658 <TIM_OC2_SetConfig+0xb0>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a1b      	ldr	r2, [pc, #108]	; (80066b0 <TIM_OC2_SetConfig+0x108>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d007      	beq.n	8006658 <TIM_OC2_SetConfig+0xb0>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a1a      	ldr	r2, [pc, #104]	; (80066b4 <TIM_OC2_SetConfig+0x10c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d003      	beq.n	8006658 <TIM_OC2_SetConfig+0xb0>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a19      	ldr	r2, [pc, #100]	; (80066b8 <TIM_OC2_SetConfig+0x110>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d113      	bne.n	8006680 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800665e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006666:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4313      	orrs	r3, r2
 8006672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	621a      	str	r2, [r3, #32]
}
 800669a:	bf00      	nop
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	40012c00 	.word	0x40012c00
 80066ac:	40013400 	.word	0x40013400
 80066b0:	40014000 	.word	0x40014000
 80066b4:	40014400 	.word	0x40014400
 80066b8:	40014800 	.word	0x40014800

080066bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0303 	bic.w	r3, r3, #3
 80066f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a27      	ldr	r2, [pc, #156]	; (80067b8 <TIM_OC3_SetConfig+0xfc>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d003      	beq.n	8006726 <TIM_OC3_SetConfig+0x6a>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a26      	ldr	r2, [pc, #152]	; (80067bc <TIM_OC3_SetConfig+0x100>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d10d      	bne.n	8006742 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800672c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	021b      	lsls	r3, r3, #8
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	4313      	orrs	r3, r2
 8006738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006740:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a1c      	ldr	r2, [pc, #112]	; (80067b8 <TIM_OC3_SetConfig+0xfc>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00f      	beq.n	800676a <TIM_OC3_SetConfig+0xae>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a1b      	ldr	r2, [pc, #108]	; (80067bc <TIM_OC3_SetConfig+0x100>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d00b      	beq.n	800676a <TIM_OC3_SetConfig+0xae>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a1a      	ldr	r2, [pc, #104]	; (80067c0 <TIM_OC3_SetConfig+0x104>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d007      	beq.n	800676a <TIM_OC3_SetConfig+0xae>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a19      	ldr	r2, [pc, #100]	; (80067c4 <TIM_OC3_SetConfig+0x108>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d003      	beq.n	800676a <TIM_OC3_SetConfig+0xae>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a18      	ldr	r2, [pc, #96]	; (80067c8 <TIM_OC3_SetConfig+0x10c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d113      	bne.n	8006792 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	4313      	orrs	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	011b      	lsls	r3, r3, #4
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	4313      	orrs	r3, r2
 8006790:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	621a      	str	r2, [r3, #32]
}
 80067ac:	bf00      	nop
 80067ae:	371c      	adds	r7, #28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	40012c00 	.word	0x40012c00
 80067bc:	40013400 	.word	0x40013400
 80067c0:	40014000 	.word	0x40014000
 80067c4:	40014400 	.word	0x40014400
 80067c8:	40014800 	.word	0x40014800

080067cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	021b      	lsls	r3, r3, #8
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4313      	orrs	r3, r2
 8006812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800681a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	031b      	lsls	r3, r3, #12
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	4313      	orrs	r3, r2
 8006826:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a18      	ldr	r2, [pc, #96]	; (800688c <TIM_OC4_SetConfig+0xc0>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d00f      	beq.n	8006850 <TIM_OC4_SetConfig+0x84>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a17      	ldr	r2, [pc, #92]	; (8006890 <TIM_OC4_SetConfig+0xc4>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00b      	beq.n	8006850 <TIM_OC4_SetConfig+0x84>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a16      	ldr	r2, [pc, #88]	; (8006894 <TIM_OC4_SetConfig+0xc8>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d007      	beq.n	8006850 <TIM_OC4_SetConfig+0x84>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a15      	ldr	r2, [pc, #84]	; (8006898 <TIM_OC4_SetConfig+0xcc>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d003      	beq.n	8006850 <TIM_OC4_SetConfig+0x84>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a14      	ldr	r2, [pc, #80]	; (800689c <TIM_OC4_SetConfig+0xd0>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d109      	bne.n	8006864 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006856:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	019b      	lsls	r3, r3, #6
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	621a      	str	r2, [r3, #32]
}
 800687e:	bf00      	nop
 8006880:	371c      	adds	r7, #28
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40012c00 	.word	0x40012c00
 8006890:	40013400 	.word	0x40013400
 8006894:	40014000 	.word	0x40014000
 8006898:	40014400 	.word	0x40014400
 800689c:	40014800 	.word	0x40014800

080068a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80068e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	041b      	lsls	r3, r3, #16
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a17      	ldr	r2, [pc, #92]	; (8006954 <TIM_OC5_SetConfig+0xb4>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d00f      	beq.n	800691a <TIM_OC5_SetConfig+0x7a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a16      	ldr	r2, [pc, #88]	; (8006958 <TIM_OC5_SetConfig+0xb8>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00b      	beq.n	800691a <TIM_OC5_SetConfig+0x7a>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a15      	ldr	r2, [pc, #84]	; (800695c <TIM_OC5_SetConfig+0xbc>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d007      	beq.n	800691a <TIM_OC5_SetConfig+0x7a>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a14      	ldr	r2, [pc, #80]	; (8006960 <TIM_OC5_SetConfig+0xc0>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d003      	beq.n	800691a <TIM_OC5_SetConfig+0x7a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a13      	ldr	r2, [pc, #76]	; (8006964 <TIM_OC5_SetConfig+0xc4>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d109      	bne.n	800692e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006920:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	021b      	lsls	r3, r3, #8
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	4313      	orrs	r3, r2
 800692c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	621a      	str	r2, [r3, #32]
}
 8006948:	bf00      	nop
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	40012c00 	.word	0x40012c00
 8006958:	40013400 	.word	0x40013400
 800695c:	40014000 	.word	0x40014000
 8006960:	40014400 	.word	0x40014400
 8006964:	40014800 	.word	0x40014800

08006968 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800698e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800699a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	021b      	lsls	r3, r3, #8
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	051b      	lsls	r3, r3, #20
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a18      	ldr	r2, [pc, #96]	; (8006a20 <TIM_OC6_SetConfig+0xb8>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00f      	beq.n	80069e4 <TIM_OC6_SetConfig+0x7c>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a17      	ldr	r2, [pc, #92]	; (8006a24 <TIM_OC6_SetConfig+0xbc>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d00b      	beq.n	80069e4 <TIM_OC6_SetConfig+0x7c>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a16      	ldr	r2, [pc, #88]	; (8006a28 <TIM_OC6_SetConfig+0xc0>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d007      	beq.n	80069e4 <TIM_OC6_SetConfig+0x7c>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a15      	ldr	r2, [pc, #84]	; (8006a2c <TIM_OC6_SetConfig+0xc4>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d003      	beq.n	80069e4 <TIM_OC6_SetConfig+0x7c>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a14      	ldr	r2, [pc, #80]	; (8006a30 <TIM_OC6_SetConfig+0xc8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d109      	bne.n	80069f8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	029b      	lsls	r3, r3, #10
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	621a      	str	r2, [r3, #32]
}
 8006a12:	bf00      	nop
 8006a14:	371c      	adds	r7, #28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	40012c00 	.word	0x40012c00
 8006a24:	40013400 	.word	0x40013400
 8006a28:	40014000 	.word	0x40014000
 8006a2c:	40014400 	.word	0x40014400
 8006a30:	40014800 	.word	0x40014800

08006a34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
 8006a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	f023 0201 	bic.w	r2, r3, #1
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4a24      	ldr	r2, [pc, #144]	; (8006af0 <TIM_TI1_SetConfig+0xbc>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d013      	beq.n	8006a8a <TIM_TI1_SetConfig+0x56>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a68:	d00f      	beq.n	8006a8a <TIM_TI1_SetConfig+0x56>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4a21      	ldr	r2, [pc, #132]	; (8006af4 <TIM_TI1_SetConfig+0xc0>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d00b      	beq.n	8006a8a <TIM_TI1_SetConfig+0x56>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4a20      	ldr	r2, [pc, #128]	; (8006af8 <TIM_TI1_SetConfig+0xc4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d007      	beq.n	8006a8a <TIM_TI1_SetConfig+0x56>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4a1f      	ldr	r2, [pc, #124]	; (8006afc <TIM_TI1_SetConfig+0xc8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d003      	beq.n	8006a8a <TIM_TI1_SetConfig+0x56>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4a1e      	ldr	r2, [pc, #120]	; (8006b00 <TIM_TI1_SetConfig+0xcc>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d101      	bne.n	8006a8e <TIM_TI1_SetConfig+0x5a>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e000      	b.n	8006a90 <TIM_TI1_SetConfig+0x5c>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d008      	beq.n	8006aa6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f023 0303 	bic.w	r3, r3, #3
 8006a9a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	e003      	b.n	8006aae <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f043 0301 	orr.w	r3, r3, #1
 8006aac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ab4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	011b      	lsls	r3, r3, #4
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f023 030a 	bic.w	r3, r3, #10
 8006ac8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f003 030a 	and.w	r3, r3, #10
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	621a      	str	r2, [r3, #32]
}
 8006ae2:	bf00      	nop
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	40012c00 	.word	0x40012c00
 8006af4:	40000400 	.word	0x40000400
 8006af8:	40000800 	.word	0x40000800
 8006afc:	40013400 	.word	0x40013400
 8006b00:	40014000 	.word	0x40014000

08006b04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	f023 0201 	bic.w	r2, r3, #1
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f023 030a 	bic.w	r3, r3, #10
 8006b40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	621a      	str	r2, [r3, #32]
}
 8006b56:	bf00      	nop
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b087      	sub	sp, #28
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	607a      	str	r2, [r7, #4]
 8006b6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	f023 0210 	bic.w	r2, r3, #16
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	021b      	lsls	r3, r3, #8
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ba0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	031b      	lsls	r3, r3, #12
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bb4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	011b      	lsls	r3, r3, #4
 8006bba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	621a      	str	r2, [r3, #32]
}
 8006bd0:	bf00      	nop
 8006bd2:	371c      	adds	r7, #28
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	f023 0210 	bic.w	r2, r3, #16
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	031b      	lsls	r3, r3, #12
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	621a      	str	r2, [r3, #32]
}
 8006c30:	bf00      	nop
 8006c32:	371c      	adds	r7, #28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f023 0303 	bic.w	r3, r3, #3
 8006c68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	011b      	lsls	r3, r3, #4
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006c8c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	021b      	lsls	r3, r3, #8
 8006c92:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	621a      	str	r2, [r3, #32]
}
 8006ca8:	bf00      	nop
 8006caa:	371c      	adds	r7, #28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	021b      	lsls	r3, r3, #8
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cf2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	031b      	lsls	r3, r3, #12
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006d06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	031b      	lsls	r3, r3, #12
 8006d0c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	621a      	str	r2, [r3, #32]
}
 8006d22:	bf00      	nop
 8006d24:	371c      	adds	r7, #28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b085      	sub	sp, #20
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	f043 0307 	orr.w	r3, r3, #7
 8006d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	609a      	str	r2, [r3, #8]
}
 8006d58:	bf00      	nop
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b087      	sub	sp, #28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	021a      	lsls	r2, r3, #8
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	431a      	orrs	r2, r3
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	609a      	str	r2, [r3, #8]
}
 8006d98:	bf00      	nop
 8006d9a:	371c      	adds	r7, #28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f003 031f 	and.w	r3, r3, #31
 8006db6:	2201      	movs	r2, #1
 8006db8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6a1a      	ldr	r2, [r3, #32]
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	43db      	mvns	r3, r3
 8006dc6:	401a      	ands	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6a1a      	ldr	r2, [r3, #32]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f003 031f 	and.w	r3, r3, #31
 8006dd6:	6879      	ldr	r1, [r7, #4]
 8006dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	621a      	str	r2, [r3, #32]
}
 8006de2:	bf00      	nop
 8006de4:	371c      	adds	r7, #28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
	...

08006df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d101      	bne.n	8006e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e04:	2302      	movs	r3, #2
 8006e06:	e063      	b.n	8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a2b      	ldr	r2, [pc, #172]	; (8006edc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d004      	beq.n	8006e3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a2a      	ldr	r2, [pc, #168]	; (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d108      	bne.n	8006e4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a1b      	ldr	r2, [pc, #108]	; (8006edc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d018      	beq.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7a:	d013      	beq.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a18      	ldr	r2, [pc, #96]	; (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00e      	beq.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a17      	ldr	r2, [pc, #92]	; (8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d009      	beq.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a12      	ldr	r2, [pc, #72]	; (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d004      	beq.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a13      	ldr	r2, [pc, #76]	; (8006eec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d10c      	bne.n	8006ebe <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	40012c00 	.word	0x40012c00
 8006ee0:	40013400 	.word	0x40013400
 8006ee4:	40000400 	.word	0x40000400
 8006ee8:	40000800 	.word	0x40000800
 8006eec:	40014000 	.word	0x40014000

08006ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006f34:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006f38:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	43db      	mvns	r3, r3
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006f62:	b084      	sub	sp, #16
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	f107 0014 	add.w	r0, r7, #20
 8006f70:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	b004      	add	sp, #16
 8006fa2:	4770      	bx	lr

08006fa4 <atoi>:
 8006fa4:	220a      	movs	r2, #10
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	f000 ba12 	b.w	80073d0 <strtol>

08006fac <__errno>:
 8006fac:	4b01      	ldr	r3, [pc, #4]	; (8006fb4 <__errno+0x8>)
 8006fae:	6818      	ldr	r0, [r3, #0]
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	20000100 	.word	0x20000100

08006fb8 <__libc_init_array>:
 8006fb8:	b570      	push	{r4, r5, r6, lr}
 8006fba:	4d0d      	ldr	r5, [pc, #52]	; (8006ff0 <__libc_init_array+0x38>)
 8006fbc:	4c0d      	ldr	r4, [pc, #52]	; (8006ff4 <__libc_init_array+0x3c>)
 8006fbe:	1b64      	subs	r4, r4, r5
 8006fc0:	10a4      	asrs	r4, r4, #2
 8006fc2:	2600      	movs	r6, #0
 8006fc4:	42a6      	cmp	r6, r4
 8006fc6:	d109      	bne.n	8006fdc <__libc_init_array+0x24>
 8006fc8:	4d0b      	ldr	r5, [pc, #44]	; (8006ff8 <__libc_init_array+0x40>)
 8006fca:	4c0c      	ldr	r4, [pc, #48]	; (8006ffc <__libc_init_array+0x44>)
 8006fcc:	f000 fd5a 	bl	8007a84 <_init>
 8006fd0:	1b64      	subs	r4, r4, r5
 8006fd2:	10a4      	asrs	r4, r4, #2
 8006fd4:	2600      	movs	r6, #0
 8006fd6:	42a6      	cmp	r6, r4
 8006fd8:	d105      	bne.n	8006fe6 <__libc_init_array+0x2e>
 8006fda:	bd70      	pop	{r4, r5, r6, pc}
 8006fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fe0:	4798      	blx	r3
 8006fe2:	3601      	adds	r6, #1
 8006fe4:	e7ee      	b.n	8006fc4 <__libc_init_array+0xc>
 8006fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fea:	4798      	blx	r3
 8006fec:	3601      	adds	r6, #1
 8006fee:	e7f2      	b.n	8006fd6 <__libc_init_array+0x1e>
 8006ff0:	08007cdc 	.word	0x08007cdc
 8006ff4:	08007cdc 	.word	0x08007cdc
 8006ff8:	08007cdc 	.word	0x08007cdc
 8006ffc:	08007ce0 	.word	0x08007ce0

08007000 <malloc>:
 8007000:	4b02      	ldr	r3, [pc, #8]	; (800700c <malloc+0xc>)
 8007002:	4601      	mov	r1, r0
 8007004:	6818      	ldr	r0, [r3, #0]
 8007006:	f000 b88d 	b.w	8007124 <_malloc_r>
 800700a:	bf00      	nop
 800700c:	20000100 	.word	0x20000100

08007010 <free>:
 8007010:	4b02      	ldr	r3, [pc, #8]	; (800701c <free+0xc>)
 8007012:	4601      	mov	r1, r0
 8007014:	6818      	ldr	r0, [r3, #0]
 8007016:	f000 b819 	b.w	800704c <_free_r>
 800701a:	bf00      	nop
 800701c:	20000100 	.word	0x20000100

08007020 <memcpy>:
 8007020:	440a      	add	r2, r1
 8007022:	4291      	cmp	r1, r2
 8007024:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007028:	d100      	bne.n	800702c <memcpy+0xc>
 800702a:	4770      	bx	lr
 800702c:	b510      	push	{r4, lr}
 800702e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007036:	4291      	cmp	r1, r2
 8007038:	d1f9      	bne.n	800702e <memcpy+0xe>
 800703a:	bd10      	pop	{r4, pc}

0800703c <memset>:
 800703c:	4402      	add	r2, r0
 800703e:	4603      	mov	r3, r0
 8007040:	4293      	cmp	r3, r2
 8007042:	d100      	bne.n	8007046 <memset+0xa>
 8007044:	4770      	bx	lr
 8007046:	f803 1b01 	strb.w	r1, [r3], #1
 800704a:	e7f9      	b.n	8007040 <memset+0x4>

0800704c <_free_r>:
 800704c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800704e:	2900      	cmp	r1, #0
 8007050:	d044      	beq.n	80070dc <_free_r+0x90>
 8007052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007056:	9001      	str	r0, [sp, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	f1a1 0404 	sub.w	r4, r1, #4
 800705e:	bfb8      	it	lt
 8007060:	18e4      	addlt	r4, r4, r3
 8007062:	f000 f9bf 	bl	80073e4 <__malloc_lock>
 8007066:	4a1e      	ldr	r2, [pc, #120]	; (80070e0 <_free_r+0x94>)
 8007068:	9801      	ldr	r0, [sp, #4]
 800706a:	6813      	ldr	r3, [r2, #0]
 800706c:	b933      	cbnz	r3, 800707c <_free_r+0x30>
 800706e:	6063      	str	r3, [r4, #4]
 8007070:	6014      	str	r4, [r2, #0]
 8007072:	b003      	add	sp, #12
 8007074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007078:	f000 b9ba 	b.w	80073f0 <__malloc_unlock>
 800707c:	42a3      	cmp	r3, r4
 800707e:	d908      	bls.n	8007092 <_free_r+0x46>
 8007080:	6825      	ldr	r5, [r4, #0]
 8007082:	1961      	adds	r1, r4, r5
 8007084:	428b      	cmp	r3, r1
 8007086:	bf01      	itttt	eq
 8007088:	6819      	ldreq	r1, [r3, #0]
 800708a:	685b      	ldreq	r3, [r3, #4]
 800708c:	1949      	addeq	r1, r1, r5
 800708e:	6021      	streq	r1, [r4, #0]
 8007090:	e7ed      	b.n	800706e <_free_r+0x22>
 8007092:	461a      	mov	r2, r3
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	b10b      	cbz	r3, 800709c <_free_r+0x50>
 8007098:	42a3      	cmp	r3, r4
 800709a:	d9fa      	bls.n	8007092 <_free_r+0x46>
 800709c:	6811      	ldr	r1, [r2, #0]
 800709e:	1855      	adds	r5, r2, r1
 80070a0:	42a5      	cmp	r5, r4
 80070a2:	d10b      	bne.n	80070bc <_free_r+0x70>
 80070a4:	6824      	ldr	r4, [r4, #0]
 80070a6:	4421      	add	r1, r4
 80070a8:	1854      	adds	r4, r2, r1
 80070aa:	42a3      	cmp	r3, r4
 80070ac:	6011      	str	r1, [r2, #0]
 80070ae:	d1e0      	bne.n	8007072 <_free_r+0x26>
 80070b0:	681c      	ldr	r4, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	6053      	str	r3, [r2, #4]
 80070b6:	4421      	add	r1, r4
 80070b8:	6011      	str	r1, [r2, #0]
 80070ba:	e7da      	b.n	8007072 <_free_r+0x26>
 80070bc:	d902      	bls.n	80070c4 <_free_r+0x78>
 80070be:	230c      	movs	r3, #12
 80070c0:	6003      	str	r3, [r0, #0]
 80070c2:	e7d6      	b.n	8007072 <_free_r+0x26>
 80070c4:	6825      	ldr	r5, [r4, #0]
 80070c6:	1961      	adds	r1, r4, r5
 80070c8:	428b      	cmp	r3, r1
 80070ca:	bf04      	itt	eq
 80070cc:	6819      	ldreq	r1, [r3, #0]
 80070ce:	685b      	ldreq	r3, [r3, #4]
 80070d0:	6063      	str	r3, [r4, #4]
 80070d2:	bf04      	itt	eq
 80070d4:	1949      	addeq	r1, r1, r5
 80070d6:	6021      	streq	r1, [r4, #0]
 80070d8:	6054      	str	r4, [r2, #4]
 80070da:	e7ca      	b.n	8007072 <_free_r+0x26>
 80070dc:	b003      	add	sp, #12
 80070de:	bd30      	pop	{r4, r5, pc}
 80070e0:	200009a4 	.word	0x200009a4

080070e4 <sbrk_aligned>:
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	4e0e      	ldr	r6, [pc, #56]	; (8007120 <sbrk_aligned+0x3c>)
 80070e8:	460c      	mov	r4, r1
 80070ea:	6831      	ldr	r1, [r6, #0]
 80070ec:	4605      	mov	r5, r0
 80070ee:	b911      	cbnz	r1, 80070f6 <sbrk_aligned+0x12>
 80070f0:	f000 f88c 	bl	800720c <_sbrk_r>
 80070f4:	6030      	str	r0, [r6, #0]
 80070f6:	4621      	mov	r1, r4
 80070f8:	4628      	mov	r0, r5
 80070fa:	f000 f887 	bl	800720c <_sbrk_r>
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	d00a      	beq.n	8007118 <sbrk_aligned+0x34>
 8007102:	1cc4      	adds	r4, r0, #3
 8007104:	f024 0403 	bic.w	r4, r4, #3
 8007108:	42a0      	cmp	r0, r4
 800710a:	d007      	beq.n	800711c <sbrk_aligned+0x38>
 800710c:	1a21      	subs	r1, r4, r0
 800710e:	4628      	mov	r0, r5
 8007110:	f000 f87c 	bl	800720c <_sbrk_r>
 8007114:	3001      	adds	r0, #1
 8007116:	d101      	bne.n	800711c <sbrk_aligned+0x38>
 8007118:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800711c:	4620      	mov	r0, r4
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	200009a8 	.word	0x200009a8

08007124 <_malloc_r>:
 8007124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007128:	1ccd      	adds	r5, r1, #3
 800712a:	f025 0503 	bic.w	r5, r5, #3
 800712e:	3508      	adds	r5, #8
 8007130:	2d0c      	cmp	r5, #12
 8007132:	bf38      	it	cc
 8007134:	250c      	movcc	r5, #12
 8007136:	2d00      	cmp	r5, #0
 8007138:	4607      	mov	r7, r0
 800713a:	db01      	blt.n	8007140 <_malloc_r+0x1c>
 800713c:	42a9      	cmp	r1, r5
 800713e:	d905      	bls.n	800714c <_malloc_r+0x28>
 8007140:	230c      	movs	r3, #12
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	2600      	movs	r6, #0
 8007146:	4630      	mov	r0, r6
 8007148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800714c:	4e2e      	ldr	r6, [pc, #184]	; (8007208 <_malloc_r+0xe4>)
 800714e:	f000 f949 	bl	80073e4 <__malloc_lock>
 8007152:	6833      	ldr	r3, [r6, #0]
 8007154:	461c      	mov	r4, r3
 8007156:	bb34      	cbnz	r4, 80071a6 <_malloc_r+0x82>
 8007158:	4629      	mov	r1, r5
 800715a:	4638      	mov	r0, r7
 800715c:	f7ff ffc2 	bl	80070e4 <sbrk_aligned>
 8007160:	1c43      	adds	r3, r0, #1
 8007162:	4604      	mov	r4, r0
 8007164:	d14d      	bne.n	8007202 <_malloc_r+0xde>
 8007166:	6834      	ldr	r4, [r6, #0]
 8007168:	4626      	mov	r6, r4
 800716a:	2e00      	cmp	r6, #0
 800716c:	d140      	bne.n	80071f0 <_malloc_r+0xcc>
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	4631      	mov	r1, r6
 8007172:	4638      	mov	r0, r7
 8007174:	eb04 0803 	add.w	r8, r4, r3
 8007178:	f000 f848 	bl	800720c <_sbrk_r>
 800717c:	4580      	cmp	r8, r0
 800717e:	d13a      	bne.n	80071f6 <_malloc_r+0xd2>
 8007180:	6821      	ldr	r1, [r4, #0]
 8007182:	3503      	adds	r5, #3
 8007184:	1a6d      	subs	r5, r5, r1
 8007186:	f025 0503 	bic.w	r5, r5, #3
 800718a:	3508      	adds	r5, #8
 800718c:	2d0c      	cmp	r5, #12
 800718e:	bf38      	it	cc
 8007190:	250c      	movcc	r5, #12
 8007192:	4629      	mov	r1, r5
 8007194:	4638      	mov	r0, r7
 8007196:	f7ff ffa5 	bl	80070e4 <sbrk_aligned>
 800719a:	3001      	adds	r0, #1
 800719c:	d02b      	beq.n	80071f6 <_malloc_r+0xd2>
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	442b      	add	r3, r5
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	e00e      	b.n	80071c4 <_malloc_r+0xa0>
 80071a6:	6822      	ldr	r2, [r4, #0]
 80071a8:	1b52      	subs	r2, r2, r5
 80071aa:	d41e      	bmi.n	80071ea <_malloc_r+0xc6>
 80071ac:	2a0b      	cmp	r2, #11
 80071ae:	d916      	bls.n	80071de <_malloc_r+0xba>
 80071b0:	1961      	adds	r1, r4, r5
 80071b2:	42a3      	cmp	r3, r4
 80071b4:	6025      	str	r5, [r4, #0]
 80071b6:	bf18      	it	ne
 80071b8:	6059      	strne	r1, [r3, #4]
 80071ba:	6863      	ldr	r3, [r4, #4]
 80071bc:	bf08      	it	eq
 80071be:	6031      	streq	r1, [r6, #0]
 80071c0:	5162      	str	r2, [r4, r5]
 80071c2:	604b      	str	r3, [r1, #4]
 80071c4:	4638      	mov	r0, r7
 80071c6:	f104 060b 	add.w	r6, r4, #11
 80071ca:	f000 f911 	bl	80073f0 <__malloc_unlock>
 80071ce:	f026 0607 	bic.w	r6, r6, #7
 80071d2:	1d23      	adds	r3, r4, #4
 80071d4:	1af2      	subs	r2, r6, r3
 80071d6:	d0b6      	beq.n	8007146 <_malloc_r+0x22>
 80071d8:	1b9b      	subs	r3, r3, r6
 80071da:	50a3      	str	r3, [r4, r2]
 80071dc:	e7b3      	b.n	8007146 <_malloc_r+0x22>
 80071de:	6862      	ldr	r2, [r4, #4]
 80071e0:	42a3      	cmp	r3, r4
 80071e2:	bf0c      	ite	eq
 80071e4:	6032      	streq	r2, [r6, #0]
 80071e6:	605a      	strne	r2, [r3, #4]
 80071e8:	e7ec      	b.n	80071c4 <_malloc_r+0xa0>
 80071ea:	4623      	mov	r3, r4
 80071ec:	6864      	ldr	r4, [r4, #4]
 80071ee:	e7b2      	b.n	8007156 <_malloc_r+0x32>
 80071f0:	4634      	mov	r4, r6
 80071f2:	6876      	ldr	r6, [r6, #4]
 80071f4:	e7b9      	b.n	800716a <_malloc_r+0x46>
 80071f6:	230c      	movs	r3, #12
 80071f8:	603b      	str	r3, [r7, #0]
 80071fa:	4638      	mov	r0, r7
 80071fc:	f000 f8f8 	bl	80073f0 <__malloc_unlock>
 8007200:	e7a1      	b.n	8007146 <_malloc_r+0x22>
 8007202:	6025      	str	r5, [r4, #0]
 8007204:	e7de      	b.n	80071c4 <_malloc_r+0xa0>
 8007206:	bf00      	nop
 8007208:	200009a4 	.word	0x200009a4

0800720c <_sbrk_r>:
 800720c:	b538      	push	{r3, r4, r5, lr}
 800720e:	4d06      	ldr	r5, [pc, #24]	; (8007228 <_sbrk_r+0x1c>)
 8007210:	2300      	movs	r3, #0
 8007212:	4604      	mov	r4, r0
 8007214:	4608      	mov	r0, r1
 8007216:	602b      	str	r3, [r5, #0]
 8007218:	f7fb f87a 	bl	8002310 <_sbrk>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d102      	bne.n	8007226 <_sbrk_r+0x1a>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	b103      	cbz	r3, 8007226 <_sbrk_r+0x1a>
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	200009ac 	.word	0x200009ac

0800722c <siprintf>:
 800722c:	b40e      	push	{r1, r2, r3}
 800722e:	b500      	push	{lr}
 8007230:	b09c      	sub	sp, #112	; 0x70
 8007232:	ab1d      	add	r3, sp, #116	; 0x74
 8007234:	9002      	str	r0, [sp, #8]
 8007236:	9006      	str	r0, [sp, #24]
 8007238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800723c:	4809      	ldr	r0, [pc, #36]	; (8007264 <siprintf+0x38>)
 800723e:	9107      	str	r1, [sp, #28]
 8007240:	9104      	str	r1, [sp, #16]
 8007242:	4909      	ldr	r1, [pc, #36]	; (8007268 <siprintf+0x3c>)
 8007244:	f853 2b04 	ldr.w	r2, [r3], #4
 8007248:	9105      	str	r1, [sp, #20]
 800724a:	6800      	ldr	r0, [r0, #0]
 800724c:	9301      	str	r3, [sp, #4]
 800724e:	a902      	add	r1, sp, #8
 8007250:	f000 f930 	bl	80074b4 <_svfiprintf_r>
 8007254:	9b02      	ldr	r3, [sp, #8]
 8007256:	2200      	movs	r2, #0
 8007258:	701a      	strb	r2, [r3, #0]
 800725a:	b01c      	add	sp, #112	; 0x70
 800725c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007260:	b003      	add	sp, #12
 8007262:	4770      	bx	lr
 8007264:	20000100 	.word	0x20000100
 8007268:	ffff0208 	.word	0xffff0208

0800726c <strcpy>:
 800726c:	4603      	mov	r3, r0
 800726e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007272:	f803 2b01 	strb.w	r2, [r3], #1
 8007276:	2a00      	cmp	r2, #0
 8007278:	d1f9      	bne.n	800726e <strcpy+0x2>
 800727a:	4770      	bx	lr

0800727c <strncmp>:
 800727c:	b510      	push	{r4, lr}
 800727e:	b17a      	cbz	r2, 80072a0 <strncmp+0x24>
 8007280:	4603      	mov	r3, r0
 8007282:	3901      	subs	r1, #1
 8007284:	1884      	adds	r4, r0, r2
 8007286:	f813 0b01 	ldrb.w	r0, [r3], #1
 800728a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800728e:	4290      	cmp	r0, r2
 8007290:	d101      	bne.n	8007296 <strncmp+0x1a>
 8007292:	42a3      	cmp	r3, r4
 8007294:	d101      	bne.n	800729a <strncmp+0x1e>
 8007296:	1a80      	subs	r0, r0, r2
 8007298:	bd10      	pop	{r4, pc}
 800729a:	2800      	cmp	r0, #0
 800729c:	d1f3      	bne.n	8007286 <strncmp+0xa>
 800729e:	e7fa      	b.n	8007296 <strncmp+0x1a>
 80072a0:	4610      	mov	r0, r2
 80072a2:	e7f9      	b.n	8007298 <strncmp+0x1c>

080072a4 <strncpy>:
 80072a4:	b510      	push	{r4, lr}
 80072a6:	3901      	subs	r1, #1
 80072a8:	4603      	mov	r3, r0
 80072aa:	b132      	cbz	r2, 80072ba <strncpy+0x16>
 80072ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80072b0:	f803 4b01 	strb.w	r4, [r3], #1
 80072b4:	3a01      	subs	r2, #1
 80072b6:	2c00      	cmp	r4, #0
 80072b8:	d1f7      	bne.n	80072aa <strncpy+0x6>
 80072ba:	441a      	add	r2, r3
 80072bc:	2100      	movs	r1, #0
 80072be:	4293      	cmp	r3, r2
 80072c0:	d100      	bne.n	80072c4 <strncpy+0x20>
 80072c2:	bd10      	pop	{r4, pc}
 80072c4:	f803 1b01 	strb.w	r1, [r3], #1
 80072c8:	e7f9      	b.n	80072be <strncpy+0x1a>
	...

080072cc <_strtol_l.constprop.0>:
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d2:	d001      	beq.n	80072d8 <_strtol_l.constprop.0+0xc>
 80072d4:	2b24      	cmp	r3, #36	; 0x24
 80072d6:	d906      	bls.n	80072e6 <_strtol_l.constprop.0+0x1a>
 80072d8:	f7ff fe68 	bl	8006fac <__errno>
 80072dc:	2316      	movs	r3, #22
 80072de:	6003      	str	r3, [r0, #0]
 80072e0:	2000      	movs	r0, #0
 80072e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80073cc <_strtol_l.constprop.0+0x100>
 80072ea:	460d      	mov	r5, r1
 80072ec:	462e      	mov	r6, r5
 80072ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072f2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80072f6:	f017 0708 	ands.w	r7, r7, #8
 80072fa:	d1f7      	bne.n	80072ec <_strtol_l.constprop.0+0x20>
 80072fc:	2c2d      	cmp	r4, #45	; 0x2d
 80072fe:	d132      	bne.n	8007366 <_strtol_l.constprop.0+0x9a>
 8007300:	782c      	ldrb	r4, [r5, #0]
 8007302:	2701      	movs	r7, #1
 8007304:	1cb5      	adds	r5, r6, #2
 8007306:	2b00      	cmp	r3, #0
 8007308:	d05b      	beq.n	80073c2 <_strtol_l.constprop.0+0xf6>
 800730a:	2b10      	cmp	r3, #16
 800730c:	d109      	bne.n	8007322 <_strtol_l.constprop.0+0x56>
 800730e:	2c30      	cmp	r4, #48	; 0x30
 8007310:	d107      	bne.n	8007322 <_strtol_l.constprop.0+0x56>
 8007312:	782c      	ldrb	r4, [r5, #0]
 8007314:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007318:	2c58      	cmp	r4, #88	; 0x58
 800731a:	d14d      	bne.n	80073b8 <_strtol_l.constprop.0+0xec>
 800731c:	786c      	ldrb	r4, [r5, #1]
 800731e:	2310      	movs	r3, #16
 8007320:	3502      	adds	r5, #2
 8007322:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007326:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800732a:	f04f 0c00 	mov.w	ip, #0
 800732e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007332:	4666      	mov	r6, ip
 8007334:	fb03 8a19 	mls	sl, r3, r9, r8
 8007338:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800733c:	f1be 0f09 	cmp.w	lr, #9
 8007340:	d816      	bhi.n	8007370 <_strtol_l.constprop.0+0xa4>
 8007342:	4674      	mov	r4, lr
 8007344:	42a3      	cmp	r3, r4
 8007346:	dd24      	ble.n	8007392 <_strtol_l.constprop.0+0xc6>
 8007348:	f1bc 0f00 	cmp.w	ip, #0
 800734c:	db1e      	blt.n	800738c <_strtol_l.constprop.0+0xc0>
 800734e:	45b1      	cmp	r9, r6
 8007350:	d31c      	bcc.n	800738c <_strtol_l.constprop.0+0xc0>
 8007352:	d101      	bne.n	8007358 <_strtol_l.constprop.0+0x8c>
 8007354:	45a2      	cmp	sl, r4
 8007356:	db19      	blt.n	800738c <_strtol_l.constprop.0+0xc0>
 8007358:	fb06 4603 	mla	r6, r6, r3, r4
 800735c:	f04f 0c01 	mov.w	ip, #1
 8007360:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007364:	e7e8      	b.n	8007338 <_strtol_l.constprop.0+0x6c>
 8007366:	2c2b      	cmp	r4, #43	; 0x2b
 8007368:	bf04      	itt	eq
 800736a:	782c      	ldrbeq	r4, [r5, #0]
 800736c:	1cb5      	addeq	r5, r6, #2
 800736e:	e7ca      	b.n	8007306 <_strtol_l.constprop.0+0x3a>
 8007370:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007374:	f1be 0f19 	cmp.w	lr, #25
 8007378:	d801      	bhi.n	800737e <_strtol_l.constprop.0+0xb2>
 800737a:	3c37      	subs	r4, #55	; 0x37
 800737c:	e7e2      	b.n	8007344 <_strtol_l.constprop.0+0x78>
 800737e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007382:	f1be 0f19 	cmp.w	lr, #25
 8007386:	d804      	bhi.n	8007392 <_strtol_l.constprop.0+0xc6>
 8007388:	3c57      	subs	r4, #87	; 0x57
 800738a:	e7db      	b.n	8007344 <_strtol_l.constprop.0+0x78>
 800738c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007390:	e7e6      	b.n	8007360 <_strtol_l.constprop.0+0x94>
 8007392:	f1bc 0f00 	cmp.w	ip, #0
 8007396:	da05      	bge.n	80073a4 <_strtol_l.constprop.0+0xd8>
 8007398:	2322      	movs	r3, #34	; 0x22
 800739a:	6003      	str	r3, [r0, #0]
 800739c:	4646      	mov	r6, r8
 800739e:	b942      	cbnz	r2, 80073b2 <_strtol_l.constprop.0+0xe6>
 80073a0:	4630      	mov	r0, r6
 80073a2:	e79e      	b.n	80072e2 <_strtol_l.constprop.0+0x16>
 80073a4:	b107      	cbz	r7, 80073a8 <_strtol_l.constprop.0+0xdc>
 80073a6:	4276      	negs	r6, r6
 80073a8:	2a00      	cmp	r2, #0
 80073aa:	d0f9      	beq.n	80073a0 <_strtol_l.constprop.0+0xd4>
 80073ac:	f1bc 0f00 	cmp.w	ip, #0
 80073b0:	d000      	beq.n	80073b4 <_strtol_l.constprop.0+0xe8>
 80073b2:	1e69      	subs	r1, r5, #1
 80073b4:	6011      	str	r1, [r2, #0]
 80073b6:	e7f3      	b.n	80073a0 <_strtol_l.constprop.0+0xd4>
 80073b8:	2430      	movs	r4, #48	; 0x30
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1b1      	bne.n	8007322 <_strtol_l.constprop.0+0x56>
 80073be:	2308      	movs	r3, #8
 80073c0:	e7af      	b.n	8007322 <_strtol_l.constprop.0+0x56>
 80073c2:	2c30      	cmp	r4, #48	; 0x30
 80073c4:	d0a5      	beq.n	8007312 <_strtol_l.constprop.0+0x46>
 80073c6:	230a      	movs	r3, #10
 80073c8:	e7ab      	b.n	8007322 <_strtol_l.constprop.0+0x56>
 80073ca:	bf00      	nop
 80073cc:	08007ba9 	.word	0x08007ba9

080073d0 <strtol>:
 80073d0:	4613      	mov	r3, r2
 80073d2:	460a      	mov	r2, r1
 80073d4:	4601      	mov	r1, r0
 80073d6:	4802      	ldr	r0, [pc, #8]	; (80073e0 <strtol+0x10>)
 80073d8:	6800      	ldr	r0, [r0, #0]
 80073da:	f7ff bf77 	b.w	80072cc <_strtol_l.constprop.0>
 80073de:	bf00      	nop
 80073e0:	20000100 	.word	0x20000100

080073e4 <__malloc_lock>:
 80073e4:	4801      	ldr	r0, [pc, #4]	; (80073ec <__malloc_lock+0x8>)
 80073e6:	f000 baf9 	b.w	80079dc <__retarget_lock_acquire_recursive>
 80073ea:	bf00      	nop
 80073ec:	200009b0 	.word	0x200009b0

080073f0 <__malloc_unlock>:
 80073f0:	4801      	ldr	r0, [pc, #4]	; (80073f8 <__malloc_unlock+0x8>)
 80073f2:	f000 baf4 	b.w	80079de <__retarget_lock_release_recursive>
 80073f6:	bf00      	nop
 80073f8:	200009b0 	.word	0x200009b0

080073fc <__ssputs_r>:
 80073fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007400:	688e      	ldr	r6, [r1, #8]
 8007402:	429e      	cmp	r6, r3
 8007404:	4682      	mov	sl, r0
 8007406:	460c      	mov	r4, r1
 8007408:	4690      	mov	r8, r2
 800740a:	461f      	mov	r7, r3
 800740c:	d838      	bhi.n	8007480 <__ssputs_r+0x84>
 800740e:	898a      	ldrh	r2, [r1, #12]
 8007410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007414:	d032      	beq.n	800747c <__ssputs_r+0x80>
 8007416:	6825      	ldr	r5, [r4, #0]
 8007418:	6909      	ldr	r1, [r1, #16]
 800741a:	eba5 0901 	sub.w	r9, r5, r1
 800741e:	6965      	ldr	r5, [r4, #20]
 8007420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007424:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007428:	3301      	adds	r3, #1
 800742a:	444b      	add	r3, r9
 800742c:	106d      	asrs	r5, r5, #1
 800742e:	429d      	cmp	r5, r3
 8007430:	bf38      	it	cc
 8007432:	461d      	movcc	r5, r3
 8007434:	0553      	lsls	r3, r2, #21
 8007436:	d531      	bpl.n	800749c <__ssputs_r+0xa0>
 8007438:	4629      	mov	r1, r5
 800743a:	f7ff fe73 	bl	8007124 <_malloc_r>
 800743e:	4606      	mov	r6, r0
 8007440:	b950      	cbnz	r0, 8007458 <__ssputs_r+0x5c>
 8007442:	230c      	movs	r3, #12
 8007444:	f8ca 3000 	str.w	r3, [sl]
 8007448:	89a3      	ldrh	r3, [r4, #12]
 800744a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800744e:	81a3      	strh	r3, [r4, #12]
 8007450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007458:	6921      	ldr	r1, [r4, #16]
 800745a:	464a      	mov	r2, r9
 800745c:	f7ff fde0 	bl	8007020 <memcpy>
 8007460:	89a3      	ldrh	r3, [r4, #12]
 8007462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800746a:	81a3      	strh	r3, [r4, #12]
 800746c:	6126      	str	r6, [r4, #16]
 800746e:	6165      	str	r5, [r4, #20]
 8007470:	444e      	add	r6, r9
 8007472:	eba5 0509 	sub.w	r5, r5, r9
 8007476:	6026      	str	r6, [r4, #0]
 8007478:	60a5      	str	r5, [r4, #8]
 800747a:	463e      	mov	r6, r7
 800747c:	42be      	cmp	r6, r7
 800747e:	d900      	bls.n	8007482 <__ssputs_r+0x86>
 8007480:	463e      	mov	r6, r7
 8007482:	6820      	ldr	r0, [r4, #0]
 8007484:	4632      	mov	r2, r6
 8007486:	4641      	mov	r1, r8
 8007488:	f000 faaa 	bl	80079e0 <memmove>
 800748c:	68a3      	ldr	r3, [r4, #8]
 800748e:	1b9b      	subs	r3, r3, r6
 8007490:	60a3      	str	r3, [r4, #8]
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	4433      	add	r3, r6
 8007496:	6023      	str	r3, [r4, #0]
 8007498:	2000      	movs	r0, #0
 800749a:	e7db      	b.n	8007454 <__ssputs_r+0x58>
 800749c:	462a      	mov	r2, r5
 800749e:	f000 fab9 	bl	8007a14 <_realloc_r>
 80074a2:	4606      	mov	r6, r0
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d1e1      	bne.n	800746c <__ssputs_r+0x70>
 80074a8:	6921      	ldr	r1, [r4, #16]
 80074aa:	4650      	mov	r0, sl
 80074ac:	f7ff fdce 	bl	800704c <_free_r>
 80074b0:	e7c7      	b.n	8007442 <__ssputs_r+0x46>
	...

080074b4 <_svfiprintf_r>:
 80074b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b8:	4698      	mov	r8, r3
 80074ba:	898b      	ldrh	r3, [r1, #12]
 80074bc:	061b      	lsls	r3, r3, #24
 80074be:	b09d      	sub	sp, #116	; 0x74
 80074c0:	4607      	mov	r7, r0
 80074c2:	460d      	mov	r5, r1
 80074c4:	4614      	mov	r4, r2
 80074c6:	d50e      	bpl.n	80074e6 <_svfiprintf_r+0x32>
 80074c8:	690b      	ldr	r3, [r1, #16]
 80074ca:	b963      	cbnz	r3, 80074e6 <_svfiprintf_r+0x32>
 80074cc:	2140      	movs	r1, #64	; 0x40
 80074ce:	f7ff fe29 	bl	8007124 <_malloc_r>
 80074d2:	6028      	str	r0, [r5, #0]
 80074d4:	6128      	str	r0, [r5, #16]
 80074d6:	b920      	cbnz	r0, 80074e2 <_svfiprintf_r+0x2e>
 80074d8:	230c      	movs	r3, #12
 80074da:	603b      	str	r3, [r7, #0]
 80074dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074e0:	e0d1      	b.n	8007686 <_svfiprintf_r+0x1d2>
 80074e2:	2340      	movs	r3, #64	; 0x40
 80074e4:	616b      	str	r3, [r5, #20]
 80074e6:	2300      	movs	r3, #0
 80074e8:	9309      	str	r3, [sp, #36]	; 0x24
 80074ea:	2320      	movs	r3, #32
 80074ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80074f4:	2330      	movs	r3, #48	; 0x30
 80074f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80076a0 <_svfiprintf_r+0x1ec>
 80074fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074fe:	f04f 0901 	mov.w	r9, #1
 8007502:	4623      	mov	r3, r4
 8007504:	469a      	mov	sl, r3
 8007506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800750a:	b10a      	cbz	r2, 8007510 <_svfiprintf_r+0x5c>
 800750c:	2a25      	cmp	r2, #37	; 0x25
 800750e:	d1f9      	bne.n	8007504 <_svfiprintf_r+0x50>
 8007510:	ebba 0b04 	subs.w	fp, sl, r4
 8007514:	d00b      	beq.n	800752e <_svfiprintf_r+0x7a>
 8007516:	465b      	mov	r3, fp
 8007518:	4622      	mov	r2, r4
 800751a:	4629      	mov	r1, r5
 800751c:	4638      	mov	r0, r7
 800751e:	f7ff ff6d 	bl	80073fc <__ssputs_r>
 8007522:	3001      	adds	r0, #1
 8007524:	f000 80aa 	beq.w	800767c <_svfiprintf_r+0x1c8>
 8007528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800752a:	445a      	add	r2, fp
 800752c:	9209      	str	r2, [sp, #36]	; 0x24
 800752e:	f89a 3000 	ldrb.w	r3, [sl]
 8007532:	2b00      	cmp	r3, #0
 8007534:	f000 80a2 	beq.w	800767c <_svfiprintf_r+0x1c8>
 8007538:	2300      	movs	r3, #0
 800753a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800753e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007542:	f10a 0a01 	add.w	sl, sl, #1
 8007546:	9304      	str	r3, [sp, #16]
 8007548:	9307      	str	r3, [sp, #28]
 800754a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800754e:	931a      	str	r3, [sp, #104]	; 0x68
 8007550:	4654      	mov	r4, sl
 8007552:	2205      	movs	r2, #5
 8007554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007558:	4851      	ldr	r0, [pc, #324]	; (80076a0 <_svfiprintf_r+0x1ec>)
 800755a:	f7f8 fe39 	bl	80001d0 <memchr>
 800755e:	9a04      	ldr	r2, [sp, #16]
 8007560:	b9d8      	cbnz	r0, 800759a <_svfiprintf_r+0xe6>
 8007562:	06d0      	lsls	r0, r2, #27
 8007564:	bf44      	itt	mi
 8007566:	2320      	movmi	r3, #32
 8007568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800756c:	0711      	lsls	r1, r2, #28
 800756e:	bf44      	itt	mi
 8007570:	232b      	movmi	r3, #43	; 0x2b
 8007572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007576:	f89a 3000 	ldrb.w	r3, [sl]
 800757a:	2b2a      	cmp	r3, #42	; 0x2a
 800757c:	d015      	beq.n	80075aa <_svfiprintf_r+0xf6>
 800757e:	9a07      	ldr	r2, [sp, #28]
 8007580:	4654      	mov	r4, sl
 8007582:	2000      	movs	r0, #0
 8007584:	f04f 0c0a 	mov.w	ip, #10
 8007588:	4621      	mov	r1, r4
 800758a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800758e:	3b30      	subs	r3, #48	; 0x30
 8007590:	2b09      	cmp	r3, #9
 8007592:	d94e      	bls.n	8007632 <_svfiprintf_r+0x17e>
 8007594:	b1b0      	cbz	r0, 80075c4 <_svfiprintf_r+0x110>
 8007596:	9207      	str	r2, [sp, #28]
 8007598:	e014      	b.n	80075c4 <_svfiprintf_r+0x110>
 800759a:	eba0 0308 	sub.w	r3, r0, r8
 800759e:	fa09 f303 	lsl.w	r3, r9, r3
 80075a2:	4313      	orrs	r3, r2
 80075a4:	9304      	str	r3, [sp, #16]
 80075a6:	46a2      	mov	sl, r4
 80075a8:	e7d2      	b.n	8007550 <_svfiprintf_r+0x9c>
 80075aa:	9b03      	ldr	r3, [sp, #12]
 80075ac:	1d19      	adds	r1, r3, #4
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	9103      	str	r1, [sp, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	bfbb      	ittet	lt
 80075b6:	425b      	neglt	r3, r3
 80075b8:	f042 0202 	orrlt.w	r2, r2, #2
 80075bc:	9307      	strge	r3, [sp, #28]
 80075be:	9307      	strlt	r3, [sp, #28]
 80075c0:	bfb8      	it	lt
 80075c2:	9204      	strlt	r2, [sp, #16]
 80075c4:	7823      	ldrb	r3, [r4, #0]
 80075c6:	2b2e      	cmp	r3, #46	; 0x2e
 80075c8:	d10c      	bne.n	80075e4 <_svfiprintf_r+0x130>
 80075ca:	7863      	ldrb	r3, [r4, #1]
 80075cc:	2b2a      	cmp	r3, #42	; 0x2a
 80075ce:	d135      	bne.n	800763c <_svfiprintf_r+0x188>
 80075d0:	9b03      	ldr	r3, [sp, #12]
 80075d2:	1d1a      	adds	r2, r3, #4
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	9203      	str	r2, [sp, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bfb8      	it	lt
 80075dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80075e0:	3402      	adds	r4, #2
 80075e2:	9305      	str	r3, [sp, #20]
 80075e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80076b0 <_svfiprintf_r+0x1fc>
 80075e8:	7821      	ldrb	r1, [r4, #0]
 80075ea:	2203      	movs	r2, #3
 80075ec:	4650      	mov	r0, sl
 80075ee:	f7f8 fdef 	bl	80001d0 <memchr>
 80075f2:	b140      	cbz	r0, 8007606 <_svfiprintf_r+0x152>
 80075f4:	2340      	movs	r3, #64	; 0x40
 80075f6:	eba0 000a 	sub.w	r0, r0, sl
 80075fa:	fa03 f000 	lsl.w	r0, r3, r0
 80075fe:	9b04      	ldr	r3, [sp, #16]
 8007600:	4303      	orrs	r3, r0
 8007602:	3401      	adds	r4, #1
 8007604:	9304      	str	r3, [sp, #16]
 8007606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800760a:	4826      	ldr	r0, [pc, #152]	; (80076a4 <_svfiprintf_r+0x1f0>)
 800760c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007610:	2206      	movs	r2, #6
 8007612:	f7f8 fddd 	bl	80001d0 <memchr>
 8007616:	2800      	cmp	r0, #0
 8007618:	d038      	beq.n	800768c <_svfiprintf_r+0x1d8>
 800761a:	4b23      	ldr	r3, [pc, #140]	; (80076a8 <_svfiprintf_r+0x1f4>)
 800761c:	bb1b      	cbnz	r3, 8007666 <_svfiprintf_r+0x1b2>
 800761e:	9b03      	ldr	r3, [sp, #12]
 8007620:	3307      	adds	r3, #7
 8007622:	f023 0307 	bic.w	r3, r3, #7
 8007626:	3308      	adds	r3, #8
 8007628:	9303      	str	r3, [sp, #12]
 800762a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800762c:	4433      	add	r3, r6
 800762e:	9309      	str	r3, [sp, #36]	; 0x24
 8007630:	e767      	b.n	8007502 <_svfiprintf_r+0x4e>
 8007632:	fb0c 3202 	mla	r2, ip, r2, r3
 8007636:	460c      	mov	r4, r1
 8007638:	2001      	movs	r0, #1
 800763a:	e7a5      	b.n	8007588 <_svfiprintf_r+0xd4>
 800763c:	2300      	movs	r3, #0
 800763e:	3401      	adds	r4, #1
 8007640:	9305      	str	r3, [sp, #20]
 8007642:	4619      	mov	r1, r3
 8007644:	f04f 0c0a 	mov.w	ip, #10
 8007648:	4620      	mov	r0, r4
 800764a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800764e:	3a30      	subs	r2, #48	; 0x30
 8007650:	2a09      	cmp	r2, #9
 8007652:	d903      	bls.n	800765c <_svfiprintf_r+0x1a8>
 8007654:	2b00      	cmp	r3, #0
 8007656:	d0c5      	beq.n	80075e4 <_svfiprintf_r+0x130>
 8007658:	9105      	str	r1, [sp, #20]
 800765a:	e7c3      	b.n	80075e4 <_svfiprintf_r+0x130>
 800765c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007660:	4604      	mov	r4, r0
 8007662:	2301      	movs	r3, #1
 8007664:	e7f0      	b.n	8007648 <_svfiprintf_r+0x194>
 8007666:	ab03      	add	r3, sp, #12
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	462a      	mov	r2, r5
 800766c:	4b0f      	ldr	r3, [pc, #60]	; (80076ac <_svfiprintf_r+0x1f8>)
 800766e:	a904      	add	r1, sp, #16
 8007670:	4638      	mov	r0, r7
 8007672:	f3af 8000 	nop.w
 8007676:	1c42      	adds	r2, r0, #1
 8007678:	4606      	mov	r6, r0
 800767a:	d1d6      	bne.n	800762a <_svfiprintf_r+0x176>
 800767c:	89ab      	ldrh	r3, [r5, #12]
 800767e:	065b      	lsls	r3, r3, #25
 8007680:	f53f af2c 	bmi.w	80074dc <_svfiprintf_r+0x28>
 8007684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007686:	b01d      	add	sp, #116	; 0x74
 8007688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768c:	ab03      	add	r3, sp, #12
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	462a      	mov	r2, r5
 8007692:	4b06      	ldr	r3, [pc, #24]	; (80076ac <_svfiprintf_r+0x1f8>)
 8007694:	a904      	add	r1, sp, #16
 8007696:	4638      	mov	r0, r7
 8007698:	f000 f87a 	bl	8007790 <_printf_i>
 800769c:	e7eb      	b.n	8007676 <_svfiprintf_r+0x1c2>
 800769e:	bf00      	nop
 80076a0:	08007ca9 	.word	0x08007ca9
 80076a4:	08007cb3 	.word	0x08007cb3
 80076a8:	00000000 	.word	0x00000000
 80076ac:	080073fd 	.word	0x080073fd
 80076b0:	08007caf 	.word	0x08007caf

080076b4 <_printf_common>:
 80076b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b8:	4616      	mov	r6, r2
 80076ba:	4699      	mov	r9, r3
 80076bc:	688a      	ldr	r2, [r1, #8]
 80076be:	690b      	ldr	r3, [r1, #16]
 80076c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076c4:	4293      	cmp	r3, r2
 80076c6:	bfb8      	it	lt
 80076c8:	4613      	movlt	r3, r2
 80076ca:	6033      	str	r3, [r6, #0]
 80076cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076d0:	4607      	mov	r7, r0
 80076d2:	460c      	mov	r4, r1
 80076d4:	b10a      	cbz	r2, 80076da <_printf_common+0x26>
 80076d6:	3301      	adds	r3, #1
 80076d8:	6033      	str	r3, [r6, #0]
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	0699      	lsls	r1, r3, #26
 80076de:	bf42      	ittt	mi
 80076e0:	6833      	ldrmi	r3, [r6, #0]
 80076e2:	3302      	addmi	r3, #2
 80076e4:	6033      	strmi	r3, [r6, #0]
 80076e6:	6825      	ldr	r5, [r4, #0]
 80076e8:	f015 0506 	ands.w	r5, r5, #6
 80076ec:	d106      	bne.n	80076fc <_printf_common+0x48>
 80076ee:	f104 0a19 	add.w	sl, r4, #25
 80076f2:	68e3      	ldr	r3, [r4, #12]
 80076f4:	6832      	ldr	r2, [r6, #0]
 80076f6:	1a9b      	subs	r3, r3, r2
 80076f8:	42ab      	cmp	r3, r5
 80076fa:	dc26      	bgt.n	800774a <_printf_common+0x96>
 80076fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007700:	1e13      	subs	r3, r2, #0
 8007702:	6822      	ldr	r2, [r4, #0]
 8007704:	bf18      	it	ne
 8007706:	2301      	movne	r3, #1
 8007708:	0692      	lsls	r2, r2, #26
 800770a:	d42b      	bmi.n	8007764 <_printf_common+0xb0>
 800770c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007710:	4649      	mov	r1, r9
 8007712:	4638      	mov	r0, r7
 8007714:	47c0      	blx	r8
 8007716:	3001      	adds	r0, #1
 8007718:	d01e      	beq.n	8007758 <_printf_common+0xa4>
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	68e5      	ldr	r5, [r4, #12]
 800771e:	6832      	ldr	r2, [r6, #0]
 8007720:	f003 0306 	and.w	r3, r3, #6
 8007724:	2b04      	cmp	r3, #4
 8007726:	bf08      	it	eq
 8007728:	1aad      	subeq	r5, r5, r2
 800772a:	68a3      	ldr	r3, [r4, #8]
 800772c:	6922      	ldr	r2, [r4, #16]
 800772e:	bf0c      	ite	eq
 8007730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007734:	2500      	movne	r5, #0
 8007736:	4293      	cmp	r3, r2
 8007738:	bfc4      	itt	gt
 800773a:	1a9b      	subgt	r3, r3, r2
 800773c:	18ed      	addgt	r5, r5, r3
 800773e:	2600      	movs	r6, #0
 8007740:	341a      	adds	r4, #26
 8007742:	42b5      	cmp	r5, r6
 8007744:	d11a      	bne.n	800777c <_printf_common+0xc8>
 8007746:	2000      	movs	r0, #0
 8007748:	e008      	b.n	800775c <_printf_common+0xa8>
 800774a:	2301      	movs	r3, #1
 800774c:	4652      	mov	r2, sl
 800774e:	4649      	mov	r1, r9
 8007750:	4638      	mov	r0, r7
 8007752:	47c0      	blx	r8
 8007754:	3001      	adds	r0, #1
 8007756:	d103      	bne.n	8007760 <_printf_common+0xac>
 8007758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800775c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007760:	3501      	adds	r5, #1
 8007762:	e7c6      	b.n	80076f2 <_printf_common+0x3e>
 8007764:	18e1      	adds	r1, r4, r3
 8007766:	1c5a      	adds	r2, r3, #1
 8007768:	2030      	movs	r0, #48	; 0x30
 800776a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800776e:	4422      	add	r2, r4
 8007770:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007774:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007778:	3302      	adds	r3, #2
 800777a:	e7c7      	b.n	800770c <_printf_common+0x58>
 800777c:	2301      	movs	r3, #1
 800777e:	4622      	mov	r2, r4
 8007780:	4649      	mov	r1, r9
 8007782:	4638      	mov	r0, r7
 8007784:	47c0      	blx	r8
 8007786:	3001      	adds	r0, #1
 8007788:	d0e6      	beq.n	8007758 <_printf_common+0xa4>
 800778a:	3601      	adds	r6, #1
 800778c:	e7d9      	b.n	8007742 <_printf_common+0x8e>
	...

08007790 <_printf_i>:
 8007790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007794:	7e0f      	ldrb	r7, [r1, #24]
 8007796:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007798:	2f78      	cmp	r7, #120	; 0x78
 800779a:	4691      	mov	r9, r2
 800779c:	4680      	mov	r8, r0
 800779e:	460c      	mov	r4, r1
 80077a0:	469a      	mov	sl, r3
 80077a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077a6:	d807      	bhi.n	80077b8 <_printf_i+0x28>
 80077a8:	2f62      	cmp	r7, #98	; 0x62
 80077aa:	d80a      	bhi.n	80077c2 <_printf_i+0x32>
 80077ac:	2f00      	cmp	r7, #0
 80077ae:	f000 80d8 	beq.w	8007962 <_printf_i+0x1d2>
 80077b2:	2f58      	cmp	r7, #88	; 0x58
 80077b4:	f000 80a3 	beq.w	80078fe <_printf_i+0x16e>
 80077b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077c0:	e03a      	b.n	8007838 <_printf_i+0xa8>
 80077c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077c6:	2b15      	cmp	r3, #21
 80077c8:	d8f6      	bhi.n	80077b8 <_printf_i+0x28>
 80077ca:	a101      	add	r1, pc, #4	; (adr r1, 80077d0 <_printf_i+0x40>)
 80077cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077d0:	08007829 	.word	0x08007829
 80077d4:	0800783d 	.word	0x0800783d
 80077d8:	080077b9 	.word	0x080077b9
 80077dc:	080077b9 	.word	0x080077b9
 80077e0:	080077b9 	.word	0x080077b9
 80077e4:	080077b9 	.word	0x080077b9
 80077e8:	0800783d 	.word	0x0800783d
 80077ec:	080077b9 	.word	0x080077b9
 80077f0:	080077b9 	.word	0x080077b9
 80077f4:	080077b9 	.word	0x080077b9
 80077f8:	080077b9 	.word	0x080077b9
 80077fc:	08007949 	.word	0x08007949
 8007800:	0800786d 	.word	0x0800786d
 8007804:	0800792b 	.word	0x0800792b
 8007808:	080077b9 	.word	0x080077b9
 800780c:	080077b9 	.word	0x080077b9
 8007810:	0800796b 	.word	0x0800796b
 8007814:	080077b9 	.word	0x080077b9
 8007818:	0800786d 	.word	0x0800786d
 800781c:	080077b9 	.word	0x080077b9
 8007820:	080077b9 	.word	0x080077b9
 8007824:	08007933 	.word	0x08007933
 8007828:	682b      	ldr	r3, [r5, #0]
 800782a:	1d1a      	adds	r2, r3, #4
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	602a      	str	r2, [r5, #0]
 8007830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007838:	2301      	movs	r3, #1
 800783a:	e0a3      	b.n	8007984 <_printf_i+0x1f4>
 800783c:	6820      	ldr	r0, [r4, #0]
 800783e:	6829      	ldr	r1, [r5, #0]
 8007840:	0606      	lsls	r6, r0, #24
 8007842:	f101 0304 	add.w	r3, r1, #4
 8007846:	d50a      	bpl.n	800785e <_printf_i+0xce>
 8007848:	680e      	ldr	r6, [r1, #0]
 800784a:	602b      	str	r3, [r5, #0]
 800784c:	2e00      	cmp	r6, #0
 800784e:	da03      	bge.n	8007858 <_printf_i+0xc8>
 8007850:	232d      	movs	r3, #45	; 0x2d
 8007852:	4276      	negs	r6, r6
 8007854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007858:	485e      	ldr	r0, [pc, #376]	; (80079d4 <_printf_i+0x244>)
 800785a:	230a      	movs	r3, #10
 800785c:	e019      	b.n	8007892 <_printf_i+0x102>
 800785e:	680e      	ldr	r6, [r1, #0]
 8007860:	602b      	str	r3, [r5, #0]
 8007862:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007866:	bf18      	it	ne
 8007868:	b236      	sxthne	r6, r6
 800786a:	e7ef      	b.n	800784c <_printf_i+0xbc>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	6820      	ldr	r0, [r4, #0]
 8007870:	1d19      	adds	r1, r3, #4
 8007872:	6029      	str	r1, [r5, #0]
 8007874:	0601      	lsls	r1, r0, #24
 8007876:	d501      	bpl.n	800787c <_printf_i+0xec>
 8007878:	681e      	ldr	r6, [r3, #0]
 800787a:	e002      	b.n	8007882 <_printf_i+0xf2>
 800787c:	0646      	lsls	r6, r0, #25
 800787e:	d5fb      	bpl.n	8007878 <_printf_i+0xe8>
 8007880:	881e      	ldrh	r6, [r3, #0]
 8007882:	4854      	ldr	r0, [pc, #336]	; (80079d4 <_printf_i+0x244>)
 8007884:	2f6f      	cmp	r7, #111	; 0x6f
 8007886:	bf0c      	ite	eq
 8007888:	2308      	moveq	r3, #8
 800788a:	230a      	movne	r3, #10
 800788c:	2100      	movs	r1, #0
 800788e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007892:	6865      	ldr	r5, [r4, #4]
 8007894:	60a5      	str	r5, [r4, #8]
 8007896:	2d00      	cmp	r5, #0
 8007898:	bfa2      	ittt	ge
 800789a:	6821      	ldrge	r1, [r4, #0]
 800789c:	f021 0104 	bicge.w	r1, r1, #4
 80078a0:	6021      	strge	r1, [r4, #0]
 80078a2:	b90e      	cbnz	r6, 80078a8 <_printf_i+0x118>
 80078a4:	2d00      	cmp	r5, #0
 80078a6:	d04d      	beq.n	8007944 <_printf_i+0x1b4>
 80078a8:	4615      	mov	r5, r2
 80078aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80078ae:	fb03 6711 	mls	r7, r3, r1, r6
 80078b2:	5dc7      	ldrb	r7, [r0, r7]
 80078b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078b8:	4637      	mov	r7, r6
 80078ba:	42bb      	cmp	r3, r7
 80078bc:	460e      	mov	r6, r1
 80078be:	d9f4      	bls.n	80078aa <_printf_i+0x11a>
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	d10b      	bne.n	80078dc <_printf_i+0x14c>
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	07de      	lsls	r6, r3, #31
 80078c8:	d508      	bpl.n	80078dc <_printf_i+0x14c>
 80078ca:	6923      	ldr	r3, [r4, #16]
 80078cc:	6861      	ldr	r1, [r4, #4]
 80078ce:	4299      	cmp	r1, r3
 80078d0:	bfde      	ittt	le
 80078d2:	2330      	movle	r3, #48	; 0x30
 80078d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80078dc:	1b52      	subs	r2, r2, r5
 80078de:	6122      	str	r2, [r4, #16]
 80078e0:	f8cd a000 	str.w	sl, [sp]
 80078e4:	464b      	mov	r3, r9
 80078e6:	aa03      	add	r2, sp, #12
 80078e8:	4621      	mov	r1, r4
 80078ea:	4640      	mov	r0, r8
 80078ec:	f7ff fee2 	bl	80076b4 <_printf_common>
 80078f0:	3001      	adds	r0, #1
 80078f2:	d14c      	bne.n	800798e <_printf_i+0x1fe>
 80078f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078f8:	b004      	add	sp, #16
 80078fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078fe:	4835      	ldr	r0, [pc, #212]	; (80079d4 <_printf_i+0x244>)
 8007900:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007904:	6829      	ldr	r1, [r5, #0]
 8007906:	6823      	ldr	r3, [r4, #0]
 8007908:	f851 6b04 	ldr.w	r6, [r1], #4
 800790c:	6029      	str	r1, [r5, #0]
 800790e:	061d      	lsls	r5, r3, #24
 8007910:	d514      	bpl.n	800793c <_printf_i+0x1ac>
 8007912:	07df      	lsls	r7, r3, #31
 8007914:	bf44      	itt	mi
 8007916:	f043 0320 	orrmi.w	r3, r3, #32
 800791a:	6023      	strmi	r3, [r4, #0]
 800791c:	b91e      	cbnz	r6, 8007926 <_printf_i+0x196>
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	f023 0320 	bic.w	r3, r3, #32
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	2310      	movs	r3, #16
 8007928:	e7b0      	b.n	800788c <_printf_i+0xfc>
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	f043 0320 	orr.w	r3, r3, #32
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	2378      	movs	r3, #120	; 0x78
 8007934:	4828      	ldr	r0, [pc, #160]	; (80079d8 <_printf_i+0x248>)
 8007936:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800793a:	e7e3      	b.n	8007904 <_printf_i+0x174>
 800793c:	0659      	lsls	r1, r3, #25
 800793e:	bf48      	it	mi
 8007940:	b2b6      	uxthmi	r6, r6
 8007942:	e7e6      	b.n	8007912 <_printf_i+0x182>
 8007944:	4615      	mov	r5, r2
 8007946:	e7bb      	b.n	80078c0 <_printf_i+0x130>
 8007948:	682b      	ldr	r3, [r5, #0]
 800794a:	6826      	ldr	r6, [r4, #0]
 800794c:	6961      	ldr	r1, [r4, #20]
 800794e:	1d18      	adds	r0, r3, #4
 8007950:	6028      	str	r0, [r5, #0]
 8007952:	0635      	lsls	r5, r6, #24
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	d501      	bpl.n	800795c <_printf_i+0x1cc>
 8007958:	6019      	str	r1, [r3, #0]
 800795a:	e002      	b.n	8007962 <_printf_i+0x1d2>
 800795c:	0670      	lsls	r0, r6, #25
 800795e:	d5fb      	bpl.n	8007958 <_printf_i+0x1c8>
 8007960:	8019      	strh	r1, [r3, #0]
 8007962:	2300      	movs	r3, #0
 8007964:	6123      	str	r3, [r4, #16]
 8007966:	4615      	mov	r5, r2
 8007968:	e7ba      	b.n	80078e0 <_printf_i+0x150>
 800796a:	682b      	ldr	r3, [r5, #0]
 800796c:	1d1a      	adds	r2, r3, #4
 800796e:	602a      	str	r2, [r5, #0]
 8007970:	681d      	ldr	r5, [r3, #0]
 8007972:	6862      	ldr	r2, [r4, #4]
 8007974:	2100      	movs	r1, #0
 8007976:	4628      	mov	r0, r5
 8007978:	f7f8 fc2a 	bl	80001d0 <memchr>
 800797c:	b108      	cbz	r0, 8007982 <_printf_i+0x1f2>
 800797e:	1b40      	subs	r0, r0, r5
 8007980:	6060      	str	r0, [r4, #4]
 8007982:	6863      	ldr	r3, [r4, #4]
 8007984:	6123      	str	r3, [r4, #16]
 8007986:	2300      	movs	r3, #0
 8007988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800798c:	e7a8      	b.n	80078e0 <_printf_i+0x150>
 800798e:	6923      	ldr	r3, [r4, #16]
 8007990:	462a      	mov	r2, r5
 8007992:	4649      	mov	r1, r9
 8007994:	4640      	mov	r0, r8
 8007996:	47d0      	blx	sl
 8007998:	3001      	adds	r0, #1
 800799a:	d0ab      	beq.n	80078f4 <_printf_i+0x164>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	079b      	lsls	r3, r3, #30
 80079a0:	d413      	bmi.n	80079ca <_printf_i+0x23a>
 80079a2:	68e0      	ldr	r0, [r4, #12]
 80079a4:	9b03      	ldr	r3, [sp, #12]
 80079a6:	4298      	cmp	r0, r3
 80079a8:	bfb8      	it	lt
 80079aa:	4618      	movlt	r0, r3
 80079ac:	e7a4      	b.n	80078f8 <_printf_i+0x168>
 80079ae:	2301      	movs	r3, #1
 80079b0:	4632      	mov	r2, r6
 80079b2:	4649      	mov	r1, r9
 80079b4:	4640      	mov	r0, r8
 80079b6:	47d0      	blx	sl
 80079b8:	3001      	adds	r0, #1
 80079ba:	d09b      	beq.n	80078f4 <_printf_i+0x164>
 80079bc:	3501      	adds	r5, #1
 80079be:	68e3      	ldr	r3, [r4, #12]
 80079c0:	9903      	ldr	r1, [sp, #12]
 80079c2:	1a5b      	subs	r3, r3, r1
 80079c4:	42ab      	cmp	r3, r5
 80079c6:	dcf2      	bgt.n	80079ae <_printf_i+0x21e>
 80079c8:	e7eb      	b.n	80079a2 <_printf_i+0x212>
 80079ca:	2500      	movs	r5, #0
 80079cc:	f104 0619 	add.w	r6, r4, #25
 80079d0:	e7f5      	b.n	80079be <_printf_i+0x22e>
 80079d2:	bf00      	nop
 80079d4:	08007cba 	.word	0x08007cba
 80079d8:	08007ccb 	.word	0x08007ccb

080079dc <__retarget_lock_acquire_recursive>:
 80079dc:	4770      	bx	lr

080079de <__retarget_lock_release_recursive>:
 80079de:	4770      	bx	lr

080079e0 <memmove>:
 80079e0:	4288      	cmp	r0, r1
 80079e2:	b510      	push	{r4, lr}
 80079e4:	eb01 0402 	add.w	r4, r1, r2
 80079e8:	d902      	bls.n	80079f0 <memmove+0x10>
 80079ea:	4284      	cmp	r4, r0
 80079ec:	4623      	mov	r3, r4
 80079ee:	d807      	bhi.n	8007a00 <memmove+0x20>
 80079f0:	1e43      	subs	r3, r0, #1
 80079f2:	42a1      	cmp	r1, r4
 80079f4:	d008      	beq.n	8007a08 <memmove+0x28>
 80079f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079fe:	e7f8      	b.n	80079f2 <memmove+0x12>
 8007a00:	4402      	add	r2, r0
 8007a02:	4601      	mov	r1, r0
 8007a04:	428a      	cmp	r2, r1
 8007a06:	d100      	bne.n	8007a0a <memmove+0x2a>
 8007a08:	bd10      	pop	{r4, pc}
 8007a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a12:	e7f7      	b.n	8007a04 <memmove+0x24>

08007a14 <_realloc_r>:
 8007a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a18:	4680      	mov	r8, r0
 8007a1a:	4614      	mov	r4, r2
 8007a1c:	460e      	mov	r6, r1
 8007a1e:	b921      	cbnz	r1, 8007a2a <_realloc_r+0x16>
 8007a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a24:	4611      	mov	r1, r2
 8007a26:	f7ff bb7d 	b.w	8007124 <_malloc_r>
 8007a2a:	b92a      	cbnz	r2, 8007a38 <_realloc_r+0x24>
 8007a2c:	f7ff fb0e 	bl	800704c <_free_r>
 8007a30:	4625      	mov	r5, r4
 8007a32:	4628      	mov	r0, r5
 8007a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a38:	f000 f81b 	bl	8007a72 <_malloc_usable_size_r>
 8007a3c:	4284      	cmp	r4, r0
 8007a3e:	4607      	mov	r7, r0
 8007a40:	d802      	bhi.n	8007a48 <_realloc_r+0x34>
 8007a42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a46:	d812      	bhi.n	8007a6e <_realloc_r+0x5a>
 8007a48:	4621      	mov	r1, r4
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	f7ff fb6a 	bl	8007124 <_malloc_r>
 8007a50:	4605      	mov	r5, r0
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d0ed      	beq.n	8007a32 <_realloc_r+0x1e>
 8007a56:	42bc      	cmp	r4, r7
 8007a58:	4622      	mov	r2, r4
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	bf28      	it	cs
 8007a5e:	463a      	movcs	r2, r7
 8007a60:	f7ff fade 	bl	8007020 <memcpy>
 8007a64:	4631      	mov	r1, r6
 8007a66:	4640      	mov	r0, r8
 8007a68:	f7ff faf0 	bl	800704c <_free_r>
 8007a6c:	e7e1      	b.n	8007a32 <_realloc_r+0x1e>
 8007a6e:	4635      	mov	r5, r6
 8007a70:	e7df      	b.n	8007a32 <_realloc_r+0x1e>

08007a72 <_malloc_usable_size_r>:
 8007a72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a76:	1f18      	subs	r0, r3, #4
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	bfbc      	itt	lt
 8007a7c:	580b      	ldrlt	r3, [r1, r0]
 8007a7e:	18c0      	addlt	r0, r0, r3
 8007a80:	4770      	bx	lr
	...

08007a84 <_init>:
 8007a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a86:	bf00      	nop
 8007a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8a:	bc08      	pop	{r3}
 8007a8c:	469e      	mov	lr, r3
 8007a8e:	4770      	bx	lr

08007a90 <_fini>:
 8007a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a92:	bf00      	nop
 8007a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a96:	bc08      	pop	{r3}
 8007a98:	469e      	mov	lr, r3
 8007a9a:	4770      	bx	lr
