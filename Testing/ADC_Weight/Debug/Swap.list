
Swap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800398c  0800398c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800398c  0800398c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800398c  0800398c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800398c  0800398c  0001398c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003990  08003990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000078  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000084  20000084  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007fee  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016e0  00000000  00000000  0002802a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000670  00000000  00000000  00029710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005d8  00000000  00000000  00029d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d309  00000000  00000000  0002a358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000908e  00000000  00000000  00047661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b10a9  00000000  00000000  000506ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00101798  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018bc  00000000  00000000  001017e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003944 	.word	0x08003944

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003944 	.word	0x08003944

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fa85 	bl	80006dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f825 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8dd 	bl	8000394 <MX_GPIO_Init>
  MX_ADC2_Init();
 80001da:	f000 f87d 	bl	80002d8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc2);
 80001de:	480c      	ldr	r0, [pc, #48]	; (8000210 <main+0x48>)
 80001e0:	f000 fcfa 	bl	8000bd8 <HAL_ADC_Start_IT>
  uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80001e4:	4b0b      	ldr	r3, [pc, #44]	; (8000214 <main+0x4c>)
 80001e6:	607b      	str	r3, [r7, #4]
  *led_register = 0b00000000;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2200      	movs	r2, #0
 80001ec:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (check > 0)
 80001ee:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <main+0x50>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d003      	beq.n	80001fe <main+0x36>
	  {
	  		  HAL_Delay(1000);
 80001f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001fa:	f000 fad5 	bl	80007a8 <HAL_Delay>
	  }

	  if (fail == 0)
 80001fe:	4b07      	ldr	r3, [pc, #28]	; (800021c <main+0x54>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d1f3      	bne.n	80001ee <main+0x26>
	  {
		  HAL_ADC_Start_IT(&hadc2);
 8000206:	4802      	ldr	r0, [pc, #8]	; (8000210 <main+0x48>)
 8000208:	f000 fce6 	bl	8000bd8 <HAL_ADC_Start_IT>
	  if (check > 0)
 800020c:	e7ef      	b.n	80001ee <main+0x26>
 800020e:	bf00      	nop
 8000210:	20000028 	.word	0x20000028
 8000214:	48001015 	.word	0x48001015
 8000218:	2000007c 	.word	0x2000007c
 800021c:	2000007d 	.word	0x2000007d

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b09e      	sub	sp, #120	; 0x78
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800022a:	2228      	movs	r2, #40	; 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f003 fb80 	bl	8003934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
 8000240:	60da      	str	r2, [r3, #12]
 8000242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000244:	463b      	mov	r3, r7
 8000246:	223c      	movs	r2, #60	; 0x3c
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f003 fb72 	bl	8003934 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000250:	2301      	movs	r3, #1
 8000252:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000258:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	2301      	movs	r3, #1
 8000260:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000262:	2302      	movs	r3, #2
 8000264:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800026c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000270:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000272:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000276:	4618      	mov	r0, r3
 8000278:	f001 ff64 	bl	8002144 <HAL_RCC_OscConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000282:	f000 f94b 	bl	800051c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000286:	230f      	movs	r3, #15
 8000288:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028a:	2302      	movs	r3, #2
 800028c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000296:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800029c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002a0:	2101      	movs	r1, #1
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 ff8c 	bl	80031c0 <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002ae:	f000 f935 	bl	800051c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80002b2:	2380      	movs	r3, #128	; 0x80
 80002b4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002bc:	463b      	mov	r3, r7
 80002be:	4618      	mov	r0, r3
 80002c0:	f003 f964 	bl	800358c <HAL_RCCEx_PeriphCLKConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002ca:	f000 f927 	bl	800051c <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3778      	adds	r7, #120	; 0x78
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002de:	463b      	mov	r3, r7
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
 80002ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80002ee:	4b27      	ldr	r3, [pc, #156]	; (800038c <MX_ADC2_Init+0xb4>)
 80002f0:	4a27      	ldr	r2, [pc, #156]	; (8000390 <MX_ADC2_Init+0xb8>)
 80002f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002f4:	4b25      	ldr	r3, [pc, #148]	; (800038c <MX_ADC2_Init+0xb4>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80002fa:	4b24      	ldr	r3, [pc, #144]	; (800038c <MX_ADC2_Init+0xb4>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000300:	4b22      	ldr	r3, [pc, #136]	; (800038c <MX_ADC2_Init+0xb4>)
 8000302:	2200      	movs	r2, #0
 8000304:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <MX_ADC2_Init+0xb4>)
 8000308:	2200      	movs	r2, #0
 800030a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800030c:	4b1f      	ldr	r3, [pc, #124]	; (800038c <MX_ADC2_Init+0xb4>)
 800030e:	2200      	movs	r2, #0
 8000310:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000314:	4b1d      	ldr	r3, [pc, #116]	; (800038c <MX_ADC2_Init+0xb4>)
 8000316:	2200      	movs	r2, #0
 8000318:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800031a:	4b1c      	ldr	r3, [pc, #112]	; (800038c <MX_ADC2_Init+0xb4>)
 800031c:	2201      	movs	r2, #1
 800031e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000320:	4b1a      	ldr	r3, [pc, #104]	; (800038c <MX_ADC2_Init+0xb4>)
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000326:	4b19      	ldr	r3, [pc, #100]	; (800038c <MX_ADC2_Init+0xb4>)
 8000328:	2201      	movs	r2, #1
 800032a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800032c:	4b17      	ldr	r3, [pc, #92]	; (800038c <MX_ADC2_Init+0xb4>)
 800032e:	2200      	movs	r2, #0
 8000330:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000334:	4b15      	ldr	r3, [pc, #84]	; (800038c <MX_ADC2_Init+0xb4>)
 8000336:	2204      	movs	r2, #4
 8000338:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800033a:	4b14      	ldr	r3, [pc, #80]	; (800038c <MX_ADC2_Init+0xb4>)
 800033c:	2200      	movs	r2, #0
 800033e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000340:	4b12      	ldr	r3, [pc, #72]	; (800038c <MX_ADC2_Init+0xb4>)
 8000342:	2200      	movs	r2, #0
 8000344:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000346:	4811      	ldr	r0, [pc, #68]	; (800038c <MX_ADC2_Init+0xb4>)
 8000348:	f000 fa66 	bl	8000818 <HAL_ADC_Init>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000352:	f000 f8e3 	bl	800051c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000356:	2301      	movs	r3, #1
 8000358:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800035a:	2301      	movs	r3, #1
 800035c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000362:	2300      	movs	r3, #0
 8000364:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800036a:	2300      	movs	r3, #0
 800036c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800036e:	463b      	mov	r3, r7
 8000370:	4619      	mov	r1, r3
 8000372:	4806      	ldr	r0, [pc, #24]	; (800038c <MX_ADC2_Init+0xb4>)
 8000374:	f001 f88c 	bl	8001490 <HAL_ADC_ConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800037e:	f000 f8cd 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	3718      	adds	r7, #24
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000028 	.word	0x20000028
 8000390:	50000100 	.word	0x50000100

08000394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b08a      	sub	sp, #40	; 0x28
 8000398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	f107 0314 	add.w	r3, r7, #20
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003aa:	4b39      	ldr	r3, [pc, #228]	; (8000490 <MX_GPIO_Init+0xfc>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a38      	ldr	r2, [pc, #224]	; (8000490 <MX_GPIO_Init+0xfc>)
 80003b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	4b36      	ldr	r3, [pc, #216]	; (8000490 <MX_GPIO_Init+0xfc>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003be:	613b      	str	r3, [r7, #16]
 80003c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003c2:	4b33      	ldr	r3, [pc, #204]	; (8000490 <MX_GPIO_Init+0xfc>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a32      	ldr	r2, [pc, #200]	; (8000490 <MX_GPIO_Init+0xfc>)
 80003c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b30      	ldr	r3, [pc, #192]	; (8000490 <MX_GPIO_Init+0xfc>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003da:	4b2d      	ldr	r3, [pc, #180]	; (8000490 <MX_GPIO_Init+0xfc>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a2c      	ldr	r2, [pc, #176]	; (8000490 <MX_GPIO_Init+0xfc>)
 80003e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	4b2a      	ldr	r3, [pc, #168]	; (8000490 <MX_GPIO_Init+0xfc>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003f2:	4b27      	ldr	r3, [pc, #156]	; (8000490 <MX_GPIO_Init+0xfc>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a26      	ldr	r2, [pc, #152]	; (8000490 <MX_GPIO_Init+0xfc>)
 80003f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b24      	ldr	r3, [pc, #144]	; (8000490 <MX_GPIO_Init+0xfc>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040a:	4b21      	ldr	r3, [pc, #132]	; (8000490 <MX_GPIO_Init+0xfc>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a20      	ldr	r2, [pc, #128]	; (8000490 <MX_GPIO_Init+0xfc>)
 8000410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <MX_GPIO_Init+0xfc>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8000422:	2200      	movs	r2, #0
 8000424:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000428:	481a      	ldr	r0, [pc, #104]	; (8000494 <MX_GPIO_Init+0x100>)
 800042a:	f001 fe73 	bl	8002114 <HAL_GPIO_WritePin>
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
                           LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 800042e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000432:	617b      	str	r3, [r7, #20]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000434:	2301      	movs	r3, #1
 8000436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043c:	2300      	movs	r3, #0
 800043e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000440:	f107 0314 	add.w	r3, r7, #20
 8000444:	4619      	mov	r1, r3
 8000446:	4813      	ldr	r0, [pc, #76]	; (8000494 <MX_GPIO_Init+0x100>)
 8000448:	f001 fcea 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800044c:	23c0      	movs	r3, #192	; 0xc0
 800044e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000450:	2312      	movs	r3, #18
 8000452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000454:	2301      	movs	r3, #1
 8000456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000458:	2303      	movs	r3, #3
 800045a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800045c:	2304      	movs	r3, #4
 800045e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000460:	f107 0314 	add.w	r3, r7, #20
 8000464:	4619      	mov	r1, r3
 8000466:	480c      	ldr	r0, [pc, #48]	; (8000498 <MX_GPIO_Init+0x104>)
 8000468:	f001 fcda 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 800046c:	2303      	movs	r3, #3
 800046e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000470:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	2300      	movs	r3, #0
 8000478:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	4619      	mov	r1, r3
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <MX_GPIO_Init+0x100>)
 8000482:	f001 fccd 	bl	8001e20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000486:	bf00      	nop
 8000488:	3728      	adds	r7, #40	; 0x28
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40021000 	.word	0x40021000
 8000494:	48001000 	.word	0x48001000
 8000498:	48000400 	.word	0x48000400

0800049c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* h)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]

	if (h == &hadc2)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a18      	ldr	r2, [pc, #96]	; (8000508 <HAL_ADC_ConvCpltCallback+0x6c>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d128      	bne.n	80004fe <HAL_ADC_ConvCpltCallback+0x62>
	{
		uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80004ac:	4b17      	ldr	r3, [pc, #92]	; (800050c <HAL_ADC_ConvCpltCallback+0x70>)
 80004ae:	60fb      	str	r3, [r7, #12]
		weight = HAL_ADC_GetValue(&hadc2);
 80004b0:	4815      	ldr	r0, [pc, #84]	; (8000508 <HAL_ADC_ConvCpltCallback+0x6c>)
 80004b2:	f000 fcd1 	bl	8000e58 <HAL_ADC_GetValue>
 80004b6:	4603      	mov	r3, r0
 80004b8:	4a15      	ldr	r2, [pc, #84]	; (8000510 <HAL_ADC_ConvCpltCallback+0x74>)
 80004ba:	6013      	str	r3, [r2, #0]
		if (weight > 3000)
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <HAL_ADC_ConvCpltCallback+0x74>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d906      	bls.n	80004d6 <HAL_ADC_ConvCpltCallback+0x3a>
		{
			*led_register = 0b00000000;
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	2200      	movs	r2, #0
 80004cc:	701a      	strb	r2, [r3, #0]
			check = 0;
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <HAL_ADC_ConvCpltCallback+0x78>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 80004d4:	e013      	b.n	80004fe <HAL_ADC_ConvCpltCallback+0x62>
			if (check > 0)
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <HAL_ADC_ConvCpltCallback+0x78>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d006      	beq.n	80004ec <HAL_ADC_ConvCpltCallback+0x50>
				*led_register = 0b11111111;
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	22ff      	movs	r2, #255	; 0xff
 80004e2:	701a      	strb	r2, [r3, #0]
				fail = 1;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <HAL_ADC_ConvCpltCallback+0x7c>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	701a      	strb	r2, [r3, #0]
}
 80004ea:	e008      	b.n	80004fe <HAL_ADC_ConvCpltCallback+0x62>
				check++;
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <HAL_ADC_ConvCpltCallback+0x78>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	3301      	adds	r3, #1
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <HAL_ADC_ConvCpltCallback+0x78>)
 80004f6:	701a      	strb	r2, [r3, #0]
				*led_register = 0b00000001;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2201      	movs	r2, #1
 80004fc:	701a      	strb	r2, [r3, #0]
}
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000028 	.word	0x20000028
 800050c:	48001015 	.word	0x48001015
 8000510:	20000078 	.word	0x20000078
 8000514:	2000007c 	.word	0x2000007c
 8000518:	2000007d 	.word	0x2000007d

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000524:	e7fe      	b.n	8000524 <Error_Handler+0x8>
	...

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_MspInit+0x44>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <HAL_MspInit+0x44>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6193      	str	r3, [r2, #24]
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <HAL_MspInit+0x44>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <HAL_MspInit+0x44>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	4a08      	ldr	r2, [pc, #32]	; (800056c <HAL_MspInit+0x44>)
 800054c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000550:	61d3      	str	r3, [r2, #28]
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <HAL_MspInit+0x44>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800055e:	2007      	movs	r0, #7
 8000560:	f001 fc1c 	bl	8001d9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40021000 	.word	0x40021000

08000570 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <HAL_ADC_MspInit+0x84>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d12c      	bne.n	80005ec <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000592:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <HAL_ADC_MspInit+0x88>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a18      	ldr	r2, [pc, #96]	; (80005f8 <HAL_ADC_MspInit+0x88>)
 8000598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <HAL_ADC_MspInit+0x88>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <HAL_ADC_MspInit+0x88>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <HAL_ADC_MspInit+0x88>)
 80005b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <HAL_ADC_MspInit+0x88>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005c2:	2310      	movs	r3, #16
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c6:	2303      	movs	r3, #3
 80005c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d8:	f001 fc22 	bl	8001e20 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2100      	movs	r1, #0
 80005e0:	2012      	movs	r0, #18
 80005e2:	f001 fbe6 	bl	8001db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80005e6:	2012      	movs	r0, #18
 80005e8:	f001 fbff 	bl	8001dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80005ec:	bf00      	nop
 80005ee:	3728      	adds	r7, #40	; 0x28
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	50000100 	.word	0x50000100
 80005f8:	40021000 	.word	0x40021000

080005fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <NMI_Handler+0x4>

08000602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <HardFault_Handler+0x4>

08000608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <MemManage_Handler+0x4>

0800060e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <BusFault_Handler+0x4>

08000614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <UsageFault_Handler+0x4>

0800061a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000648:	f000 f88e 	bl	8000768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}

08000650 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <ADC1_2_IRQHandler+0x10>)
 8000656:	f000 fc0d 	bl	8000e74 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000028 	.word	0x20000028

08000664 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <SystemInit+0x20>)
 800066a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800066e:	4a05      	ldr	r2, [pc, #20]	; (8000684 <SystemInit+0x20>)
 8000670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800068c:	f7ff ffea 	bl	8000664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000692:	490d      	ldr	r1, [pc, #52]	; (80006c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000694:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <LoopForever+0xe>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a8:	4c0a      	ldr	r4, [pc, #40]	; (80006d4 <LoopForever+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006b6:	f003 f919 	bl	80038ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ba:	f7ff fd85 	bl	80001c8 <main>

080006be <LoopForever>:

LoopForever:
    b LoopForever
 80006be:	e7fe      	b.n	80006be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006cc:	08003994 	.word	0x08003994
  ldr r2, =_sbss
 80006d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006d4:	20000084 	.word	0x20000084

080006d8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC3_IRQHandler>
	...

080006dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_Init+0x28>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <HAL_Init+0x28>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ec:	2003      	movs	r0, #3
 80006ee:	f001 fb55 	bl	8001d9c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f2:	2000      	movs	r0, #0
 80006f4:	f000 f808 	bl	8000708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f8:	f7ff ff16 	bl	8000528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40022000 	.word	0x40022000

08000708 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_InitTick+0x54>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_InitTick+0x58>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000722:	fbb2 f3f3 	udiv	r3, r2, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fb6d 	bl	8001e06 <HAL_SYSTICK_Config>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e00e      	b.n	8000754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d80a      	bhi.n	8000752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800073c:	2200      	movs	r2, #0
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f001 fb35 	bl	8001db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <HAL_InitTick+0x5c>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800074e:	2300      	movs	r3, #0
 8000750:	e000      	b.n	8000754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000000 	.word	0x20000000
 8000760:	20000008 	.word	0x20000008
 8000764:	20000004 	.word	0x20000004

08000768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_IncTick+0x20>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x24>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_IncTick+0x24>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000008 	.word	0x20000008
 800078c:	20000080 	.word	0x20000080

08000790 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;  
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <HAL_GetTick+0x14>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000080 	.word	0x20000080

080007a8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b0:	f7ff ffee 	bl	8000790 <HAL_GetTick>
 80007b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c0:	d005      	beq.n	80007ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <HAL_Delay+0x44>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	461a      	mov	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4413      	add	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007ce:	bf00      	nop
 80007d0:	f7ff ffde 	bl	8000790 <HAL_GetTick>
 80007d4:	4602      	mov	r2, r0
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d8f7      	bhi.n	80007d0 <HAL_Delay+0x28>
  {
  }
}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000008 	.word	0x20000008

080007f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b09a      	sub	sp, #104	; 0x68
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000820:	2300      	movs	r3, #0
 8000822:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000826:	2300      	movs	r3, #0
 8000828:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d101      	bne.n	8000838 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000834:	2301      	movs	r3, #1
 8000836:	e1c9      	b.n	8000bcc <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	691b      	ldr	r3, [r3, #16]
 800083c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f003 0310 	and.w	r3, r3, #16
 8000846:	2b00      	cmp	r3, #0
 8000848:	d176      	bne.n	8000938 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	2b00      	cmp	r3, #0
 8000850:	d152      	bne.n	80008f8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2200      	movs	r2, #0
 8000868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff fe7f 	bl	8000570 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087c:	2b00      	cmp	r3, #0
 800087e:	d13b      	bne.n	80008f8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f001 f955 	bl	8001b30 <ADC_Disable>
 8000886:	4603      	mov	r3, r0
 8000888:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 0310 	and.w	r3, r3, #16
 8000894:	2b00      	cmp	r3, #0
 8000896:	d12f      	bne.n	80008f8 <HAL_ADC_Init+0xe0>
 8000898:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800089c:	2b00      	cmp	r3, #0
 800089e:	d12b      	bne.n	80008f8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008a8:	f023 0302 	bic.w	r3, r3, #2
 80008ac:	f043 0202 	orr.w	r2, r3, #2
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	689a      	ldr	r2, [r3, #8]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80008c2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	689a      	ldr	r2, [r3, #8]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008d2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80008d4:	4b86      	ldr	r3, [pc, #536]	; (8000af0 <HAL_ADC_Init+0x2d8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a86      	ldr	r2, [pc, #536]	; (8000af4 <HAL_ADC_Init+0x2dc>)
 80008da:	fba2 2303 	umull	r2, r3, r2, r3
 80008de:	0c9a      	lsrs	r2, r3, #18
 80008e0:	4613      	mov	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4413      	add	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008ea:	e002      	b.n	80008f2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f9      	bne.n	80008ec <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d007      	beq.n	8000916 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000914:	d110      	bne.n	8000938 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f023 0312 	bic.w	r3, r3, #18
 800091e:	f043 0210 	orr.w	r2, r3, #16
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	f043 0201 	orr.w	r2, r3, #1
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	f003 0310 	and.w	r3, r3, #16
 8000940:	2b00      	cmp	r3, #0
 8000942:	f040 8136 	bne.w	8000bb2 <HAL_ADC_Init+0x39a>
 8000946:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800094a:	2b00      	cmp	r3, #0
 800094c:	f040 8131 	bne.w	8000bb2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800095a:	2b00      	cmp	r3, #0
 800095c:	f040 8129 	bne.w	8000bb2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000968:	f043 0202 	orr.w	r2, r3, #2
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000978:	d004      	beq.n	8000984 <HAL_ADC_Init+0x16c>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a5e      	ldr	r2, [pc, #376]	; (8000af8 <HAL_ADC_Init+0x2e0>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d101      	bne.n	8000988 <HAL_ADC_Init+0x170>
 8000984:	4b5d      	ldr	r3, [pc, #372]	; (8000afc <HAL_ADC_Init+0x2e4>)
 8000986:	e000      	b.n	800098a <HAL_ADC_Init+0x172>
 8000988:	4b5d      	ldr	r3, [pc, #372]	; (8000b00 <HAL_ADC_Init+0x2e8>)
 800098a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000994:	d102      	bne.n	800099c <HAL_ADC_Init+0x184>
 8000996:	4b58      	ldr	r3, [pc, #352]	; (8000af8 <HAL_ADC_Init+0x2e0>)
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	e01a      	b.n	80009d2 <HAL_ADC_Init+0x1ba>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a55      	ldr	r2, [pc, #340]	; (8000af8 <HAL_ADC_Init+0x2e0>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d103      	bne.n	80009ae <HAL_ADC_Init+0x196>
 80009a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e011      	b.n	80009d2 <HAL_ADC_Init+0x1ba>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a54      	ldr	r2, [pc, #336]	; (8000b04 <HAL_ADC_Init+0x2ec>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d102      	bne.n	80009be <HAL_ADC_Init+0x1a6>
 80009b8:	4b53      	ldr	r3, [pc, #332]	; (8000b08 <HAL_ADC_Init+0x2f0>)
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	e009      	b.n	80009d2 <HAL_ADC_Init+0x1ba>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a51      	ldr	r2, [pc, #324]	; (8000b08 <HAL_ADC_Init+0x2f0>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d102      	bne.n	80009ce <HAL_ADC_Init+0x1b6>
 80009c8:	4b4e      	ldr	r3, [pc, #312]	; (8000b04 <HAL_ADC_Init+0x2ec>)
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	e001      	b.n	80009d2 <HAL_ADC_Init+0x1ba>
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	f003 0303 	and.w	r3, r3, #3
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d108      	bne.n	80009f2 <HAL_ADC_Init+0x1da>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d101      	bne.n	80009f2 <HAL_ADC_Init+0x1da>
 80009ee:	2301      	movs	r3, #1
 80009f0:	e000      	b.n	80009f4 <HAL_ADC_Init+0x1dc>
 80009f2:	2300      	movs	r3, #0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d11c      	bne.n	8000a32 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80009f8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d010      	beq.n	8000a20 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	f003 0303 	and.w	r3, r3, #3
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d107      	bne.n	8000a1a <HAL_ADC_Init+0x202>
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d101      	bne.n	8000a1a <HAL_ADC_Init+0x202>
 8000a16:	2301      	movs	r3, #1
 8000a18:	e000      	b.n	8000a1c <HAL_ADC_Init+0x204>
 8000a1a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d108      	bne.n	8000a32 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	431a      	orrs	r2, r3
 8000a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a30:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	7e5b      	ldrb	r3, [r3, #25]
 8000a36:	035b      	lsls	r3, r3, #13
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000a3c:	2a01      	cmp	r2, #1
 8000a3e:	d002      	beq.n	8000a46 <HAL_ADC_Init+0x22e>
 8000a40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a44:	e000      	b.n	8000a48 <HAL_ADC_Init+0x230>
 8000a46:	2200      	movs	r2, #0
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	431a      	orrs	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d11b      	bne.n	8000a9e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	7e5b      	ldrb	r3, [r3, #25]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d109      	bne.n	8000a82 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a72:	3b01      	subs	r3, #1
 8000a74:	045a      	lsls	r2, r3, #17
 8000a76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a7e:	663b      	str	r3, [r7, #96]	; 0x60
 8000a80:	e00d      	b.n	8000a9e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000a8a:	f043 0220 	orr.w	r2, r3, #32
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	f043 0201 	orr.w	r2, r3, #1
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d03a      	beq.n	8000b1c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a16      	ldr	r2, [pc, #88]	; (8000b04 <HAL_ADC_Init+0x2ec>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d004      	beq.n	8000aba <HAL_ADC_Init+0x2a2>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <HAL_ADC_Init+0x2f0>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d128      	bne.n	8000b0c <HAL_ADC_Init+0x2f4>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abe:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000ac2:	d012      	beq.n	8000aea <HAL_ADC_Init+0x2d2>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000acc:	d00a      	beq.n	8000ae4 <HAL_ADC_Init+0x2cc>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000ad6:	d002      	beq.n	8000ade <HAL_ADC_Init+0x2c6>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000adc:	e018      	b.n	8000b10 <HAL_ADC_Init+0x2f8>
 8000ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae2:	e015      	b.n	8000b10 <HAL_ADC_Init+0x2f8>
 8000ae4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000ae8:	e012      	b.n	8000b10 <HAL_ADC_Init+0x2f8>
 8000aea:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000aee:	e00f      	b.n	8000b10 <HAL_ADC_Init+0x2f8>
 8000af0:	20000000 	.word	0x20000000
 8000af4:	431bde83 	.word	0x431bde83
 8000af8:	50000100 	.word	0x50000100
 8000afc:	50000300 	.word	0x50000300
 8000b00:	50000700 	.word	0x50000700
 8000b04:	50000400 	.word	0x50000400
 8000b08:	50000500 	.word	0x50000500
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000b14:	4313      	orrs	r3, r2
 8000b16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	f003 030c 	and.w	r3, r3, #12
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d114      	bne.n	8000b54 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b38:	f023 0302 	bic.w	r3, r3, #2
 8000b3c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	7e1b      	ldrb	r3, [r3, #24]
 8000b42:	039a      	lsls	r2, r3, #14
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b50:	4313      	orrs	r3, r2
 8000b52:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <HAL_ADC_Init+0x3bc>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000b64:	430b      	orrs	r3, r1
 8000b66:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d10c      	bne.n	8000b8a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f023 010f 	bic.w	r1, r3, #15
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	1e5a      	subs	r2, r3, #1
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	430a      	orrs	r2, r1
 8000b86:	631a      	str	r2, [r3, #48]	; 0x30
 8000b88:	e007      	b.n	8000b9a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f022 020f 	bic.w	r2, r2, #15
 8000b98:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	f023 0303 	bic.w	r3, r3, #3
 8000ba8:	f043 0201 	orr.w	r2, r3, #1
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	641a      	str	r2, [r3, #64]	; 0x40
 8000bb0:	e00a      	b.n	8000bc8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f023 0312 	bic.w	r3, r3, #18
 8000bba:	f043 0210 	orr.w	r2, r3, #16
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000bc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3768      	adds	r7, #104	; 0x68
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	fff0c007 	.word	0xfff0c007

08000bd8 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 8123 	bne.w	8000e3a <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d101      	bne.n	8000c02 <HAL_ADC_Start_IT+0x2a>
 8000bfe:	2302      	movs	r3, #2
 8000c00:	e11e      	b.n	8000e40 <HAL_ADC_Start_IT+0x268>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2201      	movs	r2, #1
 8000c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f000 ff2c 	bl	8001a68 <ADC_Enable>
 8000c10:	4603      	mov	r3, r0
 8000c12:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 810a 	bne.w	8000e30 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c24:	f023 0301 	bic.w	r3, r3, #1
 8000c28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c38:	d004      	beq.n	8000c44 <HAL_ADC_Start_IT+0x6c>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a82      	ldr	r2, [pc, #520]	; (8000e48 <HAL_ADC_Start_IT+0x270>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d106      	bne.n	8000c52 <HAL_ADC_Start_IT+0x7a>
 8000c44:	4b81      	ldr	r3, [pc, #516]	; (8000e4c <HAL_ADC_Start_IT+0x274>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f003 031f 	and.w	r3, r3, #31
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d010      	beq.n	8000c72 <HAL_ADC_Start_IT+0x9a>
 8000c50:	e005      	b.n	8000c5e <HAL_ADC_Start_IT+0x86>
 8000c52:	4b7f      	ldr	r3, [pc, #508]	; (8000e50 <HAL_ADC_Start_IT+0x278>)
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	f003 031f 	and.w	r3, r3, #31
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d009      	beq.n	8000c72 <HAL_ADC_Start_IT+0x9a>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c66:	d004      	beq.n	8000c72 <HAL_ADC_Start_IT+0x9a>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a79      	ldr	r2, [pc, #484]	; (8000e54 <HAL_ADC_Start_IT+0x27c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d115      	bne.n	8000c9e <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d036      	beq.n	8000cfa <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000c9c:	e02d      	b.n	8000cfa <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cb2:	d004      	beq.n	8000cbe <HAL_ADC_Start_IT+0xe6>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a63      	ldr	r2, [pc, #396]	; (8000e48 <HAL_ADC_Start_IT+0x270>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d10a      	bne.n	8000cd4 <HAL_ADC_Start_IT+0xfc>
 8000cbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	bf14      	ite	ne
 8000ccc:	2301      	movne	r3, #1
 8000cce:	2300      	moveq	r3, #0
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	e008      	b.n	8000ce6 <HAL_ADC_Start_IT+0x10e>
 8000cd4:	4b5f      	ldr	r3, [pc, #380]	; (8000e54 <HAL_ADC_Start_IT+0x27c>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	bf14      	ite	ne
 8000ce0:	2301      	movne	r3, #1
 8000ce2:	2300      	moveq	r3, #0
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d007      	beq.n	8000cfa <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cf2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d06:	d106      	bne.n	8000d16 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0c:	f023 0206 	bic.w	r2, r3, #6
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	645a      	str	r2, [r3, #68]	; 0x44
 8000d14:	e002      	b.n	8000d1c <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	221c      	movs	r2, #28
 8000d2a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	2b08      	cmp	r3, #8
 8000d32:	d110      	bne.n	8000d56 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 0204 	bic.w	r2, r2, #4
 8000d42:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f042 0208 	orr.w	r2, r2, #8
 8000d52:	605a      	str	r2, [r3, #4]
          break;
 8000d54:	e008      	b.n	8000d68 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f042 020c 	orr.w	r2, r2, #12
 8000d64:	605a      	str	r2, [r3, #4]
          break;
 8000d66:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d107      	bne.n	8000d80 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 0210 	bic.w	r2, r2, #16
 8000d7e:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d88:	d004      	beq.n	8000d94 <HAL_ADC_Start_IT+0x1bc>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a2e      	ldr	r2, [pc, #184]	; (8000e48 <HAL_ADC_Start_IT+0x270>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d106      	bne.n	8000da2 <HAL_ADC_Start_IT+0x1ca>
 8000d94:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <HAL_ADC_Start_IT+0x274>)
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	f003 031f 	and.w	r3, r3, #31
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d03e      	beq.n	8000e1e <HAL_ADC_Start_IT+0x246>
 8000da0:	e005      	b.n	8000dae <HAL_ADC_Start_IT+0x1d6>
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <HAL_ADC_Start_IT+0x278>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f003 031f 	and.w	r3, r3, #31
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d037      	beq.n	8000e1e <HAL_ADC_Start_IT+0x246>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000db6:	d004      	beq.n	8000dc2 <HAL_ADC_Start_IT+0x1ea>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a22      	ldr	r2, [pc, #136]	; (8000e48 <HAL_ADC_Start_IT+0x270>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d106      	bne.n	8000dd0 <HAL_ADC_Start_IT+0x1f8>
 8000dc2:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <HAL_ADC_Start_IT+0x274>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f003 031f 	and.w	r3, r3, #31
 8000dca:	2b05      	cmp	r3, #5
 8000dcc:	d027      	beq.n	8000e1e <HAL_ADC_Start_IT+0x246>
 8000dce:	e005      	b.n	8000ddc <HAL_ADC_Start_IT+0x204>
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <HAL_ADC_Start_IT+0x278>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f003 031f 	and.w	r3, r3, #31
 8000dd8:	2b05      	cmp	r3, #5
 8000dda:	d020      	beq.n	8000e1e <HAL_ADC_Start_IT+0x246>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000de4:	d004      	beq.n	8000df0 <HAL_ADC_Start_IT+0x218>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <HAL_ADC_Start_IT+0x270>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d106      	bne.n	8000dfe <HAL_ADC_Start_IT+0x226>
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <HAL_ADC_Start_IT+0x274>)
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f003 031f 	and.w	r3, r3, #31
 8000df8:	2b09      	cmp	r3, #9
 8000dfa:	d010      	beq.n	8000e1e <HAL_ADC_Start_IT+0x246>
 8000dfc:	e005      	b.n	8000e0a <HAL_ADC_Start_IT+0x232>
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_ADC_Start_IT+0x278>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f003 031f 	and.w	r3, r3, #31
 8000e06:	2b09      	cmp	r3, #9
 8000e08:	d009      	beq.n	8000e1e <HAL_ADC_Start_IT+0x246>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e12:	d004      	beq.n	8000e1e <HAL_ADC_Start_IT+0x246>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <HAL_ADC_Start_IT+0x27c>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d10f      	bne.n	8000e3e <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f042 0204 	orr.w	r2, r2, #4
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	e006      	b.n	8000e3e <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000e38:	e001      	b.n	8000e3e <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	50000100 	.word	0x50000100
 8000e4c:	50000300 	.word	0x50000300
 8000e50:	50000700 	.word	0x50000700
 8000e54:	50000400 	.word	0x50000400

08000e58 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d004      	beq.n	8000eac <HAL_ADC_IRQHandler+0x38>
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10b      	bne.n	8000ec4 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 80bc 	beq.w	8001030 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 80b6 	beq.w	8001030 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	f003 0310 	and.w	r3, r3, #16
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d105      	bne.n	8000edc <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ee4:	d004      	beq.n	8000ef0 <HAL_ADC_IRQHandler+0x7c>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a90      	ldr	r2, [pc, #576]	; (800112c <HAL_ADC_IRQHandler+0x2b8>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d106      	bne.n	8000efe <HAL_ADC_IRQHandler+0x8a>
 8000ef0:	4b8f      	ldr	r3, [pc, #572]	; (8001130 <HAL_ADC_IRQHandler+0x2bc>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 031f 	and.w	r3, r3, #31
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d03e      	beq.n	8000f7a <HAL_ADC_IRQHandler+0x106>
 8000efc:	e005      	b.n	8000f0a <HAL_ADC_IRQHandler+0x96>
 8000efe:	4b8d      	ldr	r3, [pc, #564]	; (8001134 <HAL_ADC_IRQHandler+0x2c0>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 031f 	and.w	r3, r3, #31
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d037      	beq.n	8000f7a <HAL_ADC_IRQHandler+0x106>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f12:	d004      	beq.n	8000f1e <HAL_ADC_IRQHandler+0xaa>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a84      	ldr	r2, [pc, #528]	; (800112c <HAL_ADC_IRQHandler+0x2b8>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d106      	bne.n	8000f2c <HAL_ADC_IRQHandler+0xb8>
 8000f1e:	4b84      	ldr	r3, [pc, #528]	; (8001130 <HAL_ADC_IRQHandler+0x2bc>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 031f 	and.w	r3, r3, #31
 8000f26:	2b05      	cmp	r3, #5
 8000f28:	d027      	beq.n	8000f7a <HAL_ADC_IRQHandler+0x106>
 8000f2a:	e005      	b.n	8000f38 <HAL_ADC_IRQHandler+0xc4>
 8000f2c:	4b81      	ldr	r3, [pc, #516]	; (8001134 <HAL_ADC_IRQHandler+0x2c0>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 031f 	and.w	r3, r3, #31
 8000f34:	2b05      	cmp	r3, #5
 8000f36:	d020      	beq.n	8000f7a <HAL_ADC_IRQHandler+0x106>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f40:	d004      	beq.n	8000f4c <HAL_ADC_IRQHandler+0xd8>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a79      	ldr	r2, [pc, #484]	; (800112c <HAL_ADC_IRQHandler+0x2b8>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d106      	bne.n	8000f5a <HAL_ADC_IRQHandler+0xe6>
 8000f4c:	4b78      	ldr	r3, [pc, #480]	; (8001130 <HAL_ADC_IRQHandler+0x2bc>)
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 031f 	and.w	r3, r3, #31
 8000f54:	2b09      	cmp	r3, #9
 8000f56:	d010      	beq.n	8000f7a <HAL_ADC_IRQHandler+0x106>
 8000f58:	e005      	b.n	8000f66 <HAL_ADC_IRQHandler+0xf2>
 8000f5a:	4b76      	ldr	r3, [pc, #472]	; (8001134 <HAL_ADC_IRQHandler+0x2c0>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 031f 	and.w	r3, r3, #31
 8000f62:	2b09      	cmp	r3, #9
 8000f64:	d009      	beq.n	8000f7a <HAL_ADC_IRQHandler+0x106>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f6e:	d004      	beq.n	8000f7a <HAL_ADC_IRQHandler+0x106>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a70      	ldr	r2, [pc, #448]	; (8001138 <HAL_ADC_IRQHandler+0x2c4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d104      	bne.n	8000f84 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	61bb      	str	r3, [r7, #24]
 8000f82:	e00f      	b.n	8000fa4 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f8c:	d004      	beq.n	8000f98 <HAL_ADC_IRQHandler+0x124>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a66      	ldr	r2, [pc, #408]	; (800112c <HAL_ADC_IRQHandler+0x2b8>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d102      	bne.n	8000f9e <HAL_ADC_IRQHandler+0x12a>
 8000f98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f9c:	e000      	b.n	8000fa0 <HAL_ADC_IRQHandler+0x12c>
 8000f9e:	4b66      	ldr	r3, [pc, #408]	; (8001138 <HAL_ADC_IRQHandler+0x2c4>)
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d137      	bne.n	8001022 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d132      	bne.n	8001022 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d02d      	beq.n	8001022 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d11a      	bne.n	800100a <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 020c 	bic.w	r2, r2, #12
 8000fe2:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d112      	bne.n	8001022 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	f043 0201 	orr.w	r2, r3, #1
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	641a      	str	r2, [r3, #64]	; 0x40
 8001008:	e00b      	b.n	8001022 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f043 0210 	orr.w	r2, r3, #16
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f043 0201 	orr.w	r2, r3, #1
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff fa3a 	bl	800049c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	220c      	movs	r2, #12
 800102e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	f003 0320 	and.w	r3, r3, #32
 8001036:	2b00      	cmp	r3, #0
 8001038:	d004      	beq.n	8001044 <HAL_ADC_IRQHandler+0x1d0>
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f003 0320 	and.w	r3, r3, #32
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10b      	bne.n	800105c <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8138 	beq.w	80012c0 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 8132 	beq.w	80012c0 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001070:	d004      	beq.n	800107c <HAL_ADC_IRQHandler+0x208>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a2d      	ldr	r2, [pc, #180]	; (800112c <HAL_ADC_IRQHandler+0x2b8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d106      	bne.n	800108a <HAL_ADC_IRQHandler+0x216>
 800107c:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <HAL_ADC_IRQHandler+0x2bc>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 031f 	and.w	r3, r3, #31
 8001084:	2b00      	cmp	r3, #0
 8001086:	d03e      	beq.n	8001106 <HAL_ADC_IRQHandler+0x292>
 8001088:	e005      	b.n	8001096 <HAL_ADC_IRQHandler+0x222>
 800108a:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <HAL_ADC_IRQHandler+0x2c0>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 031f 	and.w	r3, r3, #31
 8001092:	2b00      	cmp	r3, #0
 8001094:	d037      	beq.n	8001106 <HAL_ADC_IRQHandler+0x292>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800109e:	d004      	beq.n	80010aa <HAL_ADC_IRQHandler+0x236>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a21      	ldr	r2, [pc, #132]	; (800112c <HAL_ADC_IRQHandler+0x2b8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d106      	bne.n	80010b8 <HAL_ADC_IRQHandler+0x244>
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <HAL_ADC_IRQHandler+0x2bc>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 031f 	and.w	r3, r3, #31
 80010b2:	2b05      	cmp	r3, #5
 80010b4:	d027      	beq.n	8001106 <HAL_ADC_IRQHandler+0x292>
 80010b6:	e005      	b.n	80010c4 <HAL_ADC_IRQHandler+0x250>
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <HAL_ADC_IRQHandler+0x2c0>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 031f 	and.w	r3, r3, #31
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	d020      	beq.n	8001106 <HAL_ADC_IRQHandler+0x292>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010cc:	d004      	beq.n	80010d8 <HAL_ADC_IRQHandler+0x264>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a16      	ldr	r2, [pc, #88]	; (800112c <HAL_ADC_IRQHandler+0x2b8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d106      	bne.n	80010e6 <HAL_ADC_IRQHandler+0x272>
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_ADC_IRQHandler+0x2bc>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 031f 	and.w	r3, r3, #31
 80010e0:	2b09      	cmp	r3, #9
 80010e2:	d010      	beq.n	8001106 <HAL_ADC_IRQHandler+0x292>
 80010e4:	e005      	b.n	80010f2 <HAL_ADC_IRQHandler+0x27e>
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <HAL_ADC_IRQHandler+0x2c0>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	2b09      	cmp	r3, #9
 80010f0:	d009      	beq.n	8001106 <HAL_ADC_IRQHandler+0x292>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010fa:	d004      	beq.n	8001106 <HAL_ADC_IRQHandler+0x292>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <HAL_ADC_IRQHandler+0x2c4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d104      	bne.n	8001110 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	e018      	b.n	8001142 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001118:	d004      	beq.n	8001124 <HAL_ADC_IRQHandler+0x2b0>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a03      	ldr	r2, [pc, #12]	; (800112c <HAL_ADC_IRQHandler+0x2b8>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d10b      	bne.n	800113c <HAL_ADC_IRQHandler+0x2c8>
 8001124:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001128:	e009      	b.n	800113e <HAL_ADC_IRQHandler+0x2ca>
 800112a:	bf00      	nop
 800112c:	50000100 	.word	0x50000100
 8001130:	50000300 	.word	0x50000300
 8001134:	50000700 	.word	0x50000700
 8001138:	50000400 	.word	0x50000400
 800113c:	4b92      	ldr	r3, [pc, #584]	; (8001388 <HAL_ADC_IRQHandler+0x514>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001148:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800114c:	2b00      	cmp	r3, #0
 800114e:	f040 80b0 	bne.w	80012b2 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00d      	beq.n	8001178 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001166:	2b00      	cmp	r3, #0
 8001168:	f040 80a3 	bne.w	80012b2 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001172:	2b00      	cmp	r3, #0
 8001174:	f040 809d 	bne.w	80012b2 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 8097 	beq.w	80012b2 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800118c:	d004      	beq.n	8001198 <HAL_ADC_IRQHandler+0x324>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a7e      	ldr	r2, [pc, #504]	; (800138c <HAL_ADC_IRQHandler+0x518>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d106      	bne.n	80011a6 <HAL_ADC_IRQHandler+0x332>
 8001198:	4b7d      	ldr	r3, [pc, #500]	; (8001390 <HAL_ADC_IRQHandler+0x51c>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d03e      	beq.n	8001222 <HAL_ADC_IRQHandler+0x3ae>
 80011a4:	e005      	b.n	80011b2 <HAL_ADC_IRQHandler+0x33e>
 80011a6:	4b7b      	ldr	r3, [pc, #492]	; (8001394 <HAL_ADC_IRQHandler+0x520>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d037      	beq.n	8001222 <HAL_ADC_IRQHandler+0x3ae>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011ba:	d004      	beq.n	80011c6 <HAL_ADC_IRQHandler+0x352>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a72      	ldr	r2, [pc, #456]	; (800138c <HAL_ADC_IRQHandler+0x518>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d106      	bne.n	80011d4 <HAL_ADC_IRQHandler+0x360>
 80011c6:	4b72      	ldr	r3, [pc, #456]	; (8001390 <HAL_ADC_IRQHandler+0x51c>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 031f 	and.w	r3, r3, #31
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d027      	beq.n	8001222 <HAL_ADC_IRQHandler+0x3ae>
 80011d2:	e005      	b.n	80011e0 <HAL_ADC_IRQHandler+0x36c>
 80011d4:	4b6f      	ldr	r3, [pc, #444]	; (8001394 <HAL_ADC_IRQHandler+0x520>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 031f 	and.w	r3, r3, #31
 80011dc:	2b06      	cmp	r3, #6
 80011de:	d020      	beq.n	8001222 <HAL_ADC_IRQHandler+0x3ae>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011e8:	d004      	beq.n	80011f4 <HAL_ADC_IRQHandler+0x380>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a67      	ldr	r2, [pc, #412]	; (800138c <HAL_ADC_IRQHandler+0x518>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d106      	bne.n	8001202 <HAL_ADC_IRQHandler+0x38e>
 80011f4:	4b66      	ldr	r3, [pc, #408]	; (8001390 <HAL_ADC_IRQHandler+0x51c>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 031f 	and.w	r3, r3, #31
 80011fc:	2b07      	cmp	r3, #7
 80011fe:	d010      	beq.n	8001222 <HAL_ADC_IRQHandler+0x3ae>
 8001200:	e005      	b.n	800120e <HAL_ADC_IRQHandler+0x39a>
 8001202:	4b64      	ldr	r3, [pc, #400]	; (8001394 <HAL_ADC_IRQHandler+0x520>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 031f 	and.w	r3, r3, #31
 800120a:	2b07      	cmp	r3, #7
 800120c:	d009      	beq.n	8001222 <HAL_ADC_IRQHandler+0x3ae>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001216:	d004      	beq.n	8001222 <HAL_ADC_IRQHandler+0x3ae>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a5a      	ldr	r2, [pc, #360]	; (8001388 <HAL_ADC_IRQHandler+0x514>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d104      	bne.n	800122c <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	e00f      	b.n	800124c <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001234:	d004      	beq.n	8001240 <HAL_ADC_IRQHandler+0x3cc>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a54      	ldr	r2, [pc, #336]	; (800138c <HAL_ADC_IRQHandler+0x518>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d102      	bne.n	8001246 <HAL_ADC_IRQHandler+0x3d2>
 8001240:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001244:	e000      	b.n	8001248 <HAL_ADC_IRQHandler+0x3d4>
 8001246:	4b50      	ldr	r3, [pc, #320]	; (8001388 <HAL_ADC_IRQHandler+0x514>)
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d12d      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 0308 	and.w	r3, r3, #8
 8001260:	2b00      	cmp	r3, #0
 8001262:	d11a      	bne.n	800129a <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001272:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001288:	2b00      	cmp	r3, #0
 800128a:	d112      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	f043 0201 	orr.w	r2, r3, #1
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	641a      	str	r2, [r3, #64]	; 0x40
 8001298:	e00b      	b.n	80012b2 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f043 0210 	orr.w	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 f8c4 	bl	8001440 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2260      	movs	r2, #96	; 0x60
 80012be:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d011      	beq.n	80012ee <HAL_ADC_IRQHandler+0x47a>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00c      	beq.n	80012ee <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff fa85 	bl	80007f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2280      	movs	r2, #128	; 0x80
 80012ec:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d012      	beq.n	800131e <HAL_ADC_IRQHandler+0x4aa>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00d      	beq.n	800131e <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f8aa 	bl	8001468 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f44f 7280 	mov.w	r2, #256	; 0x100
 800131c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001324:	2b00      	cmp	r3, #0
 8001326:	d012      	beq.n	800134e <HAL_ADC_IRQHandler+0x4da>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00d      	beq.n	800134e <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f89c 	bl	800147c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	2b00      	cmp	r3, #0
 8001356:	d04f      	beq.n	80013f8 <HAL_ADC_IRQHandler+0x584>
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0310 	and.w	r3, r3, #16
 800135e:	2b00      	cmp	r3, #0
 8001360:	d04a      	beq.n	80013f8 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001366:	2b01      	cmp	r3, #1
 8001368:	d102      	bne.n	8001370 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 800136a:	2301      	movs	r3, #1
 800136c:	61fb      	str	r3, [r7, #28]
 800136e:	e02d      	b.n	80013cc <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001378:	d004      	beq.n	8001384 <HAL_ADC_IRQHandler+0x510>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a03      	ldr	r2, [pc, #12]	; (800138c <HAL_ADC_IRQHandler+0x518>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d109      	bne.n	8001398 <HAL_ADC_IRQHandler+0x524>
 8001384:	4b02      	ldr	r3, [pc, #8]	; (8001390 <HAL_ADC_IRQHandler+0x51c>)
 8001386:	e008      	b.n	800139a <HAL_ADC_IRQHandler+0x526>
 8001388:	50000400 	.word	0x50000400
 800138c:	50000100 	.word	0x50000100
 8001390:	50000300 	.word	0x50000300
 8001394:	50000700 	.word	0x50000700
 8001398:	4b28      	ldr	r3, [pc, #160]	; (800143c <HAL_ADC_IRQHandler+0x5c8>)
 800139a:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 031f 	and.w	r3, r3, #31
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d109      	bne.n	80013bc <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d10a      	bne.n	80013cc <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80013b6:	2301      	movs	r3, #1
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	e007      	b.n	80013cc <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80013c8:	2301      	movs	r3, #1
 80013ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d10e      	bne.n	80013f0 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f043 0202 	orr.w	r2, r3, #2
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fa0a 	bl	8000804 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2210      	movs	r2, #16
 80013f6:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d018      	beq.n	8001434 <HAL_ADC_IRQHandler+0x5c0>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001408:	2b00      	cmp	r3, #0
 800140a:	d013      	beq.n	8001434 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141c:	f043 0208 	orr.w	r2, r3, #8
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 f810 	bl	8001454 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001434:	bf00      	nop
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	50000700 	.word	0x50000700

08001440 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001490:	b480      	push	{r7}
 8001492:	b09b      	sub	sp, #108	; 0x6c
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <HAL_ADC_ConfigChannel+0x22>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e2ca      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x5b8>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f040 82ae 	bne.w	8001a26 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d81c      	bhi.n	800150c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	461a      	mov	r2, r3
 80014e6:	231f      	movs	r3, #31
 80014e8:	4093      	lsls	r3, r2
 80014ea:	43db      	mvns	r3, r3
 80014ec:	4019      	ands	r1, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	6818      	ldr	r0, [r3, #0]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	631a      	str	r2, [r3, #48]	; 0x30
 800150a:	e063      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b09      	cmp	r3, #9
 8001512:	d81e      	bhi.n	8001552 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4413      	add	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	3b1e      	subs	r3, #30
 8001528:	221f      	movs	r2, #31
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	4019      	ands	r1, r3
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	3b1e      	subs	r3, #30
 8001544:	fa00 f203 	lsl.w	r2, r0, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	635a      	str	r2, [r3, #52]	; 0x34
 8001550:	e040      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b0e      	cmp	r3, #14
 8001558:	d81e      	bhi.n	8001598 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	3b3c      	subs	r3, #60	; 0x3c
 800156e:	221f      	movs	r2, #31
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	4019      	ands	r1, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	3b3c      	subs	r3, #60	; 0x3c
 800158a:	fa00 f203 	lsl.w	r2, r0, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	639a      	str	r2, [r3, #56]	; 0x38
 8001596:	e01d      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	3b5a      	subs	r3, #90	; 0x5a
 80015ac:	221f      	movs	r2, #31
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	4019      	ands	r1, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	3b5a      	subs	r3, #90	; 0x5a
 80015c8:	fa00 f203 	lsl.w	r2, r0, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f040 80e5 	bne.w	80017ae <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	d91c      	bls.n	8001626 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6999      	ldr	r1, [r3, #24]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	3b1e      	subs	r3, #30
 80015fe:	2207      	movs	r2, #7
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	4019      	ands	r1, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	6898      	ldr	r0, [r3, #8]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	3b1e      	subs	r3, #30
 8001618:	fa00 f203 	lsl.w	r2, r0, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	619a      	str	r2, [r3, #24]
 8001624:	e019      	b.n	800165a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6959      	ldr	r1, [r3, #20]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4613      	mov	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4413      	add	r3, r2
 8001636:	2207      	movs	r2, #7
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	4019      	ands	r1, r3
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	6898      	ldr	r0, [r3, #8]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4613      	mov	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4413      	add	r3, r2
 800164e:	fa00 f203 	lsl.w	r2, r0, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	3b01      	subs	r3, #1
 8001678:	2b03      	cmp	r3, #3
 800167a:	d84f      	bhi.n	800171c <HAL_ADC_ConfigChannel+0x28c>
 800167c:	a201      	add	r2, pc, #4	; (adr r2, 8001684 <HAL_ADC_ConfigChannel+0x1f4>)
 800167e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001682:	bf00      	nop
 8001684:	08001695 	.word	0x08001695
 8001688:	080016b7 	.word	0x080016b7
 800168c:	080016d9 	.word	0x080016d9
 8001690:	080016fb 	.word	0x080016fb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800169a:	4b9a      	ldr	r3, [pc, #616]	; (8001904 <HAL_ADC_ConfigChannel+0x474>)
 800169c:	4013      	ands	r3, r2
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	0691      	lsls	r1, r2, #26
 80016a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016a6:	430a      	orrs	r2, r1
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016b2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016b4:	e07e      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016bc:	4b91      	ldr	r3, [pc, #580]	; (8001904 <HAL_ADC_ConfigChannel+0x474>)
 80016be:	4013      	ands	r3, r2
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	0691      	lsls	r1, r2, #26
 80016c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016c8:	430a      	orrs	r2, r1
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016d4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016d6:	e06d      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80016de:	4b89      	ldr	r3, [pc, #548]	; (8001904 <HAL_ADC_ConfigChannel+0x474>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	0691      	lsls	r1, r2, #26
 80016e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016ea:	430a      	orrs	r2, r1
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016f6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016f8:	e05c      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001700:	4b80      	ldr	r3, [pc, #512]	; (8001904 <HAL_ADC_ConfigChannel+0x474>)
 8001702:	4013      	ands	r3, r2
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	0691      	lsls	r1, r2, #26
 800170a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800170c:	430a      	orrs	r2, r1
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001718:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800171a:	e04b      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	069b      	lsls	r3, r3, #26
 800172c:	429a      	cmp	r2, r3
 800172e:	d107      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800173e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001746:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	069b      	lsls	r3, r3, #26
 8001750:	429a      	cmp	r2, r3
 8001752:	d107      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001762:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800176a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	069b      	lsls	r3, r3, #26
 8001774:	429a      	cmp	r2, r3
 8001776:	d107      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001786:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800178e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	069b      	lsls	r3, r3, #26
 8001798:	429a      	cmp	r2, r3
 800179a:	d10a      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017aa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80017ac:	e001      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80017ae:	bf00      	nop
 80017b0:	e000      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80017b2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d108      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x344>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x344>
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x346>
 80017d4:	2300      	movs	r3, #0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f040 8130 	bne.w	8001a3c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d00f      	beq.n	8001804 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2201      	movs	r2, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	400a      	ands	r2, r1
 80017fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001802:	e049      	b.n	8001898 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	409a      	lsls	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b09      	cmp	r3, #9
 8001824:	d91c      	bls.n	8001860 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6999      	ldr	r1, [r3, #24]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	3b1b      	subs	r3, #27
 8001838:	2207      	movs	r2, #7
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	4019      	ands	r1, r3
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6898      	ldr	r0, [r3, #8]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	3b1b      	subs	r3, #27
 8001852:	fa00 f203 	lsl.w	r2, r0, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	619a      	str	r2, [r3, #24]
 800185e:	e01b      	b.n	8001898 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6959      	ldr	r1, [r3, #20]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	2207      	movs	r2, #7
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	4019      	ands	r1, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6898      	ldr	r0, [r3, #8]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	fa00 f203 	lsl.w	r2, r0, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018a0:	d004      	beq.n	80018ac <HAL_ADC_ConfigChannel+0x41c>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a18      	ldr	r2, [pc, #96]	; (8001908 <HAL_ADC_ConfigChannel+0x478>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d101      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x420>
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_ADC_ConfigChannel+0x47c>)
 80018ae:	e000      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x422>
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_ADC_ConfigChannel+0x480>)
 80018b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b10      	cmp	r3, #16
 80018ba:	d105      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80018bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d015      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80018cc:	2b11      	cmp	r3, #17
 80018ce:	d105      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80018d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00b      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80018e0:	2b12      	cmp	r3, #18
 80018e2:	f040 80ab 	bne.w	8001a3c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80018e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 80a4 	bne.w	8001a3c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018fc:	d10a      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x484>
 80018fe:	4b02      	ldr	r3, [pc, #8]	; (8001908 <HAL_ADC_ConfigChannel+0x478>)
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	e022      	b.n	800194a <HAL_ADC_ConfigChannel+0x4ba>
 8001904:	83fff000 	.word	0x83fff000
 8001908:	50000100 	.word	0x50000100
 800190c:	50000300 	.word	0x50000300
 8001910:	50000700 	.word	0x50000700
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a4e      	ldr	r2, [pc, #312]	; (8001a54 <HAL_ADC_ConfigChannel+0x5c4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d103      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x496>
 800191e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	e011      	b.n	800194a <HAL_ADC_ConfigChannel+0x4ba>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a4b      	ldr	r2, [pc, #300]	; (8001a58 <HAL_ADC_ConfigChannel+0x5c8>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d102      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x4a6>
 8001930:	4b4a      	ldr	r3, [pc, #296]	; (8001a5c <HAL_ADC_ConfigChannel+0x5cc>)
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	e009      	b.n	800194a <HAL_ADC_ConfigChannel+0x4ba>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a48      	ldr	r2, [pc, #288]	; (8001a5c <HAL_ADC_ConfigChannel+0x5cc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d102      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x4b6>
 8001940:	4b45      	ldr	r3, [pc, #276]	; (8001a58 <HAL_ADC_ConfigChannel+0x5c8>)
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e001      	b.n	800194a <HAL_ADC_ConfigChannel+0x4ba>
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b01      	cmp	r3, #1
 8001956:	d108      	bne.n	800196a <HAL_ADC_ConfigChannel+0x4da>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b01      	cmp	r3, #1
 8001964:	d101      	bne.n	800196a <HAL_ADC_ConfigChannel+0x4da>
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <HAL_ADC_ConfigChannel+0x4dc>
 800196a:	2300      	movs	r3, #0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d150      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001970:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001972:	2b00      	cmp	r3, #0
 8001974:	d010      	beq.n	8001998 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	2b01      	cmp	r3, #1
 8001980:	d107      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x502>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x502>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_ADC_ConfigChannel+0x504>
 8001992:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001994:	2b00      	cmp	r3, #0
 8001996:	d13c      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b10      	cmp	r3, #16
 800199e:	d11d      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x54c>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019a8:	d118      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80019aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019b6:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <HAL_ADC_ConfigChannel+0x5d0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a2a      	ldr	r2, [pc, #168]	; (8001a64 <HAL_ADC_ConfigChannel+0x5d4>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	0c9a      	lsrs	r2, r3, #18
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019cc:	e002      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f9      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019da:	e02e      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b11      	cmp	r3, #17
 80019e2:	d10b      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x56c>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ec:	d106      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80019ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80019f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019fa:	e01e      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b12      	cmp	r3, #18
 8001a02:	d11a      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a0e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a10:	e013      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f043 0220 	orr.w	r2, r3, #32
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001a24:	e00a      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f043 0220 	orr.w	r2, r3, #32
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001a38:	e000      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a3a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	376c      	adds	r7, #108	; 0x6c
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	50000100 	.word	0x50000100
 8001a58:	50000400 	.word	0x50000400
 8001a5c:	50000500 	.word	0x50000500
 8001a60:	20000000 	.word	0x20000000
 8001a64:	431bde83 	.word	0x431bde83

08001a68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d108      	bne.n	8001a94 <ADC_Enable+0x2c>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <ADC_Enable+0x2c>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <ADC_Enable+0x2e>
 8001a94:	2300      	movs	r3, #0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d143      	bne.n	8001b22 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <ADC_Enable+0xc4>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00d      	beq.n	8001ac4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	f043 0210 	orr.w	r2, r3, #16
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	f043 0201 	orr.w	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e02f      	b.n	8001b24 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0201 	orr.w	r2, r2, #1
 8001ad2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001ad4:	f7fe fe5c 	bl	8000790 <HAL_GetTick>
 8001ad8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ada:	e01b      	b.n	8001b14 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001adc:	f7fe fe58 	bl	8000790 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d914      	bls.n	8001b14 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d00d      	beq.n	8001b14 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f043 0210 	orr.w	r2, r3, #16
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e007      	b.n	8001b24 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d1dc      	bne.n	8001adc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	8000003f 	.word	0x8000003f

08001b30 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d108      	bne.n	8001b5c <ADC_Disable+0x2c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <ADC_Disable+0x2c>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <ADC_Disable+0x2e>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d047      	beq.n	8001bf2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 030d 	and.w	r3, r3, #13
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d10f      	bne.n	8001b90 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0202 	orr.w	r2, r2, #2
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2203      	movs	r2, #3
 8001b86:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001b88:	f7fe fe02 	bl	8000790 <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b8e:	e029      	b.n	8001be4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f043 0210 	orr.w	r2, r3, #16
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba0:	f043 0201 	orr.w	r2, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e023      	b.n	8001bf4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bac:	f7fe fdf0 	bl	8000790 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d914      	bls.n	8001be4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d10d      	bne.n	8001be4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	f043 0210 	orr.w	r2, r3, #16
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd8:	f043 0201 	orr.w	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e007      	b.n	8001bf4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d0dc      	beq.n	8001bac <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <__NVIC_SetPriorityGrouping+0x44>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2e:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <__NVIC_SetPriorityGrouping+0x44>)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	60d3      	str	r3, [r2, #12]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <__NVIC_GetPriorityGrouping+0x18>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	f003 0307 	and.w	r3, r3, #7
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	db0b      	blt.n	8001c8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	f003 021f 	and.w	r2, r3, #31
 8001c78:	4907      	ldr	r1, [pc, #28]	; (8001c98 <__NVIC_EnableIRQ+0x38>)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	095b      	lsrs	r3, r3, #5
 8001c80:	2001      	movs	r0, #1
 8001c82:	fa00 f202 	lsl.w	r2, r0, r2
 8001c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000e100 	.word	0xe000e100

08001c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	db0a      	blt.n	8001cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	490c      	ldr	r1, [pc, #48]	; (8001ce8 <__NVIC_SetPriority+0x4c>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	0112      	lsls	r2, r2, #4
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc4:	e00a      	b.n	8001cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4908      	ldr	r1, [pc, #32]	; (8001cec <__NVIC_SetPriority+0x50>)
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	3b04      	subs	r3, #4
 8001cd4:	0112      	lsls	r2, r2, #4
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	440b      	add	r3, r1
 8001cda:	761a      	strb	r2, [r3, #24]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000e100 	.word	0xe000e100
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	; 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f1c3 0307 	rsb	r3, r3, #7
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	bf28      	it	cs
 8001d0e:	2304      	movcs	r3, #4
 8001d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3304      	adds	r3, #4
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d902      	bls.n	8001d20 <NVIC_EncodePriority+0x30>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3b03      	subs	r3, #3
 8001d1e:	e000      	b.n	8001d22 <NVIC_EncodePriority+0x32>
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	401a      	ands	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d38:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	43d9      	mvns	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	4313      	orrs	r3, r2
         );
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3724      	adds	r7, #36	; 0x24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d68:	d301      	bcc.n	8001d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00f      	b.n	8001d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <SysTick_Config+0x40>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d76:	210f      	movs	r1, #15
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	f7ff ff8e 	bl	8001c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <SysTick_Config+0x40>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <SysTick_Config+0x40>)
 8001d88:	2207      	movs	r2, #7
 8001d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	e000e010 	.word	0xe000e010

08001d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ff29 	bl	8001bfc <__NVIC_SetPriorityGrouping>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc4:	f7ff ff3e 	bl	8001c44 <__NVIC_GetPriorityGrouping>
 8001dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	6978      	ldr	r0, [r7, #20]
 8001dd0:	f7ff ff8e 	bl	8001cf0 <NVIC_EncodePriority>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff5d 	bl	8001c9c <__NVIC_SetPriority>
}
 8001de2:	bf00      	nop
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff31 	bl	8001c60 <__NVIC_EnableIRQ>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ffa2 	bl	8001d58 <SysTick_Config>
 8001e14:	4603      	mov	r3, r0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2e:	e154      	b.n	80020da <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2101      	movs	r1, #1
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8146 	beq.w	80020d4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d005      	beq.n	8001e60 <HAL_GPIO_Init+0x40>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d130      	bne.n	8001ec2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e96:	2201      	movs	r2, #1
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	f003 0201 	and.w	r2, r3, #1
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d017      	beq.n	8001efe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d123      	bne.n	8001f52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	08da      	lsrs	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3208      	adds	r2, #8
 8001f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	220f      	movs	r2, #15
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	08da      	lsrs	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3208      	adds	r2, #8
 8001f4c:	6939      	ldr	r1, [r7, #16]
 8001f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0203 	and.w	r2, r3, #3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80a0 	beq.w	80020d4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f94:	4b58      	ldr	r3, [pc, #352]	; (80020f8 <HAL_GPIO_Init+0x2d8>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4a57      	ldr	r2, [pc, #348]	; (80020f8 <HAL_GPIO_Init+0x2d8>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6193      	str	r3, [r2, #24]
 8001fa0:	4b55      	ldr	r3, [pc, #340]	; (80020f8 <HAL_GPIO_Init+0x2d8>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fac:	4a53      	ldr	r2, [pc, #332]	; (80020fc <HAL_GPIO_Init+0x2dc>)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fd6:	d019      	beq.n	800200c <HAL_GPIO_Init+0x1ec>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a49      	ldr	r2, [pc, #292]	; (8002100 <HAL_GPIO_Init+0x2e0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d013      	beq.n	8002008 <HAL_GPIO_Init+0x1e8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a48      	ldr	r2, [pc, #288]	; (8002104 <HAL_GPIO_Init+0x2e4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00d      	beq.n	8002004 <HAL_GPIO_Init+0x1e4>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a47      	ldr	r2, [pc, #284]	; (8002108 <HAL_GPIO_Init+0x2e8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d007      	beq.n	8002000 <HAL_GPIO_Init+0x1e0>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a46      	ldr	r2, [pc, #280]	; (800210c <HAL_GPIO_Init+0x2ec>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d101      	bne.n	8001ffc <HAL_GPIO_Init+0x1dc>
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	e008      	b.n	800200e <HAL_GPIO_Init+0x1ee>
 8001ffc:	2305      	movs	r3, #5
 8001ffe:	e006      	b.n	800200e <HAL_GPIO_Init+0x1ee>
 8002000:	2303      	movs	r3, #3
 8002002:	e004      	b.n	800200e <HAL_GPIO_Init+0x1ee>
 8002004:	2302      	movs	r3, #2
 8002006:	e002      	b.n	800200e <HAL_GPIO_Init+0x1ee>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_GPIO_Init+0x1ee>
 800200c:	2300      	movs	r3, #0
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	f002 0203 	and.w	r2, r2, #3
 8002014:	0092      	lsls	r2, r2, #2
 8002016:	4093      	lsls	r3, r2
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800201e:	4937      	ldr	r1, [pc, #220]	; (80020fc <HAL_GPIO_Init+0x2dc>)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800202c:	4b38      	ldr	r3, [pc, #224]	; (8002110 <HAL_GPIO_Init+0x2f0>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002050:	4a2f      	ldr	r2, [pc, #188]	; (8002110 <HAL_GPIO_Init+0x2f0>)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002056:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <HAL_GPIO_Init+0x2f0>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800207a:	4a25      	ldr	r2, [pc, #148]	; (8002110 <HAL_GPIO_Init+0x2f0>)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002080:	4b23      	ldr	r3, [pc, #140]	; (8002110 <HAL_GPIO_Init+0x2f0>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020a4:	4a1a      	ldr	r2, [pc, #104]	; (8002110 <HAL_GPIO_Init+0x2f0>)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020aa:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_GPIO_Init+0x2f0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020ce:	4a10      	ldr	r2, [pc, #64]	; (8002110 <HAL_GPIO_Init+0x2f0>)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	3301      	adds	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	fa22 f303 	lsr.w	r3, r2, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f47f aea3 	bne.w	8001e30 <HAL_GPIO_Init+0x10>
  }
}
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40010000 	.word	0x40010000
 8002100:	48000400 	.word	0x48000400
 8002104:	48000800 	.word	0x48000800
 8002108:	48000c00 	.word	0x48000c00
 800210c:	48001000 	.word	0x48001000
 8002110:	40010400 	.word	0x40010400

08002114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
 8002120:	4613      	mov	r3, r2
 8002122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002124:	787b      	ldrb	r3, [r7, #1]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002130:	e002      	b.n	8002138 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002132:	887a      	ldrh	r2, [r7, #2]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800214a:	af00      	add	r7, sp, #0
 800214c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002150:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002154:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d102      	bne.n	800216a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	f001 b823 	b.w	80031b0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 817d 	beq.w	800247a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002180:	4bbc      	ldr	r3, [pc, #752]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b04      	cmp	r3, #4
 800218a:	d00c      	beq.n	80021a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800218c:	4bb9      	ldr	r3, [pc, #740]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b08      	cmp	r3, #8
 8002196:	d15c      	bne.n	8002252 <HAL_RCC_OscConfig+0x10e>
 8002198:	4bb6      	ldr	r3, [pc, #728]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a4:	d155      	bne.n	8002252 <HAL_RCC_OscConfig+0x10e>
 80021a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021aa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	095b      	lsrs	r3, r3, #5
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d102      	bne.n	80021d8 <HAL_RCC_OscConfig+0x94>
 80021d2:	4ba8      	ldr	r3, [pc, #672]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	e015      	b.n	8002204 <HAL_RCC_OscConfig+0xc0>
 80021d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021dc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80021e4:	fa93 f3a3 	rbit	r3, r3
 80021e8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80021ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80021f4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002200:	4b9c      	ldr	r3, [pc, #624]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002208:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800220c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002210:	fa92 f2a2 	rbit	r2, r2
 8002214:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002218:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800221c:	fab2 f282 	clz	r2, r2
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	f042 0220 	orr.w	r2, r2, #32
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	f002 021f 	and.w	r2, r2, #31
 800222c:	2101      	movs	r1, #1
 800222e:	fa01 f202 	lsl.w	r2, r1, r2
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 811f 	beq.w	8002478 <HAL_RCC_OscConfig+0x334>
 800223a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 8116 	bne.w	8002478 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	f000 bfaf 	b.w	80031b0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002256:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002262:	d106      	bne.n	8002272 <HAL_RCC_OscConfig+0x12e>
 8002264:	4b83      	ldr	r3, [pc, #524]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a82      	ldr	r2, [pc, #520]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 800226a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	e036      	b.n	80022e0 <HAL_RCC_OscConfig+0x19c>
 8002272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002276:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x158>
 8002282:	4b7c      	ldr	r3, [pc, #496]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a7b      	ldr	r2, [pc, #492]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 8002288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b79      	ldr	r3, [pc, #484]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a78      	ldr	r2, [pc, #480]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 8002294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e021      	b.n	80022e0 <HAL_RCC_OscConfig+0x19c>
 800229c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x184>
 80022ae:	4b71      	ldr	r3, [pc, #452]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a70      	ldr	r2, [pc, #448]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 80022b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	4b6e      	ldr	r3, [pc, #440]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a6d      	ldr	r2, [pc, #436]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e00b      	b.n	80022e0 <HAL_RCC_OscConfig+0x19c>
 80022c8:	4b6a      	ldr	r3, [pc, #424]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a69      	ldr	r2, [pc, #420]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b67      	ldr	r3, [pc, #412]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a66      	ldr	r2, [pc, #408]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 80022da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022de:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022e0:	4b64      	ldr	r3, [pc, #400]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	f023 020f 	bic.w	r2, r3, #15
 80022e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	495f      	ldr	r1, [pc, #380]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d059      	beq.n	80023be <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7fe fa41 	bl	8000790 <HAL_GetTick>
 800230e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	e00a      	b.n	800232a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002314:	f7fe fa3c 	bl	8000790 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b64      	cmp	r3, #100	; 0x64
 8002322:	d902      	bls.n	800232a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	f000 bf43 	b.w	80031b0 <HAL_RCC_OscConfig+0x106c>
 800232a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800232e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800233e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b01      	cmp	r3, #1
 8002354:	d102      	bne.n	800235c <HAL_RCC_OscConfig+0x218>
 8002356:	4b47      	ldr	r3, [pc, #284]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	e015      	b.n	8002388 <HAL_RCC_OscConfig+0x244>
 800235c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002360:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002374:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002378:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800237c:	fa93 f3a3 	rbit	r3, r3
 8002380:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002384:	4b3b      	ldr	r3, [pc, #236]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800238c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002390:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002394:	fa92 f2a2 	rbit	r2, r2
 8002398:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800239c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80023a0:	fab2 f282 	clz	r2, r2
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	f042 0220 	orr.w	r2, r2, #32
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	f002 021f 	and.w	r2, r2, #31
 80023b0:	2101      	movs	r1, #1
 80023b2:	fa01 f202 	lsl.w	r2, r1, r2
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0ab      	beq.n	8002314 <HAL_RCC_OscConfig+0x1d0>
 80023bc:	e05d      	b.n	800247a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7fe f9e7 	bl	8000790 <HAL_GetTick>
 80023c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	e00a      	b.n	80023de <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c8:	f7fe f9e2 	bl	8000790 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b64      	cmp	r3, #100	; 0x64
 80023d6:	d902      	bls.n	80023de <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	f000 bee9 	b.w	80031b0 <HAL_RCC_OscConfig+0x106c>
 80023de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80023f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d102      	bne.n	8002410 <HAL_RCC_OscConfig+0x2cc>
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	e015      	b.n	800243c <HAL_RCC_OscConfig+0x2f8>
 8002410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002414:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002424:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002428:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800242c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002438:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <HAL_RCC_OscConfig+0x330>)
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002440:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002444:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002448:	fa92 f2a2 	rbit	r2, r2
 800244c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002450:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002454:	fab2 f282 	clz	r2, r2
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	f042 0220 	orr.w	r2, r2, #32
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	f002 021f 	and.w	r2, r2, #31
 8002464:	2101      	movs	r1, #1
 8002466:	fa01 f202 	lsl.w	r2, r1, r2
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ab      	bne.n	80023c8 <HAL_RCC_OscConfig+0x284>
 8002470:	e003      	b.n	800247a <HAL_RCC_OscConfig+0x336>
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 817d 	beq.w	800278a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002490:	4ba6      	ldr	r3, [pc, #664]	; (800272c <HAL_RCC_OscConfig+0x5e8>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00b      	beq.n	80024b4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800249c:	4ba3      	ldr	r3, [pc, #652]	; (800272c <HAL_RCC_OscConfig+0x5e8>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d172      	bne.n	800258e <HAL_RCC_OscConfig+0x44a>
 80024a8:	4ba0      	ldr	r3, [pc, #640]	; (800272c <HAL_RCC_OscConfig+0x5e8>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d16c      	bne.n	800258e <HAL_RCC_OscConfig+0x44a>
 80024b4:	2302      	movs	r3, #2
 80024b6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80024c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d102      	bne.n	80024e4 <HAL_RCC_OscConfig+0x3a0>
 80024de:	4b93      	ldr	r3, [pc, #588]	; (800272c <HAL_RCC_OscConfig+0x5e8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	e013      	b.n	800250c <HAL_RCC_OscConfig+0x3c8>
 80024e4:	2302      	movs	r3, #2
 80024e6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80024f6:	2302      	movs	r3, #2
 80024f8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80024fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002508:	4b88      	ldr	r3, [pc, #544]	; (800272c <HAL_RCC_OscConfig+0x5e8>)
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	2202      	movs	r2, #2
 800250e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002512:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002516:	fa92 f2a2 	rbit	r2, r2
 800251a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800251e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002522:	fab2 f282 	clz	r2, r2
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	f042 0220 	orr.w	r2, r2, #32
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	f002 021f 	and.w	r2, r2, #31
 8002532:	2101      	movs	r1, #1
 8002534:	fa01 f202 	lsl.w	r2, r1, r2
 8002538:	4013      	ands	r3, r2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00a      	beq.n	8002554 <HAL_RCC_OscConfig+0x410>
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d002      	beq.n	8002554 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	f000 be2e 	b.w	80031b0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002554:	4b75      	ldr	r3, [pc, #468]	; (800272c <HAL_RCC_OscConfig+0x5e8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800255c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002560:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	21f8      	movs	r1, #248	; 0xf8
 800256a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002572:	fa91 f1a1 	rbit	r1, r1
 8002576:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800257a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800257e:	fab1 f181 	clz	r1, r1
 8002582:	b2c9      	uxtb	r1, r1
 8002584:	408b      	lsls	r3, r1
 8002586:	4969      	ldr	r1, [pc, #420]	; (800272c <HAL_RCC_OscConfig+0x5e8>)
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258c:	e0fd      	b.n	800278a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800258e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002592:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8088 	beq.w	80026b0 <HAL_RCC_OscConfig+0x56c>
 80025a0:	2301      	movs	r3, #1
 80025a2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80025b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	461a      	mov	r2, r3
 80025c8:	2301      	movs	r3, #1
 80025ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7fe f8e0 	bl	8000790 <HAL_GetTick>
 80025d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d6:	f7fe f8db 	bl	8000790 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d902      	bls.n	80025ec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	f000 bde2 	b.w	80031b0 <HAL_RCC_OscConfig+0x106c>
 80025ec:	2302      	movs	r3, #2
 80025ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80025fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d102      	bne.n	800261c <HAL_RCC_OscConfig+0x4d8>
 8002616:	4b45      	ldr	r3, [pc, #276]	; (800272c <HAL_RCC_OscConfig+0x5e8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	e013      	b.n	8002644 <HAL_RCC_OscConfig+0x500>
 800261c:	2302      	movs	r3, #2
 800261e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800262e:	2302      	movs	r3, #2
 8002630:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002634:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002640:	4b3a      	ldr	r3, [pc, #232]	; (800272c <HAL_RCC_OscConfig+0x5e8>)
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	2202      	movs	r2, #2
 8002646:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800264a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800264e:	fa92 f2a2 	rbit	r2, r2
 8002652:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002656:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800265a:	fab2 f282 	clz	r2, r2
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	f042 0220 	orr.w	r2, r2, #32
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	f002 021f 	and.w	r2, r2, #31
 800266a:	2101      	movs	r1, #1
 800266c:	fa01 f202 	lsl.w	r2, r1, r2
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0af      	beq.n	80025d6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002676:	4b2d      	ldr	r3, [pc, #180]	; (800272c <HAL_RCC_OscConfig+0x5e8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800267e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002682:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	21f8      	movs	r1, #248	; 0xf8
 800268c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002694:	fa91 f1a1 	rbit	r1, r1
 8002698:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800269c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80026a0:	fab1 f181 	clz	r1, r1
 80026a4:	b2c9      	uxtb	r1, r1
 80026a6:	408b      	lsls	r3, r1
 80026a8:	4920      	ldr	r1, [pc, #128]	; (800272c <HAL_RCC_OscConfig+0x5e8>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]
 80026ae:	e06c      	b.n	800278a <HAL_RCC_OscConfig+0x646>
 80026b0:	2301      	movs	r3, #1
 80026b2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80026c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	461a      	mov	r2, r3
 80026d8:	2300      	movs	r3, #0
 80026da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe f858 	bl	8000790 <HAL_GetTick>
 80026e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e6:	f7fe f853 	bl	8000790 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d902      	bls.n	80026fc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	f000 bd5a 	b.w	80031b0 <HAL_RCC_OscConfig+0x106c>
 80026fc:	2302      	movs	r3, #2
 80026fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800270e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b01      	cmp	r3, #1
 8002724:	d104      	bne.n	8002730 <HAL_RCC_OscConfig+0x5ec>
 8002726:	4b01      	ldr	r3, [pc, #4]	; (800272c <HAL_RCC_OscConfig+0x5e8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	e015      	b.n	8002758 <HAL_RCC_OscConfig+0x614>
 800272c:	40021000 	.word	0x40021000
 8002730:	2302      	movs	r3, #2
 8002732:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002742:	2302      	movs	r3, #2
 8002744:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002748:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002754:	4bc8      	ldr	r3, [pc, #800]	; (8002a78 <HAL_RCC_OscConfig+0x934>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	2202      	movs	r2, #2
 800275a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800275e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002762:	fa92 f2a2 	rbit	r2, r2
 8002766:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800276a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800276e:	fab2 f282 	clz	r2, r2
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	f042 0220 	orr.w	r2, r2, #32
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	f002 021f 	and.w	r2, r2, #31
 800277e:	2101      	movs	r1, #1
 8002780:	fa01 f202 	lsl.w	r2, r1, r2
 8002784:	4013      	ands	r3, r2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1ad      	bne.n	80026e6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800278a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8110 	beq.w	80029c0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d079      	beq.n	80028a4 <HAL_RCC_OscConfig+0x760>
 80027b0:	2301      	movs	r3, #1
 80027b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80027c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	4bab      	ldr	r3, [pc, #684]	; (8002a7c <HAL_RCC_OscConfig+0x938>)
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	461a      	mov	r2, r3
 80027d6:	2301      	movs	r3, #1
 80027d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027da:	f7fd ffd9 	bl	8000790 <HAL_GetTick>
 80027de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e4:	f7fd ffd4 	bl	8000790 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d902      	bls.n	80027fa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	f000 bcdb 	b.w	80031b0 <HAL_RCC_OscConfig+0x106c>
 80027fa:	2302      	movs	r3, #2
 80027fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800280c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002810:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002814:	2202      	movs	r2, #2
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	fa93 f2a3 	rbit	r2, r3
 8002826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002838:	2202      	movs	r2, #2
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	fa93 f2a3 	rbit	r2, r3
 800284a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002852:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002854:	4b88      	ldr	r3, [pc, #544]	; (8002a78 <HAL_RCC_OscConfig+0x934>)
 8002856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002860:	2102      	movs	r1, #2
 8002862:	6019      	str	r1, [r3, #0]
 8002864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002868:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	fa93 f1a3 	rbit	r1, r3
 8002872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002876:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800287a:	6019      	str	r1, [r3, #0]
  return result;
 800287c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002880:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2101      	movs	r1, #1
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	4013      	ands	r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0a0      	beq.n	80027e4 <HAL_RCC_OscConfig+0x6a0>
 80028a2:	e08d      	b.n	80029c0 <HAL_RCC_OscConfig+0x87c>
 80028a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028ac:	2201      	movs	r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	fa93 f2a3 	rbit	r2, r3
 80028be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80028c6:	601a      	str	r2, [r3, #0]
  return result;
 80028c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80028d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	4b68      	ldr	r3, [pc, #416]	; (8002a7c <HAL_RCC_OscConfig+0x938>)
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	461a      	mov	r2, r3
 80028e2:	2300      	movs	r3, #0
 80028e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e6:	f7fd ff53 	bl	8000790 <HAL_GetTick>
 80028ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f0:	f7fd ff4e 	bl	8000790 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d902      	bls.n	8002906 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	f000 bc55 	b.w	80031b0 <HAL_RCC_OscConfig+0x106c>
 8002906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800290e:	2202      	movs	r2, #2
 8002910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002916:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	fa93 f2a3 	rbit	r2, r3
 8002920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002924:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002932:	2202      	movs	r2, #2
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	fa93 f2a3 	rbit	r2, r3
 8002944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002948:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002956:	2202      	movs	r2, #2
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	fa93 f2a3 	rbit	r2, r3
 8002968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002970:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002972:	4b41      	ldr	r3, [pc, #260]	; (8002a78 <HAL_RCC_OscConfig+0x934>)
 8002974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800297e:	2102      	movs	r1, #2
 8002980:	6019      	str	r1, [r3, #0]
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	fa93 f1a3 	rbit	r1, r3
 8002990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002994:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002998:	6019      	str	r1, [r3, #0]
  return result;
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	fab3 f383 	clz	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	2101      	movs	r1, #1
 80029b6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d197      	bne.n	80028f0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 81a1 	beq.w	8002d18 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029dc:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <HAL_RCC_OscConfig+0x934>)
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d116      	bne.n	8002a16 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e8:	4b23      	ldr	r3, [pc, #140]	; (8002a78 <HAL_RCC_OscConfig+0x934>)
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	4a22      	ldr	r2, [pc, #136]	; (8002a78 <HAL_RCC_OscConfig+0x934>)
 80029ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f2:	61d3      	str	r3, [r2, #28]
 80029f4:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <HAL_RCC_OscConfig+0x934>)
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80029fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a00:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a0e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a16:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <HAL_RCC_OscConfig+0x93c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d11a      	bne.n	8002a58 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <HAL_RCC_OscConfig+0x93c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a16      	ldr	r2, [pc, #88]	; (8002a80 <HAL_RCC_OscConfig+0x93c>)
 8002a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2e:	f7fd feaf 	bl	8000790 <HAL_GetTick>
 8002a32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a36:	e009      	b.n	8002a4c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a38:	f7fd feaa 	bl	8000790 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b64      	cmp	r3, #100	; 0x64
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e3b1      	b.n	80031b0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <HAL_RCC_OscConfig+0x93c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0ef      	beq.n	8002a38 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d10d      	bne.n	8002a84 <HAL_RCC_OscConfig+0x940>
 8002a68:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <HAL_RCC_OscConfig+0x934>)
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	4a02      	ldr	r2, [pc, #8]	; (8002a78 <HAL_RCC_OscConfig+0x934>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6213      	str	r3, [r2, #32]
 8002a74:	e03c      	b.n	8002af0 <HAL_RCC_OscConfig+0x9ac>
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	10908120 	.word	0x10908120
 8002a80:	40007000 	.word	0x40007000
 8002a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10c      	bne.n	8002aae <HAL_RCC_OscConfig+0x96a>
 8002a94:	4bc1      	ldr	r3, [pc, #772]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	4ac0      	ldr	r2, [pc, #768]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002a9a:	f023 0301 	bic.w	r3, r3, #1
 8002a9e:	6213      	str	r3, [r2, #32]
 8002aa0:	4bbe      	ldr	r3, [pc, #760]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	4abd      	ldr	r2, [pc, #756]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002aa6:	f023 0304 	bic.w	r3, r3, #4
 8002aaa:	6213      	str	r3, [r2, #32]
 8002aac:	e020      	b.n	8002af0 <HAL_RCC_OscConfig+0x9ac>
 8002aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b05      	cmp	r3, #5
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x994>
 8002abe:	4bb7      	ldr	r3, [pc, #732]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	4ab6      	ldr	r2, [pc, #728]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002ac4:	f043 0304 	orr.w	r3, r3, #4
 8002ac8:	6213      	str	r3, [r2, #32]
 8002aca:	4bb4      	ldr	r3, [pc, #720]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	4ab3      	ldr	r2, [pc, #716]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6213      	str	r3, [r2, #32]
 8002ad6:	e00b      	b.n	8002af0 <HAL_RCC_OscConfig+0x9ac>
 8002ad8:	4bb0      	ldr	r3, [pc, #704]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	4aaf      	ldr	r2, [pc, #700]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	6213      	str	r3, [r2, #32]
 8002ae4:	4bad      	ldr	r3, [pc, #692]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4aac      	ldr	r2, [pc, #688]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002aea:	f023 0304 	bic.w	r3, r3, #4
 8002aee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 8081 	beq.w	8002c04 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b02:	f7fd fe45 	bl	8000790 <HAL_GetTick>
 8002b06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b0c:	f7fd fe40 	bl	8000790 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e345      	b.n	80031b0 <HAL_RCC_OscConfig+0x106c>
 8002b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b28:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b34:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	fa93 f2a3 	rbit	r2, r3
 8002b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b42:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b50:	2202      	movs	r2, #2
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b58:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	fa93 f2a3 	rbit	r2, r3
 8002b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b66:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b6a:	601a      	str	r2, [r3, #0]
  return result;
 8002b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b70:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b74:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f043 0302 	orr.w	r3, r3, #2
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d102      	bne.n	8002b90 <HAL_RCC_OscConfig+0xa4c>
 8002b8a:	4b84      	ldr	r3, [pc, #528]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	e013      	b.n	8002bb8 <HAL_RCC_OscConfig+0xa74>
 8002b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b94:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002b98:	2202      	movs	r2, #2
 8002b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	fa93 f2a3 	rbit	r2, r3
 8002baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	4b79      	ldr	r3, [pc, #484]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bbc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	6011      	str	r1, [r2, #0]
 8002bc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bc8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	fa92 f1a2 	rbit	r1, r2
 8002bd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bd6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002bda:	6011      	str	r1, [r2, #0]
  return result;
 8002bdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002be0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	fab2 f282 	clz	r2, r2
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	f002 021f 	and.w	r2, r2, #31
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d084      	beq.n	8002b0c <HAL_RCC_OscConfig+0x9c8>
 8002c02:	e07f      	b.n	8002d04 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c04:	f7fd fdc4 	bl	8000790 <HAL_GetTick>
 8002c08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0c:	e00b      	b.n	8002c26 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fd fdbf 	bl	8000790 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e2c4      	b.n	80031b0 <HAL_RCC_OscConfig+0x106c>
 8002c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c2e:	2202      	movs	r2, #2
 8002c30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c36:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	fa93 f2a3 	rbit	r2, r3
 8002c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c44:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c52:	2202      	movs	r2, #2
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	fa93 f2a3 	rbit	r2, r3
 8002c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c68:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c6c:	601a      	str	r2, [r3, #0]
  return result;
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c76:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c78:	fab3 f383 	clz	r3, r3
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f043 0302 	orr.w	r3, r3, #2
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d102      	bne.n	8002c92 <HAL_RCC_OscConfig+0xb4e>
 8002c8c:	4b43      	ldr	r3, [pc, #268]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	e013      	b.n	8002cba <HAL_RCC_OscConfig+0xb76>
 8002c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c96:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	fa93 f2a3 	rbit	r2, r3
 8002cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	4b39      	ldr	r3, [pc, #228]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cbe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	6011      	str	r1, [r2, #0]
 8002cc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	fa92 f1a2 	rbit	r1, r2
 8002cd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cd8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002cdc:	6011      	str	r1, [r2, #0]
  return result;
 8002cde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ce2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	fab2 f282 	clz	r2, r2
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	f002 021f 	and.w	r2, r2, #31
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d184      	bne.n	8002c0e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d04:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d105      	bne.n	8002d18 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0c:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	4a22      	ldr	r2, [pc, #136]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d16:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 8242 	beq.w	80031ae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d2a:	4b1c      	ldr	r3, [pc, #112]	; (8002d9c <HAL_RCC_OscConfig+0xc58>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	f000 8213 	beq.w	800315e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	f040 8162 	bne.w	800300e <HAL_RCC_OscConfig+0xeca>
 8002d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	fa93 f2a3 	rbit	r2, r3
 8002d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d6e:	601a      	str	r2, [r3, #0]
  return result;
 8002d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d74:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d78:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7fd fcfe 	bl	8000790 <HAL_GetTick>
 8002d94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d98:	e00c      	b.n	8002db4 <HAL_RCC_OscConfig+0xc70>
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da0:	f7fd fcf6 	bl	8000790 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e1fd      	b.n	80031b0 <HAL_RCC_OscConfig+0x106c>
 8002db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	fa93 f2a3 	rbit	r2, r3
 8002dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002dd8:	601a      	str	r2, [r3, #0]
  return result;
 8002dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dde:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002de2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de4:	fab3 f383 	clz	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d102      	bne.n	8002dfe <HAL_RCC_OscConfig+0xcba>
 8002df8:	4bb0      	ldr	r3, [pc, #704]	; (80030bc <HAL_RCC_OscConfig+0xf78>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	e027      	b.n	8002e4e <HAL_RCC_OscConfig+0xd0a>
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e10:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	fa93 f2a3 	rbit	r2, r3
 8002e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e28:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e36:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	fa93 f2a3 	rbit	r2, r3
 8002e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e44:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	4b9c      	ldr	r3, [pc, #624]	; (80030bc <HAL_RCC_OscConfig+0xf78>)
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e52:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e56:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e5a:	6011      	str	r1, [r2, #0]
 8002e5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e60:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	fa92 f1a2 	rbit	r1, r2
 8002e6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e6e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e72:	6011      	str	r1, [r2, #0]
  return result;
 8002e74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e78:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	fab2 f282 	clz	r2, r2
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	f042 0220 	orr.w	r2, r2, #32
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	f002 021f 	and.w	r2, r2, #31
 8002e8e:	2101      	movs	r1, #1
 8002e90:	fa01 f202 	lsl.w	r2, r1, r2
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d182      	bne.n	8002da0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e9a:	4b88      	ldr	r3, [pc, #544]	; (80030bc <HAL_RCC_OscConfig+0xf78>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	497f      	ldr	r1, [pc, #508]	; (80030bc <HAL_RCC_OscConfig+0xf78>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
 8002ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002eca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ece:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	fa93 f2a3 	rbit	r2, r3
 8002ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ee6:	601a      	str	r2, [r3, #0]
  return result;
 8002ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ef0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef2:	fab3 f383 	clz	r3, r3
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002efc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	461a      	mov	r2, r3
 8002f04:	2301      	movs	r3, #1
 8002f06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7fd fc42 	bl	8000790 <HAL_GetTick>
 8002f0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f10:	e009      	b.n	8002f26 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f12:	f7fd fc3d 	bl	8000790 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e144      	b.n	80031b0 <HAL_RCC_OscConfig+0x106c>
 8002f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f38:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	fa93 f2a3 	rbit	r2, r3
 8002f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f46:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f4a:	601a      	str	r2, [r3, #0]
  return result;
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d102      	bne.n	8002f70 <HAL_RCC_OscConfig+0xe2c>
 8002f6a:	4b54      	ldr	r3, [pc, #336]	; (80030bc <HAL_RCC_OscConfig+0xf78>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	e027      	b.n	8002fc0 <HAL_RCC_OscConfig+0xe7c>
 8002f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f74:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f82:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	fa93 f2a3 	rbit	r2, r3
 8002f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f90:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002f9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	fa93 f2a3 	rbit	r2, r3
 8002fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	4b3f      	ldr	r3, [pc, #252]	; (80030bc <HAL_RCC_OscConfig+0xf78>)
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fc4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002fc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fcc:	6011      	str	r1, [r2, #0]
 8002fce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fd2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	fa92 f1a2 	rbit	r1, r2
 8002fdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fe0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002fe4:	6011      	str	r1, [r2, #0]
  return result;
 8002fe6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fea:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	fab2 f282 	clz	r2, r2
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	f042 0220 	orr.w	r2, r2, #32
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	f002 021f 	and.w	r2, r2, #31
 8003000:	2101      	movs	r1, #1
 8003002:	fa01 f202 	lsl.w	r2, r1, r2
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d082      	beq.n	8002f12 <HAL_RCC_OscConfig+0xdce>
 800300c:	e0cf      	b.n	80031ae <HAL_RCC_OscConfig+0x106a>
 800300e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003012:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003016:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800301a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003020:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	fa93 f2a3 	rbit	r2, r3
 800302a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003032:	601a      	str	r2, [r3, #0]
  return result;
 8003034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003038:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800303c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003048:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	461a      	mov	r2, r3
 8003050:	2300      	movs	r3, #0
 8003052:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fd fb9c 	bl	8000790 <HAL_GetTick>
 8003058:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800305c:	e009      	b.n	8003072 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305e:	f7fd fb97 	bl	8000790 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e09e      	b.n	80031b0 <HAL_RCC_OscConfig+0x106c>
 8003072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003076:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800307a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800307e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003084:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	fa93 f2a3 	rbit	r2, r3
 800308e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003092:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003096:	601a      	str	r2, [r3, #0]
  return result;
 8003098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d104      	bne.n	80030c0 <HAL_RCC_OscConfig+0xf7c>
 80030b6:	4b01      	ldr	r3, [pc, #4]	; (80030bc <HAL_RCC_OscConfig+0xf78>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	e029      	b.n	8003110 <HAL_RCC_OscConfig+0xfcc>
 80030bc:	40021000 	.word	0x40021000
 80030c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80030c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	fa93 f2a3 	rbit	r2, r3
 80030dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80030ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	fa93 f2a3 	rbit	r2, r3
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_RCC_OscConfig+0x1078>)
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003114:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003118:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800311c:	6011      	str	r1, [r2, #0]
 800311e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003122:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	fa92 f1a2 	rbit	r1, r2
 800312c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003130:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003134:	6011      	str	r1, [r2, #0]
  return result;
 8003136:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800313a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	fab2 f282 	clz	r2, r2
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	f042 0220 	orr.w	r2, r2, #32
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	f002 021f 	and.w	r2, r2, #31
 8003150:	2101      	movs	r1, #1
 8003152:	fa01 f202 	lsl.w	r2, r1, r2
 8003156:	4013      	ands	r3, r2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d180      	bne.n	800305e <HAL_RCC_OscConfig+0xf1a>
 800315c:	e027      	b.n	80031ae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800315e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e01e      	b.n	80031b0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_RCC_OscConfig+0x1078>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800317a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800317e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003186:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	429a      	cmp	r2, r3
 8003190:	d10b      	bne.n	80031aa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003192:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003196:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800319a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d001      	beq.n	80031ae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000

080031c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b09e      	sub	sp, #120	; 0x78
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e162      	b.n	800349e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031d8:	4b90      	ldr	r3, [pc, #576]	; (800341c <HAL_RCC_ClockConfig+0x25c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d910      	bls.n	8003208 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b8d      	ldr	r3, [pc, #564]	; (800341c <HAL_RCC_ClockConfig+0x25c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 0207 	bic.w	r2, r3, #7
 80031ee:	498b      	ldr	r1, [pc, #556]	; (800341c <HAL_RCC_ClockConfig+0x25c>)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b89      	ldr	r3, [pc, #548]	; (800341c <HAL_RCC_ClockConfig+0x25c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e14a      	b.n	800349e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003214:	4b82      	ldr	r3, [pc, #520]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	497f      	ldr	r1, [pc, #508]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 8003222:	4313      	orrs	r3, r2
 8003224:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 80dc 	beq.w	80033ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d13c      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xf6>
 800323c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003240:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003244:	fa93 f3a3 	rbit	r3, r3
 8003248:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800324a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d102      	bne.n	8003266 <HAL_RCC_ClockConfig+0xa6>
 8003260:	4b6f      	ldr	r3, [pc, #444]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	e00f      	b.n	8003286 <HAL_RCC_ClockConfig+0xc6>
 8003266:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800326a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	667b      	str	r3, [r7, #100]	; 0x64
 8003274:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003278:	663b      	str	r3, [r7, #96]	; 0x60
 800327a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800327c:	fa93 f3a3 	rbit	r3, r3
 8003280:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003282:	4b67      	ldr	r3, [pc, #412]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800328a:	65ba      	str	r2, [r7, #88]	; 0x58
 800328c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800328e:	fa92 f2a2 	rbit	r2, r2
 8003292:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003294:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003296:	fab2 f282 	clz	r2, r2
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	f042 0220 	orr.w	r2, r2, #32
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	f002 021f 	and.w	r2, r2, #31
 80032a6:	2101      	movs	r1, #1
 80032a8:	fa01 f202 	lsl.w	r2, r1, r2
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d17b      	bne.n	80033aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e0f3      	b.n	800349e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d13c      	bne.n	8003338 <HAL_RCC_ClockConfig+0x178>
 80032be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ce:	fab3 f383 	clz	r3, r3
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d102      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x128>
 80032e2:	4b4f      	ldr	r3, [pc, #316]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	e00f      	b.n	8003308 <HAL_RCC_ClockConfig+0x148>
 80032e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032f0:	fa93 f3a3 	rbit	r3, r3
 80032f4:	647b      	str	r3, [r7, #68]	; 0x44
 80032f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032fa:	643b      	str	r3, [r7, #64]	; 0x40
 80032fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003304:	4b46      	ldr	r3, [pc, #280]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800330c:	63ba      	str	r2, [r7, #56]	; 0x38
 800330e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003310:	fa92 f2a2 	rbit	r2, r2
 8003314:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003318:	fab2 f282 	clz	r2, r2
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	f042 0220 	orr.w	r2, r2, #32
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	f002 021f 	and.w	r2, r2, #31
 8003328:	2101      	movs	r1, #1
 800332a:	fa01 f202 	lsl.w	r2, r1, r2
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d13a      	bne.n	80033aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0b2      	b.n	800349e <HAL_RCC_ClockConfig+0x2de>
 8003338:	2302      	movs	r3, #2
 800333a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333e:	fa93 f3a3 	rbit	r3, r3
 8003342:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003346:	fab3 f383 	clz	r3, r3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	b2db      	uxtb	r3, r3
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d102      	bne.n	8003360 <HAL_RCC_ClockConfig+0x1a0>
 800335a:	4b31      	ldr	r3, [pc, #196]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	e00d      	b.n	800337c <HAL_RCC_ClockConfig+0x1bc>
 8003360:	2302      	movs	r3, #2
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	fa93 f3a3 	rbit	r3, r3
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
 800336c:	2302      	movs	r3, #2
 800336e:	623b      	str	r3, [r7, #32]
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	fa93 f3a3 	rbit	r3, r3
 8003376:	61fb      	str	r3, [r7, #28]
 8003378:	4b29      	ldr	r3, [pc, #164]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	2202      	movs	r2, #2
 800337e:	61ba      	str	r2, [r7, #24]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	fa92 f2a2 	rbit	r2, r2
 8003386:	617a      	str	r2, [r7, #20]
  return result;
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	fab2 f282 	clz	r2, r2
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	f042 0220 	orr.w	r2, r2, #32
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	f002 021f 	and.w	r2, r2, #31
 800339a:	2101      	movs	r1, #1
 800339c:	fa01 f202 	lsl.w	r2, r1, r2
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e079      	b.n	800349e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033aa:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f023 0203 	bic.w	r2, r3, #3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	491a      	ldr	r1, [pc, #104]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033bc:	f7fd f9e8 	bl	8000790 <HAL_GetTick>
 80033c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c2:	e00a      	b.n	80033da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c4:	f7fd f9e4 	bl	8000790 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e061      	b.n	800349e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033da:	4b11      	ldr	r3, [pc, #68]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 020c 	and.w	r2, r3, #12
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d1eb      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_RCC_ClockConfig+0x25c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d214      	bcs.n	8003424 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fa:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_RCC_ClockConfig+0x25c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 0207 	bic.w	r2, r3, #7
 8003402:	4906      	ldr	r1, [pc, #24]	; (800341c <HAL_RCC_ClockConfig+0x25c>)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	4313      	orrs	r3, r2
 8003408:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b04      	ldr	r3, [pc, #16]	; (800341c <HAL_RCC_ClockConfig+0x25c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d005      	beq.n	8003424 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e040      	b.n	800349e <HAL_RCC_ClockConfig+0x2de>
 800341c:	40022000 	.word	0x40022000
 8003420:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003430:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <HAL_RCC_ClockConfig+0x2e8>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	491a      	ldr	r1, [pc, #104]	; (80034a8 <HAL_RCC_ClockConfig+0x2e8>)
 800343e:	4313      	orrs	r3, r2
 8003440:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <HAL_RCC_ClockConfig+0x2e8>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4912      	ldr	r1, [pc, #72]	; (80034a8 <HAL_RCC_ClockConfig+0x2e8>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003462:	f000 f829 	bl	80034b8 <HAL_RCC_GetSysClockFreq>
 8003466:	4601      	mov	r1, r0
 8003468:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <HAL_RCC_ClockConfig+0x2e8>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003470:	22f0      	movs	r2, #240	; 0xf0
 8003472:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	fa92 f2a2 	rbit	r2, r2
 800347a:	60fa      	str	r2, [r7, #12]
  return result;
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	fab2 f282 	clz	r2, r2
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	40d3      	lsrs	r3, r2
 8003486:	4a09      	ldr	r2, [pc, #36]	; (80034ac <HAL_RCC_ClockConfig+0x2ec>)
 8003488:	5cd3      	ldrb	r3, [r2, r3]
 800348a:	fa21 f303 	lsr.w	r3, r1, r3
 800348e:	4a08      	ldr	r2, [pc, #32]	; (80034b0 <HAL_RCC_ClockConfig+0x2f0>)
 8003490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003492:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <HAL_RCC_ClockConfig+0x2f4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fd f936 	bl	8000708 <HAL_InitTick>
  
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3778      	adds	r7, #120	; 0x78
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000
 80034ac:	0800395c 	.word	0x0800395c
 80034b0:	20000000 	.word	0x20000000
 80034b4:	20000004 	.word	0x20000004

080034b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b08b      	sub	sp, #44	; 0x2c
 80034bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
 80034c2:	2300      	movs	r3, #0
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	2300      	movs	r3, #0
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80034d2:	4b29      	ldr	r3, [pc, #164]	; (8003578 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d002      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0x30>
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d003      	beq.n	80034ee <HAL_RCC_GetSysClockFreq+0x36>
 80034e6:	e03c      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034e8:	4b24      	ldr	r3, [pc, #144]	; (800357c <HAL_RCC_GetSysClockFreq+0xc4>)
 80034ea:	623b      	str	r3, [r7, #32]
      break;
 80034ec:	e03c      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80034f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80034f8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	fa92 f2a2 	rbit	r2, r2
 8003500:	607a      	str	r2, [r7, #4]
  return result;
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	fab2 f282 	clz	r2, r2
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	40d3      	lsrs	r3, r2
 800350c:	4a1c      	ldr	r2, [pc, #112]	; (8003580 <HAL_RCC_GetSysClockFreq+0xc8>)
 800350e:	5cd3      	ldrb	r3, [r2, r3]
 8003510:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003512:	4b19      	ldr	r3, [pc, #100]	; (8003578 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	220f      	movs	r2, #15
 800351c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	fa92 f2a2 	rbit	r2, r2
 8003524:	60fa      	str	r2, [r7, #12]
  return result;
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	fab2 f282 	clz	r2, r2
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	40d3      	lsrs	r3, r2
 8003530:	4a14      	ldr	r2, [pc, #80]	; (8003584 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003532:	5cd3      	ldrb	r3, [r2, r3]
 8003534:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003540:	4a0e      	ldr	r2, [pc, #56]	; (800357c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	fbb2 f2f3 	udiv	r2, r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	fb02 f303 	mul.w	r3, r2, r3
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
 8003550:	e004      	b.n	800355c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	4a0c      	ldr	r2, [pc, #48]	; (8003588 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	623b      	str	r3, [r7, #32]
      break;
 8003560:	e002      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003564:	623b      	str	r3, [r7, #32]
      break;
 8003566:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003568:	6a3b      	ldr	r3, [r7, #32]
}
 800356a:	4618      	mov	r0, r3
 800356c:	372c      	adds	r7, #44	; 0x2c
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
 800357c:	007a1200 	.word	0x007a1200
 8003580:	0800396c 	.word	0x0800396c
 8003584:	0800397c 	.word	0x0800397c
 8003588:	003d0900 	.word	0x003d0900

0800358c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b092      	sub	sp, #72	; 0x48
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800359c:	2300      	movs	r3, #0
 800359e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80d4 	beq.w	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b0:	4b4e      	ldr	r3, [pc, #312]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10e      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035bc:	4b4b      	ldr	r3, [pc, #300]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	4a4a      	ldr	r2, [pc, #296]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c6:	61d3      	str	r3, [r2, #28]
 80035c8:	4b48      	ldr	r3, [pc, #288]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035da:	4b45      	ldr	r3, [pc, #276]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d118      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e6:	4b42      	ldr	r3, [pc, #264]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a41      	ldr	r2, [pc, #260]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f2:	f7fd f8cd 	bl	8000790 <HAL_GetTick>
 80035f6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f8:	e008      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fa:	f7fd f8c9 	bl	8000790 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b64      	cmp	r3, #100	; 0x64
 8003606:	d901      	bls.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e169      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360c:	4b38      	ldr	r3, [pc, #224]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003618:	4b34      	ldr	r3, [pc, #208]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003620:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8084 	beq.w	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003632:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003634:	429a      	cmp	r2, r3
 8003636:	d07c      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003638:	4b2c      	ldr	r3, [pc, #176]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003642:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003646:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	461a      	mov	r2, r3
 800365a:	4b26      	ldr	r3, [pc, #152]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	461a      	mov	r2, r3
 8003662:	2301      	movs	r3, #1
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800366a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003676:	fab3 f383 	clz	r3, r3
 800367a:	b2db      	uxtb	r3, r3
 800367c:	461a      	mov	r2, r3
 800367e:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	461a      	mov	r2, r3
 8003686:	2300      	movs	r3, #0
 8003688:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800368a:	4a18      	ldr	r2, [pc, #96]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d04b      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369a:	f7fd f879 	bl	8000790 <HAL_GetTick>
 800369e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a0:	e00a      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7fd f875 	bl	8000790 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e113      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80036b8:	2302      	movs	r3, #2
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
 80036c4:	2302      	movs	r3, #2
 80036c6:	623b      	str	r3, [r7, #32]
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	61fb      	str	r3, [r7, #28]
  return result;
 80036d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f043 0302 	orr.w	r3, r3, #2
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d108      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80036e6:	4b01      	ldr	r3, [pc, #4]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	e00d      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40007000 	.word	0x40007000
 80036f4:	10908100 	.word	0x10908100
 80036f8:	2302      	movs	r3, #2
 80036fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	4b78      	ldr	r3, [pc, #480]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	2202      	movs	r2, #2
 800370a:	613a      	str	r2, [r7, #16]
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	fa92 f2a2 	rbit	r2, r2
 8003712:	60fa      	str	r2, [r7, #12]
  return result;
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	fab2 f282 	clz	r2, r2
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	f002 021f 	and.w	r2, r2, #31
 8003726:	2101      	movs	r1, #1
 8003728:	fa01 f202 	lsl.w	r2, r1, r2
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0b7      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003732:	4b6d      	ldr	r3, [pc, #436]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	496a      	ldr	r1, [pc, #424]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003740:	4313      	orrs	r3, r2
 8003742:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003744:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003748:	2b01      	cmp	r3, #1
 800374a:	d105      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374c:	4b66      	ldr	r3, [pc, #408]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	4a65      	ldr	r2, [pc, #404]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003756:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003764:	4b60      	ldr	r3, [pc, #384]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	f023 0203 	bic.w	r2, r3, #3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	495d      	ldr	r1, [pc, #372]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003772:	4313      	orrs	r3, r2
 8003774:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003782:	4b59      	ldr	r3, [pc, #356]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	4956      	ldr	r1, [pc, #344]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003790:	4313      	orrs	r3, r2
 8003792:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037a0:	4b51      	ldr	r3, [pc, #324]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	494e      	ldr	r1, [pc, #312]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d008      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037be:	4b4a      	ldr	r3, [pc, #296]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	f023 0210 	bic.w	r2, r3, #16
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	4947      	ldr	r1, [pc, #284]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037dc:	4b42      	ldr	r3, [pc, #264]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	493f      	ldr	r1, [pc, #252]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037fa:	4b3b      	ldr	r3, [pc, #236]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	f023 0220 	bic.w	r2, r3, #32
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	4938      	ldr	r1, [pc, #224]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003808:	4313      	orrs	r3, r2
 800380a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003818:	4b33      	ldr	r3, [pc, #204]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	4930      	ldr	r1, [pc, #192]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003826:	4313      	orrs	r3, r2
 8003828:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003836:	4b2c      	ldr	r3, [pc, #176]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	4929      	ldr	r1, [pc, #164]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003844:	4313      	orrs	r3, r2
 8003846:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003854:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	4921      	ldr	r1, [pc, #132]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003872:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	491a      	ldr	r1, [pc, #104]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003880:	4313      	orrs	r3, r2
 8003882:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003890:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	4912      	ldr	r1, [pc, #72]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d008      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038ae:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	490b      	ldr	r1, [pc, #44]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d8:	4903      	ldr	r1, [pc, #12]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3748      	adds	r7, #72	; 0x48
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40021000 	.word	0x40021000

080038ec <__libc_init_array>:
 80038ec:	b570      	push	{r4, r5, r6, lr}
 80038ee:	4d0d      	ldr	r5, [pc, #52]	; (8003924 <__libc_init_array+0x38>)
 80038f0:	4c0d      	ldr	r4, [pc, #52]	; (8003928 <__libc_init_array+0x3c>)
 80038f2:	1b64      	subs	r4, r4, r5
 80038f4:	10a4      	asrs	r4, r4, #2
 80038f6:	2600      	movs	r6, #0
 80038f8:	42a6      	cmp	r6, r4
 80038fa:	d109      	bne.n	8003910 <__libc_init_array+0x24>
 80038fc:	4d0b      	ldr	r5, [pc, #44]	; (800392c <__libc_init_array+0x40>)
 80038fe:	4c0c      	ldr	r4, [pc, #48]	; (8003930 <__libc_init_array+0x44>)
 8003900:	f000 f820 	bl	8003944 <_init>
 8003904:	1b64      	subs	r4, r4, r5
 8003906:	10a4      	asrs	r4, r4, #2
 8003908:	2600      	movs	r6, #0
 800390a:	42a6      	cmp	r6, r4
 800390c:	d105      	bne.n	800391a <__libc_init_array+0x2e>
 800390e:	bd70      	pop	{r4, r5, r6, pc}
 8003910:	f855 3b04 	ldr.w	r3, [r5], #4
 8003914:	4798      	blx	r3
 8003916:	3601      	adds	r6, #1
 8003918:	e7ee      	b.n	80038f8 <__libc_init_array+0xc>
 800391a:	f855 3b04 	ldr.w	r3, [r5], #4
 800391e:	4798      	blx	r3
 8003920:	3601      	adds	r6, #1
 8003922:	e7f2      	b.n	800390a <__libc_init_array+0x1e>
 8003924:	0800398c 	.word	0x0800398c
 8003928:	0800398c 	.word	0x0800398c
 800392c:	0800398c 	.word	0x0800398c
 8003930:	08003990 	.word	0x08003990

08003934 <memset>:
 8003934:	4402      	add	r2, r0
 8003936:	4603      	mov	r3, r0
 8003938:	4293      	cmp	r3, r2
 800393a:	d100      	bne.n	800393e <memset+0xa>
 800393c:	4770      	bx	lr
 800393e:	f803 1b01 	strb.w	r1, [r3], #1
 8003942:	e7f9      	b.n	8003938 <memset+0x4>

08003944 <_init>:
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	bf00      	nop
 8003948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394a:	bc08      	pop	{r3}
 800394c:	469e      	mov	lr, r3
 800394e:	4770      	bx	lr

08003950 <_fini>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	bf00      	nop
 8003954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003956:	bc08      	pop	{r3}
 8003958:	469e      	mov	lr, r3
 800395a:	4770      	bx	lr
