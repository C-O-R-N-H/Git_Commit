
combination-lock-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aa8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08006c38  08006c38  00016c38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006df8  08006df8  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08006df8  08006df8  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006df8  08006df8  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006df8  08006df8  00016df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dfc  08006dfc  00016dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08006e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
 10 .bss          000004b8  200000b0  200000b0  000200b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000568  20000568  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ed7  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d3f  00000000  00000000  00034fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  00037cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010d8  00000000  00000000  00038f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fc7c  00000000  00000000  00039ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001773b  00000000  00000000  00059c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba7ba  00000000  00000000  000713af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012bb69  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054c8  00000000  00000000  0012bbbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c20 	.word	0x08006c20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08006c20 	.word	0x08006c20

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <stm_accel_init>:
#include "accelerometer.h"
#include "LSM303DLHC_definitions.h"


void stm_accel_init(I2C_HandleTypeDef *i2c)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af04      	add	r7, sp, #16
 8000b9e:	6078      	str	r0, [r7, #4]
	// Set the sampling rate
	uint8_t reg_1 = CTRL_REG1_A_LOW_POWER_MODE_100_HZ | CTRL_REG1_A_Xen | CTRL_REG1_A_Yen | CTRL_REG1_A_Zen;
 8000ba0:	2357      	movs	r3, #87	; 0x57
 8000ba2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, accel_wr, LSM303DLHC_CTRL_REG1_A, 1, &reg_1, 1, 10);
 8000ba4:	230a      	movs	r3, #10
 8000ba6:	9302      	str	r3, [sp, #8]
 8000ba8:	2301      	movs	r3, #1
 8000baa:	9301      	str	r3, [sp, #4]
 8000bac:	f107 030f 	add.w	r3, r7, #15
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	2220      	movs	r2, #32
 8000bb6:	2132      	movs	r1, #50	; 0x32
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f001 fdd1 	bl	8002760 <HAL_I2C_Mem_Write>

//	// Enable block data update: output registers only updated once read
//	// Enable high-resolution output
//	uint8_t reg_4 = CTRL_REG4_A_BDU | CTRL_REG4_A_HR;
//	HAL_I2C_Mem_Write(i2c, accel_wr, LSM303DLHC_CTRL_REG4_A, 1, &reg_4, 1, 10);
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <find_zero_errors>:


void find_zero_errors(I2C_HandleTypeDef *i2c, int16_t *zero_errors)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b08a      	sub	sp, #40	; 0x28
 8000bca:	af02      	add	r7, sp, #8
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]

	const uint16_t n_samples = 400;
 8000bd0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bd4:	823b      	strh	r3, [r7, #16]
	const int16_t G = 16384;
 8000bd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bda:	81fb      	strh	r3, [r7, #14]

	int32_t sum_x = 0, sum_y = 0, sum_z = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
	int16_t accel_x, accel_y, accel_z;
	for (uint16_t i = 0; i < n_samples; i++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	827b      	strh	r3, [r7, #18]
 8000bec:	e023      	b.n	8000c36 <find_zero_errors+0x70>
	{
		read_stm_accel_data(i2c, &accel_x, &accel_y, &accel_z, zero_errors);
 8000bee:	f107 0008 	add.w	r0, r7, #8
 8000bf2:	f107 020a 	add.w	r2, r7, #10
 8000bf6:	f107 010c 	add.w	r1, r7, #12
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f000 f83d 	bl	8000c80 <read_stm_accel_data>
		sum_x += accel_x;
 8000c06:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	4413      	add	r3, r2
 8000c10:	61fb      	str	r3, [r7, #28]
		sum_y += accel_y;
 8000c12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c16:	461a      	mov	r2, r3
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
		sum_z += accel_z - G;
 8000c1e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000c22:	461a      	mov	r2, r3
 8000c24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 0; i < n_samples; i++)
 8000c30:	8a7b      	ldrh	r3, [r7, #18]
 8000c32:	3301      	adds	r3, #1
 8000c34:	827b      	strh	r3, [r7, #18]
 8000c36:	8a7a      	ldrh	r2, [r7, #18]
 8000c38:	8a3b      	ldrh	r3, [r7, #16]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d3d7      	bcc.n	8000bee <find_zero_errors+0x28>
	}

	zero_errors[0] = (int16_t)(sum_x / (int16_t)n_samples);
 8000c3e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c42:	461a      	mov	r2, r3
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	fb93 f3f2 	sdiv	r3, r3, r2
 8000c4a:	b21a      	sxth	r2, r3
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	801a      	strh	r2, [r3, #0]
	zero_errors[1] = (int16_t)(sum_y / (int16_t)n_samples);
 8000c50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c54:	461a      	mov	r2, r3
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	fb93 f2f2 	sdiv	r2, r3, r2
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	3302      	adds	r3, #2
 8000c60:	b212      	sxth	r2, r2
 8000c62:	801a      	strh	r2, [r3, #0]
	zero_errors[2] = (int16_t)(sum_z / (int16_t)n_samples);
 8000c64:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	fb93 f2f2 	sdiv	r2, r3, r2
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	3304      	adds	r3, #4
 8000c74:	b212      	sxth	r2, r2
 8000c76:	801a      	strh	r2, [r3, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	3720      	adds	r7, #32
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <read_stm_accel_data>:


void read_stm_accel_data(I2C_HandleTypeDef *i2c, int16_t *accel_x, int16_t *accel_y, int16_t *accel_z, int16_t *zero_errors)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af04      	add	r7, sp, #16
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	603b      	str	r3, [r7, #0]
	// Initialise windows for filtering
	static Window window_x, window_y, window_z;
	static bool windows_initialised = false;
	if (!windows_initialised)
 8000c8e:	4b63      	ldr	r3, [pc, #396]	; (8000e1c <read_stm_accel_data+0x19c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	f083 0301 	eor.w	r3, r3, #1
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d00b      	beq.n	8000cb4 <read_stm_accel_data+0x34>
	{
		window_init(&window_x);
 8000c9c:	4860      	ldr	r0, [pc, #384]	; (8000e20 <read_stm_accel_data+0x1a0>)
 8000c9e:	f000 fa8b 	bl	80011b8 <window_init>
		window_init(&window_y);
 8000ca2:	4860      	ldr	r0, [pc, #384]	; (8000e24 <read_stm_accel_data+0x1a4>)
 8000ca4:	f000 fa88 	bl	80011b8 <window_init>
		window_init(&window_z);
 8000ca8:	485f      	ldr	r0, [pc, #380]	; (8000e28 <read_stm_accel_data+0x1a8>)
 8000caa:	f000 fa85 	bl	80011b8 <window_init>
		windows_initialised = true;
 8000cae:	4b5b      	ldr	r3, [pc, #364]	; (8000e1c <read_stm_accel_data+0x19c>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
	}

	// Read acceleration in the x-axis
	uint8_t accel_x_MSB = 0x00;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Read(i2c, accel_rd, OUT_X_H_A, 1, &accel_x_MSB, 1, 10);
 8000cb8:	230a      	movs	r3, #10
 8000cba:	9302      	str	r3, [sp, #8]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	9301      	str	r3, [sp, #4]
 8000cc0:	f107 0317 	add.w	r3, r7, #23
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	2229      	movs	r2, #41	; 0x29
 8000cca:	2133      	movs	r1, #51	; 0x33
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f001 fe5b 	bl	8002988 <HAL_I2C_Mem_Read>
	uint8_t accel_x_LSB = 0x00;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Mem_Read(i2c, accel_rd, OUT_X_L_A, 1, &accel_x_LSB, 1, 10);
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	9302      	str	r3, [sp, #8]
 8000cda:	2301      	movs	r3, #1
 8000cdc:	9301      	str	r3, [sp, #4]
 8000cde:	f107 0316 	add.w	r3, r7, #22
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	2228      	movs	r2, #40	; 0x28
 8000ce8:	2133      	movs	r1, #51	; 0x33
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f001 fe4c 	bl	8002988 <HAL_I2C_Mem_Read>
	*accel_x = ((accel_x_MSB << 8) | accel_x_LSB) - zero_errors[0];
 8000cf0:	7dfb      	ldrb	r3, [r7, #23]
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	7dbb      	ldrb	r3, [r7, #22]
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	6a3b      	ldr	r3, [r7, #32]
 8000d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	801a      	strh	r2, [r3, #0]

	// Read acceleration in the y-axis
	uint8_t accel_y_MSB = 0x00;
 8000d12:	2300      	movs	r3, #0
 8000d14:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Read(i2c, accel_rd, OUT_Y_H_A, 1, &accel_y_MSB, 1, 10);
 8000d16:	230a      	movs	r3, #10
 8000d18:	9302      	str	r3, [sp, #8]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	f107 0315 	add.w	r3, r7, #21
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2301      	movs	r3, #1
 8000d26:	222b      	movs	r2, #43	; 0x2b
 8000d28:	2133      	movs	r1, #51	; 0x33
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f001 fe2c 	bl	8002988 <HAL_I2C_Mem_Read>
	uint8_t accel_y_LSB = 0x00;
 8000d30:	2300      	movs	r3, #0
 8000d32:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Mem_Read(i2c, accel_rd, OUT_Y_L_A, 1, &accel_y_LSB, 1, 10);
 8000d34:	230a      	movs	r3, #10
 8000d36:	9302      	str	r3, [sp, #8]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2301      	movs	r3, #1
 8000d44:	222a      	movs	r2, #42	; 0x2a
 8000d46:	2133      	movs	r1, #51	; 0x33
 8000d48:	68f8      	ldr	r0, [r7, #12]
 8000d4a:	f001 fe1d 	bl	8002988 <HAL_I2C_Mem_Read>
	*accel_y = ((accel_y_MSB << 8) | accel_y_LSB) - zero_errors[1];
 8000d4e:	7d7b      	ldrb	r3, [r7, #21]
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	b21a      	sxth	r2, r3
 8000d54:	7d3b      	ldrb	r3, [r7, #20]
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	6a3b      	ldr	r3, [r7, #32]
 8000d60:	3302      	adds	r3, #2
 8000d62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	b21a      	sxth	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	801a      	strh	r2, [r3, #0]

	// Read acceleration in the z-axis
	uint8_t accel_z_MSB = 0x00;
 8000d72:	2300      	movs	r3, #0
 8000d74:	74fb      	strb	r3, [r7, #19]
	HAL_I2C_Mem_Read(i2c, accel_rd, OUT_Z_H_A, 1, &accel_z_MSB, 1, 10);
 8000d76:	230a      	movs	r3, #10
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	f107 0313 	add.w	r3, r7, #19
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2301      	movs	r3, #1
 8000d86:	222d      	movs	r2, #45	; 0x2d
 8000d88:	2133      	movs	r1, #51	; 0x33
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f001 fdfc 	bl	8002988 <HAL_I2C_Mem_Read>
	uint8_t accel_z_LSB = 0x00;
 8000d90:	2300      	movs	r3, #0
 8000d92:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Mem_Read(i2c, accel_rd, OUT_Z_L_A, 1, &accel_z_LSB, 1, 10);
 8000d94:	230a      	movs	r3, #10
 8000d96:	9302      	str	r3, [sp, #8]
 8000d98:	2301      	movs	r3, #1
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	f107 0312 	add.w	r3, r7, #18
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2301      	movs	r3, #1
 8000da4:	222c      	movs	r2, #44	; 0x2c
 8000da6:	2133      	movs	r1, #51	; 0x33
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f001 fded 	bl	8002988 <HAL_I2C_Mem_Read>
	*accel_z = ((accel_z_MSB << 8) | accel_z_LSB) - zero_errors[2];
 8000dae:	7cfb      	ldrb	r3, [r7, #19]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	7cbb      	ldrb	r3, [r7, #18]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	6a3b      	ldr	r3, [r7, #32]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	801a      	strh	r2, [r3, #0]

	// Compute moving average of data
	*accel_x = moving_average(&window_x, *accel_x);
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4811      	ldr	r0, [pc, #68]	; (8000e20 <read_stm_accel_data+0x1a0>)
 8000ddc:	f000 fa00 	bl	80011e0 <moving_average>
 8000de0:	4603      	mov	r3, r0
 8000de2:	461a      	mov	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	801a      	strh	r2, [r3, #0]
	*accel_y = moving_average(&window_y, *accel_y);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dee:	4619      	mov	r1, r3
 8000df0:	480c      	ldr	r0, [pc, #48]	; (8000e24 <read_stm_accel_data+0x1a4>)
 8000df2:	f000 f9f5 	bl	80011e0 <moving_average>
 8000df6:	4603      	mov	r3, r0
 8000df8:	461a      	mov	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	801a      	strh	r2, [r3, #0]
	*accel_z = moving_average(&window_z, *accel_z);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e04:	4619      	mov	r1, r3
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <read_stm_accel_data+0x1a8>)
 8000e08:	f000 f9ea 	bl	80011e0 <moving_average>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	801a      	strh	r2, [r3, #0]
}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200000cc 	.word	0x200000cc
 8000e20:	200000d0 	.word	0x200000d0
 8000e24:	200000dc 	.word	0x200000dc
 8000e28:	200000e8 	.word	0x200000e8
 8000e2c:	00000000 	.word	0x00000000

08000e30 <get_orientation>:


bool get_orientation(int16_t accel_x, int16_t accel_y, int16_t accel_z, int8_t *pitch, int8_t *roll)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	4603      	mov	r3, r0
 8000e3a:	81fb      	strh	r3, [r7, #14]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	81bb      	strh	r3, [r7, #12]
 8000e40:	4613      	mov	r3, r2
 8000e42:	817b      	strh	r3, [r7, #10]
	const float G = 16384;  // (2^16 / 4) since the full-scale of 16 bits is +/- 2g
 8000e44:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8000e48:	617b      	str	r3, [r7, #20]
	const int16_t valid_threshold = 5000;
 8000e4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e4e:	827b      	strh	r3, [r7, #18]

	*pitch = (int8_t)(atan((float)accel_y / (float)accel_z) * (180 / M_PI));  // pitch from horizontal in degrees
 8000e50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e54:	ee07 3a90 	vmov	s15, r3
 8000e58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e5c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e68:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e6c:	ee16 0a90 	vmov	r0, s13
 8000e70:	f7ff fb62 	bl	8000538 <__aeabi_f2d>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	ec43 2b10 	vmov	d0, r2, r3
 8000e7c:	f005 fa20 	bl	80062c0 <atan>
 8000e80:	ec51 0b10 	vmov	r0, r1, d0
 8000e84:	a320      	add	r3, pc, #128	; (adr r3, 8000f08 <get_orientation+0xd8>)
 8000e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8a:	f7ff fbad 	bl	80005e8 <__aeabi_dmul>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	4610      	mov	r0, r2
 8000e94:	4619      	mov	r1, r3
 8000e96:	f7ff fe57 	bl	8000b48 <__aeabi_d2iz>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	b25a      	sxtb	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	701a      	strb	r2, [r3, #0]
	*roll = (int8_t)(asin((float)accel_x / G) * (180 / M_PI));  // roll from horizontal in degrees
 8000ea2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ea6:	ee07 3a90 	vmov	s15, r3
 8000eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eae:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eb2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000eb6:	ee16 0a90 	vmov	r0, s13
 8000eba:	f7ff fb3d 	bl	8000538 <__aeabi_f2d>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	ec43 2b10 	vmov	d0, r2, r3
 8000ec6:	f005 fba5 	bl	8006614 <asin>
 8000eca:	ec51 0b10 	vmov	r0, r1, d0
 8000ece:	a30e      	add	r3, pc, #56	; (adr r3, 8000f08 <get_orientation+0xd8>)
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	f7ff fb88 	bl	80005e8 <__aeabi_dmul>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4610      	mov	r0, r2
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f7ff fe32 	bl	8000b48 <__aeabi_d2iz>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b25a      	sxtb	r2, r3
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	701a      	strb	r2, [r3, #0]

	return accel_z >= valid_threshold ? true : false;  // If accel_z < threshold then STM is nearly upside down so data is invalid
 8000eec:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ef0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	bfac      	ite	ge
 8000ef8:	2301      	movge	r3, #1
 8000efa:	2300      	movlt	r3, #0
 8000efc:	b2db      	uxtb	r3, r3
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	1a63c1f8 	.word	0x1a63c1f8
 8000f0c:	404ca5dc 	.word	0x404ca5dc

08000f10 <get_velocity>:


void get_velocity(int8_t pitch, int8_t roll, int8_t *ptu_vel_pitch, int8_t *ptu_vel_yaw)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60ba      	str	r2, [r7, #8]
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	73fb      	strb	r3, [r7, #15]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	73bb      	strb	r3, [r7, #14]
	*ptu_vel_pitch = calculate_velocity(pitch);
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f811 	bl	8000f4e <calculate_velocity>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	701a      	strb	r2, [r3, #0]
	*ptu_vel_yaw = calculate_velocity(roll);
 8000f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f808 	bl	8000f4e <calculate_velocity>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	701a      	strb	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <calculate_velocity>:


int8_t calculate_velocity(int8_t angle)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b087      	sub	sp, #28
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	71fb      	strb	r3, [r7, #7]
	int8_t sign = angle >= 0 ? 1 : -1;
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db01      	blt.n	8000f64 <calculate_velocity+0x16>
 8000f60:	2301      	movs	r3, #1
 8000f62:	e001      	b.n	8000f68 <calculate_velocity+0x1a>
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f68:	75bb      	strb	r3, [r7, #22]
	int8_t return_vel = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	75fb      	strb	r3, [r7, #23]

	const int8_t threshold_1 = 6;
 8000f6e:	2306      	movs	r3, #6
 8000f70:	757b      	strb	r3, [r7, #21]
	const int8_t threshold_2 = 12;
 8000f72:	230c      	movs	r3, #12
 8000f74:	753b      	strb	r3, [r7, #20]
	const int8_t threshold_3 = 20;
 8000f76:	2314      	movs	r3, #20
 8000f78:	74fb      	strb	r3, [r7, #19]
	const int8_t threshold_4 = 29;
 8000f7a:	231d      	movs	r3, #29
 8000f7c:	74bb      	strb	r3, [r7, #18]
	const int8_t threshold_5 = 40;
 8000f7e:	2328      	movs	r3, #40	; 0x28
 8000f80:	747b      	strb	r3, [r7, #17]

	const int8_t vel_1 = 1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	743b      	strb	r3, [r7, #16]
	const int8_t vel_2 = 2;
 8000f86:	2302      	movs	r3, #2
 8000f88:	73fb      	strb	r3, [r7, #15]
	const int8_t vel_3 = 3;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	73bb      	strb	r3, [r7, #14]
	const int8_t vel_4 = 6;
 8000f8e:	2306      	movs	r3, #6
 8000f90:	737b      	strb	r3, [r7, #13]
	const int8_t vel_5 = 12;
 8000f92:	230c      	movs	r3, #12
 8000f94:	733b      	strb	r3, [r7, #12]

	if ((abs(angle) >= threshold_1) && (abs(angle) < threshold_2))
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	bfb8      	it	lt
 8000f9e:	425b      	neglt	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	db0d      	blt.n	8000fc8 <calculate_velocity+0x7a>
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	bfb8      	it	lt
 8000fb4:	425b      	neglt	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	da02      	bge.n	8000fc8 <calculate_velocity+0x7a>
	{
		return_vel = vel_1;
 8000fc2:	7c3b      	ldrb	r3, [r7, #16]
 8000fc4:	75fb      	strb	r3, [r7, #23]
 8000fc6:	e057      	b.n	8001078 <calculate_velocity+0x12a>
	}
	else if ((abs(angle) >= threshold_2) && (abs(angle) < threshold_3))
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bfb8      	it	lt
 8000fd0:	425b      	neglt	r3, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	db0d      	blt.n	8000ffa <calculate_velocity+0xac>
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	bfb8      	it	lt
 8000fe6:	425b      	neglt	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	461a      	mov	r2, r3
 8000fec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	da02      	bge.n	8000ffa <calculate_velocity+0xac>
	{
		return_vel = vel_2;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	75fb      	strb	r3, [r7, #23]
 8000ff8:	e03e      	b.n	8001078 <calculate_velocity+0x12a>
	}
	else if ((abs(angle) >= threshold_3) && (abs(angle) < threshold_4))
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bfb8      	it	lt
 8001002:	425b      	neglt	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	461a      	mov	r2, r3
 8001008:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800100c:	429a      	cmp	r2, r3
 800100e:	db0d      	blt.n	800102c <calculate_velocity+0xde>
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	bfb8      	it	lt
 8001018:	425b      	neglt	r3, r3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	461a      	mov	r2, r3
 800101e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001022:	429a      	cmp	r2, r3
 8001024:	da02      	bge.n	800102c <calculate_velocity+0xde>
	{
		return_vel = vel_3;
 8001026:	7bbb      	ldrb	r3, [r7, #14]
 8001028:	75fb      	strb	r3, [r7, #23]
 800102a:	e025      	b.n	8001078 <calculate_velocity+0x12a>
	}
	else if ((abs(angle) >= threshold_4) && (abs(angle) < threshold_5))
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	bfb8      	it	lt
 8001034:	425b      	neglt	r3, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800103e:	429a      	cmp	r2, r3
 8001040:	db0d      	blt.n	800105e <calculate_velocity+0x110>
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	bfb8      	it	lt
 800104a:	425b      	neglt	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001054:	429a      	cmp	r2, r3
 8001056:	da02      	bge.n	800105e <calculate_velocity+0x110>
	{
		return_vel = vel_4;
 8001058:	7b7b      	ldrb	r3, [r7, #13]
 800105a:	75fb      	strb	r3, [r7, #23]
 800105c:	e00c      	b.n	8001078 <calculate_velocity+0x12a>
	}
	else if (abs(angle) >= threshold_5)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	bfb8      	it	lt
 8001066:	425b      	neglt	r3, r3
 8001068:	b2db      	uxtb	r3, r3
 800106a:	461a      	mov	r2, r3
 800106c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001070:	429a      	cmp	r2, r3
 8001072:	db01      	blt.n	8001078 <calculate_velocity+0x12a>
	{
		return_vel = vel_5;
 8001074:	7b3b      	ldrb	r3, [r7, #12]
 8001076:	75fb      	strb	r3, [r7, #23]
	}

	return return_vel * sign;
 8001078:	7dfa      	ldrb	r2, [r7, #23]
 800107a:	7dbb      	ldrb	r3, [r7, #22]
 800107c:	fb12 f303 	smulbb	r3, r2, r3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	b25b      	sxtb	r3, r3
}
 8001084:	4618      	mov	r0, r3
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <enter_challenge_4>:
#include "serial.h"
#include "serialise.h"
#include "accelerometer.h"

void enter_challenge_4()
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b0a1      	sub	sp, #132	; 0x84
 8001094:	af02      	add	r7, sp, #8
	set_led(0b1111);
 8001096:	200f      	movs	r0, #15
 8001098:	f000 f9f2 	bl	8001480 <set_led>
	extern int current_game_state;
	extern I2C_HandleTypeDef hi2c1;
	uint8_t buffer[BUFFER];

	// Initialise peripherals
	stm_accel_init(&hi2c1);
 800109c:	4832      	ldr	r0, [pc, #200]	; (8001168 <enter_challenge_4+0xd8>)
 800109e:	f7ff fd7b 	bl	8000b98 <stm_accel_init>

	int16_t zero_errors[] = {0, 0, 0};  // Zero errors in x, y, and z axes
 80010a2:	2300      	movs	r3, #0
 80010a4:	81bb      	strh	r3, [r7, #12]
 80010a6:	2300      	movs	r3, #0
 80010a8:	81fb      	strh	r3, [r7, #14]
 80010aa:	2300      	movs	r3, #0
 80010ac:	823b      	strh	r3, [r7, #16]
	find_zero_errors(&hi2c1, zero_errors);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4619      	mov	r1, r3
 80010b4:	482c      	ldr	r0, [pc, #176]	; (8001168 <enter_challenge_4+0xd8>)
 80010b6:	f7ff fd86 	bl	8000bc6 <find_zero_errors>
	int8_t ptu_vel_pitch, ptu_vel_yaw;


	while (1)
	{
		if (current_game_state != 4)
 80010ba:	4b2c      	ldr	r3, [pc, #176]	; (800116c <enter_challenge_4+0xdc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d005      	beq.n	80010ce <enter_challenge_4+0x3e>
		{
			SerialOutputString("!", &USART1_PORT);
 80010c2:	492b      	ldr	r1, [pc, #172]	; (8001170 <enter_challenge_4+0xe0>)
 80010c4:	482b      	ldr	r0, [pc, #172]	; (8001174 <enter_challenge_4+0xe4>)
 80010c6:	f000 fd5c 	bl	8001b82 <SerialOutputString>
			enter_waiting();
 80010ca:	f000 f857 	bl	800117c <enter_waiting>
		}

		// Actual challenge
		read_stm_accel_data(&hi2c1, &accel_x, &accel_y, &accel_z, zero_errors);
 80010ce:	1db8      	adds	r0, r7, #6
 80010d0:	f107 0208 	add.w	r2, r7, #8
 80010d4:	f107 010a 	add.w	r1, r7, #10
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	4603      	mov	r3, r0
 80010e0:	4821      	ldr	r0, [pc, #132]	; (8001168 <enter_challenge_4+0xd8>)
 80010e2:	f7ff fdcd 	bl	8000c80 <read_stm_accel_data>

		if (get_orientation(accel_x, accel_y, accel_z, &stm_pitch, &stm_roll))
 80010e6:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80010ea:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80010ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010f2:	1d7c      	adds	r4, r7, #5
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	4623      	mov	r3, r4
 80010fa:	f7ff fe99 	bl	8000e30 <get_orientation>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d01d      	beq.n	8001140 <enter_challenge_4+0xb0>
		{
			show_orientation_led(stm_pitch, stm_roll, 6);
 8001104:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001108:	f997 1004 	ldrsb.w	r1, [r7, #4]
 800110c:	2206      	movs	r2, #6
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f8f6 	bl	8001300 <show_orientation_led>
			get_velocity(stm_pitch, stm_roll, &ptu_vel_pitch, &ptu_vel_yaw);
 8001114:	f997 0005 	ldrsb.w	r0, [r7, #5]
 8001118:	f997 1004 	ldrsb.w	r1, [r7, #4]
 800111c:	1cbb      	adds	r3, r7, #2
 800111e:	1cfa      	adds	r2, r7, #3
 8001120:	f7ff fef6 	bl	8000f10 <get_velocity>

			// Make velocities positive for sending over terminal
			ptu_vel_yaw += 12;
 8001124:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	330c      	adds	r3, #12
 800112c:	b2db      	uxtb	r3, r3
 800112e:	b25b      	sxtb	r3, r3
 8001130:	70bb      	strb	r3, [r7, #2]
			ptu_vel_pitch += 12;
 8001132:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	330c      	adds	r3, #12
 800113a:	b2db      	uxtb	r3, r3
 800113c:	b25b      	sxtb	r3, r3
 800113e:	70fb      	strb	r3, [r7, #3]
		}

		// Pack and send the velocity data to the serial port
		sprintf(buffer, "AA554%2hu%2hu!", ptu_vel_yaw, ptu_vel_pitch);
 8001140:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001144:	461a      	mov	r2, r3
 8001146:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800114a:	f107 0014 	add.w	r0, r7, #20
 800114e:	490a      	ldr	r1, [pc, #40]	; (8001178 <enter_challenge_4+0xe8>)
 8001150:	f004 fc9e 	bl	8005a90 <siprintf>
		SerialOutputString(buffer, &USART1_PORT);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4905      	ldr	r1, [pc, #20]	; (8001170 <enter_challenge_4+0xe0>)
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fd11 	bl	8001b82 <SerialOutputString>
//		vel_data.velocity.horizontal_vel = ptu_vel_yaw;
//		vel_data.velocity.vertical_vel = ptu_vel_pitch;
//		uint16_t velocity_buffer_length = pack_buffer(velocity_packet_buffer, VELOCITY, &vel_data);
//		SerialOutputBuffer(velocity_packet_buffer, velocity_buffer_length, &USART1_PORT);

		HAL_Delay(10);
 8001160:	200a      	movs	r0, #10
 8001162:	f000 ffd1 	bl	8002108 <HAL_Delay>
	{
 8001166:	e7a8      	b.n	80010ba <enter_challenge_4+0x2a>
 8001168:	200000f4 	.word	0x200000f4
 800116c:	200004e4 	.word	0x200004e4
 8001170:	20000000 	.word	0x20000000
 8001174:	08006c38 	.word	0x08006c38
 8001178:	08006c3c 	.word	0x08006c3c

0800117c <enter_waiting>:
	}
}


void enter_waiting()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	set_led(0b11001100);
 8001180:	20cc      	movs	r0, #204	; 0xcc
 8001182:	f000 f97d 	bl	8001480 <set_led>
	extern int current_game_state;

	while (1)
	{
		if (current_game_state == 4)
 8001186:	4b03      	ldr	r3, [pc, #12]	; (8001194 <enter_waiting+0x18>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b04      	cmp	r3, #4
 800118c:	d1fb      	bne.n	8001186 <enter_waiting+0xa>
		{
			enter_challenge_4();
 800118e:	f7ff ff7f 	bl	8001090 <enter_challenge_4>
		if (current_game_state == 4)
 8001192:	e7f8      	b.n	8001186 <enter_waiting+0xa>
 8001194:	200004e4 	.word	0x200004e4

08001198 <state_handler>:

}


void state_handler(char *state, int *game_state)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
	int state_int = atoi(state);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f004 fb38 	bl	8005818 <atoi>
 80011a8:	60f8      	str	r0, [r7, #12]
	*game_state = state_int;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	601a      	str	r2, [r3, #0]
}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <window_init>:

#include "filter.h"


void window_init(Window *window)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	window->idx = 0;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	729a      	strb	r2, [r3, #10]
	window->is_full = false;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	72da      	strb	r2, [r3, #11]
	memset(window->arr, 0, WINDOW_SIZE * sizeof(int16_t));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	220a      	movs	r2, #10
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f004 fb64 	bl	80058a0 <memset>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <moving_average>:


int16_t moving_average(Window *window, int16_t new_value)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
	update_window(window, new_value);
 80011ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011f0:	4619      	mov	r1, r3
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 f808 	bl	8001208 <update_window>
	return mean(window);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f831 	bl	8001260 <mean>
 80011fe:	4603      	mov	r3, r0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <update_window>:


void update_window(Window *window, int16_t new_value)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
	if (window->idx == WINDOW_SIZE - 1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7a9b      	ldrb	r3, [r3, #10]
 8001218:	2b04      	cmp	r3, #4
 800121a:	d102      	bne.n	8001222 <update_window+0x1a>
	{
		window->is_full = true;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	72da      	strb	r2, [r3, #11]
	}

	window->arr[window->idx] = new_value;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7a9b      	ldrb	r3, [r3, #10]
 8001226:	4619      	mov	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	window->idx = (window->idx + 1) % WINDOW_SIZE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7a9b      	ldrb	r3, [r3, #10]
 8001234:	1c5a      	adds	r2, r3, #1
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <update_window+0x54>)
 8001238:	fb83 1302 	smull	r1, r3, r3, r2
 800123c:	1059      	asrs	r1, r3, #1
 800123e:	17d3      	asrs	r3, r2, #31
 8001240:	1ac9      	subs	r1, r1, r3
 8001242:	460b      	mov	r3, r1
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	1ad1      	subs	r1, r2, r3
 800124a:	b2ca      	uxtb	r2, r1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	729a      	strb	r2, [r3, #10]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	66666667 	.word	0x66666667

08001260 <mean>:


int16_t mean(Window *window)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	int32_t sum = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < WINDOW_SIZE; i++)
 800126c:	2300      	movs	r3, #0
 800126e:	72fb      	strb	r3, [r7, #11]
 8001270:	e00a      	b.n	8001288 <mean+0x28>
	{
		sum += window->arr[i];
 8001272:	7afa      	ldrb	r2, [r7, #11]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < WINDOW_SIZE; i++)
 8001282:	7afb      	ldrb	r3, [r7, #11]
 8001284:	3301      	adds	r3, #1
 8001286:	72fb      	strb	r3, [r7, #11]
 8001288:	7afb      	ldrb	r3, [r7, #11]
 800128a:	2b04      	cmp	r3, #4
 800128c:	d9f1      	bls.n	8001272 <mean+0x12>
	}

	int8_t n_samples = window->is_full ? WINDOW_SIZE : window->idx;  // If the window is not yet full,
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7adb      	ldrb	r3, [r3, #11]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <mean+0x3a>
 8001296:	2305      	movs	r3, #5
 8001298:	e002      	b.n	80012a0 <mean+0x40>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7a9b      	ldrb	r3, [r3, #10]
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	72bb      	strb	r3, [r7, #10]
																	 // the number of samples is the idx

	return sum / n_samples;  // Error associated with integer division is negligible
 80012a2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80012ac:	b21b      	sxth	r3, r3
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <enable_clocks>:
#include "led.h"
#include "stm32f303xc.h"


void enable_clocks()
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	// Enable the clocks for GPIOA, C, and E
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <enable_clocks+0x1c>)
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <enable_clocks+0x1c>)
 80012c6:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80012ca:	6153      	str	r3, [r2, #20]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000

080012dc <initialise_board>:


void initialise_board()
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
	// Get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_mode_register = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <initialise_board+0x20>)
 80012e4:	607b      	str	r3, [r7, #4]
	*led_mode_register = 0x5555;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f245 5255 	movw	r2, #21845	; 0x5555
 80012ec:	801a      	strh	r2, [r3, #0]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	48001002 	.word	0x48001002

08001300 <show_orientation_led>:


void show_orientation_led(int8_t pitch, int8_t roll, int8_t sensitivity)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
 800130a:	460b      	mov	r3, r1
 800130c:	71bb      	strb	r3, [r7, #6]
 800130e:	4613      	mov	r3, r2
 8001310:	717b      	strb	r3, [r7, #5]
	LEDRegister *led_register = (LEDRegister *)(((uint8_t *)&(GPIOE->ODR)) + 1);
 8001312:	4b5a      	ldr	r3, [pc, #360]	; (800147c <show_orientation_led+0x17c>)
 8001314:	60fb      	str	r3, [r7, #12]
	led_register->all_leds = 0;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]

	if (pitch < -1 * sensitivity && abs(roll) < sensitivity)
 800131c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001320:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001324:	425b      	negs	r3, r3
 8001326:	429a      	cmp	r2, r3
 8001328:	da10      	bge.n	800134c <show_orientation_led+0x4c>
 800132a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800132e:	2b00      	cmp	r3, #0
 8001330:	bfb8      	it	lt
 8001332:	425b      	neglt	r3, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	461a      	mov	r2, r3
 8001338:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800133c:	429a      	cmp	r2, r3
 800133e:	da05      	bge.n	800134c <show_orientation_led+0x4c>
	{
		led_register->direction.north = 1;
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	7813      	ldrb	r3, [r2, #0]
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	7013      	strb	r3, [r2, #0]
 800134a:	e091      	b.n	8001470 <show_orientation_led+0x170>
	}
	else if (pitch > sensitivity && abs(roll) < sensitivity)
 800134c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001350:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001354:	429a      	cmp	r2, r3
 8001356:	dd10      	ble.n	800137a <show_orientation_led+0x7a>
 8001358:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800135c:	2b00      	cmp	r3, #0
 800135e:	bfb8      	it	lt
 8001360:	425b      	neglt	r3, r3
 8001362:	b2db      	uxtb	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800136a:	429a      	cmp	r2, r3
 800136c:	da05      	bge.n	800137a <show_orientation_led+0x7a>
	{
		led_register->direction.south = 1;
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	7813      	ldrb	r3, [r2, #0]
 8001372:	f043 0320 	orr.w	r3, r3, #32
 8001376:	7013      	strb	r3, [r2, #0]
 8001378:	e07a      	b.n	8001470 <show_orientation_led+0x170>
	}
	else if (roll < -1 * sensitivity && abs(pitch) < sensitivity)
 800137a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800137e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001382:	425b      	negs	r3, r3
 8001384:	429a      	cmp	r2, r3
 8001386:	da10      	bge.n	80013aa <show_orientation_led+0xaa>
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	bfb8      	it	lt
 8001390:	425b      	neglt	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800139a:	429a      	cmp	r2, r3
 800139c:	da05      	bge.n	80013aa <show_orientation_led+0xaa>
	{
		led_register->direction.west = 1;
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	7813      	ldrb	r3, [r2, #0]
 80013a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a6:	7013      	strb	r3, [r2, #0]
 80013a8:	e062      	b.n	8001470 <show_orientation_led+0x170>
	}
	else if (roll > sensitivity && abs(pitch) < sensitivity)
 80013aa:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80013ae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	dd10      	ble.n	80013d8 <show_orientation_led+0xd8>
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	bfb8      	it	lt
 80013be:	425b      	neglt	r3, r3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	461a      	mov	r2, r3
 80013c4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	da05      	bge.n	80013d8 <show_orientation_led+0xd8>
	{
		led_register->direction.east = 1;
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	7813      	ldrb	r3, [r2, #0]
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	7013      	strb	r3, [r2, #0]
 80013d6:	e04b      	b.n	8001470 <show_orientation_led+0x170>
	}
	else if (pitch < -1 * sensitivity && roll < -1 * sensitivity)
 80013d8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80013dc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013e0:	425b      	negs	r3, r3
 80013e2:	429a      	cmp	r2, r3
 80013e4:	da0c      	bge.n	8001400 <show_orientation_led+0x100>
 80013e6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80013ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013ee:	425b      	negs	r3, r3
 80013f0:	429a      	cmp	r2, r3
 80013f2:	da05      	bge.n	8001400 <show_orientation_led+0x100>
	{
		led_register->direction.northwest = 1;
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	7813      	ldrb	r3, [r2, #0]
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	7013      	strb	r3, [r2, #0]
 80013fe:	e037      	b.n	8001470 <show_orientation_led+0x170>
	}
	else if (pitch < -1 * sensitivity && roll > sensitivity)
 8001400:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001404:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001408:	425b      	negs	r3, r3
 800140a:	429a      	cmp	r2, r3
 800140c:	da0b      	bge.n	8001426 <show_orientation_led+0x126>
 800140e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001412:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001416:	429a      	cmp	r2, r3
 8001418:	dd05      	ble.n	8001426 <show_orientation_led+0x126>
	{
		led_register->direction.northeast = 1;
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	7813      	ldrb	r3, [r2, #0]
 800141e:	f043 0304 	orr.w	r3, r3, #4
 8001422:	7013      	strb	r3, [r2, #0]
 8001424:	e024      	b.n	8001470 <show_orientation_led+0x170>
	}
	else if (pitch > sensitivity && roll > sensitivity)
 8001426:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800142a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800142e:	429a      	cmp	r2, r3
 8001430:	dd0b      	ble.n	800144a <show_orientation_led+0x14a>
 8001432:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001436:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800143a:	429a      	cmp	r2, r3
 800143c:	dd05      	ble.n	800144a <show_orientation_led+0x14a>
	{
		led_register->direction.southeast = 1;
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	7813      	ldrb	r3, [r2, #0]
 8001442:	f043 0310 	orr.w	r3, r3, #16
 8001446:	7013      	strb	r3, [r2, #0]
 8001448:	e012      	b.n	8001470 <show_orientation_led+0x170>
	}
	else if (pitch > sensitivity && roll < -1 * sensitivity)
 800144a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800144e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001452:	429a      	cmp	r2, r3
 8001454:	dd0c      	ble.n	8001470 <show_orientation_led+0x170>
 8001456:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800145a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800145e:	425b      	negs	r3, r3
 8001460:	429a      	cmp	r2, r3
 8001462:	da05      	bge.n	8001470 <show_orientation_led+0x170>
	{
		led_register->direction.southwest = 1;
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	7813      	ldrb	r3, [r2, #0]
 8001468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800146c:	7013      	strb	r3, [r2, #0]
	}
}
 800146e:	e7ff      	b.n	8001470 <show_orientation_led+0x170>
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	48001015 	.word	0x48001015

08001480 <set_led>:


void set_led(uint8_t led_mask)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
	uint8_t *led_register = ((uint8_t *)&(GPIOE->ODR)) + 1;
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <set_led+0x20>)
 800148c:	60fb      	str	r3, [r7, #12]
	*led_register = led_mask;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	79fa      	ldrb	r2, [r7, #7]
 8001492:	701a      	strb	r2, [r3, #0]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	48001015 	.word	0x48001015

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014aa:	f000 fdc7 	bl	800203c <HAL_Init>

  /* USER CODE BEGIN Init */

	enable_clocks();
 80014ae:	f7ff ff05 	bl	80012bc <enable_clocks>
	initialise_board();
 80014b2:	f7ff ff13 	bl	80012dc <initialise_board>
	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 80014b6:	2200      	movs	r2, #0
 80014b8:	4913      	ldr	r1, [pc, #76]	; (8001508 <main+0x64>)
 80014ba:	2004      	movs	r0, #4
 80014bc:	f000 fabc 	bl	8001a38 <SerialInitialise>
	enable_interrupts_RX();
 80014c0:	f000 fb2e 	bl	8001b20 <enable_interrupts_RX>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c4:	f000 f824 	bl	8001510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f000 f98a 	bl	80017e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014cc:	f000 f882 	bl	80015d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80014d0:	f000 f8c0 	bl	8001654 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80014d4:	f000 f962 	bl	800179c <MX_USB_PCD_Init>
  MX_TIM2_Init();
 80014d8:	f000 f8fa 	bl	80016d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	stm_accel_init(&hi2c1);
 80014dc:	480b      	ldr	r0, [pc, #44]	; (800150c <main+0x68>)
 80014de:	f7ff fb5b 	bl	8000b98 <stm_accel_init>

//	char buffer[BUFFER_SIZE];

	int16_t zero_errors[] = {0, 0, 0};  // Zero errors in x, y, and z axes
 80014e2:	2300      	movs	r3, #0
 80014e4:	803b      	strh	r3, [r7, #0]
 80014e6:	2300      	movs	r3, #0
 80014e8:	807b      	strh	r3, [r7, #2]
 80014ea:	2300      	movs	r3, #0
 80014ec:	80bb      	strh	r3, [r7, #4]
	find_zero_errors(&hi2c1, zero_errors);
 80014ee:	463b      	mov	r3, r7
 80014f0:	4619      	mov	r1, r3
 80014f2:	4806      	ldr	r0, [pc, #24]	; (800150c <main+0x68>)
 80014f4:	f7ff fb67 	bl	8000bc6 <find_zero_errors>

	int16_t accel_x, accel_y, accel_z;
	int8_t stm_pitch, stm_roll;
	int8_t ptu_vel_pitch, ptu_vel_yaw;

	enter_waiting();
 80014f8:	f7ff fe40 	bl	800117c <enter_waiting>
 80014fc:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000000 	.word	0x20000000
 800150c:	200000f4 	.word	0x200000f4

08001510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b09e      	sub	sp, #120	; 0x78
 8001514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001516:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800151a:	2228      	movs	r2, #40	; 0x28
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f004 f9be 	bl	80058a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001524:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001534:	463b      	mov	r3, r7
 8001536:	223c      	movs	r2, #60	; 0x3c
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f004 f9b0 	bl	80058a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001540:	2303      	movs	r3, #3
 8001542:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001544:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001548:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800154e:	2301      	movs	r3, #1
 8001550:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001552:	2310      	movs	r3, #16
 8001554:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001556:	2302      	movs	r3, #2
 8001558:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800155a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800155e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001560:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001564:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001566:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800156a:	4618      	mov	r0, r3
 800156c:	f001 ff48 	bl	8003400 <HAL_RCC_OscConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001576:	f000 fa11 	bl	800199c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800157a:	230f      	movs	r3, #15
 800157c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157e:	2302      	movs	r3, #2
 8001580:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800158c:	2300      	movs	r3, #0
 800158e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001590:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001594:	2101      	movs	r1, #1
 8001596:	4618      	mov	r0, r3
 8001598:	f002 ff70 	bl	800447c <HAL_RCC_ClockConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015a2:	f000 f9fb 	bl	800199c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <SystemClock_Config+0xc0>)
 80015a8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80015ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b4:	463b      	mov	r3, r7
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 f946 	bl	8004848 <HAL_RCCEx_PeriphCLKConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80015c2:	f000 f9eb 	bl	800199c <Error_Handler>
  }
}
 80015c6:	bf00      	nop
 80015c8:	3778      	adds	r7, #120	; 0x78
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	00020020 	.word	0x00020020

080015d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <MX_I2C1_Init+0x74>)
 80015da:	4a1c      	ldr	r2, [pc, #112]	; (800164c <MX_I2C1_Init+0x78>)
 80015dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_I2C1_Init+0x74>)
 80015e0:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <MX_I2C1_Init+0x7c>)
 80015e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <MX_I2C1_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_I2C1_Init+0x74>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <MX_I2C1_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_I2C1_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_I2C1_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_I2C1_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_I2C1_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800160e:	480e      	ldr	r0, [pc, #56]	; (8001648 <MX_I2C1_Init+0x74>)
 8001610:	f001 f816 	bl	8002640 <HAL_I2C_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800161a:	f000 f9bf 	bl	800199c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800161e:	2100      	movs	r1, #0
 8001620:	4809      	ldr	r0, [pc, #36]	; (8001648 <MX_I2C1_Init+0x74>)
 8001622:	f001 fd83 	bl	800312c <HAL_I2CEx_ConfigAnalogFilter>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800162c:	f000 f9b6 	bl	800199c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001630:	2100      	movs	r1, #0
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_I2C1_Init+0x74>)
 8001634:	f001 fdc5 	bl	80031c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800163e:	f000 f9ad 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200000f4 	.word	0x200000f4
 800164c:	40005400 	.word	0x40005400
 8001650:	2000090e 	.word	0x2000090e

08001654 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <MX_SPI1_Init+0x74>)
 800165a:	4a1c      	ldr	r2, [pc, #112]	; (80016cc <MX_SPI1_Init+0x78>)
 800165c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <MX_SPI1_Init+0x74>)
 8001660:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001664:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <MX_SPI1_Init+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <MX_SPI1_Init+0x74>)
 800166e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001672:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_SPI1_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <MX_SPI1_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_SPI1_Init+0x74>)
 8001682:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001686:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_SPI1_Init+0x74>)
 800168a:	2208      	movs	r2, #8
 800168c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_SPI1_Init+0x74>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_SPI1_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <MX_SPI1_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_SPI1_Init+0x74>)
 80016a2:	2207      	movs	r2, #7
 80016a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <MX_SPI1_Init+0x74>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_SPI1_Init+0x74>)
 80016ae:	2208      	movs	r2, #8
 80016b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_SPI1_Init+0x74>)
 80016b4:	f003 fa78 	bl	8004ba8 <HAL_SPI_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016be:	f000 f96d 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000148 	.word	0x20000148
 80016cc:	40013000 	.word	0x40013000

080016d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e2:	463b      	mov	r3, r7
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
 80016f0:	615a      	str	r2, [r3, #20]
 80016f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <MX_TIM2_Init+0xc8>)
 80016f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80016fc:	4b26      	ldr	r3, [pc, #152]	; (8001798 <MX_TIM2_Init+0xc8>)
 80016fe:	222f      	movs	r2, #47	; 0x2f
 8001700:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001702:	4b25      	ldr	r3, [pc, #148]	; (8001798 <MX_TIM2_Init+0xc8>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <MX_TIM2_Init+0xc8>)
 800170a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800170e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001710:	4b21      	ldr	r3, [pc, #132]	; (8001798 <MX_TIM2_Init+0xc8>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <MX_TIM2_Init+0xc8>)
 8001718:	2280      	movs	r2, #128	; 0x80
 800171a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800171c:	481e      	ldr	r0, [pc, #120]	; (8001798 <MX_TIM2_Init+0xc8>)
 800171e:	f003 faee 	bl	8004cfe <HAL_TIM_PWM_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001728:	f000 f938 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	4619      	mov	r1, r3
 800173a:	4817      	ldr	r0, [pc, #92]	; (8001798 <MX_TIM2_Init+0xc8>)
 800173c:	f003 ffb0 	bl	80056a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001746:	f000 f929 	bl	800199c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800174a:	2360      	movs	r3, #96	; 0x60
 800174c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 800174e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001752:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800175c:	463b      	mov	r3, r7
 800175e:	2200      	movs	r2, #0
 8001760:	4619      	mov	r1, r3
 8001762:	480d      	ldr	r0, [pc, #52]	; (8001798 <MX_TIM2_Init+0xc8>)
 8001764:	f003 fb22 	bl	8004dac <HAL_TIM_PWM_ConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800176e:	f000 f915 	bl	800199c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001772:	463b      	mov	r3, r7
 8001774:	2204      	movs	r2, #4
 8001776:	4619      	mov	r1, r3
 8001778:	4807      	ldr	r0, [pc, #28]	; (8001798 <MX_TIM2_Init+0xc8>)
 800177a:	f003 fb17 	bl	8004dac <HAL_TIM_PWM_ConfigChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001784:	f000 f90a 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001788:	4803      	ldr	r0, [pc, #12]	; (8001798 <MX_TIM2_Init+0xc8>)
 800178a:	f000 fb41 	bl	8001e10 <HAL_TIM_MspPostInit>

}
 800178e:	bf00      	nop
 8001790:	3728      	adds	r7, #40	; 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200001ac 	.word	0x200001ac

0800179c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <MX_USB_PCD_Init+0x3c>)
 80017a2:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <MX_USB_PCD_Init+0x40>)
 80017a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_USB_PCD_Init+0x3c>)
 80017a8:	2208      	movs	r2, #8
 80017aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80017ac:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <MX_USB_PCD_Init+0x3c>)
 80017ae:	2202      	movs	r2, #2
 80017b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_USB_PCD_Init+0x3c>)
 80017b4:	2202      	movs	r2, #2
 80017b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <MX_USB_PCD_Init+0x3c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_USB_PCD_Init+0x3c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_USB_PCD_Init+0x3c>)
 80017c6:	f001 fd48 	bl	800325a <HAL_PCD_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80017d0:	f000 f8e4 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200001f8 	.word	0x200001f8
 80017dc:	40005c00 	.word	0x40005c00

080017e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017f6:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <MX_GPIO_Init+0xf4>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	4a36      	ldr	r2, [pc, #216]	; (80018d4 <MX_GPIO_Init+0xf4>)
 80017fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001800:	6153      	str	r3, [r2, #20]
 8001802:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <MX_GPIO_Init+0xf4>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <MX_GPIO_Init+0xf4>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	4a30      	ldr	r2, [pc, #192]	; (80018d4 <MX_GPIO_Init+0xf4>)
 8001814:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001818:	6153      	str	r3, [r2, #20]
 800181a:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <MX_GPIO_Init+0xf4>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <MX_GPIO_Init+0xf4>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	4a2a      	ldr	r2, [pc, #168]	; (80018d4 <MX_GPIO_Init+0xf4>)
 800182c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001830:	6153      	str	r3, [r2, #20]
 8001832:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <MX_GPIO_Init+0xf4>)
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <MX_GPIO_Init+0xf4>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	4a24      	ldr	r2, [pc, #144]	; (80018d4 <MX_GPIO_Init+0xf4>)
 8001844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001848:	6153      	str	r3, [r2, #20]
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <MX_GPIO_Init+0xf4>)
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <MX_GPIO_Init+0xf4>)
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	4a1e      	ldr	r2, [pc, #120]	; (80018d4 <MX_GPIO_Init+0xf4>)
 800185c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001860:	6153      	str	r3, [r2, #20]
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <MX_GPIO_Init+0xf4>)
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800186e:	2200      	movs	r2, #0
 8001870:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001874:	4818      	ldr	r0, [pc, #96]	; (80018d8 <MX_GPIO_Init+0xf8>)
 8001876:	f000 fecb 	bl	8002610 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800187a:	2337      	movs	r3, #55	; 0x37
 800187c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800187e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	4812      	ldr	r0, [pc, #72]	; (80018d8 <MX_GPIO_Init+0xf8>)
 8001890:	f000 fd44 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001894:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001898:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2301      	movs	r3, #1
 800189c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	480a      	ldr	r0, [pc, #40]	; (80018d8 <MX_GPIO_Init+0xf8>)
 80018ae:	f000 fd35 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018b2:	2301      	movs	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c8:	f000 fd28 	bl	800231c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000
 80018d8:	48001000 	.word	0x48001000

080018dc <USART1_IRQHandler>:

/* USER CODE BEGIN 4 */
void USART1_IRQHandler()
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
	char single_inp;
	int test = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]

	test = SerialReceiveChar(&USART1_PORT, &single_inp);
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	4619      	mov	r1, r3
 80018ea:	4826      	ldr	r0, [pc, #152]	; (8001984 <USART1_IRQHandler+0xa8>)
 80018ec:	f000 f96d 	bl	8001bca <SerialReceiveChar>
 80018f0:	4603      	mov	r3, r0
 80018f2:	60fb      	str	r3, [r7, #12]
	if (test == 1){
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d109      	bne.n	800190e <USART1_IRQHandler+0x32>
		input_buffer[input_counter] = single_inp;
 80018fa:	4b23      	ldr	r3, [pc, #140]	; (8001988 <USART1_IRQHandler+0xac>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	79f9      	ldrb	r1, [r7, #7]
 8001900:	4a22      	ldr	r2, [pc, #136]	; (800198c <USART1_IRQHandler+0xb0>)
 8001902:	54d1      	strb	r1, [r2, r3]
		input_counter ++;
 8001904:	4b20      	ldr	r3, [pc, #128]	; (8001988 <USART1_IRQHandler+0xac>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	3301      	adds	r3, #1
 800190a:	4a1f      	ldr	r2, [pc, #124]	; (8001988 <USART1_IRQHandler+0xac>)
 800190c:	6013      	str	r3, [r2, #0]
//		set_led(0b0101);
		//SerialOutputChar(single_inp, &USART1_PORT);
	}
	if (single_inp == 33){ //check for end of string character
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	2b21      	cmp	r3, #33	; 0x21
 8001912:	d134      	bne.n	800197e <USART1_IRQHandler+0xa2>
		if (strncmp(input_buffer, "AA55", 4) == 0){ //check for sentinal char
 8001914:	2204      	movs	r2, #4
 8001916:	491e      	ldr	r1, [pc, #120]	; (8001990 <USART1_IRQHandler+0xb4>)
 8001918:	481c      	ldr	r0, [pc, #112]	; (800198c <USART1_IRQHandler+0xb0>)
 800191a:	f004 f8e1 	bl	8005ae0 <strncmp>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d121      	bne.n	8001968 <USART1_IRQHandler+0x8c>
			if (input_buffer[4] == 49){ //if msgtype is 1
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <USART1_IRQHandler+0xb0>)
 8001926:	791b      	ldrb	r3, [r3, #4]
 8001928:	2b31      	cmp	r3, #49	; 0x31
 800192a:	d11d      	bne.n	8001968 <USART1_IRQHandler+0x8c>
				char *data = malloc(4);
 800192c:	2004      	movs	r0, #4
 800192e:	f003 ffa1 	bl	8005874 <malloc>
 8001932:	4603      	mov	r3, r0
 8001934:	60bb      	str	r3, [r7, #8]
				strcpy(data, input_buffer + 5);
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <USART1_IRQHandler+0xb8>)
 8001938:	4619      	mov	r1, r3
 800193a:	68b8      	ldr	r0, [r7, #8]
 800193c:	f004 f8c8 	bl	8005ad0 <strcpy>
				data[2] = 0;
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	3302      	adds	r3, #2
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]

				//SerialOutputString(data, &USART1_PORT);
				empty_buffer(input_buffer, BUFFER);
 8001948:	2164      	movs	r1, #100	; 0x64
 800194a:	4810      	ldr	r0, [pc, #64]	; (800198c <USART1_IRQHandler+0xb0>)
 800194c:	f000 f97c 	bl	8001c48 <empty_buffer>
				input_counter = 0;
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <USART1_IRQHandler+0xac>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
				test = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
				single_inp = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	71fb      	strb	r3, [r7, #7]

				state_handler(data, &current_game_state);
 800195e:	490e      	ldr	r1, [pc, #56]	; (8001998 <USART1_IRQHandler+0xbc>)
 8001960:	68b8      	ldr	r0, [r7, #8]
 8001962:	f7ff fc19 	bl	8001198 <state_handler>
 8001966:	e00a      	b.n	800197e <USART1_IRQHandler+0xa2>
			//set_led(0b100010); //error
		}
		//SerialOutputString(input_buffer, &USART1_PORT);


		empty_buffer(input_buffer, BUFFER);
 8001968:	2164      	movs	r1, #100	; 0x64
 800196a:	4808      	ldr	r0, [pc, #32]	; (800198c <USART1_IRQHandler+0xb0>)
 800196c:	f000 f96c 	bl	8001c48 <empty_buffer>
		input_counter = 0;
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <USART1_IRQHandler+0xac>)
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
		test = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
		single_inp = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	71fb      	strb	r3, [r7, #7]


	}

}
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000000 	.word	0x20000000
 8001988:	2000054c 	.word	0x2000054c
 800198c:	200004e8 	.word	0x200004e8
 8001990:	08006c4c 	.word	0x08006c4c
 8001994:	200004ed 	.word	0x200004ed
 8001998:	200004e4 	.word	0x200004e4

0800199c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a0:	b672      	cpsid	i
}
 80019a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <Error_Handler+0x8>
	...

080019a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db0b      	blt.n	80019d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	4907      	ldr	r1, [pc, #28]	; (80019e0 <__NVIC_EnableIRQ+0x38>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	63da      	str	r2, [r3, #60]	; 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001a4a:	4b34      	ldr	r3, [pc, #208]	; (8001b1c <SerialInitialise+0xe4>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	4a33      	ldr	r2, [pc, #204]	; (8001b1c <SerialInitialise+0xe4>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a54:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001a56:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <SerialInitialise+0xe4>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	4a30      	ldr	r2, [pc, #192]	; (8001b1c <SerialInitialise+0xe4>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d106      	bne.n	8001a78 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8001a6a:	4b2c      	ldr	r3, [pc, #176]	; (8001b1c <SerialInitialise+0xe4>)
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	4a2b      	ldr	r2, [pc, #172]	; (8001b1c <SerialInitialise+0xe4>)
 8001a70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a74:	6153      	str	r3, [r2, #20]
		break;
 8001a76:	e000      	b.n	8001a7a <SerialInitialise+0x42>
	default:
		break;
 8001a78:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a82:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a8c:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	69d9      	ldr	r1, [r3, #28]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d821      	bhi.n	8001afe <SerialInitialise+0xc6>
 8001aba:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <SerialInitialise+0x88>)
 8001abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac0:	08001ad5 	.word	0x08001ad5
 8001ac4:	08001add 	.word	0x08001add
 8001ac8:	08001ae5 	.word	0x08001ae5
 8001acc:	08001aed 	.word	0x08001aed
 8001ad0:	08001af5 	.word	0x08001af5
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	2246      	movs	r2, #70	; 0x46
 8001ad8:	801a      	strh	r2, [r3, #0]
		break;
 8001ada:	e010      	b.n	8001afe <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	2246      	movs	r2, #70	; 0x46
 8001ae0:	801a      	strh	r2, [r3, #0]
		break;
 8001ae2:	e00c      	b.n	8001afe <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2246      	movs	r2, #70	; 0x46
 8001ae8:	801a      	strh	r2, [r3, #0]
		break;
 8001aea:	e008      	b.n	8001afe <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	2246      	movs	r2, #70	; 0x46
 8001af0:	801a      	strh	r2, [r3, #0]
		break;
 8001af2:	e004      	b.n	8001afe <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001afa:	801a      	strh	r2, [r3, #0]
		break;
 8001afc:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f042 020d 	orr.w	r2, r2, #13
 8001b0c:	601a      	str	r2, [r3, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	371c      	adds	r7, #28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000

08001b20 <enable_interrupts_RX>:

void enable_interrupts_RX()
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
	__disable_irq();

	// Generate an interrupt upon receiving data
	USART1->CR1 |= USART_CR1_RXNEIE_Msk;
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <enable_interrupts_RX+0x2c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <enable_interrupts_RX+0x2c>)
 8001b2e:	f043 0320 	orr.w	r3, r3, #32
 8001b32:	6013      	str	r3, [r2, #0]

	// Set priority and enable interrupts
	NVIC_SetPriority(USART1_IRQn, 2);
 8001b34:	2102      	movs	r1, #2
 8001b36:	2025      	movs	r0, #37	; 0x25
 8001b38:	f7ff ff54 	bl	80019e4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8001b3c:	2025      	movs	r0, #37	; 0x25
 8001b3e:	f7ff ff33 	bl	80019a8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b42:	b662      	cpsie	i
}
 8001b44:	bf00      	nop

	__enable_irq();
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40013800 	.word	0x40013800

08001b50 <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	6039      	str	r1, [r7, #0]
 8001b5a:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8001b5c:	bf00      	nop
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f8      	beq.n	8001b5e <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	79fa      	ldrb	r2, [r7, #7]
 8001b72:	b292      	uxth	r2, r2
 8001b74:	801a      	strh	r2, [r3, #0]
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b084      	sub	sp, #16
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8001b90:	e00b      	b.n	8001baa <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	6839      	ldr	r1, [r7, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ffd9 	bl	8001b50 <SerialOutputChar>
		counter++;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
		pt++;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1ef      	bne.n	8001b92 <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	4798      	blx	r3
}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <SerialReceiveChar>:


// returns 1 if valid char, 0 if timeout
uint8_t SerialReceiveChar(SerialPort *serial_port, uint8_t *received_char)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b085      	sub	sp, #20
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
	uint8_t latest_character = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	737b      	strb	r3, [r7, #13]

	uint16_t timeout = 0xffff;
 8001bd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bdc:	81fb      	strh	r3, [r7, #14]
  while (1) {
	  timeout--;
 8001bde:	89fb      	ldrh	r3, [r7, #14]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	81fb      	strh	r3, [r7, #14]
	  if (timeout == 0)
 8001be4:	89fb      	ldrh	r3, [r7, #14]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <SerialReceiveChar+0x24>
		  return 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e026      	b.n	8001c3c <SerialReceiveChar+0x72>

	if (*(serial_port->StatusRegister) & USART_ISR_ORE || *(serial_port->StatusRegister) & USART_ISR_FE) {
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d106      	bne.n	8001c0a <SerialReceiveChar+0x40>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <SerialReceiveChar+0x50>
		*(serial_port->FlagClearRegister) |= USART_ICR_ORECF | USART_ICR_FECF;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f042 020a 	orr.w	r2, r2, #10
 8001c18:	601a      	str	r2, [r3, #0]
	}

	if (*(serial_port->StatusRegister) & USART_ISR_RXNE) { // Wait for RXNE flag to be set
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d100      	bne.n	8001c2a <SerialReceiveChar+0x60>
	  timeout--;
 8001c28:	e7d9      	b.n	8001bde <SerialReceiveChar+0x14>
		break;
 8001c2a:	bf00      	nop
	}
  }
  *received_char = *(serial_port->DataInputRegister);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	701a      	strb	r2, [r3, #0]
  return 1;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <empty_buffer>:

  return index;

}

void empty_buffer(char *array, int size){
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++){
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	e007      	b.n	8001c68 <empty_buffer+0x20>
		array[i] = 0;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3301      	adds	r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	dbf3      	blt.n	8001c58 <empty_buffer+0x10>
	}
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c86:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_MspInit+0x44>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <HAL_MspInit+0x44>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6193      	str	r3, [r2, #24]
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_MspInit+0x44>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_MspInit+0x44>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4a08      	ldr	r2, [pc, #32]	; (8001cc4 <HAL_MspInit+0x44>)
 8001ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	61d3      	str	r3, [r2, #28]
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_MspInit+0x44>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cb6:	2007      	movs	r0, #7
 8001cb8:	f000 fafc 	bl	80022b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a17      	ldr	r2, [pc, #92]	; (8001d44 <HAL_I2C_MspInit+0x7c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d127      	bne.n	8001d3a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_I2C_MspInit+0x80>)
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	4a16      	ldr	r2, [pc, #88]	; (8001d48 <HAL_I2C_MspInit+0x80>)
 8001cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf4:	6153      	str	r3, [r2, #20]
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <HAL_I2C_MspInit+0x80>)
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001d02:	23c0      	movs	r3, #192	; 0xc0
 8001d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d06:	2312      	movs	r3, #18
 8001d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d12:	2304      	movs	r3, #4
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480b      	ldr	r0, [pc, #44]	; (8001d4c <HAL_I2C_MspInit+0x84>)
 8001d1e:	f000 fafd 	bl	800231c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_I2C_MspInit+0x80>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	4a08      	ldr	r2, [pc, #32]	; (8001d48 <HAL_I2C_MspInit+0x80>)
 8001d28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d2c:	61d3      	str	r3, [r2, #28]
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_I2C_MspInit+0x80>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	; 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40005400 	.word	0x40005400
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	48000400 	.word	0x48000400

08001d50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a17      	ldr	r2, [pc, #92]	; (8001dcc <HAL_SPI_MspInit+0x7c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d128      	bne.n	8001dc4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_SPI_MspInit+0x80>)
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	4a16      	ldr	r2, [pc, #88]	; (8001dd0 <HAL_SPI_MspInit+0x80>)
 8001d78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d7c:	6193      	str	r3, [r2, #24]
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_SPI_MspInit+0x80>)
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_SPI_MspInit+0x80>)
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <HAL_SPI_MspInit+0x80>)
 8001d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d94:	6153      	str	r3, [r2, #20]
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_SPI_MspInit+0x80>)
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001da2:	23e0      	movs	r3, #224	; 0xe0
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dae:	2303      	movs	r3, #3
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001db2:	2305      	movs	r3, #5
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc0:	f000 faac 	bl	800231c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001dc4:	bf00      	nop
 8001dc6:	3728      	adds	r7, #40	; 0x28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40013000 	.word	0x40013000
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de4:	d10b      	bne.n	8001dfe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_TIM_PWM_MspInit+0x38>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <HAL_TIM_PWM_MspInit+0x38>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	61d3      	str	r3, [r2, #28]
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_TIM_PWM_MspInit+0x38>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dfe:	bf00      	nop
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000

08001e10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e30:	d11d      	bne.n	8001e6e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_TIM_MspPostInit+0x68>)
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	4a10      	ldr	r2, [pc, #64]	; (8001e78 <HAL_TIM_MspPostInit+0x68>)
 8001e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3c:	6153      	str	r3, [r2, #20]
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <HAL_TIM_MspPostInit+0x68>)
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001e4a:	f248 0302 	movw	r3, #32770	; 0x8002
 8001e4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	4619      	mov	r1, r3
 8001e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e6a:	f000 fa57 	bl	800231c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e6e:	bf00      	nop
 8001e70:	3720      	adds	r7, #32
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000

08001e7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a18      	ldr	r2, [pc, #96]	; (8001efc <HAL_PCD_MspInit+0x80>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d129      	bne.n	8001ef2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_PCD_MspInit+0x84>)
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	4a17      	ldr	r2, [pc, #92]	; (8001f00 <HAL_PCD_MspInit+0x84>)
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea8:	6153      	str	r3, [r2, #20]
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <HAL_PCD_MspInit+0x84>)
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001eb6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001ec8:	230e      	movs	r3, #14
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed6:	f000 fa21 	bl	800231c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_PCD_MspInit+0x84>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	4a08      	ldr	r2, [pc, #32]	; (8001f00 <HAL_PCD_MspInit+0x84>)
 8001ee0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ee4:	61d3      	str	r3, [r2, #28]
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_PCD_MspInit+0x84>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001ef2:	bf00      	nop
 8001ef4:	3728      	adds	r7, #40	; 0x28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40005c00 	.word	0x40005c00
 8001f00:	40021000 	.word	0x40021000

08001f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <NMI_Handler+0x4>

08001f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <HardFault_Handler+0x4>

08001f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <MemManage_Handler+0x4>

08001f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <BusFault_Handler+0x4>

08001f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <UsageFault_Handler+0x4>

08001f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f50:	f000 f8ba 	bl	80020c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f003 fc4a 	bl	8005820 <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	2000a000 	.word	0x2000a000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	20000550 	.word	0x20000550
 8001fc0:	20000568 	.word	0x20000568

08001fc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <SystemInit+0x20>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <SystemInit+0x20>)
 8001fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002020 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fec:	f7ff ffea 	bl	8001fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ff2:	490d      	ldr	r1, [pc, #52]	; (8002028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <LoopForever+0xe>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff8:	e002      	b.n	8002000 <LoopCopyDataInit>

08001ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffe:	3304      	adds	r3, #4

08002000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002004:	d3f9      	bcc.n	8001ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002008:	4c0a      	ldr	r4, [pc, #40]	; (8002034 <LoopForever+0x16>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800200c:	e001      	b.n	8002012 <LoopFillZerobss>

0800200e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002010:	3204      	adds	r2, #4

08002012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002014:	d3fb      	bcc.n	800200e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002016:	f003 fc09 	bl	800582c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800201a:	f7ff fa43 	bl	80014a4 <main>

0800201e <LoopForever>:

LoopForever:
    b LoopForever
 800201e:	e7fe      	b.n	800201e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002020:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002028:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 800202c:	08006e00 	.word	0x08006e00
  ldr r2, =_sbss
 8002030:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002034:	20000568 	.word	0x20000568

08002038 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002038:	e7fe      	b.n	8002038 <ADC1_2_IRQHandler>
	...

0800203c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_Init+0x28>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a07      	ldr	r2, [pc, #28]	; (8002064 <HAL_Init+0x28>)
 8002046:	f043 0310 	orr.w	r3, r3, #16
 800204a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800204c:	2003      	movs	r0, #3
 800204e:	f000 f931 	bl	80022b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002052:	2000      	movs	r0, #0
 8002054:	f000 f808 	bl	8002068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002058:	f7ff fe12 	bl	8001c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40022000 	.word	0x40022000

08002068 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x54>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_InitTick+0x58>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4619      	mov	r1, r3
 800207a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f93b 	bl	8002302 <HAL_SYSTICK_Config>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e00e      	b.n	80020b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b0f      	cmp	r3, #15
 800209a:	d80a      	bhi.n	80020b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800209c:	2200      	movs	r2, #0
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020a4:	f000 f911 	bl	80022ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a8:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <HAL_InitTick+0x5c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e000      	b.n	80020b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000040 	.word	0x20000040
 80020c0:	20000048 	.word	0x20000048
 80020c4:	20000044 	.word	0x20000044

080020c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x20>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_IncTick+0x24>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_IncTick+0x24>)
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000048 	.word	0x20000048
 80020ec:	20000554 	.word	0x20000554

080020f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <HAL_GetTick+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000554 	.word	0x20000554

08002108 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002110:	f7ff ffee 	bl	80020f0 <HAL_GetTick>
 8002114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002120:	d005      	beq.n	800212e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_Delay+0x44>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800212e:	bf00      	nop
 8002130:	f7ff ffde 	bl	80020f0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	429a      	cmp	r2, r3
 800213e:	d8f7      	bhi.n	8002130 <HAL_Delay+0x28>
  {
  }
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000048 	.word	0x20000048

08002150 <__NVIC_SetPriorityGrouping>:
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800216c:	4013      	ands	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800217c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002182:	4a04      	ldr	r2, [pc, #16]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	60d3      	str	r3, [r2, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_GetPriorityGrouping>:
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <__NVIC_GetPriorityGrouping+0x18>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	f003 0307 	and.w	r3, r3, #7
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_SetPriority>:
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db0a      	blt.n	80021de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	490c      	ldr	r1, [pc, #48]	; (8002200 <__NVIC_SetPriority+0x4c>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	440b      	add	r3, r1
 80021d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021dc:	e00a      	b.n	80021f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4908      	ldr	r1, [pc, #32]	; (8002204 <__NVIC_SetPriority+0x50>)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	3b04      	subs	r3, #4
 80021ec:	0112      	lsls	r2, r2, #4
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	440b      	add	r3, r1
 80021f2:	761a      	strb	r2, [r3, #24]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f1c3 0307 	rsb	r3, r3, #7
 8002222:	2b04      	cmp	r3, #4
 8002224:	bf28      	it	cs
 8002226:	2304      	movcs	r3, #4
 8002228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3304      	adds	r3, #4
 800222e:	2b06      	cmp	r3, #6
 8002230:	d902      	bls.n	8002238 <NVIC_EncodePriority+0x30>
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3b03      	subs	r3, #3
 8002236:	e000      	b.n	800223a <NVIC_EncodePriority+0x32>
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43da      	mvns	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	401a      	ands	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002250:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43d9      	mvns	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	4313      	orrs	r3, r2
         );
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	; 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002280:	d301      	bcc.n	8002286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002282:	2301      	movs	r3, #1
 8002284:	e00f      	b.n	80022a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <SysTick_Config+0x40>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228e:	210f      	movs	r1, #15
 8002290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002294:	f7ff ff8e 	bl	80021b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <SysTick_Config+0x40>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <SysTick_Config+0x40>)
 80022a0:	2207      	movs	r2, #7
 80022a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	e000e010 	.word	0xe000e010

080022b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff47 	bl	8002150 <__NVIC_SetPriorityGrouping>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022dc:	f7ff ff5c 	bl	8002198 <__NVIC_GetPriorityGrouping>
 80022e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	6978      	ldr	r0, [r7, #20]
 80022e8:	f7ff ff8e 	bl	8002208 <NVIC_EncodePriority>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff5d 	bl	80021b4 <__NVIC_SetPriority>
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ffb0 	bl	8002270 <SysTick_Config>
 8002310:	4603      	mov	r3, r0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232a:	e154      	b.n	80025d6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2101      	movs	r1, #1
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	4013      	ands	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 8146 	beq.w	80025d0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d005      	beq.n	800235c <HAL_GPIO_Init+0x40>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d130      	bne.n	80023be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002392:	2201      	movs	r2, #1
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	f003 0201 	and.w	r2, r3, #1
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d017      	beq.n	80023fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	2203      	movs	r2, #3
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d123      	bne.n	800244e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	08da      	lsrs	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3208      	adds	r2, #8
 800240e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	220f      	movs	r2, #15
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	08da      	lsrs	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3208      	adds	r2, #8
 8002448:	6939      	ldr	r1, [r7, #16]
 800244a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0203 	and.w	r2, r3, #3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80a0 	beq.w	80025d0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002490:	4b58      	ldr	r3, [pc, #352]	; (80025f4 <HAL_GPIO_Init+0x2d8>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a57      	ldr	r2, [pc, #348]	; (80025f4 <HAL_GPIO_Init+0x2d8>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b55      	ldr	r3, [pc, #340]	; (80025f4 <HAL_GPIO_Init+0x2d8>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024a8:	4a53      	ldr	r2, [pc, #332]	; (80025f8 <HAL_GPIO_Init+0x2dc>)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	089b      	lsrs	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024d2:	d019      	beq.n	8002508 <HAL_GPIO_Init+0x1ec>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a49      	ldr	r2, [pc, #292]	; (80025fc <HAL_GPIO_Init+0x2e0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d013      	beq.n	8002504 <HAL_GPIO_Init+0x1e8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a48      	ldr	r2, [pc, #288]	; (8002600 <HAL_GPIO_Init+0x2e4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00d      	beq.n	8002500 <HAL_GPIO_Init+0x1e4>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a47      	ldr	r2, [pc, #284]	; (8002604 <HAL_GPIO_Init+0x2e8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d007      	beq.n	80024fc <HAL_GPIO_Init+0x1e0>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a46      	ldr	r2, [pc, #280]	; (8002608 <HAL_GPIO_Init+0x2ec>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <HAL_GPIO_Init+0x1dc>
 80024f4:	2304      	movs	r3, #4
 80024f6:	e008      	b.n	800250a <HAL_GPIO_Init+0x1ee>
 80024f8:	2305      	movs	r3, #5
 80024fa:	e006      	b.n	800250a <HAL_GPIO_Init+0x1ee>
 80024fc:	2303      	movs	r3, #3
 80024fe:	e004      	b.n	800250a <HAL_GPIO_Init+0x1ee>
 8002500:	2302      	movs	r3, #2
 8002502:	e002      	b.n	800250a <HAL_GPIO_Init+0x1ee>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_GPIO_Init+0x1ee>
 8002508:	2300      	movs	r3, #0
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	f002 0203 	and.w	r2, r2, #3
 8002510:	0092      	lsls	r2, r2, #2
 8002512:	4093      	lsls	r3, r2
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800251a:	4937      	ldr	r1, [pc, #220]	; (80025f8 <HAL_GPIO_Init+0x2dc>)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	3302      	adds	r3, #2
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002528:	4b38      	ldr	r3, [pc, #224]	; (800260c <HAL_GPIO_Init+0x2f0>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	43db      	mvns	r3, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800254c:	4a2f      	ldr	r2, [pc, #188]	; (800260c <HAL_GPIO_Init+0x2f0>)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002552:	4b2e      	ldr	r3, [pc, #184]	; (800260c <HAL_GPIO_Init+0x2f0>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43db      	mvns	r3, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002576:	4a25      	ldr	r2, [pc, #148]	; (800260c <HAL_GPIO_Init+0x2f0>)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800257c:	4b23      	ldr	r3, [pc, #140]	; (800260c <HAL_GPIO_Init+0x2f0>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	43db      	mvns	r3, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025a0:	4a1a      	ldr	r2, [pc, #104]	; (800260c <HAL_GPIO_Init+0x2f0>)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a6:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_GPIO_Init+0x2f0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4013      	ands	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025ca:	4a10      	ldr	r2, [pc, #64]	; (800260c <HAL_GPIO_Init+0x2f0>)
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f47f aea3 	bne.w	800232c <HAL_GPIO_Init+0x10>
  }
}
 80025e6:	bf00      	nop
 80025e8:	bf00      	nop
 80025ea:	371c      	adds	r7, #28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40010000 	.word	0x40010000
 80025fc:	48000400 	.word	0x48000400
 8002600:	48000800 	.word	0x48000800
 8002604:	48000c00 	.word	0x48000c00
 8002608:	48001000 	.word	0x48001000
 800260c:	40010400 	.word	0x40010400

08002610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	807b      	strh	r3, [r7, #2]
 800261c:	4613      	mov	r3, r2
 800261e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002620:	787b      	ldrb	r3, [r7, #1]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002626:	887a      	ldrh	r2, [r7, #2]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800262c:	e002      	b.n	8002634 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800262e:	887a      	ldrh	r2, [r7, #2]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e081      	b.n	8002756 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff fb2e 	bl	8001cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2224      	movs	r2, #36	; 0x24
 8002670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002690:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d107      	bne.n	80026ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	e006      	b.n	80026c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d104      	bne.n	80026da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69d9      	ldr	r1, [r3, #28]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1a      	ldr	r2, [r3, #32]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	4608      	mov	r0, r1
 800276a:	4611      	mov	r1, r2
 800276c:	461a      	mov	r2, r3
 800276e:	4603      	mov	r3, r0
 8002770:	817b      	strh	r3, [r7, #10]
 8002772:	460b      	mov	r3, r1
 8002774:	813b      	strh	r3, [r7, #8]
 8002776:	4613      	mov	r3, r2
 8002778:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b20      	cmp	r3, #32
 8002784:	f040 80f9 	bne.w	800297a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_I2C_Mem_Write+0x34>
 800278e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002790:	2b00      	cmp	r3, #0
 8002792:	d105      	bne.n	80027a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800279a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0ed      	b.n	800297c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_I2C_Mem_Write+0x4e>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e0e6      	b.n	800297c <HAL_I2C_Mem_Write+0x21c>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027b6:	f7ff fc9b 	bl	80020f0 <HAL_GetTick>
 80027ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	2319      	movs	r3, #25
 80027c2:	2201      	movs	r2, #1
 80027c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fac3 	bl	8002d54 <I2C_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0d1      	b.n	800297c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2221      	movs	r2, #33	; 0x21
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2240      	movs	r2, #64	; 0x40
 80027e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a3a      	ldr	r2, [r7, #32]
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002800:	88f8      	ldrh	r0, [r7, #6]
 8002802:	893a      	ldrh	r2, [r7, #8]
 8002804:	8979      	ldrh	r1, [r7, #10]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	4603      	mov	r3, r0
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f9d3 	bl	8002bbc <I2C_RequestMemoryWrite>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0a9      	b.n	800297c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	2bff      	cmp	r3, #255	; 0xff
 8002830:	d90e      	bls.n	8002850 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	22ff      	movs	r2, #255	; 0xff
 8002836:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	b2da      	uxtb	r2, r3
 800283e:	8979      	ldrh	r1, [r7, #10]
 8002840:	2300      	movs	r3, #0
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fc3d 	bl	80030c8 <I2C_TransferConfig>
 800284e:	e00f      	b.n	8002870 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285e:	b2da      	uxtb	r2, r3
 8002860:	8979      	ldrh	r1, [r7, #10]
 8002862:	2300      	movs	r3, #0
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fc2c 	bl	80030c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fabc 	bl	8002df2 <I2C_WaitOnTXISFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e07b      	b.n	800297c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	781a      	ldrb	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d034      	beq.n	8002928 <HAL_I2C_Mem_Write+0x1c8>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d130      	bne.n	8002928 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028cc:	2200      	movs	r2, #0
 80028ce:	2180      	movs	r1, #128	; 0x80
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fa3f 	bl	8002d54 <I2C_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e04d      	b.n	800297c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2bff      	cmp	r3, #255	; 0xff
 80028e8:	d90e      	bls.n	8002908 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	22ff      	movs	r2, #255	; 0xff
 80028ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	8979      	ldrh	r1, [r7, #10]
 80028f8:	2300      	movs	r3, #0
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 fbe1 	bl	80030c8 <I2C_TransferConfig>
 8002906:	e00f      	b.n	8002928 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	b2da      	uxtb	r2, r3
 8002918:	8979      	ldrh	r1, [r7, #10]
 800291a:	2300      	movs	r3, #0
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fbd0 	bl	80030c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d19e      	bne.n	8002870 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 faa2 	bl	8002e80 <I2C_WaitOnSTOPFlagUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e01a      	b.n	800297c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2220      	movs	r2, #32
 800294c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <HAL_I2C_Mem_Write+0x224>)
 800295a:	400b      	ands	r3, r1
 800295c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800297a:	2302      	movs	r3, #2
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	fe00e800 	.word	0xfe00e800

08002988 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	4608      	mov	r0, r1
 8002992:	4611      	mov	r1, r2
 8002994:	461a      	mov	r2, r3
 8002996:	4603      	mov	r3, r0
 8002998:	817b      	strh	r3, [r7, #10]
 800299a:	460b      	mov	r3, r1
 800299c:	813b      	strh	r3, [r7, #8]
 800299e:	4613      	mov	r3, r2
 80029a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	f040 80fd 	bne.w	8002baa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <HAL_I2C_Mem_Read+0x34>
 80029b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0f1      	b.n	8002bac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_I2C_Mem_Read+0x4e>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e0ea      	b.n	8002bac <HAL_I2C_Mem_Read+0x224>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029de:	f7ff fb87 	bl	80020f0 <HAL_GetTick>
 80029e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	2319      	movs	r3, #25
 80029ea:	2201      	movs	r2, #1
 80029ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f9af 	bl	8002d54 <I2C_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0d5      	b.n	8002bac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2222      	movs	r2, #34	; 0x22
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2240      	movs	r2, #64	; 0x40
 8002a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a3a      	ldr	r2, [r7, #32]
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a28:	88f8      	ldrh	r0, [r7, #6]
 8002a2a:	893a      	ldrh	r2, [r7, #8]
 8002a2c:	8979      	ldrh	r1, [r7, #10]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	4603      	mov	r3, r0
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f913 	bl	8002c64 <I2C_RequestMemoryRead>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0ad      	b.n	8002bac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2bff      	cmp	r3, #255	; 0xff
 8002a58:	d90e      	bls.n	8002a78 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	22ff      	movs	r2, #255	; 0xff
 8002a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	8979      	ldrh	r1, [r7, #10]
 8002a68:	4b52      	ldr	r3, [pc, #328]	; (8002bb4 <HAL_I2C_Mem_Read+0x22c>)
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 fb29 	bl	80030c8 <I2C_TransferConfig>
 8002a76:	e00f      	b.n	8002a98 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	8979      	ldrh	r1, [r7, #10]
 8002a8a:	4b4a      	ldr	r3, [pc, #296]	; (8002bb4 <HAL_I2C_Mem_Read+0x22c>)
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fb18 	bl	80030c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2104      	movs	r1, #4
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f956 	bl	8002d54 <I2C_WaitOnFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e07c      	b.n	8002bac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d034      	beq.n	8002b58 <HAL_I2C_Mem_Read+0x1d0>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d130      	bne.n	8002b58 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	2200      	movs	r2, #0
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f927 	bl	8002d54 <I2C_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e04d      	b.n	8002bac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2bff      	cmp	r3, #255	; 0xff
 8002b18:	d90e      	bls.n	8002b38 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	22ff      	movs	r2, #255	; 0xff
 8002b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	8979      	ldrh	r1, [r7, #10]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 fac9 	bl	80030c8 <I2C_TransferConfig>
 8002b36:	e00f      	b.n	8002b58 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	8979      	ldrh	r1, [r7, #10]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fab8 	bl	80030c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d19a      	bne.n	8002a98 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f98a 	bl	8002e80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e01a      	b.n	8002bac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6859      	ldr	r1, [r3, #4]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_I2C_Mem_Read+0x230>)
 8002b8a:	400b      	ands	r3, r1
 8002b8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	e000      	b.n	8002bac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002baa:	2302      	movs	r3, #2
  }
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	80002400 	.word	0x80002400
 8002bb8:	fe00e800 	.word	0xfe00e800

08002bbc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4603      	mov	r3, r0
 8002bcc:	817b      	strh	r3, [r7, #10]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	813b      	strh	r3, [r7, #8]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	8979      	ldrh	r1, [r7, #10]
 8002bdc:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <I2C_RequestMemoryWrite+0xa4>)
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fa6f 	bl	80030c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	69b9      	ldr	r1, [r7, #24]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f8ff 	bl	8002df2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e02c      	b.n	8002c58 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d105      	bne.n	8002c10 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c04:	893b      	ldrh	r3, [r7, #8]
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	629a      	str	r2, [r3, #40]	; 0x28
 8002c0e:	e015      	b.n	8002c3c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c10:	893b      	ldrh	r3, [r7, #8]
 8002c12:	0a1b      	lsrs	r3, r3, #8
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	69b9      	ldr	r1, [r7, #24]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f8e5 	bl	8002df2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e012      	b.n	8002c58 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c32:	893b      	ldrh	r3, [r7, #8]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	2200      	movs	r2, #0
 8002c44:	2180      	movs	r1, #128	; 0x80
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f884 	bl	8002d54 <I2C_WaitOnFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	80002000 	.word	0x80002000

08002c64 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	817b      	strh	r3, [r7, #10]
 8002c76:	460b      	mov	r3, r1
 8002c78:	813b      	strh	r3, [r7, #8]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	8979      	ldrh	r1, [r7, #10]
 8002c84:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <I2C_RequestMemoryRead+0xa4>)
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 fa1c 	bl	80030c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	69b9      	ldr	r1, [r7, #24]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f8ac 	bl	8002df2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e02c      	b.n	8002cfe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d105      	bne.n	8002cb6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002caa:	893b      	ldrh	r3, [r7, #8]
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	629a      	str	r2, [r3, #40]	; 0x28
 8002cb4:	e015      	b.n	8002ce2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cb6:	893b      	ldrh	r3, [r7, #8]
 8002cb8:	0a1b      	lsrs	r3, r3, #8
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	69b9      	ldr	r1, [r7, #24]
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f892 	bl	8002df2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e012      	b.n	8002cfe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cd8:	893b      	ldrh	r3, [r7, #8]
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2140      	movs	r1, #64	; 0x40
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f831 	bl	8002d54 <I2C_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	80002000 	.word	0x80002000

08002d0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d103      	bne.n	8002d2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2200      	movs	r2, #0
 8002d28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d007      	beq.n	8002d48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	619a      	str	r2, [r3, #24]
  }
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	4613      	mov	r3, r2
 8002d62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d64:	e031      	b.n	8002dca <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d6c:	d02d      	beq.n	8002dca <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6e:	f7ff f9bf 	bl	80020f0 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d302      	bcc.n	8002d84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d122      	bne.n	8002dca <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d113      	bne.n	8002dca <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f043 0220 	orr.w	r2, r3, #32
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00f      	b.n	8002dea <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699a      	ldr	r2, [r3, #24]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	bf0c      	ite	eq
 8002dda:	2301      	moveq	r3, #1
 8002ddc:	2300      	movne	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d0be      	beq.n	8002d66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dfe:	e033      	b.n	8002e68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f87f 	bl	8002f08 <I2C_IsErrorOccurred>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e031      	b.n	8002e78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e1a:	d025      	beq.n	8002e68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1c:	f7ff f968 	bl	80020f0 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d302      	bcc.n	8002e32 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d11a      	bne.n	8002e68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d013      	beq.n	8002e68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e44:	f043 0220 	orr.w	r2, r3, #32
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e007      	b.n	8002e78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d1c4      	bne.n	8002e00 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e8c:	e02f      	b.n	8002eee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f838 	bl	8002f08 <I2C_IsErrorOccurred>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e02d      	b.n	8002efe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea2:	f7ff f925 	bl	80020f0 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d302      	bcc.n	8002eb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d11a      	bne.n	8002eee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b20      	cmp	r3, #32
 8002ec4:	d013      	beq.n	8002eee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	f043 0220 	orr.w	r2, r3, #32
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e007      	b.n	8002efe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d1c8      	bne.n	8002e8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08a      	sub	sp, #40	; 0x28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d068      	beq.n	8003006 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2210      	movs	r2, #16
 8002f3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f3c:	e049      	b.n	8002fd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f44:	d045      	beq.n	8002fd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f46:	f7ff f8d3 	bl	80020f0 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d302      	bcc.n	8002f5c <I2C_IsErrorOccurred+0x54>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d13a      	bne.n	8002fd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f7e:	d121      	bne.n	8002fc4 <I2C_IsErrorOccurred+0xbc>
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f86:	d01d      	beq.n	8002fc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d01a      	beq.n	8002fc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f9e:	f7ff f8a7 	bl	80020f0 <HAL_GetTick>
 8002fa2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fa4:	e00e      	b.n	8002fc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fa6:	f7ff f8a3 	bl	80020f0 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b19      	cmp	r3, #25
 8002fb2:	d907      	bls.n	8002fc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	f043 0320 	orr.w	r3, r3, #32
 8002fba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002fc2:	e006      	b.n	8002fd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d1e9      	bne.n	8002fa6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d003      	beq.n	8002fe8 <I2C_IsErrorOccurred+0xe0>
 8002fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0aa      	beq.n	8002f3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d103      	bne.n	8002ff8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	f043 0304 	orr.w	r3, r3, #4
 8002ffe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003028:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f043 0308 	orr.w	r3, r3, #8
 8003040:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800304a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00b      	beq.n	8003074 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	f043 0302 	orr.w	r3, r3, #2
 8003062:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800306c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003078:	2b00      	cmp	r3, #0
 800307a:	d01c      	beq.n	80030b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f7ff fe45 	bl	8002d0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <I2C_IsErrorOccurred+0x1bc>)
 800308e:	400b      	ands	r3, r1
 8003090:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	431a      	orrs	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80030b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3728      	adds	r7, #40	; 0x28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	fe00e800 	.word	0xfe00e800

080030c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	460b      	mov	r3, r1
 80030d4:	817b      	strh	r3, [r7, #10]
 80030d6:	4613      	mov	r3, r2
 80030d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030da:	897b      	ldrh	r3, [r7, #10]
 80030dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030e0:	7a7b      	ldrb	r3, [r7, #9]
 80030e2:	041b      	lsls	r3, r3, #16
 80030e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	0d5b      	lsrs	r3, r3, #21
 8003102:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003106:	4b08      	ldr	r3, [pc, #32]	; (8003128 <I2C_TransferConfig+0x60>)
 8003108:	430b      	orrs	r3, r1
 800310a:	43db      	mvns	r3, r3
 800310c:	ea02 0103 	and.w	r1, r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	03ff63ff 	.word	0x03ff63ff

0800312c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b20      	cmp	r3, #32
 8003140:	d138      	bne.n	80031b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800314c:	2302      	movs	r3, #2
 800314e:	e032      	b.n	80031b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2224      	movs	r2, #36	; 0x24
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0201 	bic.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800317e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6819      	ldr	r1, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b085      	sub	sp, #20
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d139      	bne.n	800324c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e033      	b.n	800324e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2224      	movs	r2, #36	; 0x24
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0201 	bic.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003214:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	e000      	b.n	800324e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800324c:	2302      	movs	r3, #2
  }
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800325a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800325c:	b08b      	sub	sp, #44	; 0x2c
 800325e:	af06      	add	r7, sp, #24
 8003260:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0c4      	b.n	80033f6 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d106      	bne.n	8003286 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fe fdfb 	bl	8001e7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2203      	movs	r2, #3
 800328a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f002 fa84 	bl	80057a0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003298:	2300      	movs	r3, #0
 800329a:	73fb      	strb	r3, [r7, #15]
 800329c:	e040      	b.n	8003320 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	440b      	add	r3, r1
 80032ae:	3301      	adds	r3, #1
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	440b      	add	r3, r1
 80032c4:	7bfa      	ldrb	r2, [r7, #15]
 80032c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	440b      	add	r3, r1
 80032d8:	3303      	adds	r3, #3
 80032da:	2200      	movs	r2, #0
 80032dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	440b      	add	r3, r1
 80032ec:	3338      	adds	r3, #56	; 0x38
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032f2:	7bfa      	ldrb	r2, [r7, #15]
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	440b      	add	r3, r1
 8003300:	333c      	adds	r3, #60	; 0x3c
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003306:	7bfa      	ldrb	r2, [r7, #15]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	440b      	add	r3, r1
 8003314:	3340      	adds	r3, #64	; 0x40
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	3301      	adds	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	7bfa      	ldrb	r2, [r7, #15]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	429a      	cmp	r2, r3
 8003328:	d3b9      	bcc.n	800329e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800332a:	2300      	movs	r3, #0
 800332c:	73fb      	strb	r3, [r7, #15]
 800332e:	e044      	b.n	80033ba <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003330:	7bfa      	ldrb	r2, [r7, #15]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	440b      	add	r3, r1
 800333e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003346:	7bfa      	ldrb	r2, [r7, #15]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	440b      	add	r3, r1
 8003354:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800335c:	7bfa      	ldrb	r2, [r7, #15]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	440b      	add	r3, r1
 800336a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003372:	7bfa      	ldrb	r2, [r7, #15]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	440b      	add	r3, r1
 8003380:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003388:	7bfa      	ldrb	r2, [r7, #15]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	440b      	add	r3, r1
 8003396:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800339e:	7bfa      	ldrb	r2, [r7, #15]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	440b      	add	r3, r1
 80033ac:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	3301      	adds	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
 80033ba:	7bfa      	ldrb	r2, [r7, #15]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d3b5      	bcc.n	8003330 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	687e      	ldr	r6, [r7, #4]
 80033cc:	466d      	mov	r5, sp
 80033ce:	f106 0410 	add.w	r4, r6, #16
 80033d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	602b      	str	r3, [r5, #0]
 80033da:	1d33      	adds	r3, r6, #4
 80033dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033de:	6838      	ldr	r0, [r7, #0]
 80033e0:	f002 f9f9 	bl	80057d6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003406:	af00      	add	r7, sp, #0
 8003408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003410:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d102      	bne.n	8003426 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	f001 b823 	b.w	800446c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 817d 	beq.w	8003736 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800343c:	4bbc      	ldr	r3, [pc, #752]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 030c 	and.w	r3, r3, #12
 8003444:	2b04      	cmp	r3, #4
 8003446:	d00c      	beq.n	8003462 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003448:	4bb9      	ldr	r3, [pc, #740]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b08      	cmp	r3, #8
 8003452:	d15c      	bne.n	800350e <HAL_RCC_OscConfig+0x10e>
 8003454:	4bb6      	ldr	r3, [pc, #728]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003460:	d155      	bne.n	800350e <HAL_RCC_OscConfig+0x10e>
 8003462:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003466:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800346e:	fa93 f3a3 	rbit	r3, r3
 8003472:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003476:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347a:	fab3 f383 	clz	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	095b      	lsrs	r3, r3, #5
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b01      	cmp	r3, #1
 800348c:	d102      	bne.n	8003494 <HAL_RCC_OscConfig+0x94>
 800348e:	4ba8      	ldr	r3, [pc, #672]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	e015      	b.n	80034c0 <HAL_RCC_OscConfig+0xc0>
 8003494:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003498:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80034a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80034b0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80034b4:	fa93 f3a3 	rbit	r3, r3
 80034b8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80034bc:	4b9c      	ldr	r3, [pc, #624]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80034c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80034cc:	fa92 f2a2 	rbit	r2, r2
 80034d0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80034d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80034d8:	fab2 f282 	clz	r2, r2
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	f042 0220 	orr.w	r2, r2, #32
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	f002 021f 	and.w	r2, r2, #31
 80034e8:	2101      	movs	r1, #1
 80034ea:	fa01 f202 	lsl.w	r2, r1, r2
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 811f 	beq.w	8003734 <HAL_RCC_OscConfig+0x334>
 80034f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f040 8116 	bne.w	8003734 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	f000 bfaf 	b.w	800446c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800350e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003512:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351e:	d106      	bne.n	800352e <HAL_RCC_OscConfig+0x12e>
 8003520:	4b83      	ldr	r3, [pc, #524]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a82      	ldr	r2, [pc, #520]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 8003526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	e036      	b.n	800359c <HAL_RCC_OscConfig+0x19c>
 800352e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003532:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x158>
 800353e:	4b7c      	ldr	r3, [pc, #496]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a7b      	ldr	r2, [pc, #492]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 8003544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	4b79      	ldr	r3, [pc, #484]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a78      	ldr	r2, [pc, #480]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 8003550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e021      	b.n	800359c <HAL_RCC_OscConfig+0x19c>
 8003558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003568:	d10c      	bne.n	8003584 <HAL_RCC_OscConfig+0x184>
 800356a:	4b71      	ldr	r3, [pc, #452]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a70      	ldr	r2, [pc, #448]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 8003570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4b6e      	ldr	r3, [pc, #440]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6d      	ldr	r2, [pc, #436]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e00b      	b.n	800359c <HAL_RCC_OscConfig+0x19c>
 8003584:	4b6a      	ldr	r3, [pc, #424]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a69      	ldr	r2, [pc, #420]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 800358a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	4b67      	ldr	r3, [pc, #412]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a66      	ldr	r2, [pc, #408]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 8003596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800359a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800359c:	4b64      	ldr	r3, [pc, #400]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	f023 020f 	bic.w	r2, r3, #15
 80035a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	495f      	ldr	r1, [pc, #380]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d059      	beq.n	800367a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c6:	f7fe fd93 	bl	80020f0 <HAL_GetTick>
 80035ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe fd8e 	bl	80020f0 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b64      	cmp	r3, #100	; 0x64
 80035de:	d902      	bls.n	80035e6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	f000 bf43 	b.w	800446c <HAL_RCC_OscConfig+0x106c>
 80035e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035ea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80035fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b01      	cmp	r3, #1
 8003610:	d102      	bne.n	8003618 <HAL_RCC_OscConfig+0x218>
 8003612:	4b47      	ldr	r3, [pc, #284]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	e015      	b.n	8003644 <HAL_RCC_OscConfig+0x244>
 8003618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800361c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800362c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003630:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003634:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003638:	fa93 f3a3 	rbit	r3, r3
 800363c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003640:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003648:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800364c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003650:	fa92 f2a2 	rbit	r2, r2
 8003654:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003658:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800365c:	fab2 f282 	clz	r2, r2
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	f042 0220 	orr.w	r2, r2, #32
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	f002 021f 	and.w	r2, r2, #31
 800366c:	2101      	movs	r1, #1
 800366e:	fa01 f202 	lsl.w	r2, r1, r2
 8003672:	4013      	ands	r3, r2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0ab      	beq.n	80035d0 <HAL_RCC_OscConfig+0x1d0>
 8003678:	e05d      	b.n	8003736 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367a:	f7fe fd39 	bl	80020f0 <HAL_GetTick>
 800367e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003682:	e00a      	b.n	800369a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003684:	f7fe fd34 	bl	80020f0 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b64      	cmp	r3, #100	; 0x64
 8003692:	d902      	bls.n	800369a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	f000 bee9 	b.w	800446c <HAL_RCC_OscConfig+0x106c>
 800369a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800369e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80036ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d102      	bne.n	80036cc <HAL_RCC_OscConfig+0x2cc>
 80036c6:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	e015      	b.n	80036f8 <HAL_RCC_OscConfig+0x2f8>
 80036cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036d0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80036e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036e4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80036e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80036ec:	fa93 f3a3 	rbit	r3, r3
 80036f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80036f4:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <HAL_RCC_OscConfig+0x330>)
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036fc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003700:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003704:	fa92 f2a2 	rbit	r2, r2
 8003708:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800370c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003710:	fab2 f282 	clz	r2, r2
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	f042 0220 	orr.w	r2, r2, #32
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	f002 021f 	and.w	r2, r2, #31
 8003720:	2101      	movs	r1, #1
 8003722:	fa01 f202 	lsl.w	r2, r1, r2
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1ab      	bne.n	8003684 <HAL_RCC_OscConfig+0x284>
 800372c:	e003      	b.n	8003736 <HAL_RCC_OscConfig+0x336>
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 817d 	beq.w	8003a46 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800374c:	4ba6      	ldr	r3, [pc, #664]	; (80039e8 <HAL_RCC_OscConfig+0x5e8>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00b      	beq.n	8003770 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003758:	4ba3      	ldr	r3, [pc, #652]	; (80039e8 <HAL_RCC_OscConfig+0x5e8>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	2b08      	cmp	r3, #8
 8003762:	d172      	bne.n	800384a <HAL_RCC_OscConfig+0x44a>
 8003764:	4ba0      	ldr	r3, [pc, #640]	; (80039e8 <HAL_RCC_OscConfig+0x5e8>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d16c      	bne.n	800384a <HAL_RCC_OscConfig+0x44a>
 8003770:	2302      	movs	r3, #2
 8003772:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800377a:	fa93 f3a3 	rbit	r3, r3
 800377e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003782:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	b2db      	uxtb	r3, r3
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b01      	cmp	r3, #1
 8003798:	d102      	bne.n	80037a0 <HAL_RCC_OscConfig+0x3a0>
 800379a:	4b93      	ldr	r3, [pc, #588]	; (80039e8 <HAL_RCC_OscConfig+0x5e8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	e013      	b.n	80037c8 <HAL_RCC_OscConfig+0x3c8>
 80037a0:	2302      	movs	r3, #2
 80037a2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80037aa:	fa93 f3a3 	rbit	r3, r3
 80037ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80037b2:	2302      	movs	r3, #2
 80037b4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80037b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037bc:	fa93 f3a3 	rbit	r3, r3
 80037c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80037c4:	4b88      	ldr	r3, [pc, #544]	; (80039e8 <HAL_RCC_OscConfig+0x5e8>)
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	2202      	movs	r2, #2
 80037ca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80037ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80037d2:	fa92 f2a2 	rbit	r2, r2
 80037d6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80037da:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80037de:	fab2 f282 	clz	r2, r2
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	f042 0220 	orr.w	r2, r2, #32
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	f002 021f 	and.w	r2, r2, #31
 80037ee:	2101      	movs	r1, #1
 80037f0:	fa01 f202 	lsl.w	r2, r1, r2
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_RCC_OscConfig+0x410>
 80037fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d002      	beq.n	8003810 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f000 be2e 	b.w	800446c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003810:	4b75      	ldr	r3, [pc, #468]	; (80039e8 <HAL_RCC_OscConfig+0x5e8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	21f8      	movs	r1, #248	; 0xf8
 8003826:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800382e:	fa91 f1a1 	rbit	r1, r1
 8003832:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003836:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800383a:	fab1 f181 	clz	r1, r1
 800383e:	b2c9      	uxtb	r1, r1
 8003840:	408b      	lsls	r3, r1
 8003842:	4969      	ldr	r1, [pc, #420]	; (80039e8 <HAL_RCC_OscConfig+0x5e8>)
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003848:	e0fd      	b.n	8003a46 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800384a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8088 	beq.w	800396c <HAL_RCC_OscConfig+0x56c>
 800385c:	2301      	movs	r3, #1
 800385e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003862:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800386e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003872:	fab3 f383 	clz	r3, r3
 8003876:	b2db      	uxtb	r3, r3
 8003878:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800387c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	461a      	mov	r2, r3
 8003884:	2301      	movs	r3, #1
 8003886:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003888:	f7fe fc32 	bl	80020f0 <HAL_GetTick>
 800388c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003890:	e00a      	b.n	80038a8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003892:	f7fe fc2d 	bl	80020f0 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d902      	bls.n	80038a8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	f000 bde2 	b.w	800446c <HAL_RCC_OscConfig+0x106c>
 80038a8:	2302      	movs	r3, #2
 80038aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80038b2:	fa93 f3a3 	rbit	r3, r3
 80038b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80038ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038be:	fab3 f383 	clz	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d102      	bne.n	80038d8 <HAL_RCC_OscConfig+0x4d8>
 80038d2:	4b45      	ldr	r3, [pc, #276]	; (80039e8 <HAL_RCC_OscConfig+0x5e8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	e013      	b.n	8003900 <HAL_RCC_OscConfig+0x500>
 80038d8:	2302      	movs	r3, #2
 80038da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80038ea:	2302      	movs	r3, #2
 80038ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80038f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80038fc:	4b3a      	ldr	r3, [pc, #232]	; (80039e8 <HAL_RCC_OscConfig+0x5e8>)
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	2202      	movs	r2, #2
 8003902:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003906:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800390a:	fa92 f2a2 	rbit	r2, r2
 800390e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003912:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003916:	fab2 f282 	clz	r2, r2
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	f042 0220 	orr.w	r2, r2, #32
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	f002 021f 	and.w	r2, r2, #31
 8003926:	2101      	movs	r1, #1
 8003928:	fa01 f202 	lsl.w	r2, r1, r2
 800392c:	4013      	ands	r3, r2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0af      	beq.n	8003892 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003932:	4b2d      	ldr	r3, [pc, #180]	; (80039e8 <HAL_RCC_OscConfig+0x5e8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800393a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	21f8      	movs	r1, #248	; 0xf8
 8003948:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003950:	fa91 f1a1 	rbit	r1, r1
 8003954:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003958:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800395c:	fab1 f181 	clz	r1, r1
 8003960:	b2c9      	uxtb	r1, r1
 8003962:	408b      	lsls	r3, r1
 8003964:	4920      	ldr	r1, [pc, #128]	; (80039e8 <HAL_RCC_OscConfig+0x5e8>)
 8003966:	4313      	orrs	r3, r2
 8003968:	600b      	str	r3, [r1, #0]
 800396a:	e06c      	b.n	8003a46 <HAL_RCC_OscConfig+0x646>
 800396c:	2301      	movs	r3, #1
 800396e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800397e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800398c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	461a      	mov	r2, r3
 8003994:	2300      	movs	r3, #0
 8003996:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7fe fbaa 	bl	80020f0 <HAL_GetTick>
 800399c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a0:	e00a      	b.n	80039b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039a2:	f7fe fba5 	bl	80020f0 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d902      	bls.n	80039b8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	f000 bd5a 	b.w	800446c <HAL_RCC_OscConfig+0x106c>
 80039b8:	2302      	movs	r3, #2
 80039ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80039ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ce:	fab3 f383 	clz	r3, r3
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d104      	bne.n	80039ec <HAL_RCC_OscConfig+0x5ec>
 80039e2:	4b01      	ldr	r3, [pc, #4]	; (80039e8 <HAL_RCC_OscConfig+0x5e8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	e015      	b.n	8003a14 <HAL_RCC_OscConfig+0x614>
 80039e8:	40021000 	.word	0x40021000
 80039ec:	2302      	movs	r3, #2
 80039ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80039fe:	2302      	movs	r3, #2
 8003a00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a08:	fa93 f3a3 	rbit	r3, r3
 8003a0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003a10:	4bc8      	ldr	r3, [pc, #800]	; (8003d34 <HAL_RCC_OscConfig+0x934>)
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	2202      	movs	r2, #2
 8003a16:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003a1a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003a1e:	fa92 f2a2 	rbit	r2, r2
 8003a22:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003a26:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003a2a:	fab2 f282 	clz	r2, r2
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	f042 0220 	orr.w	r2, r2, #32
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	f002 021f 	and.w	r2, r2, #31
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1ad      	bne.n	80039a2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 8110 	beq.w	8003c7c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d079      	beq.n	8003b60 <HAL_RCC_OscConfig+0x760>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003a76:	fa93 f3a3 	rbit	r3, r3
 8003a7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a82:	fab3 f383 	clz	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4bab      	ldr	r3, [pc, #684]	; (8003d38 <HAL_RCC_OscConfig+0x938>)
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	461a      	mov	r2, r3
 8003a92:	2301      	movs	r3, #1
 8003a94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a96:	f7fe fb2b 	bl	80020f0 <HAL_GetTick>
 8003a9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa0:	f7fe fb26 	bl	80020f0 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d902      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	f000 bcdb 	b.w	800446c <HAL_RCC_OscConfig+0x106c>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ac0:	fa93 f3a3 	rbit	r3, r3
 8003ac4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003acc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	fa93 f2a3 	rbit	r2, r3
 8003ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003af4:	2202      	movs	r2, #2
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	fa93 f2a3 	rbit	r2, r3
 8003b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b0e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b10:	4b88      	ldr	r3, [pc, #544]	; (8003d34 <HAL_RCC_OscConfig+0x934>)
 8003b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003b1c:	2102      	movs	r1, #2
 8003b1e:	6019      	str	r1, [r3, #0]
 8003b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	fa93 f1a3 	rbit	r1, r3
 8003b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b32:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003b36:	6019      	str	r1, [r3, #0]
  return result;
 8003b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	fab3 f383 	clz	r3, r3
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	2101      	movs	r1, #1
 8003b54:	fa01 f303 	lsl.w	r3, r1, r3
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0a0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x6a0>
 8003b5e:	e08d      	b.n	8003c7c <HAL_RCC_OscConfig+0x87c>
 8003b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b64:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b68:	2201      	movs	r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b70:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	fa93 f2a3 	rbit	r2, r3
 8003b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b82:	601a      	str	r2, [r3, #0]
  return result;
 8003b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b88:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b8c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b8e:	fab3 f383 	clz	r3, r3
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	461a      	mov	r2, r3
 8003b96:	4b68      	ldr	r3, [pc, #416]	; (8003d38 <HAL_RCC_OscConfig+0x938>)
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba2:	f7fe faa5 	bl	80020f0 <HAL_GetTick>
 8003ba6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bac:	f7fe faa0 	bl	80020f0 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d902      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	f000 bc55 	b.w	800446c <HAL_RCC_OscConfig+0x106c>
 8003bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003bca:	2202      	movs	r2, #2
 8003bcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	fa93 f2a3 	rbit	r2, r3
 8003bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003bee:	2202      	movs	r2, #2
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	fa93 f2a3 	rbit	r2, r3
 8003c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c12:	2202      	movs	r2, #2
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	fa93 f2a3 	rbit	r2, r3
 8003c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c28:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003c2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c2e:	4b41      	ldr	r3, [pc, #260]	; (8003d34 <HAL_RCC_OscConfig+0x934>)
 8003c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c36:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	6019      	str	r1, [r3, #0]
 8003c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c42:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	fa93 f1a3 	rbit	r1, r3
 8003c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c50:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c54:	6019      	str	r1, [r3, #0]
  return result;
 8003c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c5a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	fab3 f383 	clz	r3, r3
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	2101      	movs	r1, #1
 8003c72:	fa01 f303 	lsl.w	r3, r1, r3
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d197      	bne.n	8003bac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 81a1 	beq.w	8003fd4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c98:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <HAL_RCC_OscConfig+0x934>)
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d116      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca4:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <HAL_RCC_OscConfig+0x934>)
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	4a22      	ldr	r2, [pc, #136]	; (8003d34 <HAL_RCC_OscConfig+0x934>)
 8003caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cae:	61d3      	str	r3, [r2, #28]
 8003cb0:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <HAL_RCC_OscConfig+0x934>)
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cbc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003cca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd2:	4b1a      	ldr	r3, [pc, #104]	; (8003d3c <HAL_RCC_OscConfig+0x93c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d11a      	bne.n	8003d14 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cde:	4b17      	ldr	r3, [pc, #92]	; (8003d3c <HAL_RCC_OscConfig+0x93c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a16      	ldr	r2, [pc, #88]	; (8003d3c <HAL_RCC_OscConfig+0x93c>)
 8003ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cea:	f7fe fa01 	bl	80020f0 <HAL_GetTick>
 8003cee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf2:	e009      	b.n	8003d08 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf4:	f7fe f9fc 	bl	80020f0 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b64      	cmp	r3, #100	; 0x64
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e3b1      	b.n	800446c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d08:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <HAL_RCC_OscConfig+0x93c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ef      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d10d      	bne.n	8003d40 <HAL_RCC_OscConfig+0x940>
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <HAL_RCC_OscConfig+0x934>)
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	4a02      	ldr	r2, [pc, #8]	; (8003d34 <HAL_RCC_OscConfig+0x934>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	6213      	str	r3, [r2, #32]
 8003d30:	e03c      	b.n	8003dac <HAL_RCC_OscConfig+0x9ac>
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000
 8003d38:	10908120 	.word	0x10908120
 8003d3c:	40007000 	.word	0x40007000
 8003d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10c      	bne.n	8003d6a <HAL_RCC_OscConfig+0x96a>
 8003d50:	4bc1      	ldr	r3, [pc, #772]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	4ac0      	ldr	r2, [pc, #768]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	6213      	str	r3, [r2, #32]
 8003d5c:	4bbe      	ldr	r3, [pc, #760]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	4abd      	ldr	r2, [pc, #756]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003d62:	f023 0304 	bic.w	r3, r3, #4
 8003d66:	6213      	str	r3, [r2, #32]
 8003d68:	e020      	b.n	8003dac <HAL_RCC_OscConfig+0x9ac>
 8003d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	2b05      	cmp	r3, #5
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x994>
 8003d7a:	4bb7      	ldr	r3, [pc, #732]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	4ab6      	ldr	r2, [pc, #728]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003d80:	f043 0304 	orr.w	r3, r3, #4
 8003d84:	6213      	str	r3, [r2, #32]
 8003d86:	4bb4      	ldr	r3, [pc, #720]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	4ab3      	ldr	r2, [pc, #716]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	6213      	str	r3, [r2, #32]
 8003d92:	e00b      	b.n	8003dac <HAL_RCC_OscConfig+0x9ac>
 8003d94:	4bb0      	ldr	r3, [pc, #704]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	4aaf      	ldr	r2, [pc, #700]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003d9a:	f023 0301 	bic.w	r3, r3, #1
 8003d9e:	6213      	str	r3, [r2, #32]
 8003da0:	4bad      	ldr	r3, [pc, #692]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	4aac      	ldr	r2, [pc, #688]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003da6:	f023 0304 	bic.w	r3, r3, #4
 8003daa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 8081 	beq.w	8003ec0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dbe:	f7fe f997 	bl	80020f0 <HAL_GetTick>
 8003dc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc6:	e00b      	b.n	8003de0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc8:	f7fe f992 	bl	80020f0 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e345      	b.n	800446c <HAL_RCC_OscConfig+0x106c>
 8003de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003de8:	2202      	movs	r2, #2
 8003dea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	fa93 f2a3 	rbit	r2, r3
 8003dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dfe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	fa93 f2a3 	rbit	r2, r3
 8003e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e22:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003e26:	601a      	str	r2, [r3, #0]
  return result;
 8003e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003e30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e32:	fab3 f383 	clz	r3, r3
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	095b      	lsrs	r3, r3, #5
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	f043 0302 	orr.w	r3, r3, #2
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d102      	bne.n	8003e4c <HAL_RCC_OscConfig+0xa4c>
 8003e46:	4b84      	ldr	r3, [pc, #528]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	e013      	b.n	8003e74 <HAL_RCC_OscConfig+0xa74>
 8003e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e50:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003e54:	2202      	movs	r2, #2
 8003e56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	fa93 f2a3 	rbit	r2, r3
 8003e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	4b79      	ldr	r3, [pc, #484]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e78:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003e7c:	2102      	movs	r1, #2
 8003e7e:	6011      	str	r1, [r2, #0]
 8003e80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e84:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003e88:	6812      	ldr	r2, [r2, #0]
 8003e8a:	fa92 f1a2 	rbit	r1, r2
 8003e8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e92:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003e96:	6011      	str	r1, [r2, #0]
  return result;
 8003e98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e9c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	fab2 f282 	clz	r2, r2
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	f002 021f 	and.w	r2, r2, #31
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d084      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x9c8>
 8003ebe:	e07f      	b.n	8003fc0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec0:	f7fe f916 	bl	80020f0 <HAL_GetTick>
 8003ec4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec8:	e00b      	b.n	8003ee2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eca:	f7fe f911 	bl	80020f0 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e2c4      	b.n	800446c <HAL_RCC_OscConfig+0x106c>
 8003ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003eea:	2202      	movs	r2, #2
 8003eec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	fa93 f2a3 	rbit	r2, r3
 8003efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f00:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003f0e:	2202      	movs	r2, #2
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	fa93 f2a3 	rbit	r2, r3
 8003f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f24:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003f28:	601a      	str	r2, [r3, #0]
  return result;
 8003f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003f32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f34:	fab3 f383 	clz	r3, r3
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	f043 0302 	orr.w	r3, r3, #2
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d102      	bne.n	8003f4e <HAL_RCC_OscConfig+0xb4e>
 8003f48:	4b43      	ldr	r3, [pc, #268]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	e013      	b.n	8003f76 <HAL_RCC_OscConfig+0xb76>
 8003f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003f56:	2202      	movs	r2, #2
 8003f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	fa93 f2a3 	rbit	r2, r3
 8003f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	4b39      	ldr	r3, [pc, #228]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f7a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003f7e:	2102      	movs	r1, #2
 8003f80:	6011      	str	r1, [r2, #0]
 8003f82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f86:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	fa92 f1a2 	rbit	r1, r2
 8003f90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f94:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003f98:	6011      	str	r1, [r2, #0]
  return result;
 8003f9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f9e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	fab2 f282 	clz	r2, r2
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	f002 021f 	and.w	r2, r2, #31
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d184      	bne.n	8003eca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fc0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d105      	bne.n	8003fd4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc8:	4b23      	ldr	r3, [pc, #140]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	4a22      	ldr	r2, [pc, #136]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8242 	beq.w	800446a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fe6:	4b1c      	ldr	r3, [pc, #112]	; (8004058 <HAL_RCC_OscConfig+0xc58>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	f000 8213 	beq.w	800441a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	2b02      	cmp	r3, #2
 8004002:	f040 8162 	bne.w	80042ca <HAL_RCC_OscConfig+0xeca>
 8004006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800400e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004012:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004018:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	fa93 f2a3 	rbit	r2, r3
 8004022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004026:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800402a:	601a      	str	r2, [r3, #0]
  return result;
 800402c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004030:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004034:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004036:	fab3 f383 	clz	r3, r3
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004040:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	461a      	mov	r2, r3
 8004048:	2300      	movs	r3, #0
 800404a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7fe f850 	bl	80020f0 <HAL_GetTick>
 8004050:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004054:	e00c      	b.n	8004070 <HAL_RCC_OscConfig+0xc70>
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405c:	f7fe f848 	bl	80020f0 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e1fd      	b.n	800446c <HAL_RCC_OscConfig+0x106c>
 8004070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004074:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004078:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800407c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004082:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	fa93 f2a3 	rbit	r2, r3
 800408c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004090:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004094:	601a      	str	r2, [r3, #0]
  return result;
 8004096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800409a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800409e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040a0:	fab3 f383 	clz	r3, r3
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d102      	bne.n	80040ba <HAL_RCC_OscConfig+0xcba>
 80040b4:	4bb0      	ldr	r3, [pc, #704]	; (8004378 <HAL_RCC_OscConfig+0xf78>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	e027      	b.n	800410a <HAL_RCC_OscConfig+0xd0a>
 80040ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040be:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80040c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040cc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	fa93 f2a3 	rbit	r2, r3
 80040d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040da:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80040e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	fa93 f2a3 	rbit	r2, r3
 80040fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004100:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	4b9c      	ldr	r3, [pc, #624]	; (8004378 <HAL_RCC_OscConfig+0xf78>)
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800410e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004112:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004116:	6011      	str	r1, [r2, #0]
 8004118:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800411c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004120:	6812      	ldr	r2, [r2, #0]
 8004122:	fa92 f1a2 	rbit	r1, r2
 8004126:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800412a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800412e:	6011      	str	r1, [r2, #0]
  return result;
 8004130:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004134:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004138:	6812      	ldr	r2, [r2, #0]
 800413a:	fab2 f282 	clz	r2, r2
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	f042 0220 	orr.w	r2, r2, #32
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	f002 021f 	and.w	r2, r2, #31
 800414a:	2101      	movs	r1, #1
 800414c:	fa01 f202 	lsl.w	r2, r1, r2
 8004150:	4013      	ands	r3, r2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d182      	bne.n	800405c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004156:	4b88      	ldr	r3, [pc, #544]	; (8004378 <HAL_RCC_OscConfig+0xf78>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800415e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800416a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	430b      	orrs	r3, r1
 8004178:	497f      	ldr	r1, [pc, #508]	; (8004378 <HAL_RCC_OscConfig+0xf78>)
 800417a:	4313      	orrs	r3, r2
 800417c:	604b      	str	r3, [r1, #4]
 800417e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004182:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004186:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800418a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004190:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	fa93 f2a3 	rbit	r2, r3
 800419a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80041a2:	601a      	str	r2, [r3, #0]
  return result;
 80041a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80041ac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ae:	fab3 f383 	clz	r3, r3
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	461a      	mov	r2, r3
 80041c0:	2301      	movs	r3, #1
 80041c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c4:	f7fd ff94 	bl	80020f0 <HAL_GetTick>
 80041c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041cc:	e009      	b.n	80041e2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ce:	f7fd ff8f 	bl	80020f0 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e144      	b.n	800446c <HAL_RCC_OscConfig+0x106c>
 80041e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80041ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	fa93 f2a3 	rbit	r2, r3
 80041fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004202:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004206:	601a      	str	r2, [r3, #0]
  return result;
 8004208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800420c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004210:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004212:	fab3 f383 	clz	r3, r3
 8004216:	b2db      	uxtb	r3, r3
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b01      	cmp	r3, #1
 8004224:	d102      	bne.n	800422c <HAL_RCC_OscConfig+0xe2c>
 8004226:	4b54      	ldr	r3, [pc, #336]	; (8004378 <HAL_RCC_OscConfig+0xf78>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	e027      	b.n	800427c <HAL_RCC_OscConfig+0xe7c>
 800422c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004230:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004234:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004238:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	fa93 f2a3 	rbit	r2, r3
 8004248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800424c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004256:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800425a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004264:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	fa93 f2a3 	rbit	r2, r3
 800426e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004272:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	4b3f      	ldr	r3, [pc, #252]	; (8004378 <HAL_RCC_OscConfig+0xf78>)
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004280:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004284:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004288:	6011      	str	r1, [r2, #0]
 800428a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800428e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	fa92 f1a2 	rbit	r1, r2
 8004298:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800429c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80042a0:	6011      	str	r1, [r2, #0]
  return result;
 80042a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042a6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	fab2 f282 	clz	r2, r2
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	f042 0220 	orr.w	r2, r2, #32
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	f002 021f 	and.w	r2, r2, #31
 80042bc:	2101      	movs	r1, #1
 80042be:	fa01 f202 	lsl.w	r2, r1, r2
 80042c2:	4013      	ands	r3, r2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d082      	beq.n	80041ce <HAL_RCC_OscConfig+0xdce>
 80042c8:	e0cf      	b.n	800446a <HAL_RCC_OscConfig+0x106a>
 80042ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ce:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80042d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042dc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	fa93 f2a3 	rbit	r2, r3
 80042e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80042ee:	601a      	str	r2, [r3, #0]
  return result;
 80042f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80042f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fa:	fab3 f383 	clz	r3, r3
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004304:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	461a      	mov	r2, r3
 800430c:	2300      	movs	r3, #0
 800430e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004310:	f7fd feee 	bl	80020f0 <HAL_GetTick>
 8004314:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004318:	e009      	b.n	800432e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800431a:	f7fd fee9 	bl	80020f0 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e09e      	b.n	800446c <HAL_RCC_OscConfig+0x106c>
 800432e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004332:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004336:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800433a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004340:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	fa93 f2a3 	rbit	r2, r3
 800434a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800434e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004352:	601a      	str	r2, [r3, #0]
  return result;
 8004354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004358:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800435c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800435e:	fab3 f383 	clz	r3, r3
 8004362:	b2db      	uxtb	r3, r3
 8004364:	095b      	lsrs	r3, r3, #5
 8004366:	b2db      	uxtb	r3, r3
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b01      	cmp	r3, #1
 8004370:	d104      	bne.n	800437c <HAL_RCC_OscConfig+0xf7c>
 8004372:	4b01      	ldr	r3, [pc, #4]	; (8004378 <HAL_RCC_OscConfig+0xf78>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	e029      	b.n	80043cc <HAL_RCC_OscConfig+0xfcc>
 8004378:	40021000 	.word	0x40021000
 800437c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004380:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004384:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800438e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	fa93 f2a3 	rbit	r2, r3
 8004398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800439c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80043aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	fa93 f2a3 	rbit	r2, r3
 80043be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	4b2b      	ldr	r3, [pc, #172]	; (8004478 <HAL_RCC_OscConfig+0x1078>)
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043d0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80043d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043d8:	6011      	str	r1, [r2, #0]
 80043da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043de:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	fa92 f1a2 	rbit	r1, r2
 80043e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043ec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80043f0:	6011      	str	r1, [r2, #0]
  return result;
 80043f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043f6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	fab2 f282 	clz	r2, r2
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	f042 0220 	orr.w	r2, r2, #32
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	f002 021f 	and.w	r2, r2, #31
 800440c:	2101      	movs	r1, #1
 800440e:	fa01 f202 	lsl.w	r2, r1, r2
 8004412:	4013      	ands	r3, r2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d180      	bne.n	800431a <HAL_RCC_OscConfig+0xf1a>
 8004418:	e027      	b.n	800446a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800441a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800441e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e01e      	b.n	800446c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800442e:	4b12      	ldr	r3, [pc, #72]	; (8004478 <HAL_RCC_OscConfig+0x1078>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004436:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800443a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800443e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004442:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	429a      	cmp	r2, r3
 800444c:	d10b      	bne.n	8004466 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800444e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004452:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800445a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004462:	429a      	cmp	r2, r3
 8004464:	d001      	beq.n	800446a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000

0800447c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b09e      	sub	sp, #120	; 0x78
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e162      	b.n	800475a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004494:	4b90      	ldr	r3, [pc, #576]	; (80046d8 <HAL_RCC_ClockConfig+0x25c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d910      	bls.n	80044c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a2:	4b8d      	ldr	r3, [pc, #564]	; (80046d8 <HAL_RCC_ClockConfig+0x25c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f023 0207 	bic.w	r2, r3, #7
 80044aa:	498b      	ldr	r1, [pc, #556]	; (80046d8 <HAL_RCC_ClockConfig+0x25c>)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b2:	4b89      	ldr	r3, [pc, #548]	; (80046d8 <HAL_RCC_ClockConfig+0x25c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d001      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e14a      	b.n	800475a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d0:	4b82      	ldr	r3, [pc, #520]	; (80046dc <HAL_RCC_ClockConfig+0x260>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	497f      	ldr	r1, [pc, #508]	; (80046dc <HAL_RCC_ClockConfig+0x260>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 80dc 	beq.w	80046a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d13c      	bne.n	8004572 <HAL_RCC_ClockConfig+0xf6>
 80044f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004500:	fa93 f3a3 	rbit	r3, r3
 8004504:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004508:	fab3 f383 	clz	r3, r3
 800450c:	b2db      	uxtb	r3, r3
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	b2db      	uxtb	r3, r3
 8004512:	f043 0301 	orr.w	r3, r3, #1
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	d102      	bne.n	8004522 <HAL_RCC_ClockConfig+0xa6>
 800451c:	4b6f      	ldr	r3, [pc, #444]	; (80046dc <HAL_RCC_ClockConfig+0x260>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	e00f      	b.n	8004542 <HAL_RCC_ClockConfig+0xc6>
 8004522:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004526:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800452a:	fa93 f3a3 	rbit	r3, r3
 800452e:	667b      	str	r3, [r7, #100]	; 0x64
 8004530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004534:	663b      	str	r3, [r7, #96]	; 0x60
 8004536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004538:	fa93 f3a3 	rbit	r3, r3
 800453c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800453e:	4b67      	ldr	r3, [pc, #412]	; (80046dc <HAL_RCC_ClockConfig+0x260>)
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004546:	65ba      	str	r2, [r7, #88]	; 0x58
 8004548:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800454a:	fa92 f2a2 	rbit	r2, r2
 800454e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004550:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004552:	fab2 f282 	clz	r2, r2
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	f042 0220 	orr.w	r2, r2, #32
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	f002 021f 	and.w	r2, r2, #31
 8004562:	2101      	movs	r1, #1
 8004564:	fa01 f202 	lsl.w	r2, r1, r2
 8004568:	4013      	ands	r3, r2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d17b      	bne.n	8004666 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e0f3      	b.n	800475a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d13c      	bne.n	80045f4 <HAL_RCC_ClockConfig+0x178>
 800457a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800457e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004582:	fa93 f3a3 	rbit	r3, r3
 8004586:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b01      	cmp	r3, #1
 800459c:	d102      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x128>
 800459e:	4b4f      	ldr	r3, [pc, #316]	; (80046dc <HAL_RCC_ClockConfig+0x260>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	e00f      	b.n	80045c4 <HAL_RCC_ClockConfig+0x148>
 80045a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ac:	fa93 f3a3 	rbit	r3, r3
 80045b0:	647b      	str	r3, [r7, #68]	; 0x44
 80045b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045b6:	643b      	str	r3, [r7, #64]	; 0x40
 80045b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ba:	fa93 f3a3 	rbit	r3, r3
 80045be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045c0:	4b46      	ldr	r3, [pc, #280]	; (80046dc <HAL_RCC_ClockConfig+0x260>)
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80045ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045cc:	fa92 f2a2 	rbit	r2, r2
 80045d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80045d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045d4:	fab2 f282 	clz	r2, r2
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	f042 0220 	orr.w	r2, r2, #32
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	f002 021f 	and.w	r2, r2, #31
 80045e4:	2101      	movs	r1, #1
 80045e6:	fa01 f202 	lsl.w	r2, r1, r2
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d13a      	bne.n	8004666 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0b2      	b.n	800475a <HAL_RCC_ClockConfig+0x2de>
 80045f4:	2302      	movs	r3, #2
 80045f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	fa93 f3a3 	rbit	r3, r3
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004602:	fab3 f383 	clz	r3, r3
 8004606:	b2db      	uxtb	r3, r3
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	b2db      	uxtb	r3, r3
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b01      	cmp	r3, #1
 8004614:	d102      	bne.n	800461c <HAL_RCC_ClockConfig+0x1a0>
 8004616:	4b31      	ldr	r3, [pc, #196]	; (80046dc <HAL_RCC_ClockConfig+0x260>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	e00d      	b.n	8004638 <HAL_RCC_ClockConfig+0x1bc>
 800461c:	2302      	movs	r3, #2
 800461e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004622:	fa93 f3a3 	rbit	r3, r3
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
 8004628:	2302      	movs	r3, #2
 800462a:	623b      	str	r3, [r7, #32]
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	fa93 f3a3 	rbit	r3, r3
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	4b29      	ldr	r3, [pc, #164]	; (80046dc <HAL_RCC_ClockConfig+0x260>)
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	2202      	movs	r2, #2
 800463a:	61ba      	str	r2, [r7, #24]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	fa92 f2a2 	rbit	r2, r2
 8004642:	617a      	str	r2, [r7, #20]
  return result;
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	fab2 f282 	clz	r2, r2
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	f042 0220 	orr.w	r2, r2, #32
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	f002 021f 	and.w	r2, r2, #31
 8004656:	2101      	movs	r1, #1
 8004658:	fa01 f202 	lsl.w	r2, r1, r2
 800465c:	4013      	ands	r3, r2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e079      	b.n	800475a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004666:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <HAL_RCC_ClockConfig+0x260>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f023 0203 	bic.w	r2, r3, #3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	491a      	ldr	r1, [pc, #104]	; (80046dc <HAL_RCC_ClockConfig+0x260>)
 8004674:	4313      	orrs	r3, r2
 8004676:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004678:	f7fd fd3a 	bl	80020f0 <HAL_GetTick>
 800467c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467e:	e00a      	b.n	8004696 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004680:	f7fd fd36 	bl	80020f0 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f241 3288 	movw	r2, #5000	; 0x1388
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e061      	b.n	800475a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004696:	4b11      	ldr	r3, [pc, #68]	; (80046dc <HAL_RCC_ClockConfig+0x260>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f003 020c 	and.w	r2, r3, #12
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d1eb      	bne.n	8004680 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046a8:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <HAL_RCC_ClockConfig+0x25c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d214      	bcs.n	80046e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b6:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <HAL_RCC_ClockConfig+0x25c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 0207 	bic.w	r2, r3, #7
 80046be:	4906      	ldr	r1, [pc, #24]	; (80046d8 <HAL_RCC_ClockConfig+0x25c>)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c6:	4b04      	ldr	r3, [pc, #16]	; (80046d8 <HAL_RCC_ClockConfig+0x25c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d005      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e040      	b.n	800475a <HAL_RCC_ClockConfig+0x2de>
 80046d8:	40022000 	.word	0x40022000
 80046dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d008      	beq.n	80046fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046ec:	4b1d      	ldr	r3, [pc, #116]	; (8004764 <HAL_RCC_ClockConfig+0x2e8>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	491a      	ldr	r1, [pc, #104]	; (8004764 <HAL_RCC_ClockConfig+0x2e8>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d009      	beq.n	800471e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800470a:	4b16      	ldr	r3, [pc, #88]	; (8004764 <HAL_RCC_ClockConfig+0x2e8>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4912      	ldr	r1, [pc, #72]	; (8004764 <HAL_RCC_ClockConfig+0x2e8>)
 800471a:	4313      	orrs	r3, r2
 800471c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800471e:	f000 f829 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 8004722:	4601      	mov	r1, r0
 8004724:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <HAL_RCC_ClockConfig+0x2e8>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800472c:	22f0      	movs	r2, #240	; 0xf0
 800472e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	fa92 f2a2 	rbit	r2, r2
 8004736:	60fa      	str	r2, [r7, #12]
  return result;
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	fab2 f282 	clz	r2, r2
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	40d3      	lsrs	r3, r2
 8004742:	4a09      	ldr	r2, [pc, #36]	; (8004768 <HAL_RCC_ClockConfig+0x2ec>)
 8004744:	5cd3      	ldrb	r3, [r2, r3]
 8004746:	fa21 f303 	lsr.w	r3, r1, r3
 800474a:	4a08      	ldr	r2, [pc, #32]	; (800476c <HAL_RCC_ClockConfig+0x2f0>)
 800474c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800474e:	4b08      	ldr	r3, [pc, #32]	; (8004770 <HAL_RCC_ClockConfig+0x2f4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f7fd fc88 	bl	8002068 <HAL_InitTick>
  
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3778      	adds	r7, #120	; 0x78
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40021000 	.word	0x40021000
 8004768:	08006c54 	.word	0x08006c54
 800476c:	20000040 	.word	0x20000040
 8004770:	20000044 	.word	0x20000044

08004774 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004774:	b480      	push	{r7}
 8004776:	b08b      	sub	sp, #44	; 0x2c
 8004778:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	2300      	movs	r3, #0
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	2300      	movs	r3, #0
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800478e:	4b29      	ldr	r3, [pc, #164]	; (8004834 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f003 030c 	and.w	r3, r3, #12
 800479a:	2b04      	cmp	r3, #4
 800479c:	d002      	beq.n	80047a4 <HAL_RCC_GetSysClockFreq+0x30>
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d003      	beq.n	80047aa <HAL_RCC_GetSysClockFreq+0x36>
 80047a2:	e03c      	b.n	800481e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047a4:	4b24      	ldr	r3, [pc, #144]	; (8004838 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047a6:	623b      	str	r3, [r7, #32]
      break;
 80047a8:	e03c      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80047b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80047b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	fa92 f2a2 	rbit	r2, r2
 80047bc:	607a      	str	r2, [r7, #4]
  return result;
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	fab2 f282 	clz	r2, r2
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	40d3      	lsrs	r3, r2
 80047c8:	4a1c      	ldr	r2, [pc, #112]	; (800483c <HAL_RCC_GetSysClockFreq+0xc8>)
 80047ca:	5cd3      	ldrb	r3, [r2, r3]
 80047cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80047ce:	4b19      	ldr	r3, [pc, #100]	; (8004834 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	220f      	movs	r2, #15
 80047d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	fa92 f2a2 	rbit	r2, r2
 80047e0:	60fa      	str	r2, [r7, #12]
  return result;
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	fab2 f282 	clz	r2, r2
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	40d3      	lsrs	r3, r2
 80047ec:	4a14      	ldr	r2, [pc, #80]	; (8004840 <HAL_RCC_GetSysClockFreq+0xcc>)
 80047ee:	5cd3      	ldrb	r3, [r2, r3]
 80047f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047fc:	4a0e      	ldr	r2, [pc, #56]	; (8004838 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	fbb2 f2f3 	udiv	r2, r2, r3
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
 800480c:	e004      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	4a0c      	ldr	r2, [pc, #48]	; (8004844 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	623b      	str	r3, [r7, #32]
      break;
 800481c:	e002      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800481e:	4b06      	ldr	r3, [pc, #24]	; (8004838 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004820:	623b      	str	r3, [r7, #32]
      break;
 8004822:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004824:	6a3b      	ldr	r3, [r7, #32]
}
 8004826:	4618      	mov	r0, r3
 8004828:	372c      	adds	r7, #44	; 0x2c
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	40021000 	.word	0x40021000
 8004838:	007a1200 	.word	0x007a1200
 800483c:	08006c64 	.word	0x08006c64
 8004840:	08006c74 	.word	0x08006c74
 8004844:	003d0900 	.word	0x003d0900

08004848 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b092      	sub	sp, #72	; 0x48
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004858:	2300      	movs	r3, #0
 800485a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80d4 	beq.w	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800486c:	4b4e      	ldr	r3, [pc, #312]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10e      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004878:	4b4b      	ldr	r3, [pc, #300]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	4a4a      	ldr	r2, [pc, #296]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004882:	61d3      	str	r3, [r2, #28]
 8004884:	4b48      	ldr	r3, [pc, #288]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004890:	2301      	movs	r3, #1
 8004892:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004896:	4b45      	ldr	r3, [pc, #276]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d118      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048a2:	4b42      	ldr	r3, [pc, #264]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a41      	ldr	r2, [pc, #260]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ae:	f7fd fc1f 	bl	80020f0 <HAL_GetTick>
 80048b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b4:	e008      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b6:	f7fd fc1b 	bl	80020f0 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b64      	cmp	r3, #100	; 0x64
 80048c2:	d901      	bls.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e169      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c8:	4b38      	ldr	r3, [pc, #224]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048d4:	4b34      	ldr	r3, [pc, #208]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 8084 	beq.w	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d07c      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048f4:	4b2c      	ldr	r3, [pc, #176]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004902:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	fa93 f3a3 	rbit	r3, r3
 800490a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800490c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800490e:	fab3 f383 	clz	r3, r3
 8004912:	b2db      	uxtb	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	4b26      	ldr	r3, [pc, #152]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	461a      	mov	r2, r3
 800491e:	2301      	movs	r3, #1
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004926:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492a:	fa93 f3a3 	rbit	r3, r3
 800492e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004932:	fab3 f383 	clz	r3, r3
 8004936:	b2db      	uxtb	r3, r3
 8004938:	461a      	mov	r2, r3
 800493a:	4b1d      	ldr	r3, [pc, #116]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800493c:	4413      	add	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	461a      	mov	r2, r3
 8004942:	2300      	movs	r3, #0
 8004944:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004946:	4a18      	ldr	r2, [pc, #96]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800494c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d04b      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004956:	f7fd fbcb 	bl	80020f0 <HAL_GetTick>
 800495a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800495c:	e00a      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495e:	f7fd fbc7 	bl	80020f0 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f241 3288 	movw	r2, #5000	; 0x1388
 800496c:	4293      	cmp	r3, r2
 800496e:	d901      	bls.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e113      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004974:	2302      	movs	r3, #2
 8004976:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497a:	fa93 f3a3 	rbit	r3, r3
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
 8004980:	2302      	movs	r3, #2
 8004982:	623b      	str	r3, [r7, #32]
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	fa93 f3a3 	rbit	r3, r3
 800498a:	61fb      	str	r3, [r7, #28]
  return result;
 800498c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498e:	fab3 f383 	clz	r3, r3
 8004992:	b2db      	uxtb	r3, r3
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	b2db      	uxtb	r3, r3
 8004998:	f043 0302 	orr.w	r3, r3, #2
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d108      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80049a2:	4b01      	ldr	r3, [pc, #4]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	e00d      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40007000 	.word	0x40007000
 80049b0:	10908100 	.word	0x10908100
 80049b4:	2302      	movs	r3, #2
 80049b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	fa93 f3a3 	rbit	r3, r3
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	4b78      	ldr	r3, [pc, #480]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	2202      	movs	r2, #2
 80049c6:	613a      	str	r2, [r7, #16]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	fa92 f2a2 	rbit	r2, r2
 80049ce:	60fa      	str	r2, [r7, #12]
  return result;
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	fab2 f282 	clz	r2, r2
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	f002 021f 	and.w	r2, r2, #31
 80049e2:	2101      	movs	r1, #1
 80049e4:	fa01 f202 	lsl.w	r2, r1, r2
 80049e8:	4013      	ands	r3, r2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0b7      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80049ee:	4b6d      	ldr	r3, [pc, #436]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	496a      	ldr	r1, [pc, #424]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d105      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a08:	4b66      	ldr	r3, [pc, #408]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	4a65      	ldr	r2, [pc, #404]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a20:	4b60      	ldr	r3, [pc, #384]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	f023 0203 	bic.w	r2, r3, #3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	495d      	ldr	r1, [pc, #372]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d008      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a3e:	4b59      	ldr	r3, [pc, #356]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	4956      	ldr	r1, [pc, #344]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a5c:	4b51      	ldr	r3, [pc, #324]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	494e      	ldr	r1, [pc, #312]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a7a:	4b4a      	ldr	r3, [pc, #296]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	f023 0210 	bic.w	r2, r3, #16
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	4947      	ldr	r1, [pc, #284]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004a98:	4b42      	ldr	r3, [pc, #264]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	493f      	ldr	r1, [pc, #252]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d008      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ab6:	4b3b      	ldr	r3, [pc, #236]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	f023 0220 	bic.w	r2, r3, #32
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	4938      	ldr	r1, [pc, #224]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d008      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ad4:	4b33      	ldr	r3, [pc, #204]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	4930      	ldr	r1, [pc, #192]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0310 	and.w	r3, r3, #16
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d008      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004af2:	4b2c      	ldr	r3, [pc, #176]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	4929      	ldr	r1, [pc, #164]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d008      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b10:	4b24      	ldr	r3, [pc, #144]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	4921      	ldr	r1, [pc, #132]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d008      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	491a      	ldr	r1, [pc, #104]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004b4c:	4b15      	ldr	r3, [pc, #84]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	4912      	ldr	r1, [pc, #72]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d008      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	490b      	ldr	r1, [pc, #44]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004b88:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b94:	4903      	ldr	r1, [pc, #12]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3748      	adds	r7, #72	; 0x48
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40021000 	.word	0x40021000

08004ba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e09d      	b.n	8004cf6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d108      	bne.n	8004bd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bca:	d009      	beq.n	8004be0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	61da      	str	r2, [r3, #28]
 8004bd2:	e005      	b.n	8004be0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fd f8a8 	bl	8001d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c20:	d902      	bls.n	8004c28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	e002      	b.n	8004c2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c36:	d007      	beq.n	8004c48 <HAL_SPI_Init+0xa0>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c40:	d002      	beq.n	8004c48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8a:	ea42 0103 	orr.w	r1, r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	0c1b      	lsrs	r3, r3, #16
 8004ca4:	f003 0204 	and.w	r2, r3, #4
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004cc4:	ea42 0103 	orr.w	r1, r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69da      	ldr	r2, [r3, #28]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ce4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e049      	b.n	8004da4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d106      	bne.n	8004d2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7fd f855 	bl	8001dd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	f000 f949 	bl	8004fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e0ff      	b.n	8004fca <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b14      	cmp	r3, #20
 8004dd6:	f200 80f0 	bhi.w	8004fba <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004dda:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de0:	08004e35 	.word	0x08004e35
 8004de4:	08004fbb 	.word	0x08004fbb
 8004de8:	08004fbb 	.word	0x08004fbb
 8004dec:	08004fbb 	.word	0x08004fbb
 8004df0:	08004e75 	.word	0x08004e75
 8004df4:	08004fbb 	.word	0x08004fbb
 8004df8:	08004fbb 	.word	0x08004fbb
 8004dfc:	08004fbb 	.word	0x08004fbb
 8004e00:	08004eb7 	.word	0x08004eb7
 8004e04:	08004fbb 	.word	0x08004fbb
 8004e08:	08004fbb 	.word	0x08004fbb
 8004e0c:	08004fbb 	.word	0x08004fbb
 8004e10:	08004ef7 	.word	0x08004ef7
 8004e14:	08004fbb 	.word	0x08004fbb
 8004e18:	08004fbb 	.word	0x08004fbb
 8004e1c:	08004fbb 	.word	0x08004fbb
 8004e20:	08004f39 	.word	0x08004f39
 8004e24:	08004fbb 	.word	0x08004fbb
 8004e28:	08004fbb 	.word	0x08004fbb
 8004e2c:	08004fbb 	.word	0x08004fbb
 8004e30:	08004f79 	.word	0x08004f79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f95a 	bl	80050f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0208 	orr.w	r2, r2, #8
 8004e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0204 	bic.w	r2, r2, #4
 8004e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6999      	ldr	r1, [r3, #24]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	619a      	str	r2, [r3, #24]
      break;
 8004e72:	e0a5      	b.n	8004fc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 f9ca 	bl	8005214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6999      	ldr	r1, [r3, #24]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	021a      	lsls	r2, r3, #8
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	619a      	str	r2, [r3, #24]
      break;
 8004eb4:	e084      	b.n	8004fc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68b9      	ldr	r1, [r7, #8]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 fa33 	bl	8005328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69da      	ldr	r2, [r3, #28]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0208 	orr.w	r2, r2, #8
 8004ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0204 	bic.w	r2, r2, #4
 8004ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69d9      	ldr	r1, [r3, #28]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	61da      	str	r2, [r3, #28]
      break;
 8004ef4:	e064      	b.n	8004fc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fa9b 	bl	8005438 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69d9      	ldr	r1, [r3, #28]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	021a      	lsls	r2, r3, #8
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	61da      	str	r2, [r3, #28]
      break;
 8004f36:	e043      	b.n	8004fc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fae4 	bl	800550c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0208 	orr.w	r2, r2, #8
 8004f52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0204 	bic.w	r2, r2, #4
 8004f62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f76:	e023      	b.n	8004fc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68b9      	ldr	r1, [r7, #8]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fb28 	bl	80055d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	021a      	lsls	r2, r3, #8
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fb8:	e002      	b.n	8004fc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8004fbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop

08004fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a3c      	ldr	r2, [pc, #240]	; (80050d8 <TIM_Base_SetConfig+0x104>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00f      	beq.n	800500c <TIM_Base_SetConfig+0x38>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff2:	d00b      	beq.n	800500c <TIM_Base_SetConfig+0x38>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a39      	ldr	r2, [pc, #228]	; (80050dc <TIM_Base_SetConfig+0x108>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d007      	beq.n	800500c <TIM_Base_SetConfig+0x38>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a38      	ldr	r2, [pc, #224]	; (80050e0 <TIM_Base_SetConfig+0x10c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d003      	beq.n	800500c <TIM_Base_SetConfig+0x38>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a37      	ldr	r2, [pc, #220]	; (80050e4 <TIM_Base_SetConfig+0x110>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d108      	bne.n	800501e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2d      	ldr	r2, [pc, #180]	; (80050d8 <TIM_Base_SetConfig+0x104>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d01b      	beq.n	800505e <TIM_Base_SetConfig+0x8a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502c:	d017      	beq.n	800505e <TIM_Base_SetConfig+0x8a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2a      	ldr	r2, [pc, #168]	; (80050dc <TIM_Base_SetConfig+0x108>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d013      	beq.n	800505e <TIM_Base_SetConfig+0x8a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a29      	ldr	r2, [pc, #164]	; (80050e0 <TIM_Base_SetConfig+0x10c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00f      	beq.n	800505e <TIM_Base_SetConfig+0x8a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a28      	ldr	r2, [pc, #160]	; (80050e4 <TIM_Base_SetConfig+0x110>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00b      	beq.n	800505e <TIM_Base_SetConfig+0x8a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a27      	ldr	r2, [pc, #156]	; (80050e8 <TIM_Base_SetConfig+0x114>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d007      	beq.n	800505e <TIM_Base_SetConfig+0x8a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a26      	ldr	r2, [pc, #152]	; (80050ec <TIM_Base_SetConfig+0x118>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d003      	beq.n	800505e <TIM_Base_SetConfig+0x8a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a25      	ldr	r2, [pc, #148]	; (80050f0 <TIM_Base_SetConfig+0x11c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d108      	bne.n	8005070 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a10      	ldr	r2, [pc, #64]	; (80050d8 <TIM_Base_SetConfig+0x104>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00f      	beq.n	80050bc <TIM_Base_SetConfig+0xe8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a11      	ldr	r2, [pc, #68]	; (80050e4 <TIM_Base_SetConfig+0x110>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00b      	beq.n	80050bc <TIM_Base_SetConfig+0xe8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a10      	ldr	r2, [pc, #64]	; (80050e8 <TIM_Base_SetConfig+0x114>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d007      	beq.n	80050bc <TIM_Base_SetConfig+0xe8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a0f      	ldr	r2, [pc, #60]	; (80050ec <TIM_Base_SetConfig+0x118>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_Base_SetConfig+0xe8>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a0e      	ldr	r2, [pc, #56]	; (80050f0 <TIM_Base_SetConfig+0x11c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d103      	bne.n	80050c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	615a      	str	r2, [r3, #20]
}
 80050ca:	bf00      	nop
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40012c00 	.word	0x40012c00
 80050dc:	40000400 	.word	0x40000400
 80050e0:	40000800 	.word	0x40000800
 80050e4:	40013400 	.word	0x40013400
 80050e8:	40014000 	.word	0x40014000
 80050ec:	40014400 	.word	0x40014400
 80050f0:	40014800 	.word	0x40014800

080050f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	f023 0201 	bic.w	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0303 	bic.w	r3, r3, #3
 800512e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f023 0302 	bic.w	r3, r3, #2
 8005140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a2c      	ldr	r2, [pc, #176]	; (8005200 <TIM_OC1_SetConfig+0x10c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00f      	beq.n	8005174 <TIM_OC1_SetConfig+0x80>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a2b      	ldr	r2, [pc, #172]	; (8005204 <TIM_OC1_SetConfig+0x110>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00b      	beq.n	8005174 <TIM_OC1_SetConfig+0x80>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a2a      	ldr	r2, [pc, #168]	; (8005208 <TIM_OC1_SetConfig+0x114>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d007      	beq.n	8005174 <TIM_OC1_SetConfig+0x80>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a29      	ldr	r2, [pc, #164]	; (800520c <TIM_OC1_SetConfig+0x118>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d003      	beq.n	8005174 <TIM_OC1_SetConfig+0x80>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a28      	ldr	r2, [pc, #160]	; (8005210 <TIM_OC1_SetConfig+0x11c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d10c      	bne.n	800518e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f023 0308 	bic.w	r3, r3, #8
 800517a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f023 0304 	bic.w	r3, r3, #4
 800518c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1b      	ldr	r2, [pc, #108]	; (8005200 <TIM_OC1_SetConfig+0x10c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00f      	beq.n	80051b6 <TIM_OC1_SetConfig+0xc2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a1a      	ldr	r2, [pc, #104]	; (8005204 <TIM_OC1_SetConfig+0x110>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00b      	beq.n	80051b6 <TIM_OC1_SetConfig+0xc2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a19      	ldr	r2, [pc, #100]	; (8005208 <TIM_OC1_SetConfig+0x114>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d007      	beq.n	80051b6 <TIM_OC1_SetConfig+0xc2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a18      	ldr	r2, [pc, #96]	; (800520c <TIM_OC1_SetConfig+0x118>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_OC1_SetConfig+0xc2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a17      	ldr	r2, [pc, #92]	; (8005210 <TIM_OC1_SetConfig+0x11c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d111      	bne.n	80051da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	621a      	str	r2, [r3, #32]
}
 80051f4:	bf00      	nop
 80051f6:	371c      	adds	r7, #28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	40012c00 	.word	0x40012c00
 8005204:	40013400 	.word	0x40013400
 8005208:	40014000 	.word	0x40014000
 800520c:	40014400 	.word	0x40014400
 8005210:	40014800 	.word	0x40014800

08005214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f023 0210 	bic.w	r2, r3, #16
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 0320 	bic.w	r3, r3, #32
 8005262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a28      	ldr	r2, [pc, #160]	; (8005314 <TIM_OC2_SetConfig+0x100>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <TIM_OC2_SetConfig+0x6c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a27      	ldr	r2, [pc, #156]	; (8005318 <TIM_OC2_SetConfig+0x104>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d10d      	bne.n	800529c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800529a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a1d      	ldr	r2, [pc, #116]	; (8005314 <TIM_OC2_SetConfig+0x100>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00f      	beq.n	80052c4 <TIM_OC2_SetConfig+0xb0>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a1c      	ldr	r2, [pc, #112]	; (8005318 <TIM_OC2_SetConfig+0x104>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00b      	beq.n	80052c4 <TIM_OC2_SetConfig+0xb0>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a1b      	ldr	r2, [pc, #108]	; (800531c <TIM_OC2_SetConfig+0x108>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d007      	beq.n	80052c4 <TIM_OC2_SetConfig+0xb0>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a1a      	ldr	r2, [pc, #104]	; (8005320 <TIM_OC2_SetConfig+0x10c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d003      	beq.n	80052c4 <TIM_OC2_SetConfig+0xb0>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a19      	ldr	r2, [pc, #100]	; (8005324 <TIM_OC2_SetConfig+0x110>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d113      	bne.n	80052ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052d2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40012c00 	.word	0x40012c00
 8005318:	40013400 	.word	0x40013400
 800531c:	40014000 	.word	0x40014000
 8005320:	40014400 	.word	0x40014400
 8005324:	40014800 	.word	0x40014800

08005328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0303 	bic.w	r3, r3, #3
 8005362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a27      	ldr	r2, [pc, #156]	; (8005424 <TIM_OC3_SetConfig+0xfc>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d003      	beq.n	8005392 <TIM_OC3_SetConfig+0x6a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a26      	ldr	r2, [pc, #152]	; (8005428 <TIM_OC3_SetConfig+0x100>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d10d      	bne.n	80053ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ac:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a1c      	ldr	r2, [pc, #112]	; (8005424 <TIM_OC3_SetConfig+0xfc>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00f      	beq.n	80053d6 <TIM_OC3_SetConfig+0xae>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a1b      	ldr	r2, [pc, #108]	; (8005428 <TIM_OC3_SetConfig+0x100>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00b      	beq.n	80053d6 <TIM_OC3_SetConfig+0xae>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1a      	ldr	r2, [pc, #104]	; (800542c <TIM_OC3_SetConfig+0x104>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d007      	beq.n	80053d6 <TIM_OC3_SetConfig+0xae>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a19      	ldr	r2, [pc, #100]	; (8005430 <TIM_OC3_SetConfig+0x108>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d003      	beq.n	80053d6 <TIM_OC3_SetConfig+0xae>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a18      	ldr	r2, [pc, #96]	; (8005434 <TIM_OC3_SetConfig+0x10c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d113      	bne.n	80053fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	621a      	str	r2, [r3, #32]
}
 8005418:	bf00      	nop
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40012c00 	.word	0x40012c00
 8005428:	40013400 	.word	0x40013400
 800542c:	40014000 	.word	0x40014000
 8005430:	40014400 	.word	0x40014400
 8005434:	40014800 	.word	0x40014800

08005438 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	031b      	lsls	r3, r3, #12
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a18      	ldr	r2, [pc, #96]	; (80054f8 <TIM_OC4_SetConfig+0xc0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00f      	beq.n	80054bc <TIM_OC4_SetConfig+0x84>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a17      	ldr	r2, [pc, #92]	; (80054fc <TIM_OC4_SetConfig+0xc4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00b      	beq.n	80054bc <TIM_OC4_SetConfig+0x84>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a16      	ldr	r2, [pc, #88]	; (8005500 <TIM_OC4_SetConfig+0xc8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d007      	beq.n	80054bc <TIM_OC4_SetConfig+0x84>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a15      	ldr	r2, [pc, #84]	; (8005504 <TIM_OC4_SetConfig+0xcc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d003      	beq.n	80054bc <TIM_OC4_SetConfig+0x84>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a14      	ldr	r2, [pc, #80]	; (8005508 <TIM_OC4_SetConfig+0xd0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d109      	bne.n	80054d0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	019b      	lsls	r3, r3, #6
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	621a      	str	r2, [r3, #32]
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40012c00 	.word	0x40012c00
 80054fc:	40013400 	.word	0x40013400
 8005500:	40014000 	.word	0x40014000
 8005504:	40014400 	.word	0x40014400
 8005508:	40014800 	.word	0x40014800

0800550c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800553a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005550:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	041b      	lsls	r3, r3, #16
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a17      	ldr	r2, [pc, #92]	; (80055c0 <TIM_OC5_SetConfig+0xb4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00f      	beq.n	8005586 <TIM_OC5_SetConfig+0x7a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a16      	ldr	r2, [pc, #88]	; (80055c4 <TIM_OC5_SetConfig+0xb8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <TIM_OC5_SetConfig+0x7a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <TIM_OC5_SetConfig+0xbc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d007      	beq.n	8005586 <TIM_OC5_SetConfig+0x7a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a14      	ldr	r2, [pc, #80]	; (80055cc <TIM_OC5_SetConfig+0xc0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_OC5_SetConfig+0x7a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a13      	ldr	r2, [pc, #76]	; (80055d0 <TIM_OC5_SetConfig+0xc4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d109      	bne.n	800559a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	021b      	lsls	r3, r3, #8
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	621a      	str	r2, [r3, #32]
}
 80055b4:	bf00      	nop
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	40012c00 	.word	0x40012c00
 80055c4:	40013400 	.word	0x40013400
 80055c8:	40014000 	.word	0x40014000
 80055cc:	40014400 	.word	0x40014400
 80055d0:	40014800 	.word	0x40014800

080055d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	021b      	lsls	r3, r3, #8
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800561a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	051b      	lsls	r3, r3, #20
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a18      	ldr	r2, [pc, #96]	; (800568c <TIM_OC6_SetConfig+0xb8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00f      	beq.n	8005650 <TIM_OC6_SetConfig+0x7c>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a17      	ldr	r2, [pc, #92]	; (8005690 <TIM_OC6_SetConfig+0xbc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00b      	beq.n	8005650 <TIM_OC6_SetConfig+0x7c>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a16      	ldr	r2, [pc, #88]	; (8005694 <TIM_OC6_SetConfig+0xc0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d007      	beq.n	8005650 <TIM_OC6_SetConfig+0x7c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a15      	ldr	r2, [pc, #84]	; (8005698 <TIM_OC6_SetConfig+0xc4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d003      	beq.n	8005650 <TIM_OC6_SetConfig+0x7c>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a14      	ldr	r2, [pc, #80]	; (800569c <TIM_OC6_SetConfig+0xc8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d109      	bne.n	8005664 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005656:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	029b      	lsls	r3, r3, #10
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	621a      	str	r2, [r3, #32]
}
 800567e:	bf00      	nop
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40012c00 	.word	0x40012c00
 8005690:	40013400 	.word	0x40013400
 8005694:	40014000 	.word	0x40014000
 8005698:	40014400 	.word	0x40014400
 800569c:	40014800 	.word	0x40014800

080056a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e063      	b.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a2b      	ldr	r2, [pc, #172]	; (800578c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d004      	beq.n	80056ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a2a      	ldr	r2, [pc, #168]	; (8005790 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d108      	bne.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005704:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a1b      	ldr	r2, [pc, #108]	; (800578c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d018      	beq.n	8005754 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572a:	d013      	beq.n	8005754 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a18      	ldr	r2, [pc, #96]	; (8005794 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00e      	beq.n	8005754 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a17      	ldr	r2, [pc, #92]	; (8005798 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d009      	beq.n	8005754 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a12      	ldr	r2, [pc, #72]	; (8005790 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d004      	beq.n	8005754 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a13      	ldr	r2, [pc, #76]	; (800579c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d10c      	bne.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800575a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	4313      	orrs	r3, r2
 8005764:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40013400 	.word	0x40013400
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800
 800579c:	40014000 	.word	0x40014000

080057a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057a8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80057ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	43db      	mvns	r3, r3
 80057bc:	b29b      	uxth	r3, r3
 80057be:	4013      	ands	r3, r2
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057d6:	b084      	sub	sp, #16
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	f107 0014 	add.w	r0, r7, #20
 80057e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	b004      	add	sp, #16
 8005816:	4770      	bx	lr

08005818 <atoi>:
 8005818:	220a      	movs	r2, #10
 800581a:	2100      	movs	r1, #0
 800581c:	f000 b9f6 	b.w	8005c0c <strtol>

08005820 <__errno>:
 8005820:	4b01      	ldr	r3, [pc, #4]	; (8005828 <__errno+0x8>)
 8005822:	6818      	ldr	r0, [r3, #0]
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	2000004c 	.word	0x2000004c

0800582c <__libc_init_array>:
 800582c:	b570      	push	{r4, r5, r6, lr}
 800582e:	4d0d      	ldr	r5, [pc, #52]	; (8005864 <__libc_init_array+0x38>)
 8005830:	4c0d      	ldr	r4, [pc, #52]	; (8005868 <__libc_init_array+0x3c>)
 8005832:	1b64      	subs	r4, r4, r5
 8005834:	10a4      	asrs	r4, r4, #2
 8005836:	2600      	movs	r6, #0
 8005838:	42a6      	cmp	r6, r4
 800583a:	d109      	bne.n	8005850 <__libc_init_array+0x24>
 800583c:	4d0b      	ldr	r5, [pc, #44]	; (800586c <__libc_init_array+0x40>)
 800583e:	4c0c      	ldr	r4, [pc, #48]	; (8005870 <__libc_init_array+0x44>)
 8005840:	f001 f9ee 	bl	8006c20 <_init>
 8005844:	1b64      	subs	r4, r4, r5
 8005846:	10a4      	asrs	r4, r4, #2
 8005848:	2600      	movs	r6, #0
 800584a:	42a6      	cmp	r6, r4
 800584c:	d105      	bne.n	800585a <__libc_init_array+0x2e>
 800584e:	bd70      	pop	{r4, r5, r6, pc}
 8005850:	f855 3b04 	ldr.w	r3, [r5], #4
 8005854:	4798      	blx	r3
 8005856:	3601      	adds	r6, #1
 8005858:	e7ee      	b.n	8005838 <__libc_init_array+0xc>
 800585a:	f855 3b04 	ldr.w	r3, [r5], #4
 800585e:	4798      	blx	r3
 8005860:	3601      	adds	r6, #1
 8005862:	e7f2      	b.n	800584a <__libc_init_array+0x1e>
 8005864:	08006df8 	.word	0x08006df8
 8005868:	08006df8 	.word	0x08006df8
 800586c:	08006df8 	.word	0x08006df8
 8005870:	08006dfc 	.word	0x08006dfc

08005874 <malloc>:
 8005874:	4b02      	ldr	r3, [pc, #8]	; (8005880 <malloc+0xc>)
 8005876:	4601      	mov	r1, r0
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	f000 b885 	b.w	8005988 <_malloc_r>
 800587e:	bf00      	nop
 8005880:	2000004c 	.word	0x2000004c

08005884 <memcpy>:
 8005884:	440a      	add	r2, r1
 8005886:	4291      	cmp	r1, r2
 8005888:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800588c:	d100      	bne.n	8005890 <memcpy+0xc>
 800588e:	4770      	bx	lr
 8005890:	b510      	push	{r4, lr}
 8005892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005896:	f803 4f01 	strb.w	r4, [r3, #1]!
 800589a:	4291      	cmp	r1, r2
 800589c:	d1f9      	bne.n	8005892 <memcpy+0xe>
 800589e:	bd10      	pop	{r4, pc}

080058a0 <memset>:
 80058a0:	4402      	add	r2, r0
 80058a2:	4603      	mov	r3, r0
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d100      	bne.n	80058aa <memset+0xa>
 80058a8:	4770      	bx	lr
 80058aa:	f803 1b01 	strb.w	r1, [r3], #1
 80058ae:	e7f9      	b.n	80058a4 <memset+0x4>

080058b0 <_free_r>:
 80058b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058b2:	2900      	cmp	r1, #0
 80058b4:	d044      	beq.n	8005940 <_free_r+0x90>
 80058b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058ba:	9001      	str	r0, [sp, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f1a1 0404 	sub.w	r4, r1, #4
 80058c2:	bfb8      	it	lt
 80058c4:	18e4      	addlt	r4, r4, r3
 80058c6:	f000 f9ab 	bl	8005c20 <__malloc_lock>
 80058ca:	4a1e      	ldr	r2, [pc, #120]	; (8005944 <_free_r+0x94>)
 80058cc:	9801      	ldr	r0, [sp, #4]
 80058ce:	6813      	ldr	r3, [r2, #0]
 80058d0:	b933      	cbnz	r3, 80058e0 <_free_r+0x30>
 80058d2:	6063      	str	r3, [r4, #4]
 80058d4:	6014      	str	r4, [r2, #0]
 80058d6:	b003      	add	sp, #12
 80058d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058dc:	f000 b9a6 	b.w	8005c2c <__malloc_unlock>
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d908      	bls.n	80058f6 <_free_r+0x46>
 80058e4:	6825      	ldr	r5, [r4, #0]
 80058e6:	1961      	adds	r1, r4, r5
 80058e8:	428b      	cmp	r3, r1
 80058ea:	bf01      	itttt	eq
 80058ec:	6819      	ldreq	r1, [r3, #0]
 80058ee:	685b      	ldreq	r3, [r3, #4]
 80058f0:	1949      	addeq	r1, r1, r5
 80058f2:	6021      	streq	r1, [r4, #0]
 80058f4:	e7ed      	b.n	80058d2 <_free_r+0x22>
 80058f6:	461a      	mov	r2, r3
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	b10b      	cbz	r3, 8005900 <_free_r+0x50>
 80058fc:	42a3      	cmp	r3, r4
 80058fe:	d9fa      	bls.n	80058f6 <_free_r+0x46>
 8005900:	6811      	ldr	r1, [r2, #0]
 8005902:	1855      	adds	r5, r2, r1
 8005904:	42a5      	cmp	r5, r4
 8005906:	d10b      	bne.n	8005920 <_free_r+0x70>
 8005908:	6824      	ldr	r4, [r4, #0]
 800590a:	4421      	add	r1, r4
 800590c:	1854      	adds	r4, r2, r1
 800590e:	42a3      	cmp	r3, r4
 8005910:	6011      	str	r1, [r2, #0]
 8005912:	d1e0      	bne.n	80058d6 <_free_r+0x26>
 8005914:	681c      	ldr	r4, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	6053      	str	r3, [r2, #4]
 800591a:	4421      	add	r1, r4
 800591c:	6011      	str	r1, [r2, #0]
 800591e:	e7da      	b.n	80058d6 <_free_r+0x26>
 8005920:	d902      	bls.n	8005928 <_free_r+0x78>
 8005922:	230c      	movs	r3, #12
 8005924:	6003      	str	r3, [r0, #0]
 8005926:	e7d6      	b.n	80058d6 <_free_r+0x26>
 8005928:	6825      	ldr	r5, [r4, #0]
 800592a:	1961      	adds	r1, r4, r5
 800592c:	428b      	cmp	r3, r1
 800592e:	bf04      	itt	eq
 8005930:	6819      	ldreq	r1, [r3, #0]
 8005932:	685b      	ldreq	r3, [r3, #4]
 8005934:	6063      	str	r3, [r4, #4]
 8005936:	bf04      	itt	eq
 8005938:	1949      	addeq	r1, r1, r5
 800593a:	6021      	streq	r1, [r4, #0]
 800593c:	6054      	str	r4, [r2, #4]
 800593e:	e7ca      	b.n	80058d6 <_free_r+0x26>
 8005940:	b003      	add	sp, #12
 8005942:	bd30      	pop	{r4, r5, pc}
 8005944:	20000558 	.word	0x20000558

08005948 <sbrk_aligned>:
 8005948:	b570      	push	{r4, r5, r6, lr}
 800594a:	4e0e      	ldr	r6, [pc, #56]	; (8005984 <sbrk_aligned+0x3c>)
 800594c:	460c      	mov	r4, r1
 800594e:	6831      	ldr	r1, [r6, #0]
 8005950:	4605      	mov	r5, r0
 8005952:	b911      	cbnz	r1, 800595a <sbrk_aligned+0x12>
 8005954:	f000 f88c 	bl	8005a70 <_sbrk_r>
 8005958:	6030      	str	r0, [r6, #0]
 800595a:	4621      	mov	r1, r4
 800595c:	4628      	mov	r0, r5
 800595e:	f000 f887 	bl	8005a70 <_sbrk_r>
 8005962:	1c43      	adds	r3, r0, #1
 8005964:	d00a      	beq.n	800597c <sbrk_aligned+0x34>
 8005966:	1cc4      	adds	r4, r0, #3
 8005968:	f024 0403 	bic.w	r4, r4, #3
 800596c:	42a0      	cmp	r0, r4
 800596e:	d007      	beq.n	8005980 <sbrk_aligned+0x38>
 8005970:	1a21      	subs	r1, r4, r0
 8005972:	4628      	mov	r0, r5
 8005974:	f000 f87c 	bl	8005a70 <_sbrk_r>
 8005978:	3001      	adds	r0, #1
 800597a:	d101      	bne.n	8005980 <sbrk_aligned+0x38>
 800597c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005980:	4620      	mov	r0, r4
 8005982:	bd70      	pop	{r4, r5, r6, pc}
 8005984:	2000055c 	.word	0x2000055c

08005988 <_malloc_r>:
 8005988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800598c:	1ccd      	adds	r5, r1, #3
 800598e:	f025 0503 	bic.w	r5, r5, #3
 8005992:	3508      	adds	r5, #8
 8005994:	2d0c      	cmp	r5, #12
 8005996:	bf38      	it	cc
 8005998:	250c      	movcc	r5, #12
 800599a:	2d00      	cmp	r5, #0
 800599c:	4607      	mov	r7, r0
 800599e:	db01      	blt.n	80059a4 <_malloc_r+0x1c>
 80059a0:	42a9      	cmp	r1, r5
 80059a2:	d905      	bls.n	80059b0 <_malloc_r+0x28>
 80059a4:	230c      	movs	r3, #12
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	2600      	movs	r6, #0
 80059aa:	4630      	mov	r0, r6
 80059ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059b0:	4e2e      	ldr	r6, [pc, #184]	; (8005a6c <_malloc_r+0xe4>)
 80059b2:	f000 f935 	bl	8005c20 <__malloc_lock>
 80059b6:	6833      	ldr	r3, [r6, #0]
 80059b8:	461c      	mov	r4, r3
 80059ba:	bb34      	cbnz	r4, 8005a0a <_malloc_r+0x82>
 80059bc:	4629      	mov	r1, r5
 80059be:	4638      	mov	r0, r7
 80059c0:	f7ff ffc2 	bl	8005948 <sbrk_aligned>
 80059c4:	1c43      	adds	r3, r0, #1
 80059c6:	4604      	mov	r4, r0
 80059c8:	d14d      	bne.n	8005a66 <_malloc_r+0xde>
 80059ca:	6834      	ldr	r4, [r6, #0]
 80059cc:	4626      	mov	r6, r4
 80059ce:	2e00      	cmp	r6, #0
 80059d0:	d140      	bne.n	8005a54 <_malloc_r+0xcc>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	4631      	mov	r1, r6
 80059d6:	4638      	mov	r0, r7
 80059d8:	eb04 0803 	add.w	r8, r4, r3
 80059dc:	f000 f848 	bl	8005a70 <_sbrk_r>
 80059e0:	4580      	cmp	r8, r0
 80059e2:	d13a      	bne.n	8005a5a <_malloc_r+0xd2>
 80059e4:	6821      	ldr	r1, [r4, #0]
 80059e6:	3503      	adds	r5, #3
 80059e8:	1a6d      	subs	r5, r5, r1
 80059ea:	f025 0503 	bic.w	r5, r5, #3
 80059ee:	3508      	adds	r5, #8
 80059f0:	2d0c      	cmp	r5, #12
 80059f2:	bf38      	it	cc
 80059f4:	250c      	movcc	r5, #12
 80059f6:	4629      	mov	r1, r5
 80059f8:	4638      	mov	r0, r7
 80059fa:	f7ff ffa5 	bl	8005948 <sbrk_aligned>
 80059fe:	3001      	adds	r0, #1
 8005a00:	d02b      	beq.n	8005a5a <_malloc_r+0xd2>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	442b      	add	r3, r5
 8005a06:	6023      	str	r3, [r4, #0]
 8005a08:	e00e      	b.n	8005a28 <_malloc_r+0xa0>
 8005a0a:	6822      	ldr	r2, [r4, #0]
 8005a0c:	1b52      	subs	r2, r2, r5
 8005a0e:	d41e      	bmi.n	8005a4e <_malloc_r+0xc6>
 8005a10:	2a0b      	cmp	r2, #11
 8005a12:	d916      	bls.n	8005a42 <_malloc_r+0xba>
 8005a14:	1961      	adds	r1, r4, r5
 8005a16:	42a3      	cmp	r3, r4
 8005a18:	6025      	str	r5, [r4, #0]
 8005a1a:	bf18      	it	ne
 8005a1c:	6059      	strne	r1, [r3, #4]
 8005a1e:	6863      	ldr	r3, [r4, #4]
 8005a20:	bf08      	it	eq
 8005a22:	6031      	streq	r1, [r6, #0]
 8005a24:	5162      	str	r2, [r4, r5]
 8005a26:	604b      	str	r3, [r1, #4]
 8005a28:	4638      	mov	r0, r7
 8005a2a:	f104 060b 	add.w	r6, r4, #11
 8005a2e:	f000 f8fd 	bl	8005c2c <__malloc_unlock>
 8005a32:	f026 0607 	bic.w	r6, r6, #7
 8005a36:	1d23      	adds	r3, r4, #4
 8005a38:	1af2      	subs	r2, r6, r3
 8005a3a:	d0b6      	beq.n	80059aa <_malloc_r+0x22>
 8005a3c:	1b9b      	subs	r3, r3, r6
 8005a3e:	50a3      	str	r3, [r4, r2]
 8005a40:	e7b3      	b.n	80059aa <_malloc_r+0x22>
 8005a42:	6862      	ldr	r2, [r4, #4]
 8005a44:	42a3      	cmp	r3, r4
 8005a46:	bf0c      	ite	eq
 8005a48:	6032      	streq	r2, [r6, #0]
 8005a4a:	605a      	strne	r2, [r3, #4]
 8005a4c:	e7ec      	b.n	8005a28 <_malloc_r+0xa0>
 8005a4e:	4623      	mov	r3, r4
 8005a50:	6864      	ldr	r4, [r4, #4]
 8005a52:	e7b2      	b.n	80059ba <_malloc_r+0x32>
 8005a54:	4634      	mov	r4, r6
 8005a56:	6876      	ldr	r6, [r6, #4]
 8005a58:	e7b9      	b.n	80059ce <_malloc_r+0x46>
 8005a5a:	230c      	movs	r3, #12
 8005a5c:	603b      	str	r3, [r7, #0]
 8005a5e:	4638      	mov	r0, r7
 8005a60:	f000 f8e4 	bl	8005c2c <__malloc_unlock>
 8005a64:	e7a1      	b.n	80059aa <_malloc_r+0x22>
 8005a66:	6025      	str	r5, [r4, #0]
 8005a68:	e7de      	b.n	8005a28 <_malloc_r+0xa0>
 8005a6a:	bf00      	nop
 8005a6c:	20000558 	.word	0x20000558

08005a70 <_sbrk_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4d06      	ldr	r5, [pc, #24]	; (8005a8c <_sbrk_r+0x1c>)
 8005a74:	2300      	movs	r3, #0
 8005a76:	4604      	mov	r4, r0
 8005a78:	4608      	mov	r0, r1
 8005a7a:	602b      	str	r3, [r5, #0]
 8005a7c:	f7fc fa6c 	bl	8001f58 <_sbrk>
 8005a80:	1c43      	adds	r3, r0, #1
 8005a82:	d102      	bne.n	8005a8a <_sbrk_r+0x1a>
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	b103      	cbz	r3, 8005a8a <_sbrk_r+0x1a>
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	bd38      	pop	{r3, r4, r5, pc}
 8005a8c:	20000560 	.word	0x20000560

08005a90 <siprintf>:
 8005a90:	b40e      	push	{r1, r2, r3}
 8005a92:	b500      	push	{lr}
 8005a94:	b09c      	sub	sp, #112	; 0x70
 8005a96:	ab1d      	add	r3, sp, #116	; 0x74
 8005a98:	9002      	str	r0, [sp, #8]
 8005a9a:	9006      	str	r0, [sp, #24]
 8005a9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005aa0:	4809      	ldr	r0, [pc, #36]	; (8005ac8 <siprintf+0x38>)
 8005aa2:	9107      	str	r1, [sp, #28]
 8005aa4:	9104      	str	r1, [sp, #16]
 8005aa6:	4909      	ldr	r1, [pc, #36]	; (8005acc <siprintf+0x3c>)
 8005aa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aac:	9105      	str	r1, [sp, #20]
 8005aae:	6800      	ldr	r0, [r0, #0]
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	a902      	add	r1, sp, #8
 8005ab4:	f000 f91c 	bl	8005cf0 <_svfiprintf_r>
 8005ab8:	9b02      	ldr	r3, [sp, #8]
 8005aba:	2200      	movs	r2, #0
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	b01c      	add	sp, #112	; 0x70
 8005ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ac4:	b003      	add	sp, #12
 8005ac6:	4770      	bx	lr
 8005ac8:	2000004c 	.word	0x2000004c
 8005acc:	ffff0208 	.word	0xffff0208

08005ad0 <strcpy>:
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ad6:	f803 2b01 	strb.w	r2, [r3], #1
 8005ada:	2a00      	cmp	r2, #0
 8005adc:	d1f9      	bne.n	8005ad2 <strcpy+0x2>
 8005ade:	4770      	bx	lr

08005ae0 <strncmp>:
 8005ae0:	b510      	push	{r4, lr}
 8005ae2:	b17a      	cbz	r2, 8005b04 <strncmp+0x24>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	3901      	subs	r1, #1
 8005ae8:	1884      	adds	r4, r0, r2
 8005aea:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005aee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005af2:	4290      	cmp	r0, r2
 8005af4:	d101      	bne.n	8005afa <strncmp+0x1a>
 8005af6:	42a3      	cmp	r3, r4
 8005af8:	d101      	bne.n	8005afe <strncmp+0x1e>
 8005afa:	1a80      	subs	r0, r0, r2
 8005afc:	bd10      	pop	{r4, pc}
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d1f3      	bne.n	8005aea <strncmp+0xa>
 8005b02:	e7fa      	b.n	8005afa <strncmp+0x1a>
 8005b04:	4610      	mov	r0, r2
 8005b06:	e7f9      	b.n	8005afc <strncmp+0x1c>

08005b08 <_strtol_l.constprop.0>:
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b0e:	d001      	beq.n	8005b14 <_strtol_l.constprop.0+0xc>
 8005b10:	2b24      	cmp	r3, #36	; 0x24
 8005b12:	d906      	bls.n	8005b22 <_strtol_l.constprop.0+0x1a>
 8005b14:	f7ff fe84 	bl	8005820 <__errno>
 8005b18:	2316      	movs	r3, #22
 8005b1a:	6003      	str	r3, [r0, #0]
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b22:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005c08 <_strtol_l.constprop.0+0x100>
 8005b26:	460d      	mov	r5, r1
 8005b28:	462e      	mov	r6, r5
 8005b2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b2e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005b32:	f017 0708 	ands.w	r7, r7, #8
 8005b36:	d1f7      	bne.n	8005b28 <_strtol_l.constprop.0+0x20>
 8005b38:	2c2d      	cmp	r4, #45	; 0x2d
 8005b3a:	d132      	bne.n	8005ba2 <_strtol_l.constprop.0+0x9a>
 8005b3c:	782c      	ldrb	r4, [r5, #0]
 8005b3e:	2701      	movs	r7, #1
 8005b40:	1cb5      	adds	r5, r6, #2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d05b      	beq.n	8005bfe <_strtol_l.constprop.0+0xf6>
 8005b46:	2b10      	cmp	r3, #16
 8005b48:	d109      	bne.n	8005b5e <_strtol_l.constprop.0+0x56>
 8005b4a:	2c30      	cmp	r4, #48	; 0x30
 8005b4c:	d107      	bne.n	8005b5e <_strtol_l.constprop.0+0x56>
 8005b4e:	782c      	ldrb	r4, [r5, #0]
 8005b50:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005b54:	2c58      	cmp	r4, #88	; 0x58
 8005b56:	d14d      	bne.n	8005bf4 <_strtol_l.constprop.0+0xec>
 8005b58:	786c      	ldrb	r4, [r5, #1]
 8005b5a:	2310      	movs	r3, #16
 8005b5c:	3502      	adds	r5, #2
 8005b5e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005b62:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005b66:	f04f 0c00 	mov.w	ip, #0
 8005b6a:	fbb8 f9f3 	udiv	r9, r8, r3
 8005b6e:	4666      	mov	r6, ip
 8005b70:	fb03 8a19 	mls	sl, r3, r9, r8
 8005b74:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005b78:	f1be 0f09 	cmp.w	lr, #9
 8005b7c:	d816      	bhi.n	8005bac <_strtol_l.constprop.0+0xa4>
 8005b7e:	4674      	mov	r4, lr
 8005b80:	42a3      	cmp	r3, r4
 8005b82:	dd24      	ble.n	8005bce <_strtol_l.constprop.0+0xc6>
 8005b84:	f1bc 0f00 	cmp.w	ip, #0
 8005b88:	db1e      	blt.n	8005bc8 <_strtol_l.constprop.0+0xc0>
 8005b8a:	45b1      	cmp	r9, r6
 8005b8c:	d31c      	bcc.n	8005bc8 <_strtol_l.constprop.0+0xc0>
 8005b8e:	d101      	bne.n	8005b94 <_strtol_l.constprop.0+0x8c>
 8005b90:	45a2      	cmp	sl, r4
 8005b92:	db19      	blt.n	8005bc8 <_strtol_l.constprop.0+0xc0>
 8005b94:	fb06 4603 	mla	r6, r6, r3, r4
 8005b98:	f04f 0c01 	mov.w	ip, #1
 8005b9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ba0:	e7e8      	b.n	8005b74 <_strtol_l.constprop.0+0x6c>
 8005ba2:	2c2b      	cmp	r4, #43	; 0x2b
 8005ba4:	bf04      	itt	eq
 8005ba6:	782c      	ldrbeq	r4, [r5, #0]
 8005ba8:	1cb5      	addeq	r5, r6, #2
 8005baa:	e7ca      	b.n	8005b42 <_strtol_l.constprop.0+0x3a>
 8005bac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005bb0:	f1be 0f19 	cmp.w	lr, #25
 8005bb4:	d801      	bhi.n	8005bba <_strtol_l.constprop.0+0xb2>
 8005bb6:	3c37      	subs	r4, #55	; 0x37
 8005bb8:	e7e2      	b.n	8005b80 <_strtol_l.constprop.0+0x78>
 8005bba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005bbe:	f1be 0f19 	cmp.w	lr, #25
 8005bc2:	d804      	bhi.n	8005bce <_strtol_l.constprop.0+0xc6>
 8005bc4:	3c57      	subs	r4, #87	; 0x57
 8005bc6:	e7db      	b.n	8005b80 <_strtol_l.constprop.0+0x78>
 8005bc8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005bcc:	e7e6      	b.n	8005b9c <_strtol_l.constprop.0+0x94>
 8005bce:	f1bc 0f00 	cmp.w	ip, #0
 8005bd2:	da05      	bge.n	8005be0 <_strtol_l.constprop.0+0xd8>
 8005bd4:	2322      	movs	r3, #34	; 0x22
 8005bd6:	6003      	str	r3, [r0, #0]
 8005bd8:	4646      	mov	r6, r8
 8005bda:	b942      	cbnz	r2, 8005bee <_strtol_l.constprop.0+0xe6>
 8005bdc:	4630      	mov	r0, r6
 8005bde:	e79e      	b.n	8005b1e <_strtol_l.constprop.0+0x16>
 8005be0:	b107      	cbz	r7, 8005be4 <_strtol_l.constprop.0+0xdc>
 8005be2:	4276      	negs	r6, r6
 8005be4:	2a00      	cmp	r2, #0
 8005be6:	d0f9      	beq.n	8005bdc <_strtol_l.constprop.0+0xd4>
 8005be8:	f1bc 0f00 	cmp.w	ip, #0
 8005bec:	d000      	beq.n	8005bf0 <_strtol_l.constprop.0+0xe8>
 8005bee:	1e69      	subs	r1, r5, #1
 8005bf0:	6011      	str	r1, [r2, #0]
 8005bf2:	e7f3      	b.n	8005bdc <_strtol_l.constprop.0+0xd4>
 8005bf4:	2430      	movs	r4, #48	; 0x30
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1b1      	bne.n	8005b5e <_strtol_l.constprop.0+0x56>
 8005bfa:	2308      	movs	r3, #8
 8005bfc:	e7af      	b.n	8005b5e <_strtol_l.constprop.0+0x56>
 8005bfe:	2c30      	cmp	r4, #48	; 0x30
 8005c00:	d0a5      	beq.n	8005b4e <_strtol_l.constprop.0+0x46>
 8005c02:	230a      	movs	r3, #10
 8005c04:	e7ab      	b.n	8005b5e <_strtol_l.constprop.0+0x56>
 8005c06:	bf00      	nop
 8005c08:	08006c85 	.word	0x08006c85

08005c0c <strtol>:
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	460a      	mov	r2, r1
 8005c10:	4601      	mov	r1, r0
 8005c12:	4802      	ldr	r0, [pc, #8]	; (8005c1c <strtol+0x10>)
 8005c14:	6800      	ldr	r0, [r0, #0]
 8005c16:	f7ff bf77 	b.w	8005b08 <_strtol_l.constprop.0>
 8005c1a:	bf00      	nop
 8005c1c:	2000004c 	.word	0x2000004c

08005c20 <__malloc_lock>:
 8005c20:	4801      	ldr	r0, [pc, #4]	; (8005c28 <__malloc_lock+0x8>)
 8005c22:	f000 baf9 	b.w	8006218 <__retarget_lock_acquire_recursive>
 8005c26:	bf00      	nop
 8005c28:	20000564 	.word	0x20000564

08005c2c <__malloc_unlock>:
 8005c2c:	4801      	ldr	r0, [pc, #4]	; (8005c34 <__malloc_unlock+0x8>)
 8005c2e:	f000 baf4 	b.w	800621a <__retarget_lock_release_recursive>
 8005c32:	bf00      	nop
 8005c34:	20000564 	.word	0x20000564

08005c38 <__ssputs_r>:
 8005c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3c:	688e      	ldr	r6, [r1, #8]
 8005c3e:	429e      	cmp	r6, r3
 8005c40:	4682      	mov	sl, r0
 8005c42:	460c      	mov	r4, r1
 8005c44:	4690      	mov	r8, r2
 8005c46:	461f      	mov	r7, r3
 8005c48:	d838      	bhi.n	8005cbc <__ssputs_r+0x84>
 8005c4a:	898a      	ldrh	r2, [r1, #12]
 8005c4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c50:	d032      	beq.n	8005cb8 <__ssputs_r+0x80>
 8005c52:	6825      	ldr	r5, [r4, #0]
 8005c54:	6909      	ldr	r1, [r1, #16]
 8005c56:	eba5 0901 	sub.w	r9, r5, r1
 8005c5a:	6965      	ldr	r5, [r4, #20]
 8005c5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c64:	3301      	adds	r3, #1
 8005c66:	444b      	add	r3, r9
 8005c68:	106d      	asrs	r5, r5, #1
 8005c6a:	429d      	cmp	r5, r3
 8005c6c:	bf38      	it	cc
 8005c6e:	461d      	movcc	r5, r3
 8005c70:	0553      	lsls	r3, r2, #21
 8005c72:	d531      	bpl.n	8005cd8 <__ssputs_r+0xa0>
 8005c74:	4629      	mov	r1, r5
 8005c76:	f7ff fe87 	bl	8005988 <_malloc_r>
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	b950      	cbnz	r0, 8005c94 <__ssputs_r+0x5c>
 8005c7e:	230c      	movs	r3, #12
 8005c80:	f8ca 3000 	str.w	r3, [sl]
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c8a:	81a3      	strh	r3, [r4, #12]
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c94:	6921      	ldr	r1, [r4, #16]
 8005c96:	464a      	mov	r2, r9
 8005c98:	f7ff fdf4 	bl	8005884 <memcpy>
 8005c9c:	89a3      	ldrh	r3, [r4, #12]
 8005c9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca6:	81a3      	strh	r3, [r4, #12]
 8005ca8:	6126      	str	r6, [r4, #16]
 8005caa:	6165      	str	r5, [r4, #20]
 8005cac:	444e      	add	r6, r9
 8005cae:	eba5 0509 	sub.w	r5, r5, r9
 8005cb2:	6026      	str	r6, [r4, #0]
 8005cb4:	60a5      	str	r5, [r4, #8]
 8005cb6:	463e      	mov	r6, r7
 8005cb8:	42be      	cmp	r6, r7
 8005cba:	d900      	bls.n	8005cbe <__ssputs_r+0x86>
 8005cbc:	463e      	mov	r6, r7
 8005cbe:	6820      	ldr	r0, [r4, #0]
 8005cc0:	4632      	mov	r2, r6
 8005cc2:	4641      	mov	r1, r8
 8005cc4:	f000 faaa 	bl	800621c <memmove>
 8005cc8:	68a3      	ldr	r3, [r4, #8]
 8005cca:	1b9b      	subs	r3, r3, r6
 8005ccc:	60a3      	str	r3, [r4, #8]
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	4433      	add	r3, r6
 8005cd2:	6023      	str	r3, [r4, #0]
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	e7db      	b.n	8005c90 <__ssputs_r+0x58>
 8005cd8:	462a      	mov	r2, r5
 8005cda:	f000 fab9 	bl	8006250 <_realloc_r>
 8005cde:	4606      	mov	r6, r0
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d1e1      	bne.n	8005ca8 <__ssputs_r+0x70>
 8005ce4:	6921      	ldr	r1, [r4, #16]
 8005ce6:	4650      	mov	r0, sl
 8005ce8:	f7ff fde2 	bl	80058b0 <_free_r>
 8005cec:	e7c7      	b.n	8005c7e <__ssputs_r+0x46>
	...

08005cf0 <_svfiprintf_r>:
 8005cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf4:	4698      	mov	r8, r3
 8005cf6:	898b      	ldrh	r3, [r1, #12]
 8005cf8:	061b      	lsls	r3, r3, #24
 8005cfa:	b09d      	sub	sp, #116	; 0x74
 8005cfc:	4607      	mov	r7, r0
 8005cfe:	460d      	mov	r5, r1
 8005d00:	4614      	mov	r4, r2
 8005d02:	d50e      	bpl.n	8005d22 <_svfiprintf_r+0x32>
 8005d04:	690b      	ldr	r3, [r1, #16]
 8005d06:	b963      	cbnz	r3, 8005d22 <_svfiprintf_r+0x32>
 8005d08:	2140      	movs	r1, #64	; 0x40
 8005d0a:	f7ff fe3d 	bl	8005988 <_malloc_r>
 8005d0e:	6028      	str	r0, [r5, #0]
 8005d10:	6128      	str	r0, [r5, #16]
 8005d12:	b920      	cbnz	r0, 8005d1e <_svfiprintf_r+0x2e>
 8005d14:	230c      	movs	r3, #12
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d1c:	e0d1      	b.n	8005ec2 <_svfiprintf_r+0x1d2>
 8005d1e:	2340      	movs	r3, #64	; 0x40
 8005d20:	616b      	str	r3, [r5, #20]
 8005d22:	2300      	movs	r3, #0
 8005d24:	9309      	str	r3, [sp, #36]	; 0x24
 8005d26:	2320      	movs	r3, #32
 8005d28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d30:	2330      	movs	r3, #48	; 0x30
 8005d32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005edc <_svfiprintf_r+0x1ec>
 8005d36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d3a:	f04f 0901 	mov.w	r9, #1
 8005d3e:	4623      	mov	r3, r4
 8005d40:	469a      	mov	sl, r3
 8005d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d46:	b10a      	cbz	r2, 8005d4c <_svfiprintf_r+0x5c>
 8005d48:	2a25      	cmp	r2, #37	; 0x25
 8005d4a:	d1f9      	bne.n	8005d40 <_svfiprintf_r+0x50>
 8005d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8005d50:	d00b      	beq.n	8005d6a <_svfiprintf_r+0x7a>
 8005d52:	465b      	mov	r3, fp
 8005d54:	4622      	mov	r2, r4
 8005d56:	4629      	mov	r1, r5
 8005d58:	4638      	mov	r0, r7
 8005d5a:	f7ff ff6d 	bl	8005c38 <__ssputs_r>
 8005d5e:	3001      	adds	r0, #1
 8005d60:	f000 80aa 	beq.w	8005eb8 <_svfiprintf_r+0x1c8>
 8005d64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d66:	445a      	add	r2, fp
 8005d68:	9209      	str	r2, [sp, #36]	; 0x24
 8005d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 80a2 	beq.w	8005eb8 <_svfiprintf_r+0x1c8>
 8005d74:	2300      	movs	r3, #0
 8005d76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d7e:	f10a 0a01 	add.w	sl, sl, #1
 8005d82:	9304      	str	r3, [sp, #16]
 8005d84:	9307      	str	r3, [sp, #28]
 8005d86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8005d8c:	4654      	mov	r4, sl
 8005d8e:	2205      	movs	r2, #5
 8005d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d94:	4851      	ldr	r0, [pc, #324]	; (8005edc <_svfiprintf_r+0x1ec>)
 8005d96:	f7fa fa1b 	bl	80001d0 <memchr>
 8005d9a:	9a04      	ldr	r2, [sp, #16]
 8005d9c:	b9d8      	cbnz	r0, 8005dd6 <_svfiprintf_r+0xe6>
 8005d9e:	06d0      	lsls	r0, r2, #27
 8005da0:	bf44      	itt	mi
 8005da2:	2320      	movmi	r3, #32
 8005da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005da8:	0711      	lsls	r1, r2, #28
 8005daa:	bf44      	itt	mi
 8005dac:	232b      	movmi	r3, #43	; 0x2b
 8005dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005db2:	f89a 3000 	ldrb.w	r3, [sl]
 8005db6:	2b2a      	cmp	r3, #42	; 0x2a
 8005db8:	d015      	beq.n	8005de6 <_svfiprintf_r+0xf6>
 8005dba:	9a07      	ldr	r2, [sp, #28]
 8005dbc:	4654      	mov	r4, sl
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	f04f 0c0a 	mov.w	ip, #10
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dca:	3b30      	subs	r3, #48	; 0x30
 8005dcc:	2b09      	cmp	r3, #9
 8005dce:	d94e      	bls.n	8005e6e <_svfiprintf_r+0x17e>
 8005dd0:	b1b0      	cbz	r0, 8005e00 <_svfiprintf_r+0x110>
 8005dd2:	9207      	str	r2, [sp, #28]
 8005dd4:	e014      	b.n	8005e00 <_svfiprintf_r+0x110>
 8005dd6:	eba0 0308 	sub.w	r3, r0, r8
 8005dda:	fa09 f303 	lsl.w	r3, r9, r3
 8005dde:	4313      	orrs	r3, r2
 8005de0:	9304      	str	r3, [sp, #16]
 8005de2:	46a2      	mov	sl, r4
 8005de4:	e7d2      	b.n	8005d8c <_svfiprintf_r+0x9c>
 8005de6:	9b03      	ldr	r3, [sp, #12]
 8005de8:	1d19      	adds	r1, r3, #4
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	9103      	str	r1, [sp, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	bfbb      	ittet	lt
 8005df2:	425b      	neglt	r3, r3
 8005df4:	f042 0202 	orrlt.w	r2, r2, #2
 8005df8:	9307      	strge	r3, [sp, #28]
 8005dfa:	9307      	strlt	r3, [sp, #28]
 8005dfc:	bfb8      	it	lt
 8005dfe:	9204      	strlt	r2, [sp, #16]
 8005e00:	7823      	ldrb	r3, [r4, #0]
 8005e02:	2b2e      	cmp	r3, #46	; 0x2e
 8005e04:	d10c      	bne.n	8005e20 <_svfiprintf_r+0x130>
 8005e06:	7863      	ldrb	r3, [r4, #1]
 8005e08:	2b2a      	cmp	r3, #42	; 0x2a
 8005e0a:	d135      	bne.n	8005e78 <_svfiprintf_r+0x188>
 8005e0c:	9b03      	ldr	r3, [sp, #12]
 8005e0e:	1d1a      	adds	r2, r3, #4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	9203      	str	r2, [sp, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	bfb8      	it	lt
 8005e18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e1c:	3402      	adds	r4, #2
 8005e1e:	9305      	str	r3, [sp, #20]
 8005e20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005eec <_svfiprintf_r+0x1fc>
 8005e24:	7821      	ldrb	r1, [r4, #0]
 8005e26:	2203      	movs	r2, #3
 8005e28:	4650      	mov	r0, sl
 8005e2a:	f7fa f9d1 	bl	80001d0 <memchr>
 8005e2e:	b140      	cbz	r0, 8005e42 <_svfiprintf_r+0x152>
 8005e30:	2340      	movs	r3, #64	; 0x40
 8005e32:	eba0 000a 	sub.w	r0, r0, sl
 8005e36:	fa03 f000 	lsl.w	r0, r3, r0
 8005e3a:	9b04      	ldr	r3, [sp, #16]
 8005e3c:	4303      	orrs	r3, r0
 8005e3e:	3401      	adds	r4, #1
 8005e40:	9304      	str	r3, [sp, #16]
 8005e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e46:	4826      	ldr	r0, [pc, #152]	; (8005ee0 <_svfiprintf_r+0x1f0>)
 8005e48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e4c:	2206      	movs	r2, #6
 8005e4e:	f7fa f9bf 	bl	80001d0 <memchr>
 8005e52:	2800      	cmp	r0, #0
 8005e54:	d038      	beq.n	8005ec8 <_svfiprintf_r+0x1d8>
 8005e56:	4b23      	ldr	r3, [pc, #140]	; (8005ee4 <_svfiprintf_r+0x1f4>)
 8005e58:	bb1b      	cbnz	r3, 8005ea2 <_svfiprintf_r+0x1b2>
 8005e5a:	9b03      	ldr	r3, [sp, #12]
 8005e5c:	3307      	adds	r3, #7
 8005e5e:	f023 0307 	bic.w	r3, r3, #7
 8005e62:	3308      	adds	r3, #8
 8005e64:	9303      	str	r3, [sp, #12]
 8005e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e68:	4433      	add	r3, r6
 8005e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e6c:	e767      	b.n	8005d3e <_svfiprintf_r+0x4e>
 8005e6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e72:	460c      	mov	r4, r1
 8005e74:	2001      	movs	r0, #1
 8005e76:	e7a5      	b.n	8005dc4 <_svfiprintf_r+0xd4>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	3401      	adds	r4, #1
 8005e7c:	9305      	str	r3, [sp, #20]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	f04f 0c0a 	mov.w	ip, #10
 8005e84:	4620      	mov	r0, r4
 8005e86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e8a:	3a30      	subs	r2, #48	; 0x30
 8005e8c:	2a09      	cmp	r2, #9
 8005e8e:	d903      	bls.n	8005e98 <_svfiprintf_r+0x1a8>
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0c5      	beq.n	8005e20 <_svfiprintf_r+0x130>
 8005e94:	9105      	str	r1, [sp, #20]
 8005e96:	e7c3      	b.n	8005e20 <_svfiprintf_r+0x130>
 8005e98:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e7f0      	b.n	8005e84 <_svfiprintf_r+0x194>
 8005ea2:	ab03      	add	r3, sp, #12
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	462a      	mov	r2, r5
 8005ea8:	4b0f      	ldr	r3, [pc, #60]	; (8005ee8 <_svfiprintf_r+0x1f8>)
 8005eaa:	a904      	add	r1, sp, #16
 8005eac:	4638      	mov	r0, r7
 8005eae:	f3af 8000 	nop.w
 8005eb2:	1c42      	adds	r2, r0, #1
 8005eb4:	4606      	mov	r6, r0
 8005eb6:	d1d6      	bne.n	8005e66 <_svfiprintf_r+0x176>
 8005eb8:	89ab      	ldrh	r3, [r5, #12]
 8005eba:	065b      	lsls	r3, r3, #25
 8005ebc:	f53f af2c 	bmi.w	8005d18 <_svfiprintf_r+0x28>
 8005ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ec2:	b01d      	add	sp, #116	; 0x74
 8005ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec8:	ab03      	add	r3, sp, #12
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	462a      	mov	r2, r5
 8005ece:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <_svfiprintf_r+0x1f8>)
 8005ed0:	a904      	add	r1, sp, #16
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	f000 f87a 	bl	8005fcc <_printf_i>
 8005ed8:	e7eb      	b.n	8005eb2 <_svfiprintf_r+0x1c2>
 8005eda:	bf00      	nop
 8005edc:	08006d85 	.word	0x08006d85
 8005ee0:	08006d8f 	.word	0x08006d8f
 8005ee4:	00000000 	.word	0x00000000
 8005ee8:	08005c39 	.word	0x08005c39
 8005eec:	08006d8b 	.word	0x08006d8b

08005ef0 <_printf_common>:
 8005ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef4:	4616      	mov	r6, r2
 8005ef6:	4699      	mov	r9, r3
 8005ef8:	688a      	ldr	r2, [r1, #8]
 8005efa:	690b      	ldr	r3, [r1, #16]
 8005efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f00:	4293      	cmp	r3, r2
 8005f02:	bfb8      	it	lt
 8005f04:	4613      	movlt	r3, r2
 8005f06:	6033      	str	r3, [r6, #0]
 8005f08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f0c:	4607      	mov	r7, r0
 8005f0e:	460c      	mov	r4, r1
 8005f10:	b10a      	cbz	r2, 8005f16 <_printf_common+0x26>
 8005f12:	3301      	adds	r3, #1
 8005f14:	6033      	str	r3, [r6, #0]
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	0699      	lsls	r1, r3, #26
 8005f1a:	bf42      	ittt	mi
 8005f1c:	6833      	ldrmi	r3, [r6, #0]
 8005f1e:	3302      	addmi	r3, #2
 8005f20:	6033      	strmi	r3, [r6, #0]
 8005f22:	6825      	ldr	r5, [r4, #0]
 8005f24:	f015 0506 	ands.w	r5, r5, #6
 8005f28:	d106      	bne.n	8005f38 <_printf_common+0x48>
 8005f2a:	f104 0a19 	add.w	sl, r4, #25
 8005f2e:	68e3      	ldr	r3, [r4, #12]
 8005f30:	6832      	ldr	r2, [r6, #0]
 8005f32:	1a9b      	subs	r3, r3, r2
 8005f34:	42ab      	cmp	r3, r5
 8005f36:	dc26      	bgt.n	8005f86 <_printf_common+0x96>
 8005f38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f3c:	1e13      	subs	r3, r2, #0
 8005f3e:	6822      	ldr	r2, [r4, #0]
 8005f40:	bf18      	it	ne
 8005f42:	2301      	movne	r3, #1
 8005f44:	0692      	lsls	r2, r2, #26
 8005f46:	d42b      	bmi.n	8005fa0 <_printf_common+0xb0>
 8005f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f4c:	4649      	mov	r1, r9
 8005f4e:	4638      	mov	r0, r7
 8005f50:	47c0      	blx	r8
 8005f52:	3001      	adds	r0, #1
 8005f54:	d01e      	beq.n	8005f94 <_printf_common+0xa4>
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	68e5      	ldr	r5, [r4, #12]
 8005f5a:	6832      	ldr	r2, [r6, #0]
 8005f5c:	f003 0306 	and.w	r3, r3, #6
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	bf08      	it	eq
 8005f64:	1aad      	subeq	r5, r5, r2
 8005f66:	68a3      	ldr	r3, [r4, #8]
 8005f68:	6922      	ldr	r2, [r4, #16]
 8005f6a:	bf0c      	ite	eq
 8005f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f70:	2500      	movne	r5, #0
 8005f72:	4293      	cmp	r3, r2
 8005f74:	bfc4      	itt	gt
 8005f76:	1a9b      	subgt	r3, r3, r2
 8005f78:	18ed      	addgt	r5, r5, r3
 8005f7a:	2600      	movs	r6, #0
 8005f7c:	341a      	adds	r4, #26
 8005f7e:	42b5      	cmp	r5, r6
 8005f80:	d11a      	bne.n	8005fb8 <_printf_common+0xc8>
 8005f82:	2000      	movs	r0, #0
 8005f84:	e008      	b.n	8005f98 <_printf_common+0xa8>
 8005f86:	2301      	movs	r3, #1
 8005f88:	4652      	mov	r2, sl
 8005f8a:	4649      	mov	r1, r9
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	47c0      	blx	r8
 8005f90:	3001      	adds	r0, #1
 8005f92:	d103      	bne.n	8005f9c <_printf_common+0xac>
 8005f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9c:	3501      	adds	r5, #1
 8005f9e:	e7c6      	b.n	8005f2e <_printf_common+0x3e>
 8005fa0:	18e1      	adds	r1, r4, r3
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	2030      	movs	r0, #48	; 0x30
 8005fa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005faa:	4422      	add	r2, r4
 8005fac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fb4:	3302      	adds	r3, #2
 8005fb6:	e7c7      	b.n	8005f48 <_printf_common+0x58>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	4622      	mov	r2, r4
 8005fbc:	4649      	mov	r1, r9
 8005fbe:	4638      	mov	r0, r7
 8005fc0:	47c0      	blx	r8
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	d0e6      	beq.n	8005f94 <_printf_common+0xa4>
 8005fc6:	3601      	adds	r6, #1
 8005fc8:	e7d9      	b.n	8005f7e <_printf_common+0x8e>
	...

08005fcc <_printf_i>:
 8005fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd0:	7e0f      	ldrb	r7, [r1, #24]
 8005fd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fd4:	2f78      	cmp	r7, #120	; 0x78
 8005fd6:	4691      	mov	r9, r2
 8005fd8:	4680      	mov	r8, r0
 8005fda:	460c      	mov	r4, r1
 8005fdc:	469a      	mov	sl, r3
 8005fde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005fe2:	d807      	bhi.n	8005ff4 <_printf_i+0x28>
 8005fe4:	2f62      	cmp	r7, #98	; 0x62
 8005fe6:	d80a      	bhi.n	8005ffe <_printf_i+0x32>
 8005fe8:	2f00      	cmp	r7, #0
 8005fea:	f000 80d8 	beq.w	800619e <_printf_i+0x1d2>
 8005fee:	2f58      	cmp	r7, #88	; 0x58
 8005ff0:	f000 80a3 	beq.w	800613a <_printf_i+0x16e>
 8005ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ffc:	e03a      	b.n	8006074 <_printf_i+0xa8>
 8005ffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006002:	2b15      	cmp	r3, #21
 8006004:	d8f6      	bhi.n	8005ff4 <_printf_i+0x28>
 8006006:	a101      	add	r1, pc, #4	; (adr r1, 800600c <_printf_i+0x40>)
 8006008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800600c:	08006065 	.word	0x08006065
 8006010:	08006079 	.word	0x08006079
 8006014:	08005ff5 	.word	0x08005ff5
 8006018:	08005ff5 	.word	0x08005ff5
 800601c:	08005ff5 	.word	0x08005ff5
 8006020:	08005ff5 	.word	0x08005ff5
 8006024:	08006079 	.word	0x08006079
 8006028:	08005ff5 	.word	0x08005ff5
 800602c:	08005ff5 	.word	0x08005ff5
 8006030:	08005ff5 	.word	0x08005ff5
 8006034:	08005ff5 	.word	0x08005ff5
 8006038:	08006185 	.word	0x08006185
 800603c:	080060a9 	.word	0x080060a9
 8006040:	08006167 	.word	0x08006167
 8006044:	08005ff5 	.word	0x08005ff5
 8006048:	08005ff5 	.word	0x08005ff5
 800604c:	080061a7 	.word	0x080061a7
 8006050:	08005ff5 	.word	0x08005ff5
 8006054:	080060a9 	.word	0x080060a9
 8006058:	08005ff5 	.word	0x08005ff5
 800605c:	08005ff5 	.word	0x08005ff5
 8006060:	0800616f 	.word	0x0800616f
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	1d1a      	adds	r2, r3, #4
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	602a      	str	r2, [r5, #0]
 800606c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006074:	2301      	movs	r3, #1
 8006076:	e0a3      	b.n	80061c0 <_printf_i+0x1f4>
 8006078:	6820      	ldr	r0, [r4, #0]
 800607a:	6829      	ldr	r1, [r5, #0]
 800607c:	0606      	lsls	r6, r0, #24
 800607e:	f101 0304 	add.w	r3, r1, #4
 8006082:	d50a      	bpl.n	800609a <_printf_i+0xce>
 8006084:	680e      	ldr	r6, [r1, #0]
 8006086:	602b      	str	r3, [r5, #0]
 8006088:	2e00      	cmp	r6, #0
 800608a:	da03      	bge.n	8006094 <_printf_i+0xc8>
 800608c:	232d      	movs	r3, #45	; 0x2d
 800608e:	4276      	negs	r6, r6
 8006090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006094:	485e      	ldr	r0, [pc, #376]	; (8006210 <_printf_i+0x244>)
 8006096:	230a      	movs	r3, #10
 8006098:	e019      	b.n	80060ce <_printf_i+0x102>
 800609a:	680e      	ldr	r6, [r1, #0]
 800609c:	602b      	str	r3, [r5, #0]
 800609e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060a2:	bf18      	it	ne
 80060a4:	b236      	sxthne	r6, r6
 80060a6:	e7ef      	b.n	8006088 <_printf_i+0xbc>
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	6820      	ldr	r0, [r4, #0]
 80060ac:	1d19      	adds	r1, r3, #4
 80060ae:	6029      	str	r1, [r5, #0]
 80060b0:	0601      	lsls	r1, r0, #24
 80060b2:	d501      	bpl.n	80060b8 <_printf_i+0xec>
 80060b4:	681e      	ldr	r6, [r3, #0]
 80060b6:	e002      	b.n	80060be <_printf_i+0xf2>
 80060b8:	0646      	lsls	r6, r0, #25
 80060ba:	d5fb      	bpl.n	80060b4 <_printf_i+0xe8>
 80060bc:	881e      	ldrh	r6, [r3, #0]
 80060be:	4854      	ldr	r0, [pc, #336]	; (8006210 <_printf_i+0x244>)
 80060c0:	2f6f      	cmp	r7, #111	; 0x6f
 80060c2:	bf0c      	ite	eq
 80060c4:	2308      	moveq	r3, #8
 80060c6:	230a      	movne	r3, #10
 80060c8:	2100      	movs	r1, #0
 80060ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060ce:	6865      	ldr	r5, [r4, #4]
 80060d0:	60a5      	str	r5, [r4, #8]
 80060d2:	2d00      	cmp	r5, #0
 80060d4:	bfa2      	ittt	ge
 80060d6:	6821      	ldrge	r1, [r4, #0]
 80060d8:	f021 0104 	bicge.w	r1, r1, #4
 80060dc:	6021      	strge	r1, [r4, #0]
 80060de:	b90e      	cbnz	r6, 80060e4 <_printf_i+0x118>
 80060e0:	2d00      	cmp	r5, #0
 80060e2:	d04d      	beq.n	8006180 <_printf_i+0x1b4>
 80060e4:	4615      	mov	r5, r2
 80060e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80060ea:	fb03 6711 	mls	r7, r3, r1, r6
 80060ee:	5dc7      	ldrb	r7, [r0, r7]
 80060f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80060f4:	4637      	mov	r7, r6
 80060f6:	42bb      	cmp	r3, r7
 80060f8:	460e      	mov	r6, r1
 80060fa:	d9f4      	bls.n	80060e6 <_printf_i+0x11a>
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	d10b      	bne.n	8006118 <_printf_i+0x14c>
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	07de      	lsls	r6, r3, #31
 8006104:	d508      	bpl.n	8006118 <_printf_i+0x14c>
 8006106:	6923      	ldr	r3, [r4, #16]
 8006108:	6861      	ldr	r1, [r4, #4]
 800610a:	4299      	cmp	r1, r3
 800610c:	bfde      	ittt	le
 800610e:	2330      	movle	r3, #48	; 0x30
 8006110:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006114:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006118:	1b52      	subs	r2, r2, r5
 800611a:	6122      	str	r2, [r4, #16]
 800611c:	f8cd a000 	str.w	sl, [sp]
 8006120:	464b      	mov	r3, r9
 8006122:	aa03      	add	r2, sp, #12
 8006124:	4621      	mov	r1, r4
 8006126:	4640      	mov	r0, r8
 8006128:	f7ff fee2 	bl	8005ef0 <_printf_common>
 800612c:	3001      	adds	r0, #1
 800612e:	d14c      	bne.n	80061ca <_printf_i+0x1fe>
 8006130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006134:	b004      	add	sp, #16
 8006136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800613a:	4835      	ldr	r0, [pc, #212]	; (8006210 <_printf_i+0x244>)
 800613c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006140:	6829      	ldr	r1, [r5, #0]
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	f851 6b04 	ldr.w	r6, [r1], #4
 8006148:	6029      	str	r1, [r5, #0]
 800614a:	061d      	lsls	r5, r3, #24
 800614c:	d514      	bpl.n	8006178 <_printf_i+0x1ac>
 800614e:	07df      	lsls	r7, r3, #31
 8006150:	bf44      	itt	mi
 8006152:	f043 0320 	orrmi.w	r3, r3, #32
 8006156:	6023      	strmi	r3, [r4, #0]
 8006158:	b91e      	cbnz	r6, 8006162 <_printf_i+0x196>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	f023 0320 	bic.w	r3, r3, #32
 8006160:	6023      	str	r3, [r4, #0]
 8006162:	2310      	movs	r3, #16
 8006164:	e7b0      	b.n	80060c8 <_printf_i+0xfc>
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	f043 0320 	orr.w	r3, r3, #32
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	2378      	movs	r3, #120	; 0x78
 8006170:	4828      	ldr	r0, [pc, #160]	; (8006214 <_printf_i+0x248>)
 8006172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006176:	e7e3      	b.n	8006140 <_printf_i+0x174>
 8006178:	0659      	lsls	r1, r3, #25
 800617a:	bf48      	it	mi
 800617c:	b2b6      	uxthmi	r6, r6
 800617e:	e7e6      	b.n	800614e <_printf_i+0x182>
 8006180:	4615      	mov	r5, r2
 8006182:	e7bb      	b.n	80060fc <_printf_i+0x130>
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	6826      	ldr	r6, [r4, #0]
 8006188:	6961      	ldr	r1, [r4, #20]
 800618a:	1d18      	adds	r0, r3, #4
 800618c:	6028      	str	r0, [r5, #0]
 800618e:	0635      	lsls	r5, r6, #24
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	d501      	bpl.n	8006198 <_printf_i+0x1cc>
 8006194:	6019      	str	r1, [r3, #0]
 8006196:	e002      	b.n	800619e <_printf_i+0x1d2>
 8006198:	0670      	lsls	r0, r6, #25
 800619a:	d5fb      	bpl.n	8006194 <_printf_i+0x1c8>
 800619c:	8019      	strh	r1, [r3, #0]
 800619e:	2300      	movs	r3, #0
 80061a0:	6123      	str	r3, [r4, #16]
 80061a2:	4615      	mov	r5, r2
 80061a4:	e7ba      	b.n	800611c <_printf_i+0x150>
 80061a6:	682b      	ldr	r3, [r5, #0]
 80061a8:	1d1a      	adds	r2, r3, #4
 80061aa:	602a      	str	r2, [r5, #0]
 80061ac:	681d      	ldr	r5, [r3, #0]
 80061ae:	6862      	ldr	r2, [r4, #4]
 80061b0:	2100      	movs	r1, #0
 80061b2:	4628      	mov	r0, r5
 80061b4:	f7fa f80c 	bl	80001d0 <memchr>
 80061b8:	b108      	cbz	r0, 80061be <_printf_i+0x1f2>
 80061ba:	1b40      	subs	r0, r0, r5
 80061bc:	6060      	str	r0, [r4, #4]
 80061be:	6863      	ldr	r3, [r4, #4]
 80061c0:	6123      	str	r3, [r4, #16]
 80061c2:	2300      	movs	r3, #0
 80061c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061c8:	e7a8      	b.n	800611c <_printf_i+0x150>
 80061ca:	6923      	ldr	r3, [r4, #16]
 80061cc:	462a      	mov	r2, r5
 80061ce:	4649      	mov	r1, r9
 80061d0:	4640      	mov	r0, r8
 80061d2:	47d0      	blx	sl
 80061d4:	3001      	adds	r0, #1
 80061d6:	d0ab      	beq.n	8006130 <_printf_i+0x164>
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	079b      	lsls	r3, r3, #30
 80061dc:	d413      	bmi.n	8006206 <_printf_i+0x23a>
 80061de:	68e0      	ldr	r0, [r4, #12]
 80061e0:	9b03      	ldr	r3, [sp, #12]
 80061e2:	4298      	cmp	r0, r3
 80061e4:	bfb8      	it	lt
 80061e6:	4618      	movlt	r0, r3
 80061e8:	e7a4      	b.n	8006134 <_printf_i+0x168>
 80061ea:	2301      	movs	r3, #1
 80061ec:	4632      	mov	r2, r6
 80061ee:	4649      	mov	r1, r9
 80061f0:	4640      	mov	r0, r8
 80061f2:	47d0      	blx	sl
 80061f4:	3001      	adds	r0, #1
 80061f6:	d09b      	beq.n	8006130 <_printf_i+0x164>
 80061f8:	3501      	adds	r5, #1
 80061fa:	68e3      	ldr	r3, [r4, #12]
 80061fc:	9903      	ldr	r1, [sp, #12]
 80061fe:	1a5b      	subs	r3, r3, r1
 8006200:	42ab      	cmp	r3, r5
 8006202:	dcf2      	bgt.n	80061ea <_printf_i+0x21e>
 8006204:	e7eb      	b.n	80061de <_printf_i+0x212>
 8006206:	2500      	movs	r5, #0
 8006208:	f104 0619 	add.w	r6, r4, #25
 800620c:	e7f5      	b.n	80061fa <_printf_i+0x22e>
 800620e:	bf00      	nop
 8006210:	08006d96 	.word	0x08006d96
 8006214:	08006da7 	.word	0x08006da7

08006218 <__retarget_lock_acquire_recursive>:
 8006218:	4770      	bx	lr

0800621a <__retarget_lock_release_recursive>:
 800621a:	4770      	bx	lr

0800621c <memmove>:
 800621c:	4288      	cmp	r0, r1
 800621e:	b510      	push	{r4, lr}
 8006220:	eb01 0402 	add.w	r4, r1, r2
 8006224:	d902      	bls.n	800622c <memmove+0x10>
 8006226:	4284      	cmp	r4, r0
 8006228:	4623      	mov	r3, r4
 800622a:	d807      	bhi.n	800623c <memmove+0x20>
 800622c:	1e43      	subs	r3, r0, #1
 800622e:	42a1      	cmp	r1, r4
 8006230:	d008      	beq.n	8006244 <memmove+0x28>
 8006232:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006236:	f803 2f01 	strb.w	r2, [r3, #1]!
 800623a:	e7f8      	b.n	800622e <memmove+0x12>
 800623c:	4402      	add	r2, r0
 800623e:	4601      	mov	r1, r0
 8006240:	428a      	cmp	r2, r1
 8006242:	d100      	bne.n	8006246 <memmove+0x2a>
 8006244:	bd10      	pop	{r4, pc}
 8006246:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800624a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800624e:	e7f7      	b.n	8006240 <memmove+0x24>

08006250 <_realloc_r>:
 8006250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006254:	4680      	mov	r8, r0
 8006256:	4614      	mov	r4, r2
 8006258:	460e      	mov	r6, r1
 800625a:	b921      	cbnz	r1, 8006266 <_realloc_r+0x16>
 800625c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006260:	4611      	mov	r1, r2
 8006262:	f7ff bb91 	b.w	8005988 <_malloc_r>
 8006266:	b92a      	cbnz	r2, 8006274 <_realloc_r+0x24>
 8006268:	f7ff fb22 	bl	80058b0 <_free_r>
 800626c:	4625      	mov	r5, r4
 800626e:	4628      	mov	r0, r5
 8006270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006274:	f000 f81b 	bl	80062ae <_malloc_usable_size_r>
 8006278:	4284      	cmp	r4, r0
 800627a:	4607      	mov	r7, r0
 800627c:	d802      	bhi.n	8006284 <_realloc_r+0x34>
 800627e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006282:	d812      	bhi.n	80062aa <_realloc_r+0x5a>
 8006284:	4621      	mov	r1, r4
 8006286:	4640      	mov	r0, r8
 8006288:	f7ff fb7e 	bl	8005988 <_malloc_r>
 800628c:	4605      	mov	r5, r0
 800628e:	2800      	cmp	r0, #0
 8006290:	d0ed      	beq.n	800626e <_realloc_r+0x1e>
 8006292:	42bc      	cmp	r4, r7
 8006294:	4622      	mov	r2, r4
 8006296:	4631      	mov	r1, r6
 8006298:	bf28      	it	cs
 800629a:	463a      	movcs	r2, r7
 800629c:	f7ff faf2 	bl	8005884 <memcpy>
 80062a0:	4631      	mov	r1, r6
 80062a2:	4640      	mov	r0, r8
 80062a4:	f7ff fb04 	bl	80058b0 <_free_r>
 80062a8:	e7e1      	b.n	800626e <_realloc_r+0x1e>
 80062aa:	4635      	mov	r5, r6
 80062ac:	e7df      	b.n	800626e <_realloc_r+0x1e>

080062ae <_malloc_usable_size_r>:
 80062ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062b2:	1f18      	subs	r0, r3, #4
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	bfbc      	itt	lt
 80062b8:	580b      	ldrlt	r3, [r1, r0]
 80062ba:	18c0      	addlt	r0, r0, r3
 80062bc:	4770      	bx	lr
	...

080062c0 <atan>:
 80062c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c4:	ec55 4b10 	vmov	r4, r5, d0
 80062c8:	4bc3      	ldr	r3, [pc, #780]	; (80065d8 <atan+0x318>)
 80062ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80062ce:	429e      	cmp	r6, r3
 80062d0:	46ab      	mov	fp, r5
 80062d2:	dd18      	ble.n	8006306 <atan+0x46>
 80062d4:	4bc1      	ldr	r3, [pc, #772]	; (80065dc <atan+0x31c>)
 80062d6:	429e      	cmp	r6, r3
 80062d8:	dc01      	bgt.n	80062de <atan+0x1e>
 80062da:	d109      	bne.n	80062f0 <atan+0x30>
 80062dc:	b144      	cbz	r4, 80062f0 <atan+0x30>
 80062de:	4622      	mov	r2, r4
 80062e0:	462b      	mov	r3, r5
 80062e2:	4620      	mov	r0, r4
 80062e4:	4629      	mov	r1, r5
 80062e6:	f7f9 ffc9 	bl	800027c <__adddf3>
 80062ea:	4604      	mov	r4, r0
 80062ec:	460d      	mov	r5, r1
 80062ee:	e006      	b.n	80062fe <atan+0x3e>
 80062f0:	f1bb 0f00 	cmp.w	fp, #0
 80062f4:	f300 8131 	bgt.w	800655a <atan+0x29a>
 80062f8:	a59b      	add	r5, pc, #620	; (adr r5, 8006568 <atan+0x2a8>)
 80062fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80062fe:	ec45 4b10 	vmov	d0, r4, r5
 8006302:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006306:	4bb6      	ldr	r3, [pc, #728]	; (80065e0 <atan+0x320>)
 8006308:	429e      	cmp	r6, r3
 800630a:	dc14      	bgt.n	8006336 <atan+0x76>
 800630c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006310:	429e      	cmp	r6, r3
 8006312:	dc0d      	bgt.n	8006330 <atan+0x70>
 8006314:	a396      	add	r3, pc, #600	; (adr r3, 8006570 <atan+0x2b0>)
 8006316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631a:	ee10 0a10 	vmov	r0, s0
 800631e:	4629      	mov	r1, r5
 8006320:	f7f9 ffac 	bl	800027c <__adddf3>
 8006324:	4baf      	ldr	r3, [pc, #700]	; (80065e4 <atan+0x324>)
 8006326:	2200      	movs	r2, #0
 8006328:	f7fa fbee 	bl	8000b08 <__aeabi_dcmpgt>
 800632c:	2800      	cmp	r0, #0
 800632e:	d1e6      	bne.n	80062fe <atan+0x3e>
 8006330:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006334:	e02b      	b.n	800638e <atan+0xce>
 8006336:	f000 f963 	bl	8006600 <fabs>
 800633a:	4bab      	ldr	r3, [pc, #684]	; (80065e8 <atan+0x328>)
 800633c:	429e      	cmp	r6, r3
 800633e:	ec55 4b10 	vmov	r4, r5, d0
 8006342:	f300 80bf 	bgt.w	80064c4 <atan+0x204>
 8006346:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800634a:	429e      	cmp	r6, r3
 800634c:	f300 80a0 	bgt.w	8006490 <atan+0x1d0>
 8006350:	ee10 2a10 	vmov	r2, s0
 8006354:	ee10 0a10 	vmov	r0, s0
 8006358:	462b      	mov	r3, r5
 800635a:	4629      	mov	r1, r5
 800635c:	f7f9 ff8e 	bl	800027c <__adddf3>
 8006360:	4ba0      	ldr	r3, [pc, #640]	; (80065e4 <atan+0x324>)
 8006362:	2200      	movs	r2, #0
 8006364:	f7f9 ff88 	bl	8000278 <__aeabi_dsub>
 8006368:	2200      	movs	r2, #0
 800636a:	4606      	mov	r6, r0
 800636c:	460f      	mov	r7, r1
 800636e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006372:	4620      	mov	r0, r4
 8006374:	4629      	mov	r1, r5
 8006376:	f7f9 ff81 	bl	800027c <__adddf3>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4630      	mov	r0, r6
 8006380:	4639      	mov	r1, r7
 8006382:	f7fa fa5b 	bl	800083c <__aeabi_ddiv>
 8006386:	f04f 0a00 	mov.w	sl, #0
 800638a:	4604      	mov	r4, r0
 800638c:	460d      	mov	r5, r1
 800638e:	4622      	mov	r2, r4
 8006390:	462b      	mov	r3, r5
 8006392:	4620      	mov	r0, r4
 8006394:	4629      	mov	r1, r5
 8006396:	f7fa f927 	bl	80005e8 <__aeabi_dmul>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	4680      	mov	r8, r0
 80063a0:	4689      	mov	r9, r1
 80063a2:	f7fa f921 	bl	80005e8 <__aeabi_dmul>
 80063a6:	a374      	add	r3, pc, #464	; (adr r3, 8006578 <atan+0x2b8>)
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	4606      	mov	r6, r0
 80063ae:	460f      	mov	r7, r1
 80063b0:	f7fa f91a 	bl	80005e8 <__aeabi_dmul>
 80063b4:	a372      	add	r3, pc, #456	; (adr r3, 8006580 <atan+0x2c0>)
 80063b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ba:	f7f9 ff5f 	bl	800027c <__adddf3>
 80063be:	4632      	mov	r2, r6
 80063c0:	463b      	mov	r3, r7
 80063c2:	f7fa f911 	bl	80005e8 <__aeabi_dmul>
 80063c6:	a370      	add	r3, pc, #448	; (adr r3, 8006588 <atan+0x2c8>)
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f7f9 ff56 	bl	800027c <__adddf3>
 80063d0:	4632      	mov	r2, r6
 80063d2:	463b      	mov	r3, r7
 80063d4:	f7fa f908 	bl	80005e8 <__aeabi_dmul>
 80063d8:	a36d      	add	r3, pc, #436	; (adr r3, 8006590 <atan+0x2d0>)
 80063da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063de:	f7f9 ff4d 	bl	800027c <__adddf3>
 80063e2:	4632      	mov	r2, r6
 80063e4:	463b      	mov	r3, r7
 80063e6:	f7fa f8ff 	bl	80005e8 <__aeabi_dmul>
 80063ea:	a36b      	add	r3, pc, #428	; (adr r3, 8006598 <atan+0x2d8>)
 80063ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f0:	f7f9 ff44 	bl	800027c <__adddf3>
 80063f4:	4632      	mov	r2, r6
 80063f6:	463b      	mov	r3, r7
 80063f8:	f7fa f8f6 	bl	80005e8 <__aeabi_dmul>
 80063fc:	a368      	add	r3, pc, #416	; (adr r3, 80065a0 <atan+0x2e0>)
 80063fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006402:	f7f9 ff3b 	bl	800027c <__adddf3>
 8006406:	4642      	mov	r2, r8
 8006408:	464b      	mov	r3, r9
 800640a:	f7fa f8ed 	bl	80005e8 <__aeabi_dmul>
 800640e:	a366      	add	r3, pc, #408	; (adr r3, 80065a8 <atan+0x2e8>)
 8006410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006414:	4680      	mov	r8, r0
 8006416:	4689      	mov	r9, r1
 8006418:	4630      	mov	r0, r6
 800641a:	4639      	mov	r1, r7
 800641c:	f7fa f8e4 	bl	80005e8 <__aeabi_dmul>
 8006420:	a363      	add	r3, pc, #396	; (adr r3, 80065b0 <atan+0x2f0>)
 8006422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006426:	f7f9 ff27 	bl	8000278 <__aeabi_dsub>
 800642a:	4632      	mov	r2, r6
 800642c:	463b      	mov	r3, r7
 800642e:	f7fa f8db 	bl	80005e8 <__aeabi_dmul>
 8006432:	a361      	add	r3, pc, #388	; (adr r3, 80065b8 <atan+0x2f8>)
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	f7f9 ff1e 	bl	8000278 <__aeabi_dsub>
 800643c:	4632      	mov	r2, r6
 800643e:	463b      	mov	r3, r7
 8006440:	f7fa f8d2 	bl	80005e8 <__aeabi_dmul>
 8006444:	a35e      	add	r3, pc, #376	; (adr r3, 80065c0 <atan+0x300>)
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	f7f9 ff15 	bl	8000278 <__aeabi_dsub>
 800644e:	4632      	mov	r2, r6
 8006450:	463b      	mov	r3, r7
 8006452:	f7fa f8c9 	bl	80005e8 <__aeabi_dmul>
 8006456:	a35c      	add	r3, pc, #368	; (adr r3, 80065c8 <atan+0x308>)
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	f7f9 ff0c 	bl	8000278 <__aeabi_dsub>
 8006460:	4632      	mov	r2, r6
 8006462:	463b      	mov	r3, r7
 8006464:	f7fa f8c0 	bl	80005e8 <__aeabi_dmul>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	4640      	mov	r0, r8
 800646e:	4649      	mov	r1, r9
 8006470:	f7f9 ff04 	bl	800027c <__adddf3>
 8006474:	4622      	mov	r2, r4
 8006476:	462b      	mov	r3, r5
 8006478:	f7fa f8b6 	bl	80005e8 <__aeabi_dmul>
 800647c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	d14b      	bne.n	800651e <atan+0x25e>
 8006486:	4620      	mov	r0, r4
 8006488:	4629      	mov	r1, r5
 800648a:	f7f9 fef5 	bl	8000278 <__aeabi_dsub>
 800648e:	e72c      	b.n	80062ea <atan+0x2a>
 8006490:	ee10 0a10 	vmov	r0, s0
 8006494:	4b53      	ldr	r3, [pc, #332]	; (80065e4 <atan+0x324>)
 8006496:	2200      	movs	r2, #0
 8006498:	4629      	mov	r1, r5
 800649a:	f7f9 feed 	bl	8000278 <__aeabi_dsub>
 800649e:	4b51      	ldr	r3, [pc, #324]	; (80065e4 <atan+0x324>)
 80064a0:	4606      	mov	r6, r0
 80064a2:	460f      	mov	r7, r1
 80064a4:	2200      	movs	r2, #0
 80064a6:	4620      	mov	r0, r4
 80064a8:	4629      	mov	r1, r5
 80064aa:	f7f9 fee7 	bl	800027c <__adddf3>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4630      	mov	r0, r6
 80064b4:	4639      	mov	r1, r7
 80064b6:	f7fa f9c1 	bl	800083c <__aeabi_ddiv>
 80064ba:	f04f 0a01 	mov.w	sl, #1
 80064be:	4604      	mov	r4, r0
 80064c0:	460d      	mov	r5, r1
 80064c2:	e764      	b.n	800638e <atan+0xce>
 80064c4:	4b49      	ldr	r3, [pc, #292]	; (80065ec <atan+0x32c>)
 80064c6:	429e      	cmp	r6, r3
 80064c8:	da1d      	bge.n	8006506 <atan+0x246>
 80064ca:	ee10 0a10 	vmov	r0, s0
 80064ce:	4b48      	ldr	r3, [pc, #288]	; (80065f0 <atan+0x330>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	4629      	mov	r1, r5
 80064d4:	f7f9 fed0 	bl	8000278 <__aeabi_dsub>
 80064d8:	4b45      	ldr	r3, [pc, #276]	; (80065f0 <atan+0x330>)
 80064da:	4606      	mov	r6, r0
 80064dc:	460f      	mov	r7, r1
 80064de:	2200      	movs	r2, #0
 80064e0:	4620      	mov	r0, r4
 80064e2:	4629      	mov	r1, r5
 80064e4:	f7fa f880 	bl	80005e8 <__aeabi_dmul>
 80064e8:	4b3e      	ldr	r3, [pc, #248]	; (80065e4 <atan+0x324>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	f7f9 fec6 	bl	800027c <__adddf3>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4630      	mov	r0, r6
 80064f6:	4639      	mov	r1, r7
 80064f8:	f7fa f9a0 	bl	800083c <__aeabi_ddiv>
 80064fc:	f04f 0a02 	mov.w	sl, #2
 8006500:	4604      	mov	r4, r0
 8006502:	460d      	mov	r5, r1
 8006504:	e743      	b.n	800638e <atan+0xce>
 8006506:	462b      	mov	r3, r5
 8006508:	ee10 2a10 	vmov	r2, s0
 800650c:	4939      	ldr	r1, [pc, #228]	; (80065f4 <atan+0x334>)
 800650e:	2000      	movs	r0, #0
 8006510:	f7fa f994 	bl	800083c <__aeabi_ddiv>
 8006514:	f04f 0a03 	mov.w	sl, #3
 8006518:	4604      	mov	r4, r0
 800651a:	460d      	mov	r5, r1
 800651c:	e737      	b.n	800638e <atan+0xce>
 800651e:	4b36      	ldr	r3, [pc, #216]	; (80065f8 <atan+0x338>)
 8006520:	4e36      	ldr	r6, [pc, #216]	; (80065fc <atan+0x33c>)
 8006522:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006526:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800652a:	e9da 2300 	ldrd	r2, r3, [sl]
 800652e:	f7f9 fea3 	bl	8000278 <__aeabi_dsub>
 8006532:	4622      	mov	r2, r4
 8006534:	462b      	mov	r3, r5
 8006536:	f7f9 fe9f 	bl	8000278 <__aeabi_dsub>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006542:	f7f9 fe99 	bl	8000278 <__aeabi_dsub>
 8006546:	f1bb 0f00 	cmp.w	fp, #0
 800654a:	4604      	mov	r4, r0
 800654c:	460d      	mov	r5, r1
 800654e:	f6bf aed6 	bge.w	80062fe <atan+0x3e>
 8006552:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006556:	461d      	mov	r5, r3
 8006558:	e6d1      	b.n	80062fe <atan+0x3e>
 800655a:	a51d      	add	r5, pc, #116	; (adr r5, 80065d0 <atan+0x310>)
 800655c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006560:	e6cd      	b.n	80062fe <atan+0x3e>
 8006562:	bf00      	nop
 8006564:	f3af 8000 	nop.w
 8006568:	54442d18 	.word	0x54442d18
 800656c:	bff921fb 	.word	0xbff921fb
 8006570:	8800759c 	.word	0x8800759c
 8006574:	7e37e43c 	.word	0x7e37e43c
 8006578:	e322da11 	.word	0xe322da11
 800657c:	3f90ad3a 	.word	0x3f90ad3a
 8006580:	24760deb 	.word	0x24760deb
 8006584:	3fa97b4b 	.word	0x3fa97b4b
 8006588:	a0d03d51 	.word	0xa0d03d51
 800658c:	3fb10d66 	.word	0x3fb10d66
 8006590:	c54c206e 	.word	0xc54c206e
 8006594:	3fb745cd 	.word	0x3fb745cd
 8006598:	920083ff 	.word	0x920083ff
 800659c:	3fc24924 	.word	0x3fc24924
 80065a0:	5555550d 	.word	0x5555550d
 80065a4:	3fd55555 	.word	0x3fd55555
 80065a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80065ac:	bfa2b444 	.word	0xbfa2b444
 80065b0:	52defd9a 	.word	0x52defd9a
 80065b4:	3fadde2d 	.word	0x3fadde2d
 80065b8:	af749a6d 	.word	0xaf749a6d
 80065bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80065c0:	fe231671 	.word	0xfe231671
 80065c4:	3fbc71c6 	.word	0x3fbc71c6
 80065c8:	9998ebc4 	.word	0x9998ebc4
 80065cc:	3fc99999 	.word	0x3fc99999
 80065d0:	54442d18 	.word	0x54442d18
 80065d4:	3ff921fb 	.word	0x3ff921fb
 80065d8:	440fffff 	.word	0x440fffff
 80065dc:	7ff00000 	.word	0x7ff00000
 80065e0:	3fdbffff 	.word	0x3fdbffff
 80065e4:	3ff00000 	.word	0x3ff00000
 80065e8:	3ff2ffff 	.word	0x3ff2ffff
 80065ec:	40038000 	.word	0x40038000
 80065f0:	3ff80000 	.word	0x3ff80000
 80065f4:	bff00000 	.word	0xbff00000
 80065f8:	08006dd8 	.word	0x08006dd8
 80065fc:	08006db8 	.word	0x08006db8

08006600 <fabs>:
 8006600:	ec51 0b10 	vmov	r0, r1, d0
 8006604:	ee10 2a10 	vmov	r2, s0
 8006608:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800660c:	ec43 2b10 	vmov	d0, r2, r3
 8006610:	4770      	bx	lr
	...

08006614 <asin>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	ed2d 8b02 	vpush	{d8}
 800661a:	ec55 4b10 	vmov	r4, r5, d0
 800661e:	f000 f82f 	bl	8006680 <__ieee754_asin>
 8006622:	4622      	mov	r2, r4
 8006624:	462b      	mov	r3, r5
 8006626:	4620      	mov	r0, r4
 8006628:	4629      	mov	r1, r5
 800662a:	eeb0 8a40 	vmov.f32	s16, s0
 800662e:	eef0 8a60 	vmov.f32	s17, s1
 8006632:	f7fa fa73 	bl	8000b1c <__aeabi_dcmpun>
 8006636:	b9a8      	cbnz	r0, 8006664 <asin+0x50>
 8006638:	ec45 4b10 	vmov	d0, r4, r5
 800663c:	f7ff ffe0 	bl	8006600 <fabs>
 8006640:	4b0c      	ldr	r3, [pc, #48]	; (8006674 <asin+0x60>)
 8006642:	ec51 0b10 	vmov	r0, r1, d0
 8006646:	2200      	movs	r2, #0
 8006648:	f7fa fa5e 	bl	8000b08 <__aeabi_dcmpgt>
 800664c:	b150      	cbz	r0, 8006664 <asin+0x50>
 800664e:	f7ff f8e7 	bl	8005820 <__errno>
 8006652:	ecbd 8b02 	vpop	{d8}
 8006656:	2321      	movs	r3, #33	; 0x21
 8006658:	6003      	str	r3, [r0, #0]
 800665a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800665e:	4806      	ldr	r0, [pc, #24]	; (8006678 <asin+0x64>)
 8006660:	f000 bad6 	b.w	8006c10 <nan>
 8006664:	eeb0 0a48 	vmov.f32	s0, s16
 8006668:	eef0 0a68 	vmov.f32	s1, s17
 800666c:	ecbd 8b02 	vpop	{d8}
 8006670:	bd38      	pop	{r3, r4, r5, pc}
 8006672:	bf00      	nop
 8006674:	3ff00000 	.word	0x3ff00000
 8006678:	08006d8a 	.word	0x08006d8a
 800667c:	00000000 	.word	0x00000000

08006680 <__ieee754_asin>:
 8006680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006684:	ed2d 8b04 	vpush	{d8-d9}
 8006688:	ec55 4b10 	vmov	r4, r5, d0
 800668c:	4bcc      	ldr	r3, [pc, #816]	; (80069c0 <__ieee754_asin+0x340>)
 800668e:	b083      	sub	sp, #12
 8006690:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006694:	4598      	cmp	r8, r3
 8006696:	9501      	str	r5, [sp, #4]
 8006698:	dd35      	ble.n	8006706 <__ieee754_asin+0x86>
 800669a:	ee10 3a10 	vmov	r3, s0
 800669e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80066a2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80066a6:	ea58 0303 	orrs.w	r3, r8, r3
 80066aa:	d117      	bne.n	80066dc <__ieee754_asin+0x5c>
 80066ac:	a3aa      	add	r3, pc, #680	; (adr r3, 8006958 <__ieee754_asin+0x2d8>)
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	ee10 0a10 	vmov	r0, s0
 80066b6:	4629      	mov	r1, r5
 80066b8:	f7f9 ff96 	bl	80005e8 <__aeabi_dmul>
 80066bc:	a3a8      	add	r3, pc, #672	; (adr r3, 8006960 <__ieee754_asin+0x2e0>)
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	4606      	mov	r6, r0
 80066c4:	460f      	mov	r7, r1
 80066c6:	4620      	mov	r0, r4
 80066c8:	4629      	mov	r1, r5
 80066ca:	f7f9 ff8d 	bl	80005e8 <__aeabi_dmul>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4630      	mov	r0, r6
 80066d4:	4639      	mov	r1, r7
 80066d6:	f7f9 fdd1 	bl	800027c <__adddf3>
 80066da:	e00b      	b.n	80066f4 <__ieee754_asin+0x74>
 80066dc:	ee10 2a10 	vmov	r2, s0
 80066e0:	462b      	mov	r3, r5
 80066e2:	ee10 0a10 	vmov	r0, s0
 80066e6:	4629      	mov	r1, r5
 80066e8:	f7f9 fdc6 	bl	8000278 <__aeabi_dsub>
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	f7fa f8a4 	bl	800083c <__aeabi_ddiv>
 80066f4:	4604      	mov	r4, r0
 80066f6:	460d      	mov	r5, r1
 80066f8:	ec45 4b10 	vmov	d0, r4, r5
 80066fc:	b003      	add	sp, #12
 80066fe:	ecbd 8b04 	vpop	{d8-d9}
 8006702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006706:	4baf      	ldr	r3, [pc, #700]	; (80069c4 <__ieee754_asin+0x344>)
 8006708:	4598      	cmp	r8, r3
 800670a:	dc11      	bgt.n	8006730 <__ieee754_asin+0xb0>
 800670c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006710:	f280 80ae 	bge.w	8006870 <__ieee754_asin+0x1f0>
 8006714:	a394      	add	r3, pc, #592	; (adr r3, 8006968 <__ieee754_asin+0x2e8>)
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	ee10 0a10 	vmov	r0, s0
 800671e:	4629      	mov	r1, r5
 8006720:	f7f9 fdac 	bl	800027c <__adddf3>
 8006724:	4ba8      	ldr	r3, [pc, #672]	; (80069c8 <__ieee754_asin+0x348>)
 8006726:	2200      	movs	r2, #0
 8006728:	f7fa f9ee 	bl	8000b08 <__aeabi_dcmpgt>
 800672c:	2800      	cmp	r0, #0
 800672e:	d1e3      	bne.n	80066f8 <__ieee754_asin+0x78>
 8006730:	ec45 4b10 	vmov	d0, r4, r5
 8006734:	f7ff ff64 	bl	8006600 <fabs>
 8006738:	49a3      	ldr	r1, [pc, #652]	; (80069c8 <__ieee754_asin+0x348>)
 800673a:	ec53 2b10 	vmov	r2, r3, d0
 800673e:	2000      	movs	r0, #0
 8006740:	f7f9 fd9a 	bl	8000278 <__aeabi_dsub>
 8006744:	4ba1      	ldr	r3, [pc, #644]	; (80069cc <__ieee754_asin+0x34c>)
 8006746:	2200      	movs	r2, #0
 8006748:	f7f9 ff4e 	bl	80005e8 <__aeabi_dmul>
 800674c:	a388      	add	r3, pc, #544	; (adr r3, 8006970 <__ieee754_asin+0x2f0>)
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	4604      	mov	r4, r0
 8006754:	460d      	mov	r5, r1
 8006756:	f7f9 ff47 	bl	80005e8 <__aeabi_dmul>
 800675a:	a387      	add	r3, pc, #540	; (adr r3, 8006978 <__ieee754_asin+0x2f8>)
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	f7f9 fd8c 	bl	800027c <__adddf3>
 8006764:	4622      	mov	r2, r4
 8006766:	462b      	mov	r3, r5
 8006768:	f7f9 ff3e 	bl	80005e8 <__aeabi_dmul>
 800676c:	a384      	add	r3, pc, #528	; (adr r3, 8006980 <__ieee754_asin+0x300>)
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	f7f9 fd81 	bl	8000278 <__aeabi_dsub>
 8006776:	4622      	mov	r2, r4
 8006778:	462b      	mov	r3, r5
 800677a:	f7f9 ff35 	bl	80005e8 <__aeabi_dmul>
 800677e:	a382      	add	r3, pc, #520	; (adr r3, 8006988 <__ieee754_asin+0x308>)
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	f7f9 fd7a 	bl	800027c <__adddf3>
 8006788:	4622      	mov	r2, r4
 800678a:	462b      	mov	r3, r5
 800678c:	f7f9 ff2c 	bl	80005e8 <__aeabi_dmul>
 8006790:	a37f      	add	r3, pc, #508	; (adr r3, 8006990 <__ieee754_asin+0x310>)
 8006792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006796:	f7f9 fd6f 	bl	8000278 <__aeabi_dsub>
 800679a:	4622      	mov	r2, r4
 800679c:	462b      	mov	r3, r5
 800679e:	f7f9 ff23 	bl	80005e8 <__aeabi_dmul>
 80067a2:	a37d      	add	r3, pc, #500	; (adr r3, 8006998 <__ieee754_asin+0x318>)
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	f7f9 fd68 	bl	800027c <__adddf3>
 80067ac:	4622      	mov	r2, r4
 80067ae:	462b      	mov	r3, r5
 80067b0:	f7f9 ff1a 	bl	80005e8 <__aeabi_dmul>
 80067b4:	a37a      	add	r3, pc, #488	; (adr r3, 80069a0 <__ieee754_asin+0x320>)
 80067b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ba:	ec41 0b18 	vmov	d8, r0, r1
 80067be:	4620      	mov	r0, r4
 80067c0:	4629      	mov	r1, r5
 80067c2:	f7f9 ff11 	bl	80005e8 <__aeabi_dmul>
 80067c6:	a378      	add	r3, pc, #480	; (adr r3, 80069a8 <__ieee754_asin+0x328>)
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	f7f9 fd54 	bl	8000278 <__aeabi_dsub>
 80067d0:	4622      	mov	r2, r4
 80067d2:	462b      	mov	r3, r5
 80067d4:	f7f9 ff08 	bl	80005e8 <__aeabi_dmul>
 80067d8:	a375      	add	r3, pc, #468	; (adr r3, 80069b0 <__ieee754_asin+0x330>)
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	f7f9 fd4d 	bl	800027c <__adddf3>
 80067e2:	4622      	mov	r2, r4
 80067e4:	462b      	mov	r3, r5
 80067e6:	f7f9 feff 	bl	80005e8 <__aeabi_dmul>
 80067ea:	a373      	add	r3, pc, #460	; (adr r3, 80069b8 <__ieee754_asin+0x338>)
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f7f9 fd42 	bl	8000278 <__aeabi_dsub>
 80067f4:	4622      	mov	r2, r4
 80067f6:	462b      	mov	r3, r5
 80067f8:	f7f9 fef6 	bl	80005e8 <__aeabi_dmul>
 80067fc:	4b72      	ldr	r3, [pc, #456]	; (80069c8 <__ieee754_asin+0x348>)
 80067fe:	2200      	movs	r2, #0
 8006800:	f7f9 fd3c 	bl	800027c <__adddf3>
 8006804:	ec45 4b10 	vmov	d0, r4, r5
 8006808:	4606      	mov	r6, r0
 800680a:	460f      	mov	r7, r1
 800680c:	f000 f94c 	bl	8006aa8 <__ieee754_sqrt>
 8006810:	4b6f      	ldr	r3, [pc, #444]	; (80069d0 <__ieee754_asin+0x350>)
 8006812:	4598      	cmp	r8, r3
 8006814:	ec5b ab10 	vmov	sl, fp, d0
 8006818:	f340 80dc 	ble.w	80069d4 <__ieee754_asin+0x354>
 800681c:	4632      	mov	r2, r6
 800681e:	463b      	mov	r3, r7
 8006820:	ec51 0b18 	vmov	r0, r1, d8
 8006824:	f7fa f80a 	bl	800083c <__aeabi_ddiv>
 8006828:	4652      	mov	r2, sl
 800682a:	465b      	mov	r3, fp
 800682c:	f7f9 fedc 	bl	80005e8 <__aeabi_dmul>
 8006830:	4652      	mov	r2, sl
 8006832:	465b      	mov	r3, fp
 8006834:	f7f9 fd22 	bl	800027c <__adddf3>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	f7f9 fd1e 	bl	800027c <__adddf3>
 8006840:	a347      	add	r3, pc, #284	; (adr r3, 8006960 <__ieee754_asin+0x2e0>)
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	f7f9 fd17 	bl	8000278 <__aeabi_dsub>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	a142      	add	r1, pc, #264	; (adr r1, 8006958 <__ieee754_asin+0x2d8>)
 8006850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006854:	f7f9 fd10 	bl	8000278 <__aeabi_dsub>
 8006858:	9b01      	ldr	r3, [sp, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	bfdc      	itt	le
 800685e:	4602      	movle	r2, r0
 8006860:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8006864:	4604      	mov	r4, r0
 8006866:	460d      	mov	r5, r1
 8006868:	bfdc      	itt	le
 800686a:	4614      	movle	r4, r2
 800686c:	461d      	movle	r5, r3
 800686e:	e743      	b.n	80066f8 <__ieee754_asin+0x78>
 8006870:	ee10 2a10 	vmov	r2, s0
 8006874:	ee10 0a10 	vmov	r0, s0
 8006878:	462b      	mov	r3, r5
 800687a:	4629      	mov	r1, r5
 800687c:	f7f9 feb4 	bl	80005e8 <__aeabi_dmul>
 8006880:	a33b      	add	r3, pc, #236	; (adr r3, 8006970 <__ieee754_asin+0x2f0>)
 8006882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006886:	4606      	mov	r6, r0
 8006888:	460f      	mov	r7, r1
 800688a:	f7f9 fead 	bl	80005e8 <__aeabi_dmul>
 800688e:	a33a      	add	r3, pc, #232	; (adr r3, 8006978 <__ieee754_asin+0x2f8>)
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	f7f9 fcf2 	bl	800027c <__adddf3>
 8006898:	4632      	mov	r2, r6
 800689a:	463b      	mov	r3, r7
 800689c:	f7f9 fea4 	bl	80005e8 <__aeabi_dmul>
 80068a0:	a337      	add	r3, pc, #220	; (adr r3, 8006980 <__ieee754_asin+0x300>)
 80068a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a6:	f7f9 fce7 	bl	8000278 <__aeabi_dsub>
 80068aa:	4632      	mov	r2, r6
 80068ac:	463b      	mov	r3, r7
 80068ae:	f7f9 fe9b 	bl	80005e8 <__aeabi_dmul>
 80068b2:	a335      	add	r3, pc, #212	; (adr r3, 8006988 <__ieee754_asin+0x308>)
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	f7f9 fce0 	bl	800027c <__adddf3>
 80068bc:	4632      	mov	r2, r6
 80068be:	463b      	mov	r3, r7
 80068c0:	f7f9 fe92 	bl	80005e8 <__aeabi_dmul>
 80068c4:	a332      	add	r3, pc, #200	; (adr r3, 8006990 <__ieee754_asin+0x310>)
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	f7f9 fcd5 	bl	8000278 <__aeabi_dsub>
 80068ce:	4632      	mov	r2, r6
 80068d0:	463b      	mov	r3, r7
 80068d2:	f7f9 fe89 	bl	80005e8 <__aeabi_dmul>
 80068d6:	a330      	add	r3, pc, #192	; (adr r3, 8006998 <__ieee754_asin+0x318>)
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	f7f9 fcce 	bl	800027c <__adddf3>
 80068e0:	4632      	mov	r2, r6
 80068e2:	463b      	mov	r3, r7
 80068e4:	f7f9 fe80 	bl	80005e8 <__aeabi_dmul>
 80068e8:	a32d      	add	r3, pc, #180	; (adr r3, 80069a0 <__ieee754_asin+0x320>)
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	4680      	mov	r8, r0
 80068f0:	4689      	mov	r9, r1
 80068f2:	4630      	mov	r0, r6
 80068f4:	4639      	mov	r1, r7
 80068f6:	f7f9 fe77 	bl	80005e8 <__aeabi_dmul>
 80068fa:	a32b      	add	r3, pc, #172	; (adr r3, 80069a8 <__ieee754_asin+0x328>)
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	f7f9 fcba 	bl	8000278 <__aeabi_dsub>
 8006904:	4632      	mov	r2, r6
 8006906:	463b      	mov	r3, r7
 8006908:	f7f9 fe6e 	bl	80005e8 <__aeabi_dmul>
 800690c:	a328      	add	r3, pc, #160	; (adr r3, 80069b0 <__ieee754_asin+0x330>)
 800690e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006912:	f7f9 fcb3 	bl	800027c <__adddf3>
 8006916:	4632      	mov	r2, r6
 8006918:	463b      	mov	r3, r7
 800691a:	f7f9 fe65 	bl	80005e8 <__aeabi_dmul>
 800691e:	a326      	add	r3, pc, #152	; (adr r3, 80069b8 <__ieee754_asin+0x338>)
 8006920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006924:	f7f9 fca8 	bl	8000278 <__aeabi_dsub>
 8006928:	4632      	mov	r2, r6
 800692a:	463b      	mov	r3, r7
 800692c:	f7f9 fe5c 	bl	80005e8 <__aeabi_dmul>
 8006930:	4b25      	ldr	r3, [pc, #148]	; (80069c8 <__ieee754_asin+0x348>)
 8006932:	2200      	movs	r2, #0
 8006934:	f7f9 fca2 	bl	800027c <__adddf3>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	4640      	mov	r0, r8
 800693e:	4649      	mov	r1, r9
 8006940:	f7f9 ff7c 	bl	800083c <__aeabi_ddiv>
 8006944:	4622      	mov	r2, r4
 8006946:	462b      	mov	r3, r5
 8006948:	f7f9 fe4e 	bl	80005e8 <__aeabi_dmul>
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4620      	mov	r0, r4
 8006952:	4629      	mov	r1, r5
 8006954:	e6bf      	b.n	80066d6 <__ieee754_asin+0x56>
 8006956:	bf00      	nop
 8006958:	54442d18 	.word	0x54442d18
 800695c:	3ff921fb 	.word	0x3ff921fb
 8006960:	33145c07 	.word	0x33145c07
 8006964:	3c91a626 	.word	0x3c91a626
 8006968:	8800759c 	.word	0x8800759c
 800696c:	7e37e43c 	.word	0x7e37e43c
 8006970:	0dfdf709 	.word	0x0dfdf709
 8006974:	3f023de1 	.word	0x3f023de1
 8006978:	7501b288 	.word	0x7501b288
 800697c:	3f49efe0 	.word	0x3f49efe0
 8006980:	b5688f3b 	.word	0xb5688f3b
 8006984:	3fa48228 	.word	0x3fa48228
 8006988:	0e884455 	.word	0x0e884455
 800698c:	3fc9c155 	.word	0x3fc9c155
 8006990:	03eb6f7d 	.word	0x03eb6f7d
 8006994:	3fd4d612 	.word	0x3fd4d612
 8006998:	55555555 	.word	0x55555555
 800699c:	3fc55555 	.word	0x3fc55555
 80069a0:	b12e9282 	.word	0xb12e9282
 80069a4:	3fb3b8c5 	.word	0x3fb3b8c5
 80069a8:	1b8d0159 	.word	0x1b8d0159
 80069ac:	3fe6066c 	.word	0x3fe6066c
 80069b0:	9c598ac8 	.word	0x9c598ac8
 80069b4:	40002ae5 	.word	0x40002ae5
 80069b8:	1c8a2d4b 	.word	0x1c8a2d4b
 80069bc:	40033a27 	.word	0x40033a27
 80069c0:	3fefffff 	.word	0x3fefffff
 80069c4:	3fdfffff 	.word	0x3fdfffff
 80069c8:	3ff00000 	.word	0x3ff00000
 80069cc:	3fe00000 	.word	0x3fe00000
 80069d0:	3fef3332 	.word	0x3fef3332
 80069d4:	ee10 2a10 	vmov	r2, s0
 80069d8:	ee10 0a10 	vmov	r0, s0
 80069dc:	465b      	mov	r3, fp
 80069de:	4659      	mov	r1, fp
 80069e0:	f7f9 fc4c 	bl	800027c <__adddf3>
 80069e4:	4632      	mov	r2, r6
 80069e6:	463b      	mov	r3, r7
 80069e8:	ec41 0b19 	vmov	d9, r0, r1
 80069ec:	ec51 0b18 	vmov	r0, r1, d8
 80069f0:	f7f9 ff24 	bl	800083c <__aeabi_ddiv>
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	ec51 0b19 	vmov	r0, r1, d9
 80069fc:	f7f9 fdf4 	bl	80005e8 <__aeabi_dmul>
 8006a00:	f04f 0800 	mov.w	r8, #0
 8006a04:	4606      	mov	r6, r0
 8006a06:	460f      	mov	r7, r1
 8006a08:	4642      	mov	r2, r8
 8006a0a:	465b      	mov	r3, fp
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	4659      	mov	r1, fp
 8006a10:	f7f9 fdea 	bl	80005e8 <__aeabi_dmul>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4620      	mov	r0, r4
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	f7f9 fc2c 	bl	8000278 <__aeabi_dsub>
 8006a20:	4642      	mov	r2, r8
 8006a22:	4604      	mov	r4, r0
 8006a24:	460d      	mov	r5, r1
 8006a26:	465b      	mov	r3, fp
 8006a28:	4650      	mov	r0, sl
 8006a2a:	4659      	mov	r1, fp
 8006a2c:	f7f9 fc26 	bl	800027c <__adddf3>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4620      	mov	r0, r4
 8006a36:	4629      	mov	r1, r5
 8006a38:	f7f9 ff00 	bl	800083c <__aeabi_ddiv>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	f7f9 fc1c 	bl	800027c <__adddf3>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	a113      	add	r1, pc, #76	; (adr r1, 8006a98 <__ieee754_asin+0x418>)
 8006a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a4e:	f7f9 fc13 	bl	8000278 <__aeabi_dsub>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4630      	mov	r0, r6
 8006a58:	4639      	mov	r1, r7
 8006a5a:	f7f9 fc0d 	bl	8000278 <__aeabi_dsub>
 8006a5e:	4642      	mov	r2, r8
 8006a60:	4604      	mov	r4, r0
 8006a62:	460d      	mov	r5, r1
 8006a64:	465b      	mov	r3, fp
 8006a66:	4640      	mov	r0, r8
 8006a68:	4659      	mov	r1, fp
 8006a6a:	f7f9 fc07 	bl	800027c <__adddf3>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	a10b      	add	r1, pc, #44	; (adr r1, 8006aa0 <__ieee754_asin+0x420>)
 8006a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a78:	f7f9 fbfe 	bl	8000278 <__aeabi_dsub>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4620      	mov	r0, r4
 8006a82:	4629      	mov	r1, r5
 8006a84:	f7f9 fbf8 	bl	8000278 <__aeabi_dsub>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	a104      	add	r1, pc, #16	; (adr r1, 8006aa0 <__ieee754_asin+0x420>)
 8006a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a92:	e6df      	b.n	8006854 <__ieee754_asin+0x1d4>
 8006a94:	f3af 8000 	nop.w
 8006a98:	33145c07 	.word	0x33145c07
 8006a9c:	3c91a626 	.word	0x3c91a626
 8006aa0:	54442d18 	.word	0x54442d18
 8006aa4:	3fe921fb 	.word	0x3fe921fb

08006aa8 <__ieee754_sqrt>:
 8006aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aac:	ec55 4b10 	vmov	r4, r5, d0
 8006ab0:	4e55      	ldr	r6, [pc, #340]	; (8006c08 <__ieee754_sqrt+0x160>)
 8006ab2:	43ae      	bics	r6, r5
 8006ab4:	ee10 0a10 	vmov	r0, s0
 8006ab8:	ee10 3a10 	vmov	r3, s0
 8006abc:	462a      	mov	r2, r5
 8006abe:	4629      	mov	r1, r5
 8006ac0:	d110      	bne.n	8006ae4 <__ieee754_sqrt+0x3c>
 8006ac2:	ee10 2a10 	vmov	r2, s0
 8006ac6:	462b      	mov	r3, r5
 8006ac8:	f7f9 fd8e 	bl	80005e8 <__aeabi_dmul>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	f7f9 fbd2 	bl	800027c <__adddf3>
 8006ad8:	4604      	mov	r4, r0
 8006ada:	460d      	mov	r5, r1
 8006adc:	ec45 4b10 	vmov	d0, r4, r5
 8006ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae4:	2d00      	cmp	r5, #0
 8006ae6:	dc10      	bgt.n	8006b0a <__ieee754_sqrt+0x62>
 8006ae8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006aec:	4330      	orrs	r0, r6
 8006aee:	d0f5      	beq.n	8006adc <__ieee754_sqrt+0x34>
 8006af0:	b15d      	cbz	r5, 8006b0a <__ieee754_sqrt+0x62>
 8006af2:	ee10 2a10 	vmov	r2, s0
 8006af6:	462b      	mov	r3, r5
 8006af8:	ee10 0a10 	vmov	r0, s0
 8006afc:	f7f9 fbbc 	bl	8000278 <__aeabi_dsub>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	f7f9 fe9a 	bl	800083c <__aeabi_ddiv>
 8006b08:	e7e6      	b.n	8006ad8 <__ieee754_sqrt+0x30>
 8006b0a:	1512      	asrs	r2, r2, #20
 8006b0c:	d074      	beq.n	8006bf8 <__ieee754_sqrt+0x150>
 8006b0e:	07d4      	lsls	r4, r2, #31
 8006b10:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006b14:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006b18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006b1c:	bf5e      	ittt	pl
 8006b1e:	0fda      	lsrpl	r2, r3, #31
 8006b20:	005b      	lslpl	r3, r3, #1
 8006b22:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006b26:	2400      	movs	r4, #0
 8006b28:	0fda      	lsrs	r2, r3, #31
 8006b2a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006b2e:	107f      	asrs	r7, r7, #1
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	2516      	movs	r5, #22
 8006b34:	4620      	mov	r0, r4
 8006b36:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006b3a:	1886      	adds	r6, r0, r2
 8006b3c:	428e      	cmp	r6, r1
 8006b3e:	bfde      	ittt	le
 8006b40:	1b89      	suble	r1, r1, r6
 8006b42:	18b0      	addle	r0, r6, r2
 8006b44:	18a4      	addle	r4, r4, r2
 8006b46:	0049      	lsls	r1, r1, #1
 8006b48:	3d01      	subs	r5, #1
 8006b4a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006b4e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006b52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006b56:	d1f0      	bne.n	8006b3a <__ieee754_sqrt+0x92>
 8006b58:	462a      	mov	r2, r5
 8006b5a:	f04f 0e20 	mov.w	lr, #32
 8006b5e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006b62:	4281      	cmp	r1, r0
 8006b64:	eb06 0c05 	add.w	ip, r6, r5
 8006b68:	dc02      	bgt.n	8006b70 <__ieee754_sqrt+0xc8>
 8006b6a:	d113      	bne.n	8006b94 <__ieee754_sqrt+0xec>
 8006b6c:	459c      	cmp	ip, r3
 8006b6e:	d811      	bhi.n	8006b94 <__ieee754_sqrt+0xec>
 8006b70:	f1bc 0f00 	cmp.w	ip, #0
 8006b74:	eb0c 0506 	add.w	r5, ip, r6
 8006b78:	da43      	bge.n	8006c02 <__ieee754_sqrt+0x15a>
 8006b7a:	2d00      	cmp	r5, #0
 8006b7c:	db41      	blt.n	8006c02 <__ieee754_sqrt+0x15a>
 8006b7e:	f100 0801 	add.w	r8, r0, #1
 8006b82:	1a09      	subs	r1, r1, r0
 8006b84:	459c      	cmp	ip, r3
 8006b86:	bf88      	it	hi
 8006b88:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8006b8c:	eba3 030c 	sub.w	r3, r3, ip
 8006b90:	4432      	add	r2, r6
 8006b92:	4640      	mov	r0, r8
 8006b94:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006b98:	f1be 0e01 	subs.w	lr, lr, #1
 8006b9c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006ba4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006ba8:	d1db      	bne.n	8006b62 <__ieee754_sqrt+0xba>
 8006baa:	430b      	orrs	r3, r1
 8006bac:	d006      	beq.n	8006bbc <__ieee754_sqrt+0x114>
 8006bae:	1c50      	adds	r0, r2, #1
 8006bb0:	bf13      	iteet	ne
 8006bb2:	3201      	addne	r2, #1
 8006bb4:	3401      	addeq	r4, #1
 8006bb6:	4672      	moveq	r2, lr
 8006bb8:	f022 0201 	bicne.w	r2, r2, #1
 8006bbc:	1063      	asrs	r3, r4, #1
 8006bbe:	0852      	lsrs	r2, r2, #1
 8006bc0:	07e1      	lsls	r1, r4, #31
 8006bc2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006bc6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006bca:	bf48      	it	mi
 8006bcc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006bd0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006bd4:	4614      	mov	r4, r2
 8006bd6:	e781      	b.n	8006adc <__ieee754_sqrt+0x34>
 8006bd8:	0ad9      	lsrs	r1, r3, #11
 8006bda:	3815      	subs	r0, #21
 8006bdc:	055b      	lsls	r3, r3, #21
 8006bde:	2900      	cmp	r1, #0
 8006be0:	d0fa      	beq.n	8006bd8 <__ieee754_sqrt+0x130>
 8006be2:	02cd      	lsls	r5, r1, #11
 8006be4:	d50a      	bpl.n	8006bfc <__ieee754_sqrt+0x154>
 8006be6:	f1c2 0420 	rsb	r4, r2, #32
 8006bea:	fa23 f404 	lsr.w	r4, r3, r4
 8006bee:	1e55      	subs	r5, r2, #1
 8006bf0:	4093      	lsls	r3, r2
 8006bf2:	4321      	orrs	r1, r4
 8006bf4:	1b42      	subs	r2, r0, r5
 8006bf6:	e78a      	b.n	8006b0e <__ieee754_sqrt+0x66>
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	e7f0      	b.n	8006bde <__ieee754_sqrt+0x136>
 8006bfc:	0049      	lsls	r1, r1, #1
 8006bfe:	3201      	adds	r2, #1
 8006c00:	e7ef      	b.n	8006be2 <__ieee754_sqrt+0x13a>
 8006c02:	4680      	mov	r8, r0
 8006c04:	e7bd      	b.n	8006b82 <__ieee754_sqrt+0xda>
 8006c06:	bf00      	nop
 8006c08:	7ff00000 	.word	0x7ff00000
 8006c0c:	00000000 	.word	0x00000000

08006c10 <nan>:
 8006c10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006c18 <nan+0x8>
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	00000000 	.word	0x00000000
 8006c1c:	7ff80000 	.word	0x7ff80000

08006c20 <_init>:
 8006c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c22:	bf00      	nop
 8006c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c26:	bc08      	pop	{r3}
 8006c28:	469e      	mov	lr, r3
 8006c2a:	4770      	bx	lr

08006c2c <_fini>:
 8006c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2e:	bf00      	nop
 8006c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c32:	bc08      	pop	{r3}
 8006c34:	469e      	mov	lr, r3
 8006c36:	4770      	bx	lr
