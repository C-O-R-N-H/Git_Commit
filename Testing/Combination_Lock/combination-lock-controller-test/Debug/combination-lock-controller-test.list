
combination-lock-controller-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d08  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005e90  08005e90  00015e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f04  08005f04  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08005f04  08005f04  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f04  08005f04  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f04  08005f04  00015f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f08  08005f08  00015f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08005f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
 10 .bss          00000438  200000b0  200000b0  000200b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004e8  200004e8  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014439  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b04  00000000  00000000  00034519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  00037020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001098  00000000  00000000  000381f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f748  00000000  00000000  00039290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d2c  00000000  00000000  000589d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba36a  00000000  00000000  0006f704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00129a6e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ee4  00000000  00000000  00129ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b0 	.word	0x200000b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e78 	.word	0x08005e78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b4 	.word	0x200000b4
 80001c4:	08005e78 	.word	0x08005e78

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <stm_accel_init>:
#include "accelerometer.h"
#include "LSM303DLHC_definitions.h"


void stm_accel_init(I2C_HandleTypeDef *i2c)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af04      	add	r7, sp, #16
 8000af6:	6078      	str	r0, [r7, #4]
	// Set the sampling rate
	uint8_t reg_1 = CTRL_REG1_A_LOW_POWER_MODE_100_HZ | CTRL_REG1_A_Xen | CTRL_REG1_A_Yen | CTRL_REG1_A_Zen;
 8000af8:	2357      	movs	r3, #87	; 0x57
 8000afa:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, accel_wr, LSM303DLHC_CTRL_REG1_A, 1, &reg_1, 1, 10);
 8000afc:	230a      	movs	r3, #10
 8000afe:	9302      	str	r3, [sp, #8]
 8000b00:	2301      	movs	r3, #1
 8000b02:	9301      	str	r3, [sp, #4]
 8000b04:	f107 030f 	add.w	r3, r7, #15
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	2220      	movs	r2, #32
 8000b0e:	2132      	movs	r1, #50	; 0x32
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f001 fc65 	bl	80023e0 <HAL_I2C_Mem_Write>

//	// Enable block data update: output registers only updated once read
//	// Enable high-resolution output
//	uint8_t reg_4 = CTRL_REG4_A_BDU | CTRL_REG4_A_HR;
//	HAL_I2C_Mem_Write(i2c, accel_wr, LSM303DLHC_CTRL_REG4_A, 1, &reg_4, 1, 10);
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <find_zero_errors>:


void find_zero_errors(I2C_HandleTypeDef *i2c, int16_t *zero_errors)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b08a      	sub	sp, #40	; 0x28
 8000b22:	af02      	add	r7, sp, #8
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]

	const uint16_t n_samples = 400;
 8000b28:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b2c:	823b      	strh	r3, [r7, #16]
	const int16_t G = 16384;
 8000b2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b32:	81fb      	strh	r3, [r7, #14]

	int32_t sum_x = 0, sum_y = 0, sum_z = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
	int16_t accel_x, accel_y, accel_z;
	for (uint16_t i = 0; i < n_samples; i++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	827b      	strh	r3, [r7, #18]
 8000b44:	e023      	b.n	8000b8e <find_zero_errors+0x70>
	{
		read_stm_accel_data(i2c, &accel_x, &accel_y, &accel_z, zero_errors);
 8000b46:	f107 0008 	add.w	r0, r7, #8
 8000b4a:	f107 020a 	add.w	r2, r7, #10
 8000b4e:	f107 010c 	add.w	r1, r7, #12
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	4603      	mov	r3, r0
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 f83d 	bl	8000bd8 <read_stm_accel_data>
		sum_x += accel_x;
 8000b5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b62:	461a      	mov	r2, r3
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	4413      	add	r3, r2
 8000b68:	61fb      	str	r3, [r7, #28]
		sum_y += accel_y;
 8000b6a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	4413      	add	r3, r2
 8000b74:	61bb      	str	r3, [r7, #24]
		sum_z += accel_z - G;
 8000b76:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	4413      	add	r3, r2
 8000b86:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 0; i < n_samples; i++)
 8000b88:	8a7b      	ldrh	r3, [r7, #18]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	827b      	strh	r3, [r7, #18]
 8000b8e:	8a7a      	ldrh	r2, [r7, #18]
 8000b90:	8a3b      	ldrh	r3, [r7, #16]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d3d7      	bcc.n	8000b46 <find_zero_errors+0x28>
	}

	zero_errors[0] = (int16_t)(sum_x / (int16_t)n_samples);
 8000b96:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8000ba2:	b21a      	sxth	r2, r3
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	801a      	strh	r2, [r3, #0]
	zero_errors[1] = (int16_t)(sum_y / (int16_t)n_samples);
 8000ba8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000bac:	461a      	mov	r2, r3
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	fb93 f2f2 	sdiv	r2, r3, r2
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	b212      	sxth	r2, r2
 8000bba:	801a      	strh	r2, [r3, #0]
	zero_errors[2] = (int16_t)(sum_z / (int16_t)n_samples);
 8000bbc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	fb93 f2f2 	sdiv	r2, r3, r2
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	3304      	adds	r3, #4
 8000bcc:	b212      	sxth	r2, r2
 8000bce:	801a      	strh	r2, [r3, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <read_stm_accel_data>:


void read_stm_accel_data(I2C_HandleTypeDef *i2c, int16_t *accel_x, int16_t *accel_y, int16_t *accel_z, int16_t *zero_errors)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af04      	add	r7, sp, #16
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	603b      	str	r3, [r7, #0]
	// Initialise windows for filtering
	static Window window_x, window_y, window_z;
	static bool windows_initialised = false;
	if (!windows_initialised)
 8000be6:	4b63      	ldr	r3, [pc, #396]	; (8000d74 <read_stm_accel_data+0x19c>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	f083 0301 	eor.w	r3, r3, #1
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d00b      	beq.n	8000c0c <read_stm_accel_data+0x34>
	{
		window_init(&window_x);
 8000bf4:	4860      	ldr	r0, [pc, #384]	; (8000d78 <read_stm_accel_data+0x1a0>)
 8000bf6:	f000 f9f7 	bl	8000fe8 <window_init>
		window_init(&window_y);
 8000bfa:	4860      	ldr	r0, [pc, #384]	; (8000d7c <read_stm_accel_data+0x1a4>)
 8000bfc:	f000 f9f4 	bl	8000fe8 <window_init>
		window_init(&window_z);
 8000c00:	485f      	ldr	r0, [pc, #380]	; (8000d80 <read_stm_accel_data+0x1a8>)
 8000c02:	f000 f9f1 	bl	8000fe8 <window_init>
		windows_initialised = true;
 8000c06:	4b5b      	ldr	r3, [pc, #364]	; (8000d74 <read_stm_accel_data+0x19c>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
	}

	// Read acceleration in the x-axis
	uint8_t accel_x_MSB = 0x00;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Read(i2c, accel_rd, OUT_X_H_A, 1, &accel_x_MSB, 1, 10);
 8000c10:	230a      	movs	r3, #10
 8000c12:	9302      	str	r3, [sp, #8]
 8000c14:	2301      	movs	r3, #1
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	f107 0317 	add.w	r3, r7, #23
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	2229      	movs	r2, #41	; 0x29
 8000c22:	2133      	movs	r1, #51	; 0x33
 8000c24:	68f8      	ldr	r0, [r7, #12]
 8000c26:	f001 fcef 	bl	8002608 <HAL_I2C_Mem_Read>
	uint8_t accel_x_LSB = 0x00;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Mem_Read(i2c, accel_rd, OUT_X_L_A, 1, &accel_x_LSB, 1, 10);
 8000c2e:	230a      	movs	r3, #10
 8000c30:	9302      	str	r3, [sp, #8]
 8000c32:	2301      	movs	r3, #1
 8000c34:	9301      	str	r3, [sp, #4]
 8000c36:	f107 0316 	add.w	r3, r7, #22
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	2228      	movs	r2, #40	; 0x28
 8000c40:	2133      	movs	r1, #51	; 0x33
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f001 fce0 	bl	8002608 <HAL_I2C_Mem_Read>
	*accel_x = ((accel_x_MSB << 8) | accel_x_LSB) - zero_errors[0];
 8000c48:	7dfb      	ldrb	r3, [r7, #23]
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	7dbb      	ldrb	r3, [r7, #22]
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	6a3b      	ldr	r3, [r7, #32]
 8000c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	b21a      	sxth	r2, r3
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	801a      	strh	r2, [r3, #0]

	// Read acceleration in the y-axis
	uint8_t accel_y_MSB = 0x00;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Read(i2c, accel_rd, OUT_Y_H_A, 1, &accel_y_MSB, 1, 10);
 8000c6e:	230a      	movs	r3, #10
 8000c70:	9302      	str	r3, [sp, #8]
 8000c72:	2301      	movs	r3, #1
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	f107 0315 	add.w	r3, r7, #21
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	222b      	movs	r2, #43	; 0x2b
 8000c80:	2133      	movs	r1, #51	; 0x33
 8000c82:	68f8      	ldr	r0, [r7, #12]
 8000c84:	f001 fcc0 	bl	8002608 <HAL_I2C_Mem_Read>
	uint8_t accel_y_LSB = 0x00;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Mem_Read(i2c, accel_rd, OUT_Y_L_A, 1, &accel_y_LSB, 1, 10);
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	9302      	str	r3, [sp, #8]
 8000c90:	2301      	movs	r3, #1
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	222a      	movs	r2, #42	; 0x2a
 8000c9e:	2133      	movs	r1, #51	; 0x33
 8000ca0:	68f8      	ldr	r0, [r7, #12]
 8000ca2:	f001 fcb1 	bl	8002608 <HAL_I2C_Mem_Read>
	*accel_y = ((accel_y_MSB << 8) | accel_y_LSB) - zero_errors[1];
 8000ca6:	7d7b      	ldrb	r3, [r7, #21]
 8000ca8:	021b      	lsls	r3, r3, #8
 8000caa:	b21a      	sxth	r2, r3
 8000cac:	7d3b      	ldrb	r3, [r7, #20]
 8000cae:	b21b      	sxth	r3, r3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	3302      	adds	r3, #2
 8000cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	801a      	strh	r2, [r3, #0]

	// Read acceleration in the z-axis
	uint8_t accel_z_MSB = 0x00;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	74fb      	strb	r3, [r7, #19]
	HAL_I2C_Mem_Read(i2c, accel_rd, OUT_Z_H_A, 1, &accel_z_MSB, 1, 10);
 8000cce:	230a      	movs	r3, #10
 8000cd0:	9302      	str	r3, [sp, #8]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	f107 0313 	add.w	r3, r7, #19
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2301      	movs	r3, #1
 8000cde:	222d      	movs	r2, #45	; 0x2d
 8000ce0:	2133      	movs	r1, #51	; 0x33
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f001 fc90 	bl	8002608 <HAL_I2C_Mem_Read>
	uint8_t accel_z_LSB = 0x00;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Mem_Read(i2c, accel_rd, OUT_Z_L_A, 1, &accel_z_LSB, 1, 10);
 8000cec:	230a      	movs	r3, #10
 8000cee:	9302      	str	r3, [sp, #8]
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	f107 0312 	add.w	r3, r7, #18
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	222c      	movs	r2, #44	; 0x2c
 8000cfe:	2133      	movs	r1, #51	; 0x33
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f001 fc81 	bl	8002608 <HAL_I2C_Mem_Read>
	*accel_z = ((accel_z_MSB << 8) | accel_z_LSB) - zero_errors[2];
 8000d06:	7cfb      	ldrb	r3, [r7, #19]
 8000d08:	021b      	lsls	r3, r3, #8
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	7cbb      	ldrb	r3, [r7, #18]
 8000d0e:	b21b      	sxth	r3, r3
 8000d10:	4313      	orrs	r3, r2
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	6a3b      	ldr	r3, [r7, #32]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	b21a      	sxth	r2, r3
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	801a      	strh	r2, [r3, #0]

	// Compute moving average of data
	*accel_x = moving_average(&window_x, *accel_x);
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d30:	4619      	mov	r1, r3
 8000d32:	4811      	ldr	r0, [pc, #68]	; (8000d78 <read_stm_accel_data+0x1a0>)
 8000d34:	f000 f96c 	bl	8001010 <moving_average>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	801a      	strh	r2, [r3, #0]
	*accel_y = moving_average(&window_y, *accel_y);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d46:	4619      	mov	r1, r3
 8000d48:	480c      	ldr	r0, [pc, #48]	; (8000d7c <read_stm_accel_data+0x1a4>)
 8000d4a:	f000 f961 	bl	8001010 <moving_average>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	461a      	mov	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	801a      	strh	r2, [r3, #0]
	*accel_z = moving_average(&window_z, *accel_z);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4808      	ldr	r0, [pc, #32]	; (8000d80 <read_stm_accel_data+0x1a8>)
 8000d60:	f000 f956 	bl	8001010 <moving_average>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	801a      	strh	r2, [r3, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200000cc 	.word	0x200000cc
 8000d78:	200000d0 	.word	0x200000d0
 8000d7c:	200000dc 	.word	0x200000dc
 8000d80:	200000e8 	.word	0x200000e8
 8000d84:	00000000 	.word	0x00000000

08000d88 <get_orientation>:


bool get_orientation(int16_t accel_x, int16_t accel_y, int16_t accel_z, int8_t *pitch, int8_t *roll)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	4603      	mov	r3, r0
 8000d92:	81fb      	strh	r3, [r7, #14]
 8000d94:	460b      	mov	r3, r1
 8000d96:	81bb      	strh	r3, [r7, #12]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	817b      	strh	r3, [r7, #10]
	const float G = 16384;  // (2^16 / 4) since the full-scale of 16 bits is +/- 2g
 8000d9c:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8000da0:	617b      	str	r3, [r7, #20]
	const int16_t valid_threshold = 5000;
 8000da2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000da6:	827b      	strh	r3, [r7, #18]

	*pitch = (int8_t)(atan((float)accel_y / (float)accel_z) * (180 / M_PI));  // pitch from horizontal in degrees
 8000da8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dac:	ee07 3a90 	vmov	s15, r3
 8000db0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000db4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000dc4:	ee16 0a90 	vmov	r0, s13
 8000dc8:	f7ff fb62 	bl	8000490 <__aeabi_f2d>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	ec43 2b10 	vmov	d0, r2, r3
 8000dd4:	f004 fba0 	bl	8005518 <atan>
 8000dd8:	ec51 0b10 	vmov	r0, r1, d0
 8000ddc:	a320      	add	r3, pc, #128	; (adr r3, 8000e60 <get_orientation+0xd8>)
 8000dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de2:	f7ff fbad 	bl	8000540 <__aeabi_dmul>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	4610      	mov	r0, r2
 8000dec:	4619      	mov	r1, r3
 8000dee:	f7ff fe57 	bl	8000aa0 <__aeabi_d2iz>
 8000df2:	4603      	mov	r3, r0
 8000df4:	b25a      	sxtb	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	701a      	strb	r2, [r3, #0]
	*roll = (int8_t)(asin((float)accel_x / G) * (180 / M_PI));  // roll from horizontal in degrees
 8000dfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dfe:	ee07 3a90 	vmov	s15, r3
 8000e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e06:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e0e:	ee16 0a90 	vmov	r0, s13
 8000e12:	f7ff fb3d 	bl	8000490 <__aeabi_f2d>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	ec43 2b10 	vmov	d0, r2, r3
 8000e1e:	f004 fd25 	bl	800586c <asin>
 8000e22:	ec51 0b10 	vmov	r0, r1, d0
 8000e26:	a30e      	add	r3, pc, #56	; (adr r3, 8000e60 <get_orientation+0xd8>)
 8000e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2c:	f7ff fb88 	bl	8000540 <__aeabi_dmul>
 8000e30:	4602      	mov	r2, r0
 8000e32:	460b      	mov	r3, r1
 8000e34:	4610      	mov	r0, r2
 8000e36:	4619      	mov	r1, r3
 8000e38:	f7ff fe32 	bl	8000aa0 <__aeabi_d2iz>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	b25a      	sxtb	r2, r3
 8000e40:	6a3b      	ldr	r3, [r7, #32]
 8000e42:	701a      	strb	r2, [r3, #0]

	return accel_z >= valid_threshold ? true : false;  // If accel_z < threshold then STM is nearly upside down so data is invalid
 8000e44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000e48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	bfac      	ite	ge
 8000e50:	2301      	movge	r3, #1
 8000e52:	2300      	movlt	r3, #0
 8000e54:	b2db      	uxtb	r3, r3
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	1a63c1f8 	.word	0x1a63c1f8
 8000e64:	404ca5dc 	.word	0x404ca5dc

08000e68 <get_velocity>:


void get_velocity(int8_t pitch, int8_t roll, int8_t *ptu_vel_pitch, int8_t *ptu_vel_yaw)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60ba      	str	r2, [r7, #8]
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	4603      	mov	r3, r0
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	460b      	mov	r3, r1
 8000e78:	73bb      	strb	r3, [r7, #14]
	*ptu_vel_pitch = calculate_velocity(pitch);
 8000e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f811 	bl	8000ea6 <calculate_velocity>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	701a      	strb	r2, [r3, #0]
	*ptu_vel_yaw = calculate_velocity(roll);
 8000e8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 f808 	bl	8000ea6 <calculate_velocity>
 8000e96:	4603      	mov	r3, r0
 8000e98:	461a      	mov	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	701a      	strb	r2, [r3, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <calculate_velocity>:


int8_t calculate_velocity(int8_t angle)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b087      	sub	sp, #28
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	71fb      	strb	r3, [r7, #7]
	int8_t sign = angle >= 0 ? 1 : -1;
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db01      	blt.n	8000ebc <calculate_velocity+0x16>
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e001      	b.n	8000ec0 <calculate_velocity+0x1a>
 8000ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec0:	75bb      	strb	r3, [r7, #22]
	int8_t return_vel = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	75fb      	strb	r3, [r7, #23]

	const int8_t threshold_1 = 6;
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	757b      	strb	r3, [r7, #21]
	const int8_t threshold_2 = 12;
 8000eca:	230c      	movs	r3, #12
 8000ecc:	753b      	strb	r3, [r7, #20]
	const int8_t threshold_3 = 20;
 8000ece:	2314      	movs	r3, #20
 8000ed0:	74fb      	strb	r3, [r7, #19]
	const int8_t threshold_4 = 29;
 8000ed2:	231d      	movs	r3, #29
 8000ed4:	74bb      	strb	r3, [r7, #18]
	const int8_t threshold_5 = 40;
 8000ed6:	2328      	movs	r3, #40	; 0x28
 8000ed8:	747b      	strb	r3, [r7, #17]

	const int8_t vel_1 = 1;
 8000eda:	2301      	movs	r3, #1
 8000edc:	743b      	strb	r3, [r7, #16]
	const int8_t vel_2 = 2;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	73fb      	strb	r3, [r7, #15]
	const int8_t vel_3 = 3;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	73bb      	strb	r3, [r7, #14]
	const int8_t vel_4 = 6;
 8000ee6:	2306      	movs	r3, #6
 8000ee8:	737b      	strb	r3, [r7, #13]
	const int8_t vel_5 = 12;
 8000eea:	230c      	movs	r3, #12
 8000eec:	733b      	strb	r3, [r7, #12]

	if ((abs(angle) >= threshold_1) && (abs(angle) < threshold_2))
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	bfb8      	it	lt
 8000ef6:	425b      	neglt	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	461a      	mov	r2, r3
 8000efc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	db0d      	blt.n	8000f20 <calculate_velocity+0x7a>
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bfb8      	it	lt
 8000f0c:	425b      	neglt	r3, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	461a      	mov	r2, r3
 8000f12:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	da02      	bge.n	8000f20 <calculate_velocity+0x7a>
	{
		return_vel = vel_1;
 8000f1a:	7c3b      	ldrb	r3, [r7, #16]
 8000f1c:	75fb      	strb	r3, [r7, #23]
 8000f1e:	e057      	b.n	8000fd0 <calculate_velocity+0x12a>
	}
	else if ((abs(angle) >= threshold_2) && (abs(angle) < threshold_3))
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	bfb8      	it	lt
 8000f28:	425b      	neglt	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	db0d      	blt.n	8000f52 <calculate_velocity+0xac>
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	bfb8      	it	lt
 8000f3e:	425b      	neglt	r3, r3
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	461a      	mov	r2, r3
 8000f44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	da02      	bge.n	8000f52 <calculate_velocity+0xac>
	{
		return_vel = vel_2;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	75fb      	strb	r3, [r7, #23]
 8000f50:	e03e      	b.n	8000fd0 <calculate_velocity+0x12a>
	}
	else if ((abs(angle) >= threshold_3) && (abs(angle) < threshold_4))
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	bfb8      	it	lt
 8000f5a:	425b      	neglt	r3, r3
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	db0d      	blt.n	8000f84 <calculate_velocity+0xde>
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bfb8      	it	lt
 8000f70:	425b      	neglt	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	461a      	mov	r2, r3
 8000f76:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	da02      	bge.n	8000f84 <calculate_velocity+0xde>
	{
		return_vel = vel_3;
 8000f7e:	7bbb      	ldrb	r3, [r7, #14]
 8000f80:	75fb      	strb	r3, [r7, #23]
 8000f82:	e025      	b.n	8000fd0 <calculate_velocity+0x12a>
	}
	else if ((abs(angle) >= threshold_4) && (abs(angle) < threshold_5))
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	bfb8      	it	lt
 8000f8c:	425b      	neglt	r3, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	db0d      	blt.n	8000fb6 <calculate_velocity+0x110>
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	bfb8      	it	lt
 8000fa2:	425b      	neglt	r3, r3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	da02      	bge.n	8000fb6 <calculate_velocity+0x110>
	{
		return_vel = vel_4;
 8000fb0:	7b7b      	ldrb	r3, [r7, #13]
 8000fb2:	75fb      	strb	r3, [r7, #23]
 8000fb4:	e00c      	b.n	8000fd0 <calculate_velocity+0x12a>
	}
	else if (abs(angle) >= threshold_5)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	bfb8      	it	lt
 8000fbe:	425b      	neglt	r3, r3
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	db01      	blt.n	8000fd0 <calculate_velocity+0x12a>
	{
		return_vel = vel_5;
 8000fcc:	7b3b      	ldrb	r3, [r7, #12]
 8000fce:	75fb      	strb	r3, [r7, #23]
	}

	return return_vel * sign;
 8000fd0:	7dfa      	ldrb	r2, [r7, #23]
 8000fd2:	7dbb      	ldrb	r3, [r7, #22]
 8000fd4:	fb12 f303 	smulbb	r3, r2, r3
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	b25b      	sxtb	r3, r3
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	371c      	adds	r7, #28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <window_init>:

#include "filter.h"


void window_init(Window *window)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	window->idx = 0;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	729a      	strb	r2, [r3, #10]
	window->is_full = false;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	72da      	strb	r2, [r3, #11]
	memset(window->arr, 0, WINDOW_SIZE * sizeof(int16_t));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	220a      	movs	r2, #10
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f004 fa80 	bl	8005508 <memset>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <moving_average>:


int16_t moving_average(Window *window, int16_t new_value)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
	update_window(window, new_value);
 800101c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001020:	4619      	mov	r1, r3
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f808 	bl	8001038 <update_window>
	return mean(window);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f831 	bl	8001090 <mean>
 800102e:	4603      	mov	r3, r0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <update_window>:


void update_window(Window *window, int16_t new_value)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
	if (window->idx == WINDOW_SIZE - 1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7a9b      	ldrb	r3, [r3, #10]
 8001048:	2b04      	cmp	r3, #4
 800104a:	d102      	bne.n	8001052 <update_window+0x1a>
	{
		window->is_full = true;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	72da      	strb	r2, [r3, #11]
	}

	window->arr[window->idx] = new_value;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7a9b      	ldrb	r3, [r3, #10]
 8001056:	4619      	mov	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	window->idx = (window->idx + 1) % WINDOW_SIZE;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7a9b      	ldrb	r3, [r3, #10]
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <update_window+0x54>)
 8001068:	fb83 1302 	smull	r1, r3, r3, r2
 800106c:	1059      	asrs	r1, r3, #1
 800106e:	17d3      	asrs	r3, r2, #31
 8001070:	1ac9      	subs	r1, r1, r3
 8001072:	460b      	mov	r3, r1
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	1ad1      	subs	r1, r2, r3
 800107a:	b2ca      	uxtb	r2, r1
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	729a      	strb	r2, [r3, #10]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	66666667 	.word	0x66666667

08001090 <mean>:


int16_t mean(Window *window)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	int32_t sum = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < WINDOW_SIZE; i++)
 800109c:	2300      	movs	r3, #0
 800109e:	72fb      	strb	r3, [r7, #11]
 80010a0:	e00a      	b.n	80010b8 <mean+0x28>
	{
		sum += window->arr[i];
 80010a2:	7afa      	ldrb	r2, [r7, #11]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < WINDOW_SIZE; i++)
 80010b2:	7afb      	ldrb	r3, [r7, #11]
 80010b4:	3301      	adds	r3, #1
 80010b6:	72fb      	strb	r3, [r7, #11]
 80010b8:	7afb      	ldrb	r3, [r7, #11]
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d9f1      	bls.n	80010a2 <mean+0x12>
	}

	int8_t n_samples = window->is_full ? WINDOW_SIZE : window->idx;  // If the window is not yet full,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7adb      	ldrb	r3, [r3, #11]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <mean+0x3a>
 80010c6:	2305      	movs	r3, #5
 80010c8:	e002      	b.n	80010d0 <mean+0x40>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7a9b      	ldrb	r3, [r3, #10]
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	72bb      	strb	r3, [r7, #10]
																	 // the number of samples is the idx

	return sum / n_samples;  // Error associated with integer division is negligible
 80010d2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80010dc:	b21b      	sxth	r3, r3
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <enable_clocks>:
#include "led.h"
#include "stm32f303xc.h"


void enable_clocks()
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	// Enable the clocks for GPIOA, C, and E
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <enable_clocks+0x1c>)
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <enable_clocks+0x1c>)
 80010f6:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80010fa:	6153      	str	r3, [r2, #20]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000

0800110c <initialise_board>:


void initialise_board()
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
	// Get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_mode_register = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <initialise_board+0x20>)
 8001114:	607b      	str	r3, [r7, #4]
	*led_mode_register = 0x5555;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f245 5255 	movw	r2, #21845	; 0x5555
 800111c:	801a      	strh	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	48001002 	.word	0x48001002

08001130 <show_orientation_led>:


void show_orientation_led(int8_t pitch, int8_t roll, int8_t sensitivity)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	460b      	mov	r3, r1
 800113c:	71bb      	strb	r3, [r7, #6]
 800113e:	4613      	mov	r3, r2
 8001140:	717b      	strb	r3, [r7, #5]
	LEDRegister *led_register = (LEDRegister *)(((uint8_t *)&(GPIOE->ODR)) + 1);
 8001142:	4b5a      	ldr	r3, [pc, #360]	; (80012ac <show_orientation_led+0x17c>)
 8001144:	60fb      	str	r3, [r7, #12]
	led_register->all_leds = 0;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]

	if (pitch < -1 * sensitivity && abs(roll) < sensitivity)
 800114c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001150:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001154:	425b      	negs	r3, r3
 8001156:	429a      	cmp	r2, r3
 8001158:	da10      	bge.n	800117c <show_orientation_led+0x4c>
 800115a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800115e:	2b00      	cmp	r3, #0
 8001160:	bfb8      	it	lt
 8001162:	425b      	neglt	r3, r3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	461a      	mov	r2, r3
 8001168:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800116c:	429a      	cmp	r2, r3
 800116e:	da05      	bge.n	800117c <show_orientation_led+0x4c>
	{
		led_register->direction.north = 1;
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	7813      	ldrb	r3, [r2, #0]
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	7013      	strb	r3, [r2, #0]
 800117a:	e091      	b.n	80012a0 <show_orientation_led+0x170>
	}
	else if (pitch > sensitivity && abs(roll) < sensitivity)
 800117c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001180:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001184:	429a      	cmp	r2, r3
 8001186:	dd10      	ble.n	80011aa <show_orientation_led+0x7a>
 8001188:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800118c:	2b00      	cmp	r3, #0
 800118e:	bfb8      	it	lt
 8001190:	425b      	neglt	r3, r3
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800119a:	429a      	cmp	r2, r3
 800119c:	da05      	bge.n	80011aa <show_orientation_led+0x7a>
	{
		led_register->direction.south = 1;
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	7813      	ldrb	r3, [r2, #0]
 80011a2:	f043 0320 	orr.w	r3, r3, #32
 80011a6:	7013      	strb	r3, [r2, #0]
 80011a8:	e07a      	b.n	80012a0 <show_orientation_led+0x170>
	}
	else if (roll < -1 * sensitivity && abs(pitch) < sensitivity)
 80011aa:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80011ae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011b2:	425b      	negs	r3, r3
 80011b4:	429a      	cmp	r2, r3
 80011b6:	da10      	bge.n	80011da <show_orientation_led+0xaa>
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bfb8      	it	lt
 80011c0:	425b      	neglt	r3, r3
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	461a      	mov	r2, r3
 80011c6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	da05      	bge.n	80011da <show_orientation_led+0xaa>
	{
		led_register->direction.west = 1;
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	7813      	ldrb	r3, [r2, #0]
 80011d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d6:	7013      	strb	r3, [r2, #0]
 80011d8:	e062      	b.n	80012a0 <show_orientation_led+0x170>
	}
	else if (roll > sensitivity && abs(pitch) < sensitivity)
 80011da:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80011de:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	dd10      	ble.n	8001208 <show_orientation_led+0xd8>
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bfb8      	it	lt
 80011ee:	425b      	neglt	r3, r3
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	da05      	bge.n	8001208 <show_orientation_led+0xd8>
	{
		led_register->direction.east = 1;
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	7813      	ldrb	r3, [r2, #0]
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	7013      	strb	r3, [r2, #0]
 8001206:	e04b      	b.n	80012a0 <show_orientation_led+0x170>
	}
	else if (pitch < -1 * sensitivity && roll < -1 * sensitivity)
 8001208:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800120c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001210:	425b      	negs	r3, r3
 8001212:	429a      	cmp	r2, r3
 8001214:	da0c      	bge.n	8001230 <show_orientation_led+0x100>
 8001216:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800121a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800121e:	425b      	negs	r3, r3
 8001220:	429a      	cmp	r2, r3
 8001222:	da05      	bge.n	8001230 <show_orientation_led+0x100>
	{
		led_register->direction.northwest = 1;
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	7813      	ldrb	r3, [r2, #0]
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	7013      	strb	r3, [r2, #0]
 800122e:	e037      	b.n	80012a0 <show_orientation_led+0x170>
	}
	else if (pitch < -1 * sensitivity && roll > sensitivity)
 8001230:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001234:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001238:	425b      	negs	r3, r3
 800123a:	429a      	cmp	r2, r3
 800123c:	da0b      	bge.n	8001256 <show_orientation_led+0x126>
 800123e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001242:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001246:	429a      	cmp	r2, r3
 8001248:	dd05      	ble.n	8001256 <show_orientation_led+0x126>
	{
		led_register->direction.northeast = 1;
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	7813      	ldrb	r3, [r2, #0]
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	7013      	strb	r3, [r2, #0]
 8001254:	e024      	b.n	80012a0 <show_orientation_led+0x170>
	}
	else if (pitch > sensitivity && roll > sensitivity)
 8001256:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800125a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800125e:	429a      	cmp	r2, r3
 8001260:	dd0b      	ble.n	800127a <show_orientation_led+0x14a>
 8001262:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001266:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800126a:	429a      	cmp	r2, r3
 800126c:	dd05      	ble.n	800127a <show_orientation_led+0x14a>
	{
		led_register->direction.southeast = 1;
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	7813      	ldrb	r3, [r2, #0]
 8001272:	f043 0310 	orr.w	r3, r3, #16
 8001276:	7013      	strb	r3, [r2, #0]
 8001278:	e012      	b.n	80012a0 <show_orientation_led+0x170>
	}
	else if (pitch > sensitivity && roll < -1 * sensitivity)
 800127a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800127e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001282:	429a      	cmp	r2, r3
 8001284:	dd0c      	ble.n	80012a0 <show_orientation_led+0x170>
 8001286:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800128a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800128e:	425b      	negs	r3, r3
 8001290:	429a      	cmp	r2, r3
 8001292:	da05      	bge.n	80012a0 <show_orientation_led+0x170>
	{
		led_register->direction.southwest = 1;
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	7813      	ldrb	r3, [r2, #0]
 8001298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800129c:	7013      	strb	r3, [r2, #0]
	}
}
 800129e:	e7ff      	b.n	80012a0 <show_orientation_led+0x170>
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	48001015 	.word	0x48001015

080012b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b08d      	sub	sp, #52	; 0x34
 80012b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b6:	f000 fd01 	bl	8001cbc <HAL_Init>

  /* USER CODE BEGIN Init */

	enable_clocks();
 80012ba:	f7ff ff17 	bl	80010ec <enable_clocks>
	initialise_board();
 80012be:	f7ff ff25 	bl	800110c <initialise_board>
	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 80012c2:	2200      	movs	r2, #0
 80012c4:	4935      	ldr	r1, [pc, #212]	; (800139c <main+0xec>)
 80012c6:	2004      	movs	r0, #4
 80012c8:	f000 fa58 	bl	800177c <SerialInitialise>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012cc:	f000 f86a 	bl	80013a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d0:	f000 f9d0 	bl	8001674 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012d4:	f000 f8c8 	bl	8001468 <MX_I2C1_Init>
  MX_SPI1_Init();
 80012d8:	f000 f906 	bl	80014e8 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80012dc:	f000 f9a8 	bl	8001630 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 80012e0:	f000 f940 	bl	8001564 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	stm_accel_init(&hi2c1);
 80012e4:	482e      	ldr	r0, [pc, #184]	; (80013a0 <main+0xf0>)
 80012e6:	f7ff fc03 	bl	8000af0 <stm_accel_init>

	int16_t zero_errors[] = {0, 0, 0};  // Zero errors in x, y, and z axes
 80012ea:	2300      	movs	r3, #0
 80012ec:	843b      	strh	r3, [r7, #32]
 80012ee:	2300      	movs	r3, #0
 80012f0:	847b      	strh	r3, [r7, #34]	; 0x22
 80012f2:	2300      	movs	r3, #0
 80012f4:	84bb      	strh	r3, [r7, #36]	; 0x24
	find_zero_errors(&hi2c1, zero_errors);
 80012f6:	f107 0320 	add.w	r3, r7, #32
 80012fa:	4619      	mov	r1, r3
 80012fc:	4828      	ldr	r0, [pc, #160]	; (80013a0 <main+0xf0>)
 80012fe:	f7ff fc0e 	bl	8000b1e <find_zero_errors>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		read_stm_accel_data(&hi2c1, &accel_x, &accel_y, &accel_z, zero_errors);
 8001302:	f107 001a 	add.w	r0, r7, #26
 8001306:	f107 021c 	add.w	r2, r7, #28
 800130a:	f107 011e 	add.w	r1, r7, #30
 800130e:	f107 0320 	add.w	r3, r7, #32
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	4603      	mov	r3, r0
 8001316:	4822      	ldr	r0, [pc, #136]	; (80013a0 <main+0xf0>)
 8001318:	f7ff fc5e 	bl	8000bd8 <read_stm_accel_data>

		if (get_orientation(accel_x, accel_y, accel_z, &stm_pitch, &stm_roll))
 800131c:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 8001320:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8001324:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001328:	f107 0419 	add.w	r4, r7, #25
 800132c:	f107 0318 	add.w	r3, r7, #24
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	4623      	mov	r3, r4
 8001334:	f7ff fd28 	bl	8000d88 <get_orientation>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d011      	beq.n	8001362 <main+0xb2>
		{
			show_orientation_led(stm_pitch, stm_roll, 6);
 800133e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001342:	f997 1018 	ldrsb.w	r1, [r7, #24]
 8001346:	2206      	movs	r2, #6
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fef1 	bl	8001130 <show_orientation_led>
			get_velocity(stm_pitch, stm_roll, &ptu_vel_pitch, &ptu_vel_yaw);
 800134e:	f997 0019 	ldrsb.w	r0, [r7, #25]
 8001352:	f997 1018 	ldrsb.w	r1, [r7, #24]
 8001356:	f107 0316 	add.w	r3, r7, #22
 800135a:	f107 0217 	add.w	r2, r7, #23
 800135e:	f7ff fd83 	bl	8000e68 <get_velocity>
		}

		Data vel_data;
		uint8_t velocity_packet_buffer[HEADER_SIZE + sizeof(Velocity)] = {0};
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
		vel_data.velocity.horizontal_vel = ptu_vel_yaw;
 800136a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800136e:	733b      	strb	r3, [r7, #12]
		vel_data.velocity.vertical_vel = ptu_vel_pitch;
 8001370:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001374:	737b      	strb	r3, [r7, #13]
		uint16_t velocity_buffer_length = pack_buffer(velocity_packet_buffer, VELOCITY, &vel_data);
 8001376:	f107 020c 	add.w	r2, r7, #12
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f000 faa8 	bl	80018d4 <pack_buffer>
 8001384:	4603      	mov	r3, r0
 8001386:	84fb      	strh	r3, [r7, #38]	; 0x26
		SerialOutputBuffer(velocity_packet_buffer, velocity_buffer_length, &USART1_PORT);
 8001388:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	4a03      	ldr	r2, [pc, #12]	; (800139c <main+0xec>)
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fa81 	bl	8001896 <SerialOutputBuffer>

		HAL_Delay(10);
 8001394:	200a      	movs	r0, #10
 8001396:	f000 fcf7 	bl	8001d88 <HAL_Delay>
	{
 800139a:	e7b2      	b.n	8001302 <main+0x52>
 800139c:	20000000 	.word	0x20000000
 80013a0:	200000f4 	.word	0x200000f4

080013a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b09e      	sub	sp, #120	; 0x78
 80013a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013ae:	2228      	movs	r2, #40	; 0x28
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f004 f8a8 	bl	8005508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c8:	463b      	mov	r3, r7
 80013ca:	223c      	movs	r2, #60	; 0x3c
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f004 f89a 	bl	8005508 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80013d4:	2303      	movs	r3, #3
 80013d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e2:	2301      	movs	r3, #1
 80013e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e6:	2310      	movs	r3, #16
 80013e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ea:	2302      	movs	r3, #2
 80013ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80013f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013f8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013fe:	4618      	mov	r0, r3
 8001400:	f001 fe3e 	bl	8003080 <HAL_RCC_OscConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800140a:	f000 f9b1 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140e:	230f      	movs	r3, #15
 8001410:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001412:	2302      	movs	r3, #2
 8001414:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800141a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800141e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001424:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001428:	2101      	movs	r1, #1
 800142a:	4618      	mov	r0, r3
 800142c:	f002 fe66 	bl	80040fc <HAL_RCC_ClockConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001436:	f000 f99b 	bl	8001770 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <SystemClock_Config+0xc0>)
 800143c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001442:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001446:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	4618      	mov	r0, r3
 800144c:	f003 f83c 	bl	80044c8 <HAL_RCCEx_PeriphCLKConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001456:	f000 f98b 	bl	8001770 <Error_Handler>
  }
}
 800145a:	bf00      	nop
 800145c:	3778      	adds	r7, #120	; 0x78
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	00020020 	.word	0x00020020

08001468 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <MX_I2C1_Init+0x74>)
 800146e:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <MX_I2C1_Init+0x78>)
 8001470:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <MX_I2C1_Init+0x74>)
 8001474:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <MX_I2C1_Init+0x7c>)
 8001476:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <MX_I2C1_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <MX_I2C1_Init+0x74>)
 8001480:	2201      	movs	r2, #1
 8001482:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <MX_I2C1_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <MX_I2C1_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <MX_I2C1_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_I2C1_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_I2C1_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014a2:	480e      	ldr	r0, [pc, #56]	; (80014dc <MX_I2C1_Init+0x74>)
 80014a4:	f000 ff0c 	bl	80022c0 <HAL_I2C_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014ae:	f000 f95f 	bl	8001770 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014b2:	2100      	movs	r1, #0
 80014b4:	4809      	ldr	r0, [pc, #36]	; (80014dc <MX_I2C1_Init+0x74>)
 80014b6:	f001 fc79 	bl	8002dac <HAL_I2CEx_ConfigAnalogFilter>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014c0:	f000 f956 	bl	8001770 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014c4:	2100      	movs	r1, #0
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_I2C1_Init+0x74>)
 80014c8:	f001 fcbb 	bl	8002e42 <HAL_I2CEx_ConfigDigitalFilter>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014d2:	f000 f94d 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200000f4 	.word	0x200000f4
 80014e0:	40005400 	.word	0x40005400
 80014e4:	2000090e 	.word	0x2000090e

080014e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <MX_SPI1_Init+0x74>)
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <MX_SPI1_Init+0x78>)
 80014f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_SPI1_Init+0x74>)
 80014f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_SPI1_Init+0x74>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <MX_SPI1_Init+0x74>)
 8001502:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001506:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_SPI1_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <MX_SPI1_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_SPI1_Init+0x74>)
 8001516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_SPI1_Init+0x74>)
 800151e:	2208      	movs	r2, #8
 8001520:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_SPI1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_SPI1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_SPI1_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_SPI1_Init+0x74>)
 8001536:	2207      	movs	r2, #7
 8001538:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MX_SPI1_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_SPI1_Init+0x74>)
 8001542:	2208      	movs	r2, #8
 8001544:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_SPI1_Init+0x74>)
 8001548:	f003 f96e 	bl	8004828 <HAL_SPI_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001552:	f000 f90d 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000148 	.word	0x20000148
 8001560:	40013000 	.word	0x40013000

08001564 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001576:	463b      	mov	r3, r7
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
 8001584:	615a      	str	r2, [r3, #20]
 8001586:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001588:	4b28      	ldr	r3, [pc, #160]	; (800162c <MX_TIM2_Init+0xc8>)
 800158a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800158e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001590:	4b26      	ldr	r3, [pc, #152]	; (800162c <MX_TIM2_Init+0xc8>)
 8001592:	222f      	movs	r2, #47	; 0x2f
 8001594:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001596:	4b25      	ldr	r3, [pc, #148]	; (800162c <MX_TIM2_Init+0xc8>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800159c:	4b23      	ldr	r3, [pc, #140]	; (800162c <MX_TIM2_Init+0xc8>)
 800159e:	f644 6220 	movw	r2, #20000	; 0x4e20
 80015a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a4:	4b21      	ldr	r3, [pc, #132]	; (800162c <MX_TIM2_Init+0xc8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <MX_TIM2_Init+0xc8>)
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015b0:	481e      	ldr	r0, [pc, #120]	; (800162c <MX_TIM2_Init+0xc8>)
 80015b2:	f003 f9e4 	bl	800497e <HAL_TIM_PWM_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80015bc:	f000 f8d8 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4619      	mov	r1, r3
 80015ce:	4817      	ldr	r0, [pc, #92]	; (800162c <MX_TIM2_Init+0xc8>)
 80015d0:	f003 fea6 	bl	8005320 <HAL_TIMEx_MasterConfigSynchronization>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80015da:	f000 f8c9 	bl	8001770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015de:	2360      	movs	r3, #96	; 0x60
 80015e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 80015e2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80015e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	2200      	movs	r2, #0
 80015f4:	4619      	mov	r1, r3
 80015f6:	480d      	ldr	r0, [pc, #52]	; (800162c <MX_TIM2_Init+0xc8>)
 80015f8:	f003 fa18 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001602:	f000 f8b5 	bl	8001770 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001606:	463b      	mov	r3, r7
 8001608:	2204      	movs	r2, #4
 800160a:	4619      	mov	r1, r3
 800160c:	4807      	ldr	r0, [pc, #28]	; (800162c <MX_TIM2_Init+0xc8>)
 800160e:	f003 fa0d 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001618:	f000 f8aa 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800161c:	4803      	ldr	r0, [pc, #12]	; (800162c <MX_TIM2_Init+0xc8>)
 800161e:	f000 fa6d 	bl	8001afc <HAL_TIM_MspPostInit>

}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200001ac 	.word	0x200001ac

08001630 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001634:	4b0d      	ldr	r3, [pc, #52]	; (800166c <MX_USB_PCD_Init+0x3c>)
 8001636:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <MX_USB_PCD_Init+0x40>)
 8001638:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_USB_PCD_Init+0x3c>)
 800163c:	2208      	movs	r2, #8
 800163e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <MX_USB_PCD_Init+0x3c>)
 8001642:	2202      	movs	r2, #2
 8001644:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_USB_PCD_Init+0x3c>)
 8001648:	2202      	movs	r2, #2
 800164a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <MX_USB_PCD_Init+0x3c>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_USB_PCD_Init+0x3c>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <MX_USB_PCD_Init+0x3c>)
 800165a:	f001 fc3e 	bl	8002eda <HAL_PCD_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001664:	f000 f884 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200001f8 	.word	0x200001f8
 8001670:	40005c00 	.word	0x40005c00

08001674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800168a:	4b37      	ldr	r3, [pc, #220]	; (8001768 <MX_GPIO_Init+0xf4>)
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	4a36      	ldr	r2, [pc, #216]	; (8001768 <MX_GPIO_Init+0xf4>)
 8001690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001694:	6153      	str	r3, [r2, #20]
 8001696:	4b34      	ldr	r3, [pc, #208]	; (8001768 <MX_GPIO_Init+0xf4>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	4b31      	ldr	r3, [pc, #196]	; (8001768 <MX_GPIO_Init+0xf4>)
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	4a30      	ldr	r2, [pc, #192]	; (8001768 <MX_GPIO_Init+0xf4>)
 80016a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016ac:	6153      	str	r3, [r2, #20]
 80016ae:	4b2e      	ldr	r3, [pc, #184]	; (8001768 <MX_GPIO_Init+0xf4>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ba:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <MX_GPIO_Init+0xf4>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	4a2a      	ldr	r2, [pc, #168]	; (8001768 <MX_GPIO_Init+0xf4>)
 80016c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016c4:	6153      	str	r3, [r2, #20]
 80016c6:	4b28      	ldr	r3, [pc, #160]	; (8001768 <MX_GPIO_Init+0xf4>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	4b25      	ldr	r3, [pc, #148]	; (8001768 <MX_GPIO_Init+0xf4>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	4a24      	ldr	r2, [pc, #144]	; (8001768 <MX_GPIO_Init+0xf4>)
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016dc:	6153      	str	r3, [r2, #20]
 80016de:	4b22      	ldr	r3, [pc, #136]	; (8001768 <MX_GPIO_Init+0xf4>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <MX_GPIO_Init+0xf4>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	4a1e      	ldr	r2, [pc, #120]	; (8001768 <MX_GPIO_Init+0xf4>)
 80016f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f4:	6153      	str	r3, [r2, #20]
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <MX_GPIO_Init+0xf4>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001702:	2200      	movs	r2, #0
 8001704:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001708:	4818      	ldr	r0, [pc, #96]	; (800176c <MX_GPIO_Init+0xf8>)
 800170a:	f000 fdc1 	bl	8002290 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800170e:	2337      	movs	r3, #55	; 0x37
 8001710:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001712:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4812      	ldr	r0, [pc, #72]	; (800176c <MX_GPIO_Init+0xf8>)
 8001724:	f000 fc3a 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001728:	f64f 7308 	movw	r3, #65288	; 0xff08
 800172c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	480a      	ldr	r0, [pc, #40]	; (800176c <MX_GPIO_Init+0xf8>)
 8001742:	f000 fc2b 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001746:	2301      	movs	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175c:	f000 fc1e 	bl	8001f9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	; 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40021000 	.word	0x40021000
 800176c:	48001000 	.word	0x48001000

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	e7fe      	b.n	8001778 <Error_Handler+0x8>
	...

0800177c <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	63da      	str	r2, [r3, #60]	; 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800178e:	4b34      	ldr	r3, [pc, #208]	; (8001860 <SerialInitialise+0xe4>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	4a33      	ldr	r2, [pc, #204]	; (8001860 <SerialInitialise+0xe4>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800179a:	4b31      	ldr	r3, [pc, #196]	; (8001860 <SerialInitialise+0xe4>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	4a30      	ldr	r2, [pc, #192]	; (8001860 <SerialInitialise+0xe4>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d106      	bne.n	80017bc <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80017ae:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <SerialInitialise+0xe4>)
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	4a2b      	ldr	r2, [pc, #172]	; (8001860 <SerialInitialise+0xe4>)
 80017b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017b8:	6153      	str	r3, [r2, #20]
		break;
 80017ba:	e000      	b.n	80017be <SerialInitialise+0x42>
	default:
		break;
 80017bc:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80017c6:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017d0:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	69d9      	ldr	r1, [r3, #28]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d821      	bhi.n	8001842 <SerialInitialise+0xc6>
 80017fe:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <SerialInitialise+0x88>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	08001819 	.word	0x08001819
 8001808:	08001821 	.word	0x08001821
 800180c:	08001829 	.word	0x08001829
 8001810:	08001831 	.word	0x08001831
 8001814:	08001839 	.word	0x08001839
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	2246      	movs	r2, #70	; 0x46
 800181c:	801a      	strh	r2, [r3, #0]
		break;
 800181e:	e010      	b.n	8001842 <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	2246      	movs	r2, #70	; 0x46
 8001824:	801a      	strh	r2, [r3, #0]
		break;
 8001826:	e00c      	b.n	8001842 <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2246      	movs	r2, #70	; 0x46
 800182c:	801a      	strh	r2, [r3, #0]
		break;
 800182e:	e008      	b.n	8001842 <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	2246      	movs	r2, #70	; 0x46
 8001834:	801a      	strh	r2, [r3, #0]
		break;
 8001836:	e004      	b.n	8001842 <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 48MHz
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800183e:	801a      	strh	r2, [r3, #0]
		break;
 8001840:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f042 020d 	orr.w	r2, r2, #13
 8001850:	601a      	str	r2, [r3, #0]
}
 8001852:	bf00      	nop
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000

08001864 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8001870:	bf00      	nop
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f8      	beq.n	8001872 <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	79fa      	ldrb	r2, [r7, #7]
 8001886:	b292      	uxth	r2, r2
 8001888:	801a      	strh	r2, [r3, #0]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <SerialOutputBuffer>:
	*received_char = *(serial_port->DataInputRegister);
	return 1;
}


void SerialOutputBuffer(uint8_t *buffer, uint16_t buffer_length, SerialPort *serial_port) {
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	460b      	mov	r3, r1
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	817b      	strh	r3, [r7, #10]
	uint32_t counter = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

	while(counter <= buffer_length) {
 80018a8:	e00b      	b.n	80018c2 <SerialOutputBuffer+0x2c>
		SerialOutputChar(*buffer, serial_port);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ffd7 	bl	8001864 <SerialOutputChar>
		counter++;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
		buffer++;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
	while(counter <= buffer_length) {
 80018c2:	897b      	ldrh	r3, [r7, #10]
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d9ef      	bls.n	80018aa <SerialOutputBuffer+0x14>
	}

//	if (serial_port->completion_function != 0x00)
//		serial_port->completion_function(counter);
}
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <pack_buffer>:


#include "serialise.h"

// Function to pack data into a buffer for transmission
uint16_t pack_buffer(uint8_t *buffer, MessageType message_type, Data *data) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	460b      	mov	r3, r1
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	72fb      	strb	r3, [r7, #11]
    Header header = {SENTINEL_1, SENTINEL_2, message_type, 0};
 80018e2:	23aa      	movs	r3, #170	; 0xaa
 80018e4:	753b      	strb	r3, [r7, #20]
 80018e6:	2355      	movs	r3, #85	; 0x55
 80018e8:	757b      	strb	r3, [r7, #21]
 80018ea:	7afb      	ldrb	r3, [r7, #11]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	82fb      	strh	r3, [r7, #22]
 80018f0:	2300      	movs	r3, #0
 80018f2:	833b      	strh	r3, [r7, #24]
    uint16_t buffer_idx = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	83bb      	strh	r3, [r7, #28]
    uint16_t data_length = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	83fb      	strh	r3, [r7, #30]

    switch (message_type) {
 80018fc:	7afb      	ldrb	r3, [r7, #11]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d817      	bhi.n	8001932 <pack_buffer+0x5e>
 8001902:	a201      	add	r2, pc, #4	; (adr r2, 8001908 <pack_buffer+0x34>)
 8001904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001908:	08001919 	.word	0x08001919
 800190c:	0800191f 	.word	0x0800191f
 8001910:	08001925 	.word	0x08001925
 8001914:	0800192b 	.word	0x0800192b
        case VELOCITY:
            data_length = sizeof(Velocity);
 8001918:	2302      	movs	r3, #2
 800191a:	83fb      	strh	r3, [r7, #30]
            break;
 800191c:	e009      	b.n	8001932 <pack_buffer+0x5e>
        case LED_STATE:
            data_length = sizeof(LEDState);
 800191e:	2301      	movs	r3, #1
 8001920:	83fb      	strh	r3, [r7, #30]
            break;
 8001922:	e006      	b.n	8001932 <pack_buffer+0x5e>
        case BUTTON_AND_STATUS:
            data_length = sizeof(ButtonAndStatus);
 8001924:	2301      	movs	r3, #1
 8001926:	83fb      	strh	r3, [r7, #30]
            break;
 8001928:	e003      	b.n	8001932 <pack_buffer+0x5e>
        case STRING_PACKET:
            data_length = data->string_packet.length;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	83fb      	strh	r3, [r7, #30]
            break;
 8001930:	bf00      	nop
    }

    header.data_length = data_length;
 8001932:	8bfb      	ldrh	r3, [r7, #30]
 8001934:	833b      	strh	r3, [r7, #24]

    // Copy header to buffer
    memcpy(buffer, &header, sizeof(Header));
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	2206      	movs	r2, #6
 800193c:	4619      	mov	r1, r3
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f003 fdd4 	bl	80054ec <memcpy>
    buffer_idx += sizeof(Header);
 8001944:	8bbb      	ldrh	r3, [r7, #28]
 8001946:	3306      	adds	r3, #6
 8001948:	83bb      	strh	r3, [r7, #28]

    // Copy data to buffer
    memcpy(buffer + buffer_idx, data, data_length);
 800194a:	8bbb      	ldrh	r3, [r7, #28]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	8bfa      	ldrh	r2, [r7, #30]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4618      	mov	r0, r3
 8001956:	f003 fdc9 	bl	80054ec <memcpy>
    buffer_idx += data_length;
 800195a:	8bba      	ldrh	r2, [r7, #28]
 800195c:	8bfb      	ldrh	r3, [r7, #30]
 800195e:	4413      	add	r3, r2
 8001960:	83bb      	strh	r3, [r7, #28]

    return buffer_idx;
 8001962:	8bbb      	ldrh	r3, [r7, #28]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_MspInit+0x44>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	4a0e      	ldr	r2, [pc, #56]	; (80019b0 <HAL_MspInit+0x44>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6193      	str	r3, [r2, #24]
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <HAL_MspInit+0x44>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_MspInit+0x44>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	4a08      	ldr	r2, [pc, #32]	; (80019b0 <HAL_MspInit+0x44>)
 8001990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001994:	61d3      	str	r3, [r2, #28]
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_MspInit+0x44>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019a2:	2007      	movs	r0, #7
 80019a4:	f000 fac6 	bl	8001f34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000

080019b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a17      	ldr	r2, [pc, #92]	; (8001a30 <HAL_I2C_MspInit+0x7c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d127      	bne.n	8001a26 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_I2C_MspInit+0x80>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	4a16      	ldr	r2, [pc, #88]	; (8001a34 <HAL_I2C_MspInit+0x80>)
 80019dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e0:	6153      	str	r3, [r2, #20]
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_I2C_MspInit+0x80>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80019ee:	23c0      	movs	r3, #192	; 0xc0
 80019f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f2:	2312      	movs	r3, #18
 80019f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019fe:	2304      	movs	r3, #4
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	480b      	ldr	r0, [pc, #44]	; (8001a38 <HAL_I2C_MspInit+0x84>)
 8001a0a:	f000 fac7 	bl	8001f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_I2C_MspInit+0x80>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_I2C_MspInit+0x80>)
 8001a14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a18:	61d3      	str	r3, [r2, #28]
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_I2C_MspInit+0x80>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40005400 	.word	0x40005400
 8001a34:	40021000 	.word	0x40021000
 8001a38:	48000400 	.word	0x48000400

08001a3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <HAL_SPI_MspInit+0x7c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d128      	bne.n	8001ab0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <HAL_SPI_MspInit+0x80>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	4a16      	ldr	r2, [pc, #88]	; (8001abc <HAL_SPI_MspInit+0x80>)
 8001a64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a68:	6193      	str	r3, [r2, #24]
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <HAL_SPI_MspInit+0x80>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_SPI_MspInit+0x80>)
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	4a10      	ldr	r2, [pc, #64]	; (8001abc <HAL_SPI_MspInit+0x80>)
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a80:	6153      	str	r3, [r2, #20]
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <HAL_SPI_MspInit+0x80>)
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001a8e:	23e0      	movs	r3, #224	; 0xe0
 8001a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aac:	f000 fa76 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ab0:	bf00      	nop
 8001ab2:	3728      	adds	r7, #40	; 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40013000 	.word	0x40013000
 8001abc:	40021000 	.word	0x40021000

08001ac0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad0:	d10b      	bne.n	8001aea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_TIM_PWM_MspInit+0x38>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	4a08      	ldr	r2, [pc, #32]	; (8001af8 <HAL_TIM_PWM_MspInit+0x38>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	61d3      	str	r3, [r2, #28]
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_TIM_PWM_MspInit+0x38>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000

08001afc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b1c:	d11d      	bne.n	8001b5a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_TIM_MspPostInit+0x68>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <HAL_TIM_MspPostInit+0x68>)
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b28:	6153      	str	r3, [r2, #20]
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_TIM_MspPostInit+0x68>)
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001b36:	f248 0302 	movw	r3, #32770	; 0x8002
 8001b3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	4619      	mov	r1, r3
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b56:	f000 fa21 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3720      	adds	r7, #32
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000

08001b68 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a18      	ldr	r2, [pc, #96]	; (8001be8 <HAL_PCD_MspInit+0x80>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d129      	bne.n	8001bde <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_PCD_MspInit+0x84>)
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	4a17      	ldr	r2, [pc, #92]	; (8001bec <HAL_PCD_MspInit+0x84>)
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b94:	6153      	str	r3, [r2, #20]
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_PCD_MspInit+0x84>)
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001ba2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001bb4:	230e      	movs	r3, #14
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc2:	f000 f9eb 	bl	8001f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_PCD_MspInit+0x84>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	4a08      	ldr	r2, [pc, #32]	; (8001bec <HAL_PCD_MspInit+0x84>)
 8001bcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bd0:	61d3      	str	r3, [r2, #28]
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_PCD_MspInit+0x84>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001bde:	bf00      	nop
 8001be0:	3728      	adds	r7, #40	; 0x28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40005c00 	.word	0x40005c00
 8001bec:	40021000 	.word	0x40021000

08001bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <NMI_Handler+0x4>

08001bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <HardFault_Handler+0x4>

08001bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <MemManage_Handler+0x4>

08001c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c06:	e7fe      	b.n	8001c06 <BusFault_Handler+0x4>

08001c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <UsageFault_Handler+0x4>

08001c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c3c:	f000 f884 	bl	8001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <SystemInit+0x20>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <SystemInit+0x20>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c6c:	f7ff ffea 	bl	8001c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c70:	480c      	ldr	r0, [pc, #48]	; (8001ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c72:	490d      	ldr	r1, [pc, #52]	; (8001ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c74:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <LoopForever+0xe>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c78:	e002      	b.n	8001c80 <LoopCopyDataInit>

08001c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7e:	3304      	adds	r3, #4

08001c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c84:	d3f9      	bcc.n	8001c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c88:	4c0a      	ldr	r4, [pc, #40]	; (8001cb4 <LoopForever+0x16>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c8c:	e001      	b.n	8001c92 <LoopFillZerobss>

08001c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c90:	3204      	adds	r2, #4

08001c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c94:	d3fb      	bcc.n	8001c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c96:	f003 fc05 	bl	80054a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c9a:	f7ff fb09 	bl	80012b0 <main>

08001c9e <LoopForever>:

LoopForever:
    b LoopForever
 8001c9e:	e7fe      	b.n	8001c9e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ca0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca8:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001cac:	08005f0c 	.word	0x08005f0c
  ldr r2, =_sbss
 8001cb0:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001cb4:	200004e8 	.word	0x200004e8

08001cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC1_2_IRQHandler>
	...

08001cbc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_Init+0x28>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_Init+0x28>)
 8001cc6:	f043 0310 	orr.w	r3, r3, #16
 8001cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f000 f931 	bl	8001f34 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f000 f808 	bl	8001ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd8:	f7ff fe48 	bl	800196c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40022000 	.word	0x40022000

08001ce8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_InitTick+0x54>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_InitTick+0x58>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f93b 	bl	8001f82 <HAL_SYSTICK_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00e      	b.n	8001d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b0f      	cmp	r3, #15
 8001d1a:	d80a      	bhi.n	8001d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d24:	f000 f911 	bl	8001f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d28:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <HAL_InitTick+0x5c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000040 	.word	0x20000040
 8001d40:	20000048 	.word	0x20000048
 8001d44:	20000044 	.word	0x20000044

08001d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x20>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x24>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <HAL_IncTick+0x24>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000048 	.word	0x20000048
 8001d6c:	200004e4 	.word	0x200004e4

08001d70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_GetTick+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	200004e4 	.word	0x200004e4

08001d88 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff ffee 	bl	8001d70 <HAL_GetTick>
 8001d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001da0:	d005      	beq.n	8001dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_Delay+0x44>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001dae:	bf00      	nop
 8001db0:	f7ff ffde 	bl	8001d70 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d8f7      	bhi.n	8001db0 <HAL_Delay+0x28>
  {
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000048 	.word	0x20000048

08001dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dec:	4013      	ands	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e02:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	60d3      	str	r3, [r2, #12]
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <__NVIC_GetPriorityGrouping+0x18>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 0307 	and.w	r3, r3, #7
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	db0a      	blt.n	8001e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	490c      	ldr	r1, [pc, #48]	; (8001e80 <__NVIC_SetPriority+0x4c>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e5c:	e00a      	b.n	8001e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4908      	ldr	r1, [pc, #32]	; (8001e84 <__NVIC_SetPriority+0x50>)
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	0112      	lsls	r2, r2, #4
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	440b      	add	r3, r1
 8001e72:	761a      	strb	r2, [r3, #24]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000e100 	.word	0xe000e100
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	; 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	bf28      	it	cs
 8001ea6:	2304      	movcs	r3, #4
 8001ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d902      	bls.n	8001eb8 <NVIC_EncodePriority+0x30>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3b03      	subs	r3, #3
 8001eb6:	e000      	b.n	8001eba <NVIC_EncodePriority+0x32>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	401a      	ands	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	4313      	orrs	r3, r2
         );
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f00:	d301      	bcc.n	8001f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00f      	b.n	8001f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <SysTick_Config+0x40>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0e:	210f      	movs	r1, #15
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f14:	f7ff ff8e 	bl	8001e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <SysTick_Config+0x40>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1e:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <SysTick_Config+0x40>)
 8001f20:	2207      	movs	r2, #7
 8001f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	e000e010 	.word	0xe000e010

08001f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff47 	bl	8001dd0 <__NVIC_SetPriorityGrouping>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5c:	f7ff ff5c 	bl	8001e18 <__NVIC_GetPriorityGrouping>
 8001f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f7ff ff8e 	bl	8001e88 <NVIC_EncodePriority>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff5d 	bl	8001e34 <__NVIC_SetPriority>
}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffb0 	bl	8001ef0 <SysTick_Config>
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001faa:	e154      	b.n	8002256 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8146 	beq.w	8002250 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d005      	beq.n	8001fdc <HAL_GPIO_Init+0x40>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d130      	bne.n	800203e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002012:	2201      	movs	r2, #1
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	f003 0201 	and.w	r2, r3, #1
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b03      	cmp	r3, #3
 8002048:	d017      	beq.n	800207a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	2203      	movs	r2, #3
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d123      	bne.n	80020ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	08da      	lsrs	r2, r3, #3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3208      	adds	r2, #8
 800208e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002092:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	220f      	movs	r2, #15
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	08da      	lsrs	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3208      	adds	r2, #8
 80020c8:	6939      	ldr	r1, [r7, #16]
 80020ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	2203      	movs	r2, #3
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0203 	and.w	r2, r3, #3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 80a0 	beq.w	8002250 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002110:	4b58      	ldr	r3, [pc, #352]	; (8002274 <HAL_GPIO_Init+0x2d8>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	4a57      	ldr	r2, [pc, #348]	; (8002274 <HAL_GPIO_Init+0x2d8>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6193      	str	r3, [r2, #24]
 800211c:	4b55      	ldr	r3, [pc, #340]	; (8002274 <HAL_GPIO_Init+0x2d8>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002128:	4a53      	ldr	r2, [pc, #332]	; (8002278 <HAL_GPIO_Init+0x2dc>)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	3302      	adds	r3, #2
 8002130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	220f      	movs	r2, #15
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4013      	ands	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002152:	d019      	beq.n	8002188 <HAL_GPIO_Init+0x1ec>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a49      	ldr	r2, [pc, #292]	; (800227c <HAL_GPIO_Init+0x2e0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d013      	beq.n	8002184 <HAL_GPIO_Init+0x1e8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a48      	ldr	r2, [pc, #288]	; (8002280 <HAL_GPIO_Init+0x2e4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00d      	beq.n	8002180 <HAL_GPIO_Init+0x1e4>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a47      	ldr	r2, [pc, #284]	; (8002284 <HAL_GPIO_Init+0x2e8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d007      	beq.n	800217c <HAL_GPIO_Init+0x1e0>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a46      	ldr	r2, [pc, #280]	; (8002288 <HAL_GPIO_Init+0x2ec>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d101      	bne.n	8002178 <HAL_GPIO_Init+0x1dc>
 8002174:	2304      	movs	r3, #4
 8002176:	e008      	b.n	800218a <HAL_GPIO_Init+0x1ee>
 8002178:	2305      	movs	r3, #5
 800217a:	e006      	b.n	800218a <HAL_GPIO_Init+0x1ee>
 800217c:	2303      	movs	r3, #3
 800217e:	e004      	b.n	800218a <HAL_GPIO_Init+0x1ee>
 8002180:	2302      	movs	r3, #2
 8002182:	e002      	b.n	800218a <HAL_GPIO_Init+0x1ee>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <HAL_GPIO_Init+0x1ee>
 8002188:	2300      	movs	r3, #0
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	f002 0203 	and.w	r2, r2, #3
 8002190:	0092      	lsls	r2, r2, #2
 8002192:	4093      	lsls	r3, r2
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800219a:	4937      	ldr	r1, [pc, #220]	; (8002278 <HAL_GPIO_Init+0x2dc>)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3302      	adds	r3, #2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021a8:	4b38      	ldr	r3, [pc, #224]	; (800228c <HAL_GPIO_Init+0x2f0>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021cc:	4a2f      	ldr	r2, [pc, #188]	; (800228c <HAL_GPIO_Init+0x2f0>)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021d2:	4b2e      	ldr	r3, [pc, #184]	; (800228c <HAL_GPIO_Init+0x2f0>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	43db      	mvns	r3, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021f6:	4a25      	ldr	r2, [pc, #148]	; (800228c <HAL_GPIO_Init+0x2f0>)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021fc:	4b23      	ldr	r3, [pc, #140]	; (800228c <HAL_GPIO_Init+0x2f0>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	43db      	mvns	r3, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002220:	4a1a      	ldr	r2, [pc, #104]	; (800228c <HAL_GPIO_Init+0x2f0>)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002226:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_GPIO_Init+0x2f0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800224a:	4a10      	ldr	r2, [pc, #64]	; (800228c <HAL_GPIO_Init+0x2f0>)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	3301      	adds	r3, #1
 8002254:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	f47f aea3 	bne.w	8001fac <HAL_GPIO_Init+0x10>
  }
}
 8002266:	bf00      	nop
 8002268:	bf00      	nop
 800226a:	371c      	adds	r7, #28
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40021000 	.word	0x40021000
 8002278:	40010000 	.word	0x40010000
 800227c:	48000400 	.word	0x48000400
 8002280:	48000800 	.word	0x48000800
 8002284:	48000c00 	.word	0x48000c00
 8002288:	48001000 	.word	0x48001000
 800228c:	40010400 	.word	0x40010400

08002290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	807b      	strh	r3, [r7, #2]
 800229c:	4613      	mov	r3, r2
 800229e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a0:	787b      	ldrb	r3, [r7, #1]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022ac:	e002      	b.n	80022b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ae:	887a      	ldrh	r2, [r7, #2]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e081      	b.n	80023d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff fb64 	bl	80019b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2224      	movs	r2, #36	; 0x24
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002310:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002320:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d107      	bne.n	800233a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	e006      	b.n	8002348 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002346:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d104      	bne.n	800235a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002358:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800237c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69d9      	ldr	r1, [r3, #28]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1a      	ldr	r2, [r3, #32]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	4608      	mov	r0, r1
 80023ea:	4611      	mov	r1, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	817b      	strh	r3, [r7, #10]
 80023f2:	460b      	mov	r3, r1
 80023f4:	813b      	strh	r3, [r7, #8]
 80023f6:	4613      	mov	r3, r2
 80023f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b20      	cmp	r3, #32
 8002404:	f040 80f9 	bne.w	80025fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <HAL_I2C_Mem_Write+0x34>
 800240e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002410:	2b00      	cmp	r3, #0
 8002412:	d105      	bne.n	8002420 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800241a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0ed      	b.n	80025fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_I2C_Mem_Write+0x4e>
 800242a:	2302      	movs	r3, #2
 800242c:	e0e6      	b.n	80025fc <HAL_I2C_Mem_Write+0x21c>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002436:	f7ff fc9b 	bl	8001d70 <HAL_GetTick>
 800243a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2319      	movs	r3, #25
 8002442:	2201      	movs	r2, #1
 8002444:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fac3 	bl	80029d4 <I2C_WaitOnFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0d1      	b.n	80025fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2221      	movs	r2, #33	; 0x21
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2240      	movs	r2, #64	; 0x40
 8002464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a3a      	ldr	r2, [r7, #32]
 8002472:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002478:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002480:	88f8      	ldrh	r0, [r7, #6]
 8002482:	893a      	ldrh	r2, [r7, #8]
 8002484:	8979      	ldrh	r1, [r7, #10]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	9301      	str	r3, [sp, #4]
 800248a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	4603      	mov	r3, r0
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 f9d3 	bl	800283c <I2C_RequestMemoryWrite>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0a9      	b.n	80025fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2bff      	cmp	r3, #255	; 0xff
 80024b0:	d90e      	bls.n	80024d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	22ff      	movs	r2, #255	; 0xff
 80024b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	8979      	ldrh	r1, [r7, #10]
 80024c0:	2300      	movs	r3, #0
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 fc3d 	bl	8002d48 <I2C_TransferConfig>
 80024ce:	e00f      	b.n	80024f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	8979      	ldrh	r1, [r7, #10]
 80024e2:	2300      	movs	r3, #0
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fc2c 	bl	8002d48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 fabc 	bl	8002a72 <I2C_WaitOnTXISFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e07b      	b.n	80025fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d034      	beq.n	80025a8 <HAL_I2C_Mem_Write+0x1c8>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002542:	2b00      	cmp	r3, #0
 8002544:	d130      	bne.n	80025a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254c:	2200      	movs	r2, #0
 800254e:	2180      	movs	r1, #128	; 0x80
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 fa3f 	bl	80029d4 <I2C_WaitOnFlagUntilTimeout>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e04d      	b.n	80025fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	2bff      	cmp	r3, #255	; 0xff
 8002568:	d90e      	bls.n	8002588 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	22ff      	movs	r2, #255	; 0xff
 800256e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002574:	b2da      	uxtb	r2, r3
 8002576:	8979      	ldrh	r1, [r7, #10]
 8002578:	2300      	movs	r3, #0
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 fbe1 	bl	8002d48 <I2C_TransferConfig>
 8002586:	e00f      	b.n	80025a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002596:	b2da      	uxtb	r2, r3
 8002598:	8979      	ldrh	r1, [r7, #10]
 800259a:	2300      	movs	r3, #0
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fbd0 	bl	8002d48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d19e      	bne.n	80024f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 faa2 	bl	8002b00 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e01a      	b.n	80025fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2220      	movs	r2, #32
 80025cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_I2C_Mem_Write+0x224>)
 80025da:	400b      	ands	r3, r1
 80025dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2220      	movs	r2, #32
 80025e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e000      	b.n	80025fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80025fa:	2302      	movs	r3, #2
  }
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	fe00e800 	.word	0xfe00e800

08002608 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	4608      	mov	r0, r1
 8002612:	4611      	mov	r1, r2
 8002614:	461a      	mov	r2, r3
 8002616:	4603      	mov	r3, r0
 8002618:	817b      	strh	r3, [r7, #10]
 800261a:	460b      	mov	r3, r1
 800261c:	813b      	strh	r3, [r7, #8]
 800261e:	4613      	mov	r3, r2
 8002620:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b20      	cmp	r3, #32
 800262c:	f040 80fd 	bne.w	800282a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <HAL_I2C_Mem_Read+0x34>
 8002636:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002638:	2b00      	cmp	r3, #0
 800263a:	d105      	bne.n	8002648 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002642:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0f1      	b.n	800282c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_I2C_Mem_Read+0x4e>
 8002652:	2302      	movs	r3, #2
 8002654:	e0ea      	b.n	800282c <HAL_I2C_Mem_Read+0x224>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800265e:	f7ff fb87 	bl	8001d70 <HAL_GetTick>
 8002662:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	2319      	movs	r3, #25
 800266a:	2201      	movs	r2, #1
 800266c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f9af 	bl	80029d4 <I2C_WaitOnFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0d5      	b.n	800282c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2222      	movs	r2, #34	; 0x22
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2240      	movs	r2, #64	; 0x40
 800268c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a3a      	ldr	r2, [r7, #32]
 800269a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026a8:	88f8      	ldrh	r0, [r7, #6]
 80026aa:	893a      	ldrh	r2, [r7, #8]
 80026ac:	8979      	ldrh	r1, [r7, #10]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	9301      	str	r3, [sp, #4]
 80026b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	4603      	mov	r3, r0
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f913 	bl	80028e4 <I2C_RequestMemoryRead>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0ad      	b.n	800282c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2bff      	cmp	r3, #255	; 0xff
 80026d8:	d90e      	bls.n	80026f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	22ff      	movs	r2, #255	; 0xff
 80026de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	8979      	ldrh	r1, [r7, #10]
 80026e8:	4b52      	ldr	r3, [pc, #328]	; (8002834 <HAL_I2C_Mem_Read+0x22c>)
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fb29 	bl	8002d48 <I2C_TransferConfig>
 80026f6:	e00f      	b.n	8002718 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002706:	b2da      	uxtb	r2, r3
 8002708:	8979      	ldrh	r1, [r7, #10]
 800270a:	4b4a      	ldr	r3, [pc, #296]	; (8002834 <HAL_I2C_Mem_Read+0x22c>)
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 fb18 	bl	8002d48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	2200      	movs	r2, #0
 8002720:	2104      	movs	r1, #4
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f956 	bl	80029d4 <I2C_WaitOnFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e07c      	b.n	800282c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d034      	beq.n	80027d8 <HAL_I2C_Mem_Read+0x1d0>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002772:	2b00      	cmp	r3, #0
 8002774:	d130      	bne.n	80027d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	2200      	movs	r2, #0
 800277e:	2180      	movs	r1, #128	; 0x80
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 f927 	bl	80029d4 <I2C_WaitOnFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e04d      	b.n	800282c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	2bff      	cmp	r3, #255	; 0xff
 8002798:	d90e      	bls.n	80027b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	22ff      	movs	r2, #255	; 0xff
 800279e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	8979      	ldrh	r1, [r7, #10]
 80027a8:	2300      	movs	r3, #0
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fac9 	bl	8002d48 <I2C_TransferConfig>
 80027b6:	e00f      	b.n	80027d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	8979      	ldrh	r1, [r7, #10]
 80027ca:	2300      	movs	r3, #0
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 fab8 	bl	8002d48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d19a      	bne.n	8002718 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f98a 	bl	8002b00 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e01a      	b.n	800282c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2220      	movs	r2, #32
 80027fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_I2C_Mem_Read+0x230>)
 800280a:	400b      	ands	r3, r1
 800280c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2220      	movs	r2, #32
 8002812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	e000      	b.n	800282c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800282a:	2302      	movs	r3, #2
  }
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	80002400 	.word	0x80002400
 8002838:	fe00e800 	.word	0xfe00e800

0800283c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af02      	add	r7, sp, #8
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	4608      	mov	r0, r1
 8002846:	4611      	mov	r1, r2
 8002848:	461a      	mov	r2, r3
 800284a:	4603      	mov	r3, r0
 800284c:	817b      	strh	r3, [r7, #10]
 800284e:	460b      	mov	r3, r1
 8002850:	813b      	strh	r3, [r7, #8]
 8002852:	4613      	mov	r3, r2
 8002854:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	8979      	ldrh	r1, [r7, #10]
 800285c:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <I2C_RequestMemoryWrite+0xa4>)
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 fa6f 	bl	8002d48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	69b9      	ldr	r1, [r7, #24]
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 f8ff 	bl	8002a72 <I2C_WaitOnTXISFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e02c      	b.n	80028d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d105      	bne.n	8002890 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002884:	893b      	ldrh	r3, [r7, #8]
 8002886:	b2da      	uxtb	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	629a      	str	r2, [r3, #40]	; 0x28
 800288e:	e015      	b.n	80028bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002890:	893b      	ldrh	r3, [r7, #8]
 8002892:	0a1b      	lsrs	r3, r3, #8
 8002894:	b29b      	uxth	r3, r3
 8002896:	b2da      	uxtb	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	69b9      	ldr	r1, [r7, #24]
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f8e5 	bl	8002a72 <I2C_WaitOnTXISFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e012      	b.n	80028d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028b2:	893b      	ldrh	r3, [r7, #8]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	2200      	movs	r2, #0
 80028c4:	2180      	movs	r1, #128	; 0x80
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f884 	bl	80029d4 <I2C_WaitOnFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	80002000 	.word	0x80002000

080028e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	4608      	mov	r0, r1
 80028ee:	4611      	mov	r1, r2
 80028f0:	461a      	mov	r2, r3
 80028f2:	4603      	mov	r3, r0
 80028f4:	817b      	strh	r3, [r7, #10]
 80028f6:	460b      	mov	r3, r1
 80028f8:	813b      	strh	r3, [r7, #8]
 80028fa:	4613      	mov	r3, r2
 80028fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	8979      	ldrh	r1, [r7, #10]
 8002904:	4b20      	ldr	r3, [pc, #128]	; (8002988 <I2C_RequestMemoryRead+0xa4>)
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	2300      	movs	r3, #0
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fa1c 	bl	8002d48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	69b9      	ldr	r1, [r7, #24]
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f8ac 	bl	8002a72 <I2C_WaitOnTXISFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e02c      	b.n	800297e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d105      	bne.n	8002936 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800292a:	893b      	ldrh	r3, [r7, #8]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	629a      	str	r2, [r3, #40]	; 0x28
 8002934:	e015      	b.n	8002962 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002936:	893b      	ldrh	r3, [r7, #8]
 8002938:	0a1b      	lsrs	r3, r3, #8
 800293a:	b29b      	uxth	r3, r3
 800293c:	b2da      	uxtb	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002944:	69fa      	ldr	r2, [r7, #28]
 8002946:	69b9      	ldr	r1, [r7, #24]
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f892 	bl	8002a72 <I2C_WaitOnTXISFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e012      	b.n	800297e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002958:	893b      	ldrh	r3, [r7, #8]
 800295a:	b2da      	uxtb	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	2200      	movs	r2, #0
 800296a:	2140      	movs	r1, #64	; 0x40
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f831 	bl	80029d4 <I2C_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	80002000 	.word	0x80002000

0800298c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d103      	bne.n	80029aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2200      	movs	r2, #0
 80029a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d007      	beq.n	80029c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	619a      	str	r2, [r3, #24]
  }
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	4613      	mov	r3, r2
 80029e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e4:	e031      	b.n	8002a4a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ec:	d02d      	beq.n	8002a4a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ee:	f7ff f9bf 	bl	8001d70 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d302      	bcc.n	8002a04 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d122      	bne.n	8002a4a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699a      	ldr	r2, [r3, #24]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	bf0c      	ite	eq
 8002a14:	2301      	moveq	r3, #1
 8002a16:	2300      	movne	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d113      	bne.n	8002a4a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f043 0220 	orr.w	r2, r3, #32
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00f      	b.n	8002a6a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699a      	ldr	r2, [r3, #24]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4013      	ands	r3, r2
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	bf0c      	ite	eq
 8002a5a:	2301      	moveq	r3, #1
 8002a5c:	2300      	movne	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d0be      	beq.n	80029e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a7e:	e033      	b.n	8002ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f87f 	bl	8002b88 <I2C_IsErrorOccurred>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e031      	b.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a9a:	d025      	beq.n	8002ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a9c:	f7ff f968 	bl	8001d70 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d302      	bcc.n	8002ab2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d11a      	bne.n	8002ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d013      	beq.n	8002ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac4:	f043 0220 	orr.w	r2, r3, #32
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e007      	b.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d1c4      	bne.n	8002a80 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b0c:	e02f      	b.n	8002b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f838 	bl	8002b88 <I2C_IsErrorOccurred>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e02d      	b.n	8002b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b22:	f7ff f925 	bl	8001d70 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d302      	bcc.n	8002b38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d11a      	bne.n	8002b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d013      	beq.n	8002b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f043 0220 	orr.w	r2, r3, #32
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e007      	b.n	8002b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	d1c8      	bne.n	8002b0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	; 0x28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d068      	beq.n	8002c86 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2210      	movs	r2, #16
 8002bba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bbc:	e049      	b.n	8002c52 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bc4:	d045      	beq.n	8002c52 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bc6:	f7ff f8d3 	bl	8001d70 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d302      	bcc.n	8002bdc <I2C_IsErrorOccurred+0x54>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d13a      	bne.n	8002c52 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bfe:	d121      	bne.n	8002c44 <I2C_IsErrorOccurred+0xbc>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c06:	d01d      	beq.n	8002c44 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c08:	7cfb      	ldrb	r3, [r7, #19]
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d01a      	beq.n	8002c44 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c1c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c1e:	f7ff f8a7 	bl	8001d70 <HAL_GetTick>
 8002c22:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c24:	e00e      	b.n	8002c44 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c26:	f7ff f8a3 	bl	8001d70 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b19      	cmp	r3, #25
 8002c32:	d907      	bls.n	8002c44 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	f043 0320 	orr.w	r3, r3, #32
 8002c3a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002c42:	e006      	b.n	8002c52 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f003 0320 	and.w	r3, r3, #32
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d1e9      	bne.n	8002c26 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d003      	beq.n	8002c68 <I2C_IsErrorOccurred+0xe0>
 8002c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0aa      	beq.n	8002bbe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d103      	bne.n	8002c78 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2220      	movs	r2, #32
 8002c76:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	f043 0304 	orr.w	r3, r3, #4
 8002c7e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00b      	beq.n	8002cb0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ca8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	f043 0308 	orr.w	r3, r3, #8
 8002cc0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00b      	beq.n	8002cf4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	f043 0302 	orr.w	r3, r3, #2
 8002ce2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01c      	beq.n	8002d36 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f7ff fe45 	bl	800298c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <I2C_IsErrorOccurred+0x1bc>)
 8002d0e:	400b      	ands	r3, r1
 8002d10:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3728      	adds	r7, #40	; 0x28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	fe00e800 	.word	0xfe00e800

08002d48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	460b      	mov	r3, r1
 8002d54:	817b      	strh	r3, [r7, #10]
 8002d56:	4613      	mov	r3, r2
 8002d58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d5a:	897b      	ldrh	r3, [r7, #10]
 8002d5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d60:	7a7b      	ldrb	r3, [r7, #9]
 8002d62:	041b      	lsls	r3, r3, #16
 8002d64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d68:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d76:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	0d5b      	lsrs	r3, r3, #21
 8002d82:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <I2C_TransferConfig+0x60>)
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	ea02 0103 	and.w	r1, r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	03ff63ff 	.word	0x03ff63ff

08002dac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	d138      	bne.n	8002e34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e032      	b.n	8002e36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2224      	movs	r2, #36	; 0x24
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6819      	ldr	r1, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e000      	b.n	8002e36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e34:	2302      	movs	r3, #2
  }
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b085      	sub	sp, #20
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d139      	bne.n	8002ecc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e033      	b.n	8002ece <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2224      	movs	r2, #36	; 0x24
 8002e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0201 	bic.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	e000      	b.n	8002ece <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ecc:	2302      	movs	r3, #2
  }
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002eda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002edc:	b08b      	sub	sp, #44	; 0x2c
 8002ede:	af06      	add	r7, sp, #24
 8002ee0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0c4      	b.n	8003076 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d106      	bne.n	8002f06 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7fe fe31 	bl	8001b68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2203      	movs	r2, #3
 8002f0a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f002 fa84 	bl	8005420 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
 8002f1c:	e040      	b.n	8002fa0 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3301      	adds	r3, #1
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	440b      	add	r3, r1
 8002f44:	7bfa      	ldrb	r2, [r7, #15]
 8002f46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	440b      	add	r3, r1
 8002f58:	3303      	adds	r3, #3
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f5e:	7bfa      	ldrb	r2, [r7, #15]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3338      	adds	r3, #56	; 0x38
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	440b      	add	r3, r1
 8002f80:	333c      	adds	r3, #60	; 0x3c
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f86:	7bfa      	ldrb	r2, [r7, #15]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	440b      	add	r3, r1
 8002f94:	3340      	adds	r3, #64	; 0x40
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d3b9      	bcc.n	8002f1e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	73fb      	strb	r3, [r7, #15]
 8002fae:	e044      	b.n	800303a <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fb0:	7bfa      	ldrb	r2, [r7, #15]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	440b      	add	r3, r1
 8002fbe:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fc6:	7bfa      	ldrb	r2, [r7, #15]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	440b      	add	r3, r1
 8002fd4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fd8:	7bfa      	ldrb	r2, [r7, #15]
 8002fda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fdc:	7bfa      	ldrb	r2, [r7, #15]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	440b      	add	r3, r1
 8002fea:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ff2:	7bfa      	ldrb	r2, [r7, #15]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	440b      	add	r3, r1
 8003000:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003008:	7bfa      	ldrb	r2, [r7, #15]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	440b      	add	r3, r1
 8003016:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800301e:	7bfa      	ldrb	r2, [r7, #15]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	440b      	add	r3, r1
 800302c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	3301      	adds	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
 800303a:	7bfa      	ldrb	r2, [r7, #15]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	429a      	cmp	r2, r3
 8003042:	d3b5      	bcc.n	8002fb0 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	687e      	ldr	r6, [r7, #4]
 800304c:	466d      	mov	r5, sp
 800304e:	f106 0410 	add.w	r4, r6, #16
 8003052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	602b      	str	r3, [r5, #0]
 800305a:	1d33      	adds	r3, r6, #4
 800305c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800305e:	6838      	ldr	r0, [r7, #0]
 8003060:	f002 f9f9 	bl	8005456 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003086:	af00      	add	r7, sp, #0
 8003088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003090:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003096:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d102      	bne.n	80030a6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	f001 b823 	b.w	80040ec <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 817d 	beq.w	80033b6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030bc:	4bbc      	ldr	r3, [pc, #752]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d00c      	beq.n	80030e2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030c8:	4bb9      	ldr	r3, [pc, #740]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d15c      	bne.n	800318e <HAL_RCC_OscConfig+0x10e>
 80030d4:	4bb6      	ldr	r3, [pc, #728]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e0:	d155      	bne.n	800318e <HAL_RCC_OscConfig+0x10e>
 80030e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030f6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b01      	cmp	r3, #1
 800310c:	d102      	bne.n	8003114 <HAL_RCC_OscConfig+0x94>
 800310e:	4ba8      	ldr	r3, [pc, #672]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	e015      	b.n	8003140 <HAL_RCC_OscConfig+0xc0>
 8003114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003118:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003120:	fa93 f3a3 	rbit	r3, r3
 8003124:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800312c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003130:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800313c:	4b9c      	ldr	r3, [pc, #624]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003144:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003148:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800314c:	fa92 f2a2 	rbit	r2, r2
 8003150:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003154:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003158:	fab2 f282 	clz	r2, r2
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	f042 0220 	orr.w	r2, r2, #32
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	f002 021f 	and.w	r2, r2, #31
 8003168:	2101      	movs	r1, #1
 800316a:	fa01 f202 	lsl.w	r2, r1, r2
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 811f 	beq.w	80033b4 <HAL_RCC_OscConfig+0x334>
 8003176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	f040 8116 	bne.w	80033b4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	f000 bfaf 	b.w	80040ec <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800318e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319e:	d106      	bne.n	80031ae <HAL_RCC_OscConfig+0x12e>
 80031a0:	4b83      	ldr	r3, [pc, #524]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a82      	ldr	r2, [pc, #520]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 80031a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	e036      	b.n	800321c <HAL_RCC_OscConfig+0x19c>
 80031ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x158>
 80031be:	4b7c      	ldr	r3, [pc, #496]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a7b      	ldr	r2, [pc, #492]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 80031c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b79      	ldr	r3, [pc, #484]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a78      	ldr	r2, [pc, #480]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 80031d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e021      	b.n	800321c <HAL_RCC_OscConfig+0x19c>
 80031d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e8:	d10c      	bne.n	8003204 <HAL_RCC_OscConfig+0x184>
 80031ea:	4b71      	ldr	r3, [pc, #452]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a70      	ldr	r2, [pc, #448]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 80031f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	4b6e      	ldr	r3, [pc, #440]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a6d      	ldr	r2, [pc, #436]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 80031fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	e00b      	b.n	800321c <HAL_RCC_OscConfig+0x19c>
 8003204:	4b6a      	ldr	r3, [pc, #424]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a69      	ldr	r2, [pc, #420]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 800320a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	4b67      	ldr	r3, [pc, #412]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a66      	ldr	r2, [pc, #408]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 8003216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800321a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800321c:	4b64      	ldr	r3, [pc, #400]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	f023 020f 	bic.w	r2, r3, #15
 8003224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003228:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	495f      	ldr	r1, [pc, #380]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 8003232:	4313      	orrs	r3, r2
 8003234:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d059      	beq.n	80032fa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003246:	f7fe fd93 	bl	8001d70 <HAL_GetTick>
 800324a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324e:	e00a      	b.n	8003266 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003250:	f7fe fd8e 	bl	8001d70 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b64      	cmp	r3, #100	; 0x64
 800325e:	d902      	bls.n	8003266 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	f000 bf43 	b.w	80040ec <HAL_RCC_OscConfig+0x106c>
 8003266:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800326a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800327a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d102      	bne.n	8003298 <HAL_RCC_OscConfig+0x218>
 8003292:	4b47      	ldr	r3, [pc, #284]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	e015      	b.n	80032c4 <HAL_RCC_OscConfig+0x244>
 8003298:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800329c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80032a4:	fa93 f3a3 	rbit	r3, r3
 80032a8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80032ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032b0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80032b4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80032b8:	fa93 f3a3 	rbit	r3, r3
 80032bc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80032c0:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032c8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80032cc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80032d0:	fa92 f2a2 	rbit	r2, r2
 80032d4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80032d8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80032dc:	fab2 f282 	clz	r2, r2
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	f042 0220 	orr.w	r2, r2, #32
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	f002 021f 	and.w	r2, r2, #31
 80032ec:	2101      	movs	r1, #1
 80032ee:	fa01 f202 	lsl.w	r2, r1, r2
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ab      	beq.n	8003250 <HAL_RCC_OscConfig+0x1d0>
 80032f8:	e05d      	b.n	80033b6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fa:	f7fe fd39 	bl	8001d70 <HAL_GetTick>
 80032fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003302:	e00a      	b.n	800331a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003304:	f7fe fd34 	bl	8001d70 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b64      	cmp	r3, #100	; 0x64
 8003312:	d902      	bls.n	800331a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	f000 bee9 	b.w	80040ec <HAL_RCC_OscConfig+0x106c>
 800331a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800331e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003326:	fa93 f3a3 	rbit	r3, r3
 800332a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800332e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d102      	bne.n	800334c <HAL_RCC_OscConfig+0x2cc>
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	e015      	b.n	8003378 <HAL_RCC_OscConfig+0x2f8>
 800334c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003350:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003358:	fa93 f3a3 	rbit	r3, r3
 800335c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003360:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003364:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003368:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800336c:	fa93 f3a3 	rbit	r3, r3
 8003370:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003374:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <HAL_RCC_OscConfig+0x330>)
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800337c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003380:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003384:	fa92 f2a2 	rbit	r2, r2
 8003388:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800338c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003390:	fab2 f282 	clz	r2, r2
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	f042 0220 	orr.w	r2, r2, #32
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	f002 021f 	and.w	r2, r2, #31
 80033a0:	2101      	movs	r1, #1
 80033a2:	fa01 f202 	lsl.w	r2, r1, r2
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1ab      	bne.n	8003304 <HAL_RCC_OscConfig+0x284>
 80033ac:	e003      	b.n	80033b6 <HAL_RCC_OscConfig+0x336>
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 817d 	beq.w	80036c6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80033cc:	4ba6      	ldr	r3, [pc, #664]	; (8003668 <HAL_RCC_OscConfig+0x5e8>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 030c 	and.w	r3, r3, #12
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00b      	beq.n	80033f0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033d8:	4ba3      	ldr	r3, [pc, #652]	; (8003668 <HAL_RCC_OscConfig+0x5e8>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d172      	bne.n	80034ca <HAL_RCC_OscConfig+0x44a>
 80033e4:	4ba0      	ldr	r3, [pc, #640]	; (8003668 <HAL_RCC_OscConfig+0x5e8>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d16c      	bne.n	80034ca <HAL_RCC_OscConfig+0x44a>
 80033f0:	2302      	movs	r3, #2
 80033f2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80033fa:	fa93 f3a3 	rbit	r3, r3
 80033fe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003402:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b01      	cmp	r3, #1
 8003418:	d102      	bne.n	8003420 <HAL_RCC_OscConfig+0x3a0>
 800341a:	4b93      	ldr	r3, [pc, #588]	; (8003668 <HAL_RCC_OscConfig+0x5e8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	e013      	b.n	8003448 <HAL_RCC_OscConfig+0x3c8>
 8003420:	2302      	movs	r3, #2
 8003422:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003432:	2302      	movs	r3, #2
 8003434:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003438:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003444:	4b88      	ldr	r3, [pc, #544]	; (8003668 <HAL_RCC_OscConfig+0x5e8>)
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	2202      	movs	r2, #2
 800344a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800344e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003452:	fa92 f2a2 	rbit	r2, r2
 8003456:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800345a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800345e:	fab2 f282 	clz	r2, r2
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	f042 0220 	orr.w	r2, r2, #32
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	f002 021f 	and.w	r2, r2, #31
 800346e:	2101      	movs	r1, #1
 8003470:	fa01 f202 	lsl.w	r2, r1, r2
 8003474:	4013      	ands	r3, r2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_RCC_OscConfig+0x410>
 800347a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d002      	beq.n	8003490 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f000 be2e 	b.w	80040ec <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003490:	4b75      	ldr	r3, [pc, #468]	; (8003668 <HAL_RCC_OscConfig+0x5e8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	21f8      	movs	r1, #248	; 0xf8
 80034a6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80034ae:	fa91 f1a1 	rbit	r1, r1
 80034b2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80034b6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80034ba:	fab1 f181 	clz	r1, r1
 80034be:	b2c9      	uxtb	r1, r1
 80034c0:	408b      	lsls	r3, r1
 80034c2:	4969      	ldr	r1, [pc, #420]	; (8003668 <HAL_RCC_OscConfig+0x5e8>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c8:	e0fd      	b.n	80036c6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 8088 	beq.w	80035ec <HAL_RCC_OscConfig+0x56c>
 80034dc:	2301      	movs	r3, #1
 80034de:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80034ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f2:	fab3 f383 	clz	r3, r3
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	461a      	mov	r2, r3
 8003504:	2301      	movs	r3, #1
 8003506:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7fe fc32 	bl	8001d70 <HAL_GetTick>
 800350c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003510:	e00a      	b.n	8003528 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003512:	f7fe fc2d 	bl	8001d70 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d902      	bls.n	8003528 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	f000 bde2 	b.w	80040ec <HAL_RCC_OscConfig+0x106c>
 8003528:	2302      	movs	r3, #2
 800352a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003532:	fa93 f3a3 	rbit	r3, r3
 8003536:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800353a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d102      	bne.n	8003558 <HAL_RCC_OscConfig+0x4d8>
 8003552:	4b45      	ldr	r3, [pc, #276]	; (8003668 <HAL_RCC_OscConfig+0x5e8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	e013      	b.n	8003580 <HAL_RCC_OscConfig+0x500>
 8003558:	2302      	movs	r3, #2
 800355a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800356a:	2302      	movs	r3, #2
 800356c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003570:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003574:	fa93 f3a3 	rbit	r3, r3
 8003578:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800357c:	4b3a      	ldr	r3, [pc, #232]	; (8003668 <HAL_RCC_OscConfig+0x5e8>)
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	2202      	movs	r2, #2
 8003582:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003586:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800358a:	fa92 f2a2 	rbit	r2, r2
 800358e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003592:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003596:	fab2 f282 	clz	r2, r2
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	f042 0220 	orr.w	r2, r2, #32
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	f002 021f 	and.w	r2, r2, #31
 80035a6:	2101      	movs	r1, #1
 80035a8:	fa01 f202 	lsl.w	r2, r1, r2
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0af      	beq.n	8003512 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b2:	4b2d      	ldr	r3, [pc, #180]	; (8003668 <HAL_RCC_OscConfig+0x5e8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	21f8      	movs	r1, #248	; 0xf8
 80035c8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80035d0:	fa91 f1a1 	rbit	r1, r1
 80035d4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80035d8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80035dc:	fab1 f181 	clz	r1, r1
 80035e0:	b2c9      	uxtb	r1, r1
 80035e2:	408b      	lsls	r3, r1
 80035e4:	4920      	ldr	r1, [pc, #128]	; (8003668 <HAL_RCC_OscConfig+0x5e8>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]
 80035ea:	e06c      	b.n	80036c6 <HAL_RCC_OscConfig+0x646>
 80035ec:	2301      	movs	r3, #1
 80035ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80035f6:	fa93 f3a3 	rbit	r3, r3
 80035fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80035fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003602:	fab3 f383 	clz	r3, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800360c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	461a      	mov	r2, r3
 8003614:	2300      	movs	r3, #0
 8003616:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7fe fbaa 	bl	8001d70 <HAL_GetTick>
 800361c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003620:	e00a      	b.n	8003638 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003622:	f7fe fba5 	bl	8001d70 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d902      	bls.n	8003638 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	f000 bd5a 	b.w	80040ec <HAL_RCC_OscConfig+0x106c>
 8003638:	2302      	movs	r3, #2
 800363a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800364a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b01      	cmp	r3, #1
 8003660:	d104      	bne.n	800366c <HAL_RCC_OscConfig+0x5ec>
 8003662:	4b01      	ldr	r3, [pc, #4]	; (8003668 <HAL_RCC_OscConfig+0x5e8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	e015      	b.n	8003694 <HAL_RCC_OscConfig+0x614>
 8003668:	40021000 	.word	0x40021000
 800366c:	2302      	movs	r3, #2
 800366e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800367e:	2302      	movs	r3, #2
 8003680:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003684:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003688:	fa93 f3a3 	rbit	r3, r3
 800368c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003690:	4bc8      	ldr	r3, [pc, #800]	; (80039b4 <HAL_RCC_OscConfig+0x934>)
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	2202      	movs	r2, #2
 8003696:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800369a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800369e:	fa92 f2a2 	rbit	r2, r2
 80036a2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80036a6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80036aa:	fab2 f282 	clz	r2, r2
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	f042 0220 	orr.w	r2, r2, #32
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	f002 021f 	and.w	r2, r2, #31
 80036ba:	2101      	movs	r1, #1
 80036bc:	fa01 f202 	lsl.w	r2, r1, r2
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1ad      	bne.n	8003622 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 8110 	beq.w	80038fc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d079      	beq.n	80037e0 <HAL_RCC_OscConfig+0x760>
 80036ec:	2301      	movs	r3, #1
 80036ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80036fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	4bab      	ldr	r3, [pc, #684]	; (80039b8 <HAL_RCC_OscConfig+0x938>)
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	461a      	mov	r2, r3
 8003712:	2301      	movs	r3, #1
 8003714:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003716:	f7fe fb2b 	bl	8001d70 <HAL_GetTick>
 800371a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371e:	e00a      	b.n	8003736 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003720:	f7fe fb26 	bl	8001d70 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d902      	bls.n	8003736 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	f000 bcdb 	b.w	80040ec <HAL_RCC_OscConfig+0x106c>
 8003736:	2302      	movs	r3, #2
 8003738:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003740:	fa93 f3a3 	rbit	r3, r3
 8003744:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003750:	2202      	movs	r2, #2
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003758:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	fa93 f2a3 	rbit	r2, r3
 8003762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003766:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003774:	2202      	movs	r2, #2
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	fa93 f2a3 	rbit	r2, r3
 8003786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800378e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003790:	4b88      	ldr	r3, [pc, #544]	; (80039b4 <HAL_RCC_OscConfig+0x934>)
 8003792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003798:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800379c:	2102      	movs	r1, #2
 800379e:	6019      	str	r1, [r3, #0]
 80037a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	fa93 f1a3 	rbit	r1, r3
 80037ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80037b6:	6019      	str	r1, [r3, #0]
  return result;
 80037b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037bc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2101      	movs	r1, #1
 80037d4:	fa01 f303 	lsl.w	r3, r1, r3
 80037d8:	4013      	ands	r3, r2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0a0      	beq.n	8003720 <HAL_RCC_OscConfig+0x6a0>
 80037de:	e08d      	b.n	80038fc <HAL_RCC_OscConfig+0x87c>
 80037e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037e8:	2201      	movs	r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	fa93 f2a3 	rbit	r2, r3
 80037fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003802:	601a      	str	r2, [r3, #0]
  return result;
 8003804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003808:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800380c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	4b68      	ldr	r3, [pc, #416]	; (80039b8 <HAL_RCC_OscConfig+0x938>)
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	461a      	mov	r2, r3
 800381e:	2300      	movs	r3, #0
 8003820:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003822:	f7fe faa5 	bl	8001d70 <HAL_GetTick>
 8003826:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800382a:	e00a      	b.n	8003842 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800382c:	f7fe faa0 	bl	8001d70 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d902      	bls.n	8003842 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	f000 bc55 	b.w	80040ec <HAL_RCC_OscConfig+0x106c>
 8003842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003846:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800384a:	2202      	movs	r2, #2
 800384c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003852:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	fa93 f2a3 	rbit	r2, r3
 800385c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003860:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800386e:	2202      	movs	r2, #2
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003876:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	fa93 f2a3 	rbit	r2, r3
 8003880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003884:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003892:	2202      	movs	r2, #2
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	fa93 f2a3 	rbit	r2, r3
 80038a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80038ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ae:	4b41      	ldr	r3, [pc, #260]	; (80039b4 <HAL_RCC_OscConfig+0x934>)
 80038b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80038ba:	2102      	movs	r1, #2
 80038bc:	6019      	str	r1, [r3, #0]
 80038be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	fa93 f1a3 	rbit	r1, r3
 80038cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038d4:	6019      	str	r1, [r3, #0]
  return result;
 80038d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038da:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	fab3 f383 	clz	r3, r3
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	2101      	movs	r1, #1
 80038f2:	fa01 f303 	lsl.w	r3, r1, r3
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d197      	bne.n	800382c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003900:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 81a1 	beq.w	8003c54 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003912:	2300      	movs	r3, #0
 8003914:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003918:	4b26      	ldr	r3, [pc, #152]	; (80039b4 <HAL_RCC_OscConfig+0x934>)
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d116      	bne.n	8003952 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003924:	4b23      	ldr	r3, [pc, #140]	; (80039b4 <HAL_RCC_OscConfig+0x934>)
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	4a22      	ldr	r2, [pc, #136]	; (80039b4 <HAL_RCC_OscConfig+0x934>)
 800392a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392e:	61d3      	str	r3, [r2, #28]
 8003930:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_RCC_OscConfig+0x934>)
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003946:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800394a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800394c:	2301      	movs	r3, #1
 800394e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003952:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <HAL_RCC_OscConfig+0x93c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395a:	2b00      	cmp	r3, #0
 800395c:	d11a      	bne.n	8003994 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800395e:	4b17      	ldr	r3, [pc, #92]	; (80039bc <HAL_RCC_OscConfig+0x93c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a16      	ldr	r2, [pc, #88]	; (80039bc <HAL_RCC_OscConfig+0x93c>)
 8003964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003968:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396a:	f7fe fa01 	bl	8001d70 <HAL_GetTick>
 800396e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003972:	e009      	b.n	8003988 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003974:	f7fe f9fc 	bl	8001d70 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b64      	cmp	r3, #100	; 0x64
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e3b1      	b.n	80040ec <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <HAL_RCC_OscConfig+0x93c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0ef      	beq.n	8003974 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003998:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d10d      	bne.n	80039c0 <HAL_RCC_OscConfig+0x940>
 80039a4:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <HAL_RCC_OscConfig+0x934>)
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	4a02      	ldr	r2, [pc, #8]	; (80039b4 <HAL_RCC_OscConfig+0x934>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6213      	str	r3, [r2, #32]
 80039b0:	e03c      	b.n	8003a2c <HAL_RCC_OscConfig+0x9ac>
 80039b2:	bf00      	nop
 80039b4:	40021000 	.word	0x40021000
 80039b8:	10908120 	.word	0x10908120
 80039bc:	40007000 	.word	0x40007000
 80039c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10c      	bne.n	80039ea <HAL_RCC_OscConfig+0x96a>
 80039d0:	4bc1      	ldr	r3, [pc, #772]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	4ac0      	ldr	r2, [pc, #768]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	6213      	str	r3, [r2, #32]
 80039dc:	4bbe      	ldr	r3, [pc, #760]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	4abd      	ldr	r2, [pc, #756]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 80039e2:	f023 0304 	bic.w	r3, r3, #4
 80039e6:	6213      	str	r3, [r2, #32]
 80039e8:	e020      	b.n	8003a2c <HAL_RCC_OscConfig+0x9ac>
 80039ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	2b05      	cmp	r3, #5
 80039f8:	d10c      	bne.n	8003a14 <HAL_RCC_OscConfig+0x994>
 80039fa:	4bb7      	ldr	r3, [pc, #732]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	4ab6      	ldr	r2, [pc, #728]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 8003a00:	f043 0304 	orr.w	r3, r3, #4
 8003a04:	6213      	str	r3, [r2, #32]
 8003a06:	4bb4      	ldr	r3, [pc, #720]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	4ab3      	ldr	r2, [pc, #716]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	6213      	str	r3, [r2, #32]
 8003a12:	e00b      	b.n	8003a2c <HAL_RCC_OscConfig+0x9ac>
 8003a14:	4bb0      	ldr	r3, [pc, #704]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	4aaf      	ldr	r2, [pc, #700]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	6213      	str	r3, [r2, #32]
 8003a20:	4bad      	ldr	r3, [pc, #692]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	4aac      	ldr	r2, [pc, #688]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 8003a26:	f023 0304 	bic.w	r3, r3, #4
 8003a2a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8081 	beq.w	8003b40 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3e:	f7fe f997 	bl	8001d70 <HAL_GetTick>
 8003a42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a46:	e00b      	b.n	8003a60 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a48:	f7fe f992 	bl	8001d70 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e345      	b.n	80040ec <HAL_RCC_OscConfig+0x106c>
 8003a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a68:	2202      	movs	r2, #2
 8003a6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a70:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	fa93 f2a3 	rbit	r2, r3
 8003a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a88:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	fa93 f2a3 	rbit	r2, r3
 8003a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003aa6:	601a      	str	r2, [r3, #0]
  return result;
 8003aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aac:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ab0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab2:	fab3 f383 	clz	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	f043 0302 	orr.w	r3, r3, #2
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d102      	bne.n	8003acc <HAL_RCC_OscConfig+0xa4c>
 8003ac6:	4b84      	ldr	r3, [pc, #528]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	e013      	b.n	8003af4 <HAL_RCC_OscConfig+0xa74>
 8003acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003adc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	fa93 f2a3 	rbit	r2, r3
 8003ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	4b79      	ldr	r3, [pc, #484]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003af8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003afc:	2102      	movs	r1, #2
 8003afe:	6011      	str	r1, [r2, #0]
 8003b00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b04:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	fa92 f1a2 	rbit	r1, r2
 8003b0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b12:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b16:	6011      	str	r1, [r2, #0]
  return result;
 8003b18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b1c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b20:	6812      	ldr	r2, [r2, #0]
 8003b22:	fab2 f282 	clz	r2, r2
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	f002 021f 	and.w	r2, r2, #31
 8003b32:	2101      	movs	r1, #1
 8003b34:	fa01 f202 	lsl.w	r2, r1, r2
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d084      	beq.n	8003a48 <HAL_RCC_OscConfig+0x9c8>
 8003b3e:	e07f      	b.n	8003c40 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b40:	f7fe f916 	bl	8001d70 <HAL_GetTick>
 8003b44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b48:	e00b      	b.n	8003b62 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fe f911 	bl	8001d70 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e2c4      	b.n	80040ec <HAL_RCC_OscConfig+0x106c>
 8003b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b66:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b72:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	fa93 f2a3 	rbit	r2, r3
 8003b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b80:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b8e:	2202      	movs	r2, #2
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b96:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	fa93 f2a3 	rbit	r2, r3
 8003ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ba8:	601a      	str	r2, [r3, #0]
  return result;
 8003baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bae:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003bb2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb4:	fab3 f383 	clz	r3, r3
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f043 0302 	orr.w	r3, r3, #2
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d102      	bne.n	8003bce <HAL_RCC_OscConfig+0xb4e>
 8003bc8:	4b43      	ldr	r3, [pc, #268]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	e013      	b.n	8003bf6 <HAL_RCC_OscConfig+0xb76>
 8003bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bde:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	fa93 f2a3 	rbit	r2, r3
 8003be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	4b39      	ldr	r3, [pc, #228]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bfa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003bfe:	2102      	movs	r1, #2
 8003c00:	6011      	str	r1, [r2, #0]
 8003c02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c06:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	fa92 f1a2 	rbit	r1, r2
 8003c10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c14:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c18:	6011      	str	r1, [r2, #0]
  return result;
 8003c1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c1e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c22:	6812      	ldr	r2, [r2, #0]
 8003c24:	fab2 f282 	clz	r2, r2
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	f002 021f 	and.w	r2, r2, #31
 8003c34:	2101      	movs	r1, #1
 8003c36:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d184      	bne.n	8003b4a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c40:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d105      	bne.n	8003c54 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c48:	4b23      	ldr	r3, [pc, #140]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	4a22      	ldr	r2, [pc, #136]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 8003c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c52:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8242 	beq.w	80040ea <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c66:	4b1c      	ldr	r3, [pc, #112]	; (8003cd8 <HAL_RCC_OscConfig+0xc58>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	f000 8213 	beq.w	800409a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	f040 8162 	bne.w	8003f4a <HAL_RCC_OscConfig+0xeca>
 8003c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003c8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c98:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	fa93 f2a3 	rbit	r2, r3
 8003ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003caa:	601a      	str	r2, [r3, #0]
  return result;
 8003cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003cb4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb6:	fab3 f383 	clz	r3, r3
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	2300      	movs	r3, #0
 8003cca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7fe f850 	bl	8001d70 <HAL_GetTick>
 8003cd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd4:	e00c      	b.n	8003cf0 <HAL_RCC_OscConfig+0xc70>
 8003cd6:	bf00      	nop
 8003cd8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fe f848 	bl	8001d70 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e1fd      	b.n	80040ec <HAL_RCC_OscConfig+0x106c>
 8003cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d02:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	fa93 f2a3 	rbit	r2, r3
 8003d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d10:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d14:	601a      	str	r2, [r3, #0]
  return result;
 8003d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d1a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d20:	fab3 f383 	clz	r3, r3
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d102      	bne.n	8003d3a <HAL_RCC_OscConfig+0xcba>
 8003d34:	4bb0      	ldr	r3, [pc, #704]	; (8003ff8 <HAL_RCC_OscConfig+0xf78>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	e027      	b.n	8003d8a <HAL_RCC_OscConfig+0xd0a>
 8003d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d3e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d4c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	fa93 f2a3 	rbit	r2, r3
 8003d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d64:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d72:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	fa93 f2a3 	rbit	r2, r3
 8003d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d80:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	4b9c      	ldr	r3, [pc, #624]	; (8003ff8 <HAL_RCC_OscConfig+0xf78>)
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d8e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003d92:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d96:	6011      	str	r1, [r2, #0]
 8003d98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d9c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	fa92 f1a2 	rbit	r1, r2
 8003da6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003daa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003dae:	6011      	str	r1, [r2, #0]
  return result;
 8003db0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003db4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	fab2 f282 	clz	r2, r2
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	f042 0220 	orr.w	r2, r2, #32
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	f002 021f 	and.w	r2, r2, #31
 8003dca:	2101      	movs	r1, #1
 8003dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d182      	bne.n	8003cdc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd6:	4b88      	ldr	r3, [pc, #544]	; (8003ff8 <HAL_RCC_OscConfig+0xf78>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	430b      	orrs	r3, r1
 8003df8:	497f      	ldr	r1, [pc, #508]	; (8003ff8 <HAL_RCC_OscConfig+0xf78>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	604b      	str	r3, [r1, #4]
 8003dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e02:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003e06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e10:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	fa93 f2a3 	rbit	r2, r3
 8003e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e22:	601a      	str	r2, [r3, #0]
  return result;
 8003e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e28:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e2c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e2e:	fab3 f383 	clz	r3, r3
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	461a      	mov	r2, r3
 8003e40:	2301      	movs	r3, #1
 8003e42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7fd ff94 	bl	8001d70 <HAL_GetTick>
 8003e48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e4c:	e009      	b.n	8003e62 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4e:	f7fd ff8f 	bl	8001d70 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e144      	b.n	80040ec <HAL_RCC_OscConfig+0x106c>
 8003e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e66:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e74:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	fa93 f2a3 	rbit	r2, r3
 8003e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e82:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e86:	601a      	str	r2, [r3, #0]
  return result;
 8003e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e92:	fab3 f383 	clz	r3, r3
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d102      	bne.n	8003eac <HAL_RCC_OscConfig+0xe2c>
 8003ea6:	4b54      	ldr	r3, [pc, #336]	; (8003ff8 <HAL_RCC_OscConfig+0xf78>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	e027      	b.n	8003efc <HAL_RCC_OscConfig+0xe7c>
 8003eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003eb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ebe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	fa93 f2a3 	rbit	r2, r3
 8003ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ecc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003eda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	fa93 f2a3 	rbit	r2, r3
 8003eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	4b3f      	ldr	r3, [pc, #252]	; (8003ff8 <HAL_RCC_OscConfig+0xf78>)
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f00:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003f04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f08:	6011      	str	r1, [r2, #0]
 8003f0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f0e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	fa92 f1a2 	rbit	r1, r2
 8003f18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f1c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f20:	6011      	str	r1, [r2, #0]
  return result;
 8003f22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f26:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	fab2 f282 	clz	r2, r2
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	f042 0220 	orr.w	r2, r2, #32
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	f002 021f 	and.w	r2, r2, #31
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d082      	beq.n	8003e4e <HAL_RCC_OscConfig+0xdce>
 8003f48:	e0cf      	b.n	80040ea <HAL_RCC_OscConfig+0x106a>
 8003f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003f52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f5c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	fa93 f2a3 	rbit	r2, r3
 8003f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f6e:	601a      	str	r2, [r3, #0]
  return result;
 8003f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f74:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f78:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7a:	fab3 f383 	clz	r3, r3
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7fd feee 	bl	8001d70 <HAL_GetTick>
 8003f94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f98:	e009      	b.n	8003fae <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f9a:	f7fd fee9 	bl	8001d70 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e09e      	b.n	80040ec <HAL_RCC_OscConfig+0x106c>
 8003fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003fb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	fa93 f2a3 	rbit	r2, r3
 8003fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fce:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003fd2:	601a      	str	r2, [r3, #0]
  return result;
 8003fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003fdc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fde:	fab3 f383 	clz	r3, r3
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d104      	bne.n	8003ffc <HAL_RCC_OscConfig+0xf7c>
 8003ff2:	4b01      	ldr	r3, [pc, #4]	; (8003ff8 <HAL_RCC_OscConfig+0xf78>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	e029      	b.n	800404c <HAL_RCC_OscConfig+0xfcc>
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004000:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	fa93 f2a3 	rbit	r2, r3
 8004018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004026:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800402a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004034:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	fa93 f2a3 	rbit	r2, r3
 800403e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004042:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <HAL_RCC_OscConfig+0x1078>)
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004050:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004054:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004058:	6011      	str	r1, [r2, #0]
 800405a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800405e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	fa92 f1a2 	rbit	r1, r2
 8004068:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800406c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004070:	6011      	str	r1, [r2, #0]
  return result;
 8004072:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004076:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800407a:	6812      	ldr	r2, [r2, #0]
 800407c:	fab2 f282 	clz	r2, r2
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	f042 0220 	orr.w	r2, r2, #32
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	f002 021f 	and.w	r2, r2, #31
 800408c:	2101      	movs	r1, #1
 800408e:	fa01 f202 	lsl.w	r2, r1, r2
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d180      	bne.n	8003f9a <HAL_RCC_OscConfig+0xf1a>
 8004098:	e027      	b.n	80040ea <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800409a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800409e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e01e      	b.n	80040ec <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <HAL_RCC_OscConfig+0x1078>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80040ba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d10b      	bne.n	80040e6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80040ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80040d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d001      	beq.n	80040ea <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000

080040fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b09e      	sub	sp, #120	; 0x78
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e162      	b.n	80043da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004114:	4b90      	ldr	r3, [pc, #576]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d910      	bls.n	8004144 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	4b8d      	ldr	r3, [pc, #564]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 0207 	bic.w	r2, r3, #7
 800412a:	498b      	ldr	r1, [pc, #556]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004132:	4b89      	ldr	r3, [pc, #548]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d001      	beq.n	8004144 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e14a      	b.n	80043da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004150:	4b82      	ldr	r3, [pc, #520]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	497f      	ldr	r1, [pc, #508]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 800415e:	4313      	orrs	r3, r2
 8004160:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80dc 	beq.w	8004328 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d13c      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xf6>
 8004178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800417c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004180:	fa93 f3a3 	rbit	r3, r3
 8004184:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004188:	fab3 f383 	clz	r3, r3
 800418c:	b2db      	uxtb	r3, r3
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b01      	cmp	r3, #1
 800419a:	d102      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xa6>
 800419c:	4b6f      	ldr	r3, [pc, #444]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	e00f      	b.n	80041c2 <HAL_RCC_ClockConfig+0xc6>
 80041a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041aa:	fa93 f3a3 	rbit	r3, r3
 80041ae:	667b      	str	r3, [r7, #100]	; 0x64
 80041b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041b4:	663b      	str	r3, [r7, #96]	; 0x60
 80041b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041b8:	fa93 f3a3 	rbit	r3, r3
 80041bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041be:	4b67      	ldr	r3, [pc, #412]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80041c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041ca:	fa92 f2a2 	rbit	r2, r2
 80041ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80041d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041d2:	fab2 f282 	clz	r2, r2
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	f042 0220 	orr.w	r2, r2, #32
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	f002 021f 	and.w	r2, r2, #31
 80041e2:	2101      	movs	r1, #1
 80041e4:	fa01 f202 	lsl.w	r2, r1, r2
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d17b      	bne.n	80042e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e0f3      	b.n	80043da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d13c      	bne.n	8004274 <HAL_RCC_ClockConfig+0x178>
 80041fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004202:	fa93 f3a3 	rbit	r3, r3
 8004206:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420a:	fab3 f383 	clz	r3, r3
 800420e:	b2db      	uxtb	r3, r3
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b01      	cmp	r3, #1
 800421c:	d102      	bne.n	8004224 <HAL_RCC_ClockConfig+0x128>
 800421e:	4b4f      	ldr	r3, [pc, #316]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	e00f      	b.n	8004244 <HAL_RCC_ClockConfig+0x148>
 8004224:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004228:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800422c:	fa93 f3a3 	rbit	r3, r3
 8004230:	647b      	str	r3, [r7, #68]	; 0x44
 8004232:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004236:	643b      	str	r3, [r7, #64]	; 0x40
 8004238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800423a:	fa93 f3a3 	rbit	r3, r3
 800423e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004240:	4b46      	ldr	r3, [pc, #280]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004248:	63ba      	str	r2, [r7, #56]	; 0x38
 800424a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800424c:	fa92 f2a2 	rbit	r2, r2
 8004250:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004254:	fab2 f282 	clz	r2, r2
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	f042 0220 	orr.w	r2, r2, #32
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	f002 021f 	and.w	r2, r2, #31
 8004264:	2101      	movs	r1, #1
 8004266:	fa01 f202 	lsl.w	r2, r1, r2
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d13a      	bne.n	80042e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0b2      	b.n	80043da <HAL_RCC_ClockConfig+0x2de>
 8004274:	2302      	movs	r3, #2
 8004276:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	fa93 f3a3 	rbit	r3, r3
 800427e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004282:	fab3 f383 	clz	r3, r3
 8004286:	b2db      	uxtb	r3, r3
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b01      	cmp	r3, #1
 8004294:	d102      	bne.n	800429c <HAL_RCC_ClockConfig+0x1a0>
 8004296:	4b31      	ldr	r3, [pc, #196]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	e00d      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1bc>
 800429c:	2302      	movs	r3, #2
 800429e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	fa93 f3a3 	rbit	r3, r3
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24
 80042a8:	2302      	movs	r3, #2
 80042aa:	623b      	str	r3, [r7, #32]
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	fa93 f3a3 	rbit	r3, r3
 80042b2:	61fb      	str	r3, [r7, #28]
 80042b4:	4b29      	ldr	r3, [pc, #164]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	2202      	movs	r2, #2
 80042ba:	61ba      	str	r2, [r7, #24]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	fa92 f2a2 	rbit	r2, r2
 80042c2:	617a      	str	r2, [r7, #20]
  return result;
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	fab2 f282 	clz	r2, r2
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	f042 0220 	orr.w	r2, r2, #32
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	f002 021f 	and.w	r2, r2, #31
 80042d6:	2101      	movs	r1, #1
 80042d8:	fa01 f202 	lsl.w	r2, r1, r2
 80042dc:	4013      	ands	r3, r2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e079      	b.n	80043da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042e6:	4b1d      	ldr	r3, [pc, #116]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f023 0203 	bic.w	r2, r3, #3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	491a      	ldr	r1, [pc, #104]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042f8:	f7fd fd3a 	bl	8001d70 <HAL_GetTick>
 80042fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fe:	e00a      	b.n	8004316 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004300:	f7fd fd36 	bl	8001d70 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	; 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e061      	b.n	80043da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004316:	4b11      	ldr	r3, [pc, #68]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f003 020c 	and.w	r2, r3, #12
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	429a      	cmp	r2, r3
 8004326:	d1eb      	bne.n	8004300 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004328:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d214      	bcs.n	8004360 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b08      	ldr	r3, [pc, #32]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 0207 	bic.w	r2, r3, #7
 800433e:	4906      	ldr	r1, [pc, #24]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004346:	4b04      	ldr	r3, [pc, #16]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d005      	beq.n	8004360 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e040      	b.n	80043da <HAL_RCC_ClockConfig+0x2de>
 8004358:	40022000 	.word	0x40022000
 800435c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800436c:	4b1d      	ldr	r3, [pc, #116]	; (80043e4 <HAL_RCC_ClockConfig+0x2e8>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	491a      	ldr	r1, [pc, #104]	; (80043e4 <HAL_RCC_ClockConfig+0x2e8>)
 800437a:	4313      	orrs	r3, r2
 800437c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800438a:	4b16      	ldr	r3, [pc, #88]	; (80043e4 <HAL_RCC_ClockConfig+0x2e8>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4912      	ldr	r1, [pc, #72]	; (80043e4 <HAL_RCC_ClockConfig+0x2e8>)
 800439a:	4313      	orrs	r3, r2
 800439c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800439e:	f000 f829 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
 80043a2:	4601      	mov	r1, r0
 80043a4:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <HAL_RCC_ClockConfig+0x2e8>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ac:	22f0      	movs	r2, #240	; 0xf0
 80043ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	fa92 f2a2 	rbit	r2, r2
 80043b6:	60fa      	str	r2, [r7, #12]
  return result;
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	fab2 f282 	clz	r2, r2
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	40d3      	lsrs	r3, r2
 80043c2:	4a09      	ldr	r2, [pc, #36]	; (80043e8 <HAL_RCC_ClockConfig+0x2ec>)
 80043c4:	5cd3      	ldrb	r3, [r2, r3]
 80043c6:	fa21 f303 	lsr.w	r3, r1, r3
 80043ca:	4a08      	ldr	r2, [pc, #32]	; (80043ec <HAL_RCC_ClockConfig+0x2f0>)
 80043cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80043ce:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <HAL_RCC_ClockConfig+0x2f4>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fd fc88 	bl	8001ce8 <HAL_InitTick>
  
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3778      	adds	r7, #120	; 0x78
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000
 80043e8:	08005e90 	.word	0x08005e90
 80043ec:	20000040 	.word	0x20000040
 80043f0:	20000044 	.word	0x20000044

080043f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b08b      	sub	sp, #44	; 0x2c
 80043f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
 80043fe:	2300      	movs	r3, #0
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	2300      	movs	r3, #0
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800440e:	4b29      	ldr	r3, [pc, #164]	; (80044b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b04      	cmp	r3, #4
 800441c:	d002      	beq.n	8004424 <HAL_RCC_GetSysClockFreq+0x30>
 800441e:	2b08      	cmp	r3, #8
 8004420:	d003      	beq.n	800442a <HAL_RCC_GetSysClockFreq+0x36>
 8004422:	e03c      	b.n	800449e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004424:	4b24      	ldr	r3, [pc, #144]	; (80044b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004426:	623b      	str	r3, [r7, #32]
      break;
 8004428:	e03c      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004430:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004434:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	fa92 f2a2 	rbit	r2, r2
 800443c:	607a      	str	r2, [r7, #4]
  return result;
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	fab2 f282 	clz	r2, r2
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	40d3      	lsrs	r3, r2
 8004448:	4a1c      	ldr	r2, [pc, #112]	; (80044bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800444a:	5cd3      	ldrb	r3, [r2, r3]
 800444c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800444e:	4b19      	ldr	r3, [pc, #100]	; (80044b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	220f      	movs	r2, #15
 8004458:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	fa92 f2a2 	rbit	r2, r2
 8004460:	60fa      	str	r2, [r7, #12]
  return result;
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	fab2 f282 	clz	r2, r2
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	40d3      	lsrs	r3, r2
 800446c:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800446e:	5cd3      	ldrb	r3, [r2, r3]
 8004470:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800447c:	4a0e      	ldr	r2, [pc, #56]	; (80044b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	fbb2 f2f3 	udiv	r2, r2, r3
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
 800448c:	e004      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	4a0c      	ldr	r2, [pc, #48]	; (80044c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004492:	fb02 f303 	mul.w	r3, r2, r3
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	623b      	str	r3, [r7, #32]
      break;
 800449c:	e002      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800449e:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044a0:	623b      	str	r3, [r7, #32]
      break;
 80044a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044a4:	6a3b      	ldr	r3, [r7, #32]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	372c      	adds	r7, #44	; 0x2c
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40021000 	.word	0x40021000
 80044b8:	007a1200 	.word	0x007a1200
 80044bc:	08005ea0 	.word	0x08005ea0
 80044c0:	08005eb0 	.word	0x08005eb0
 80044c4:	003d0900 	.word	0x003d0900

080044c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b092      	sub	sp, #72	; 0x48
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 80d4 	beq.w	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ec:	4b4e      	ldr	r3, [pc, #312]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10e      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f8:	4b4b      	ldr	r3, [pc, #300]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	4a4a      	ldr	r2, [pc, #296]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004502:	61d3      	str	r3, [r2, #28]
 8004504:	4b48      	ldr	r3, [pc, #288]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004516:	4b45      	ldr	r3, [pc, #276]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451e:	2b00      	cmp	r3, #0
 8004520:	d118      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004522:	4b42      	ldr	r3, [pc, #264]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a41      	ldr	r2, [pc, #260]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800452c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800452e:	f7fd fc1f 	bl	8001d70 <HAL_GetTick>
 8004532:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004534:	e008      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004536:	f7fd fc1b 	bl	8001d70 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b64      	cmp	r3, #100	; 0x64
 8004542:	d901      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e169      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004548:	4b38      	ldr	r3, [pc, #224]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004554:	4b34      	ldr	r3, [pc, #208]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800455e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 8084 	beq.w	800466e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004570:	429a      	cmp	r2, r3
 8004572:	d07c      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004574:	4b2c      	ldr	r3, [pc, #176]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800457e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004582:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	fa93 f3a3 	rbit	r3, r3
 800458a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800458c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800458e:	fab3 f383 	clz	r3, r3
 8004592:	b2db      	uxtb	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	4b26      	ldr	r3, [pc, #152]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	461a      	mov	r2, r3
 800459e:	2301      	movs	r3, #1
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045aa:	fa93 f3a3 	rbit	r3, r3
 80045ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80045b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	461a      	mov	r2, r3
 80045c2:	2300      	movs	r3, #0
 80045c4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045c6:	4a18      	ldr	r2, [pc, #96]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d04b      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d6:	f7fd fbcb 	bl	8001d70 <HAL_GetTick>
 80045da:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045dc:	e00a      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045de:	f7fd fbc7 	bl	8001d70 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e113      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x354>
 80045f4:	2302      	movs	r3, #2
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	fa93 f3a3 	rbit	r3, r3
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004600:	2302      	movs	r3, #2
 8004602:	623b      	str	r3, [r7, #32]
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	fa93 f3a3 	rbit	r3, r3
 800460a:	61fb      	str	r3, [r7, #28]
  return result;
 800460c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460e:	fab3 f383 	clz	r3, r3
 8004612:	b2db      	uxtb	r3, r3
 8004614:	095b      	lsrs	r3, r3, #5
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f043 0302 	orr.w	r3, r3, #2
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d108      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004622:	4b01      	ldr	r3, [pc, #4]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	e00d      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004628:	40021000 	.word	0x40021000
 800462c:	40007000 	.word	0x40007000
 8004630:	10908100 	.word	0x10908100
 8004634:	2302      	movs	r3, #2
 8004636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	fa93 f3a3 	rbit	r3, r3
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	4b78      	ldr	r3, [pc, #480]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	2202      	movs	r2, #2
 8004646:	613a      	str	r2, [r7, #16]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	fa92 f2a2 	rbit	r2, r2
 800464e:	60fa      	str	r2, [r7, #12]
  return result;
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	fab2 f282 	clz	r2, r2
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	f002 021f 	and.w	r2, r2, #31
 8004662:	2101      	movs	r1, #1
 8004664:	fa01 f202 	lsl.w	r2, r1, r2
 8004668:	4013      	ands	r3, r2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0b7      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800466e:	4b6d      	ldr	r3, [pc, #436]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	496a      	ldr	r1, [pc, #424]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800467c:	4313      	orrs	r3, r2
 800467e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004680:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004684:	2b01      	cmp	r3, #1
 8004686:	d105      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004688:	4b66      	ldr	r3, [pc, #408]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	4a65      	ldr	r2, [pc, #404]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800468e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004692:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046a0:	4b60      	ldr	r3, [pc, #384]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	f023 0203 	bic.w	r2, r3, #3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	495d      	ldr	r1, [pc, #372]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d008      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046be:	4b59      	ldr	r3, [pc, #356]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	4956      	ldr	r1, [pc, #344]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046dc:	4b51      	ldr	r3, [pc, #324]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	494e      	ldr	r1, [pc, #312]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d008      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046fa:	4b4a      	ldr	r3, [pc, #296]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	f023 0210 	bic.w	r2, r3, #16
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	4947      	ldr	r1, [pc, #284]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004708:	4313      	orrs	r3, r2
 800470a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004718:	4b42      	ldr	r3, [pc, #264]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	493f      	ldr	r1, [pc, #252]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004726:	4313      	orrs	r3, r2
 8004728:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d008      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004736:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	f023 0220 	bic.w	r2, r3, #32
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	4938      	ldr	r1, [pc, #224]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004744:	4313      	orrs	r3, r2
 8004746:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	2b00      	cmp	r3, #0
 8004752:	d008      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004754:	4b33      	ldr	r3, [pc, #204]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	4930      	ldr	r1, [pc, #192]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004762:	4313      	orrs	r3, r2
 8004764:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b00      	cmp	r3, #0
 8004770:	d008      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004772:	4b2c      	ldr	r3, [pc, #176]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	4929      	ldr	r1, [pc, #164]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004780:	4313      	orrs	r3, r2
 8004782:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800478c:	2b00      	cmp	r3, #0
 800478e:	d008      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004790:	4b24      	ldr	r3, [pc, #144]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	4921      	ldr	r1, [pc, #132]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d008      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	491a      	ldr	r1, [pc, #104]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80047cc:	4b15      	ldr	r3, [pc, #84]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	4912      	ldr	r1, [pc, #72]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80047ea:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	490b      	ldr	r1, [pc, #44]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004808:	4b06      	ldr	r3, [pc, #24]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004814:	4903      	ldr	r1, [pc, #12]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004816:	4313      	orrs	r3, r2
 8004818:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3748      	adds	r7, #72	; 0x48
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000

08004828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e09d      	b.n	8004976 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	2b00      	cmp	r3, #0
 8004840:	d108      	bne.n	8004854 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800484a:	d009      	beq.n	8004860 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	61da      	str	r2, [r3, #28]
 8004852:	e005      	b.n	8004860 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fd f8de 	bl	8001a3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004896:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048a0:	d902      	bls.n	80048a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	e002      	b.n	80048ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80048b6:	d007      	beq.n	80048c8 <HAL_SPI_Init+0xa0>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048c0:	d002      	beq.n	80048c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490a:	ea42 0103 	orr.w	r1, r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	0c1b      	lsrs	r3, r3, #16
 8004924:	f003 0204 	and.w	r2, r3, #4
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004944:	ea42 0103 	orr.w	r1, r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69da      	ldr	r2, [r3, #28]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004964:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e049      	b.n	8004a24 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d106      	bne.n	80049aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7fd f88b 	bl	8001ac0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2202      	movs	r2, #2
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3304      	adds	r3, #4
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f000 f949 	bl	8004c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e0ff      	b.n	8004c4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b14      	cmp	r3, #20
 8004a56:	f200 80f0 	bhi.w	8004c3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a5a:	a201      	add	r2, pc, #4	; (adr r2, 8004a60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a60:	08004ab5 	.word	0x08004ab5
 8004a64:	08004c3b 	.word	0x08004c3b
 8004a68:	08004c3b 	.word	0x08004c3b
 8004a6c:	08004c3b 	.word	0x08004c3b
 8004a70:	08004af5 	.word	0x08004af5
 8004a74:	08004c3b 	.word	0x08004c3b
 8004a78:	08004c3b 	.word	0x08004c3b
 8004a7c:	08004c3b 	.word	0x08004c3b
 8004a80:	08004b37 	.word	0x08004b37
 8004a84:	08004c3b 	.word	0x08004c3b
 8004a88:	08004c3b 	.word	0x08004c3b
 8004a8c:	08004c3b 	.word	0x08004c3b
 8004a90:	08004b77 	.word	0x08004b77
 8004a94:	08004c3b 	.word	0x08004c3b
 8004a98:	08004c3b 	.word	0x08004c3b
 8004a9c:	08004c3b 	.word	0x08004c3b
 8004aa0:	08004bb9 	.word	0x08004bb9
 8004aa4:	08004c3b 	.word	0x08004c3b
 8004aa8:	08004c3b 	.word	0x08004c3b
 8004aac:	08004c3b 	.word	0x08004c3b
 8004ab0:	08004bf9 	.word	0x08004bf9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68b9      	ldr	r1, [r7, #8]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f95a 	bl	8004d74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0208 	orr.w	r2, r2, #8
 8004ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0204 	bic.w	r2, r2, #4
 8004ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6999      	ldr	r1, [r3, #24]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	619a      	str	r2, [r3, #24]
      break;
 8004af2:	e0a5      	b.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 f9ca 	bl	8004e94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6999      	ldr	r1, [r3, #24]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	021a      	lsls	r2, r3, #8
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	619a      	str	r2, [r3, #24]
      break;
 8004b34:	e084      	b.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fa33 	bl	8004fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69da      	ldr	r2, [r3, #28]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0208 	orr.w	r2, r2, #8
 8004b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69da      	ldr	r2, [r3, #28]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0204 	bic.w	r2, r2, #4
 8004b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69d9      	ldr	r1, [r3, #28]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	61da      	str	r2, [r3, #28]
      break;
 8004b74:	e064      	b.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fa9b 	bl	80050b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69da      	ldr	r2, [r3, #28]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69da      	ldr	r2, [r3, #28]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69d9      	ldr	r1, [r3, #28]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	021a      	lsls	r2, r3, #8
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	61da      	str	r2, [r3, #28]
      break;
 8004bb6:	e043      	b.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68b9      	ldr	r1, [r7, #8]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fae4 	bl	800518c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0208 	orr.w	r2, r2, #8
 8004bd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0204 	bic.w	r2, r2, #4
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bf6:	e023      	b.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fb28 	bl	8005254 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	021a      	lsls	r2, r3, #8
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c38:	e002      	b.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop

08004c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a3c      	ldr	r2, [pc, #240]	; (8004d58 <TIM_Base_SetConfig+0x104>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00f      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c72:	d00b      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a39      	ldr	r2, [pc, #228]	; (8004d5c <TIM_Base_SetConfig+0x108>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d007      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a38      	ldr	r2, [pc, #224]	; (8004d60 <TIM_Base_SetConfig+0x10c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a37      	ldr	r2, [pc, #220]	; (8004d64 <TIM_Base_SetConfig+0x110>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d108      	bne.n	8004c9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a2d      	ldr	r2, [pc, #180]	; (8004d58 <TIM_Base_SetConfig+0x104>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d01b      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cac:	d017      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a2a      	ldr	r2, [pc, #168]	; (8004d5c <TIM_Base_SetConfig+0x108>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a29      	ldr	r2, [pc, #164]	; (8004d60 <TIM_Base_SetConfig+0x10c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00f      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a28      	ldr	r2, [pc, #160]	; (8004d64 <TIM_Base_SetConfig+0x110>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00b      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a27      	ldr	r2, [pc, #156]	; (8004d68 <TIM_Base_SetConfig+0x114>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d007      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a26      	ldr	r2, [pc, #152]	; (8004d6c <TIM_Base_SetConfig+0x118>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d003      	beq.n	8004cde <TIM_Base_SetConfig+0x8a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a25      	ldr	r2, [pc, #148]	; (8004d70 <TIM_Base_SetConfig+0x11c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d108      	bne.n	8004cf0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a10      	ldr	r2, [pc, #64]	; (8004d58 <TIM_Base_SetConfig+0x104>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00f      	beq.n	8004d3c <TIM_Base_SetConfig+0xe8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a11      	ldr	r2, [pc, #68]	; (8004d64 <TIM_Base_SetConfig+0x110>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00b      	beq.n	8004d3c <TIM_Base_SetConfig+0xe8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a10      	ldr	r2, [pc, #64]	; (8004d68 <TIM_Base_SetConfig+0x114>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d007      	beq.n	8004d3c <TIM_Base_SetConfig+0xe8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a0f      	ldr	r2, [pc, #60]	; (8004d6c <TIM_Base_SetConfig+0x118>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d003      	beq.n	8004d3c <TIM_Base_SetConfig+0xe8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a0e      	ldr	r2, [pc, #56]	; (8004d70 <TIM_Base_SetConfig+0x11c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d103      	bne.n	8004d44 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	615a      	str	r2, [r3, #20]
}
 8004d4a:	bf00      	nop
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40012c00 	.word	0x40012c00
 8004d5c:	40000400 	.word	0x40000400
 8004d60:	40000800 	.word	0x40000800
 8004d64:	40013400 	.word	0x40013400
 8004d68:	40014000 	.word	0x40014000
 8004d6c:	40014400 	.word	0x40014400
 8004d70:	40014800 	.word	0x40014800

08004d74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	f023 0201 	bic.w	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0303 	bic.w	r3, r3, #3
 8004dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f023 0302 	bic.w	r3, r3, #2
 8004dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a2c      	ldr	r2, [pc, #176]	; (8004e80 <TIM_OC1_SetConfig+0x10c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00f      	beq.n	8004df4 <TIM_OC1_SetConfig+0x80>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a2b      	ldr	r2, [pc, #172]	; (8004e84 <TIM_OC1_SetConfig+0x110>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00b      	beq.n	8004df4 <TIM_OC1_SetConfig+0x80>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a2a      	ldr	r2, [pc, #168]	; (8004e88 <TIM_OC1_SetConfig+0x114>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d007      	beq.n	8004df4 <TIM_OC1_SetConfig+0x80>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a29      	ldr	r2, [pc, #164]	; (8004e8c <TIM_OC1_SetConfig+0x118>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d003      	beq.n	8004df4 <TIM_OC1_SetConfig+0x80>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a28      	ldr	r2, [pc, #160]	; (8004e90 <TIM_OC1_SetConfig+0x11c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d10c      	bne.n	8004e0e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f023 0308 	bic.w	r3, r3, #8
 8004dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f023 0304 	bic.w	r3, r3, #4
 8004e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a1b      	ldr	r2, [pc, #108]	; (8004e80 <TIM_OC1_SetConfig+0x10c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d00f      	beq.n	8004e36 <TIM_OC1_SetConfig+0xc2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a1a      	ldr	r2, [pc, #104]	; (8004e84 <TIM_OC1_SetConfig+0x110>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00b      	beq.n	8004e36 <TIM_OC1_SetConfig+0xc2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a19      	ldr	r2, [pc, #100]	; (8004e88 <TIM_OC1_SetConfig+0x114>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d007      	beq.n	8004e36 <TIM_OC1_SetConfig+0xc2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <TIM_OC1_SetConfig+0x118>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d003      	beq.n	8004e36 <TIM_OC1_SetConfig+0xc2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a17      	ldr	r2, [pc, #92]	; (8004e90 <TIM_OC1_SetConfig+0x11c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d111      	bne.n	8004e5a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	621a      	str	r2, [r3, #32]
}
 8004e74:	bf00      	nop
 8004e76:	371c      	adds	r7, #28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	40012c00 	.word	0x40012c00
 8004e84:	40013400 	.word	0x40013400
 8004e88:	40014000 	.word	0x40014000
 8004e8c:	40014400 	.word	0x40014400
 8004e90:	40014800 	.word	0x40014800

08004e94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	f023 0210 	bic.w	r2, r3, #16
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 0320 	bic.w	r3, r3, #32
 8004ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a28      	ldr	r2, [pc, #160]	; (8004f94 <TIM_OC2_SetConfig+0x100>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d003      	beq.n	8004f00 <TIM_OC2_SetConfig+0x6c>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a27      	ldr	r2, [pc, #156]	; (8004f98 <TIM_OC2_SetConfig+0x104>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10d      	bne.n	8004f1c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a1d      	ldr	r2, [pc, #116]	; (8004f94 <TIM_OC2_SetConfig+0x100>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00f      	beq.n	8004f44 <TIM_OC2_SetConfig+0xb0>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a1c      	ldr	r2, [pc, #112]	; (8004f98 <TIM_OC2_SetConfig+0x104>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00b      	beq.n	8004f44 <TIM_OC2_SetConfig+0xb0>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a1b      	ldr	r2, [pc, #108]	; (8004f9c <TIM_OC2_SetConfig+0x108>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d007      	beq.n	8004f44 <TIM_OC2_SetConfig+0xb0>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a1a      	ldr	r2, [pc, #104]	; (8004fa0 <TIM_OC2_SetConfig+0x10c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d003      	beq.n	8004f44 <TIM_OC2_SetConfig+0xb0>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a19      	ldr	r2, [pc, #100]	; (8004fa4 <TIM_OC2_SetConfig+0x110>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d113      	bne.n	8004f6c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f4a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f52:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	621a      	str	r2, [r3, #32]
}
 8004f86:	bf00      	nop
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40012c00 	.word	0x40012c00
 8004f98:	40013400 	.word	0x40013400
 8004f9c:	40014000 	.word	0x40014000
 8004fa0:	40014400 	.word	0x40014400
 8004fa4:	40014800 	.word	0x40014800

08004fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0303 	bic.w	r3, r3, #3
 8004fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a27      	ldr	r2, [pc, #156]	; (80050a4 <TIM_OC3_SetConfig+0xfc>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d003      	beq.n	8005012 <TIM_OC3_SetConfig+0x6a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a26      	ldr	r2, [pc, #152]	; (80050a8 <TIM_OC3_SetConfig+0x100>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d10d      	bne.n	800502e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005018:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800502c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a1c      	ldr	r2, [pc, #112]	; (80050a4 <TIM_OC3_SetConfig+0xfc>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00f      	beq.n	8005056 <TIM_OC3_SetConfig+0xae>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a1b      	ldr	r2, [pc, #108]	; (80050a8 <TIM_OC3_SetConfig+0x100>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00b      	beq.n	8005056 <TIM_OC3_SetConfig+0xae>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a1a      	ldr	r2, [pc, #104]	; (80050ac <TIM_OC3_SetConfig+0x104>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d007      	beq.n	8005056 <TIM_OC3_SetConfig+0xae>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a19      	ldr	r2, [pc, #100]	; (80050b0 <TIM_OC3_SetConfig+0x108>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_OC3_SetConfig+0xae>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a18      	ldr	r2, [pc, #96]	; (80050b4 <TIM_OC3_SetConfig+0x10c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d113      	bne.n	800507e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800505c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	621a      	str	r2, [r3, #32]
}
 8005098:	bf00      	nop
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	40013400 	.word	0x40013400
 80050ac:	40014000 	.word	0x40014000
 80050b0:	40014400 	.word	0x40014400
 80050b4:	40014800 	.word	0x40014800

080050b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	021b      	lsls	r3, r3, #8
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	031b      	lsls	r3, r3, #12
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4313      	orrs	r3, r2
 8005112:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a18      	ldr	r2, [pc, #96]	; (8005178 <TIM_OC4_SetConfig+0xc0>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00f      	beq.n	800513c <TIM_OC4_SetConfig+0x84>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a17      	ldr	r2, [pc, #92]	; (800517c <TIM_OC4_SetConfig+0xc4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00b      	beq.n	800513c <TIM_OC4_SetConfig+0x84>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a16      	ldr	r2, [pc, #88]	; (8005180 <TIM_OC4_SetConfig+0xc8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d007      	beq.n	800513c <TIM_OC4_SetConfig+0x84>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a15      	ldr	r2, [pc, #84]	; (8005184 <TIM_OC4_SetConfig+0xcc>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d003      	beq.n	800513c <TIM_OC4_SetConfig+0x84>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a14      	ldr	r2, [pc, #80]	; (8005188 <TIM_OC4_SetConfig+0xd0>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d109      	bne.n	8005150 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	019b      	lsls	r3, r3, #6
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	621a      	str	r2, [r3, #32]
}
 800516a:	bf00      	nop
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40012c00 	.word	0x40012c00
 800517c:	40013400 	.word	0x40013400
 8005180:	40014000 	.word	0x40014000
 8005184:	40014400 	.word	0x40014400
 8005188:	40014800 	.word	0x40014800

0800518c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80051d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	041b      	lsls	r3, r3, #16
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a17      	ldr	r2, [pc, #92]	; (8005240 <TIM_OC5_SetConfig+0xb4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00f      	beq.n	8005206 <TIM_OC5_SetConfig+0x7a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a16      	ldr	r2, [pc, #88]	; (8005244 <TIM_OC5_SetConfig+0xb8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00b      	beq.n	8005206 <TIM_OC5_SetConfig+0x7a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a15      	ldr	r2, [pc, #84]	; (8005248 <TIM_OC5_SetConfig+0xbc>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d007      	beq.n	8005206 <TIM_OC5_SetConfig+0x7a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a14      	ldr	r2, [pc, #80]	; (800524c <TIM_OC5_SetConfig+0xc0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d003      	beq.n	8005206 <TIM_OC5_SetConfig+0x7a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a13      	ldr	r2, [pc, #76]	; (8005250 <TIM_OC5_SetConfig+0xc4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d109      	bne.n	800521a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800520c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	621a      	str	r2, [r3, #32]
}
 8005234:	bf00      	nop
 8005236:	371c      	adds	r7, #28
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	40012c00 	.word	0x40012c00
 8005244:	40013400 	.word	0x40013400
 8005248:	40014000 	.word	0x40014000
 800524c:	40014400 	.word	0x40014400
 8005250:	40014800 	.word	0x40014800

08005254 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800529a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	051b      	lsls	r3, r3, #20
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a18      	ldr	r2, [pc, #96]	; (800530c <TIM_OC6_SetConfig+0xb8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00f      	beq.n	80052d0 <TIM_OC6_SetConfig+0x7c>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a17      	ldr	r2, [pc, #92]	; (8005310 <TIM_OC6_SetConfig+0xbc>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00b      	beq.n	80052d0 <TIM_OC6_SetConfig+0x7c>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a16      	ldr	r2, [pc, #88]	; (8005314 <TIM_OC6_SetConfig+0xc0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d007      	beq.n	80052d0 <TIM_OC6_SetConfig+0x7c>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a15      	ldr	r2, [pc, #84]	; (8005318 <TIM_OC6_SetConfig+0xc4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d003      	beq.n	80052d0 <TIM_OC6_SetConfig+0x7c>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a14      	ldr	r2, [pc, #80]	; (800531c <TIM_OC6_SetConfig+0xc8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d109      	bne.n	80052e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	029b      	lsls	r3, r3, #10
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	621a      	str	r2, [r3, #32]
}
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40012c00 	.word	0x40012c00
 8005310:	40013400 	.word	0x40013400
 8005314:	40014000 	.word	0x40014000
 8005318:	40014400 	.word	0x40014400
 800531c:	40014800 	.word	0x40014800

08005320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005334:	2302      	movs	r3, #2
 8005336:	e063      	b.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a2b      	ldr	r2, [pc, #172]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d004      	beq.n	800536c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a2a      	ldr	r2, [pc, #168]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d108      	bne.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005372:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005384:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1b      	ldr	r2, [pc, #108]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d018      	beq.n	80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053aa:	d013      	beq.n	80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a18      	ldr	r2, [pc, #96]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00e      	beq.n	80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a17      	ldr	r2, [pc, #92]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d009      	beq.n	80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a12      	ldr	r2, [pc, #72]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d004      	beq.n	80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a13      	ldr	r2, [pc, #76]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d10c      	bne.n	80053ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	40012c00 	.word	0x40012c00
 8005410:	40013400 	.word	0x40013400
 8005414:	40000400 	.word	0x40000400
 8005418:	40000800 	.word	0x40000800
 800541c:	40014000 	.word	0x40014000

08005420 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005428:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800542c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	b29b      	uxth	r3, r3
 800543a:	43db      	mvns	r3, r3
 800543c:	b29b      	uxth	r3, r3
 800543e:	4013      	ands	r3, r2
 8005440:	b29a      	uxth	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005456:	b084      	sub	sp, #16
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	f107 0014 	add.w	r0, r7, #20
 8005464:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	b004      	add	sp, #16
 8005496:	4770      	bx	lr

08005498 <__errno>:
 8005498:	4b01      	ldr	r3, [pc, #4]	; (80054a0 <__errno+0x8>)
 800549a:	6818      	ldr	r0, [r3, #0]
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	2000004c 	.word	0x2000004c

080054a4 <__libc_init_array>:
 80054a4:	b570      	push	{r4, r5, r6, lr}
 80054a6:	4d0d      	ldr	r5, [pc, #52]	; (80054dc <__libc_init_array+0x38>)
 80054a8:	4c0d      	ldr	r4, [pc, #52]	; (80054e0 <__libc_init_array+0x3c>)
 80054aa:	1b64      	subs	r4, r4, r5
 80054ac:	10a4      	asrs	r4, r4, #2
 80054ae:	2600      	movs	r6, #0
 80054b0:	42a6      	cmp	r6, r4
 80054b2:	d109      	bne.n	80054c8 <__libc_init_array+0x24>
 80054b4:	4d0b      	ldr	r5, [pc, #44]	; (80054e4 <__libc_init_array+0x40>)
 80054b6:	4c0c      	ldr	r4, [pc, #48]	; (80054e8 <__libc_init_array+0x44>)
 80054b8:	f000 fcde 	bl	8005e78 <_init>
 80054bc:	1b64      	subs	r4, r4, r5
 80054be:	10a4      	asrs	r4, r4, #2
 80054c0:	2600      	movs	r6, #0
 80054c2:	42a6      	cmp	r6, r4
 80054c4:	d105      	bne.n	80054d2 <__libc_init_array+0x2e>
 80054c6:	bd70      	pop	{r4, r5, r6, pc}
 80054c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054cc:	4798      	blx	r3
 80054ce:	3601      	adds	r6, #1
 80054d0:	e7ee      	b.n	80054b0 <__libc_init_array+0xc>
 80054d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d6:	4798      	blx	r3
 80054d8:	3601      	adds	r6, #1
 80054da:	e7f2      	b.n	80054c2 <__libc_init_array+0x1e>
 80054dc:	08005f04 	.word	0x08005f04
 80054e0:	08005f04 	.word	0x08005f04
 80054e4:	08005f04 	.word	0x08005f04
 80054e8:	08005f08 	.word	0x08005f08

080054ec <memcpy>:
 80054ec:	440a      	add	r2, r1
 80054ee:	4291      	cmp	r1, r2
 80054f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80054f4:	d100      	bne.n	80054f8 <memcpy+0xc>
 80054f6:	4770      	bx	lr
 80054f8:	b510      	push	{r4, lr}
 80054fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005502:	4291      	cmp	r1, r2
 8005504:	d1f9      	bne.n	80054fa <memcpy+0xe>
 8005506:	bd10      	pop	{r4, pc}

08005508 <memset>:
 8005508:	4402      	add	r2, r0
 800550a:	4603      	mov	r3, r0
 800550c:	4293      	cmp	r3, r2
 800550e:	d100      	bne.n	8005512 <memset+0xa>
 8005510:	4770      	bx	lr
 8005512:	f803 1b01 	strb.w	r1, [r3], #1
 8005516:	e7f9      	b.n	800550c <memset+0x4>

08005518 <atan>:
 8005518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551c:	ec55 4b10 	vmov	r4, r5, d0
 8005520:	4bc3      	ldr	r3, [pc, #780]	; (8005830 <atan+0x318>)
 8005522:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005526:	429e      	cmp	r6, r3
 8005528:	46ab      	mov	fp, r5
 800552a:	dd18      	ble.n	800555e <atan+0x46>
 800552c:	4bc1      	ldr	r3, [pc, #772]	; (8005834 <atan+0x31c>)
 800552e:	429e      	cmp	r6, r3
 8005530:	dc01      	bgt.n	8005536 <atan+0x1e>
 8005532:	d109      	bne.n	8005548 <atan+0x30>
 8005534:	b144      	cbz	r4, 8005548 <atan+0x30>
 8005536:	4622      	mov	r2, r4
 8005538:	462b      	mov	r3, r5
 800553a:	4620      	mov	r0, r4
 800553c:	4629      	mov	r1, r5
 800553e:	f7fa fe49 	bl	80001d4 <__adddf3>
 8005542:	4604      	mov	r4, r0
 8005544:	460d      	mov	r5, r1
 8005546:	e006      	b.n	8005556 <atan+0x3e>
 8005548:	f1bb 0f00 	cmp.w	fp, #0
 800554c:	f300 8131 	bgt.w	80057b2 <atan+0x29a>
 8005550:	a59b      	add	r5, pc, #620	; (adr r5, 80057c0 <atan+0x2a8>)
 8005552:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005556:	ec45 4b10 	vmov	d0, r4, r5
 800555a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800555e:	4bb6      	ldr	r3, [pc, #728]	; (8005838 <atan+0x320>)
 8005560:	429e      	cmp	r6, r3
 8005562:	dc14      	bgt.n	800558e <atan+0x76>
 8005564:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005568:	429e      	cmp	r6, r3
 800556a:	dc0d      	bgt.n	8005588 <atan+0x70>
 800556c:	a396      	add	r3, pc, #600	; (adr r3, 80057c8 <atan+0x2b0>)
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	ee10 0a10 	vmov	r0, s0
 8005576:	4629      	mov	r1, r5
 8005578:	f7fa fe2c 	bl	80001d4 <__adddf3>
 800557c:	4baf      	ldr	r3, [pc, #700]	; (800583c <atan+0x324>)
 800557e:	2200      	movs	r2, #0
 8005580:	f7fb fa6e 	bl	8000a60 <__aeabi_dcmpgt>
 8005584:	2800      	cmp	r0, #0
 8005586:	d1e6      	bne.n	8005556 <atan+0x3e>
 8005588:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800558c:	e02b      	b.n	80055e6 <atan+0xce>
 800558e:	f000 f963 	bl	8005858 <fabs>
 8005592:	4bab      	ldr	r3, [pc, #684]	; (8005840 <atan+0x328>)
 8005594:	429e      	cmp	r6, r3
 8005596:	ec55 4b10 	vmov	r4, r5, d0
 800559a:	f300 80bf 	bgt.w	800571c <atan+0x204>
 800559e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80055a2:	429e      	cmp	r6, r3
 80055a4:	f300 80a0 	bgt.w	80056e8 <atan+0x1d0>
 80055a8:	ee10 2a10 	vmov	r2, s0
 80055ac:	ee10 0a10 	vmov	r0, s0
 80055b0:	462b      	mov	r3, r5
 80055b2:	4629      	mov	r1, r5
 80055b4:	f7fa fe0e 	bl	80001d4 <__adddf3>
 80055b8:	4ba0      	ldr	r3, [pc, #640]	; (800583c <atan+0x324>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	f7fa fe08 	bl	80001d0 <__aeabi_dsub>
 80055c0:	2200      	movs	r2, #0
 80055c2:	4606      	mov	r6, r0
 80055c4:	460f      	mov	r7, r1
 80055c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055ca:	4620      	mov	r0, r4
 80055cc:	4629      	mov	r1, r5
 80055ce:	f7fa fe01 	bl	80001d4 <__adddf3>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4630      	mov	r0, r6
 80055d8:	4639      	mov	r1, r7
 80055da:	f7fb f8db 	bl	8000794 <__aeabi_ddiv>
 80055de:	f04f 0a00 	mov.w	sl, #0
 80055e2:	4604      	mov	r4, r0
 80055e4:	460d      	mov	r5, r1
 80055e6:	4622      	mov	r2, r4
 80055e8:	462b      	mov	r3, r5
 80055ea:	4620      	mov	r0, r4
 80055ec:	4629      	mov	r1, r5
 80055ee:	f7fa ffa7 	bl	8000540 <__aeabi_dmul>
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	4680      	mov	r8, r0
 80055f8:	4689      	mov	r9, r1
 80055fa:	f7fa ffa1 	bl	8000540 <__aeabi_dmul>
 80055fe:	a374      	add	r3, pc, #464	; (adr r3, 80057d0 <atan+0x2b8>)
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005604:	4606      	mov	r6, r0
 8005606:	460f      	mov	r7, r1
 8005608:	f7fa ff9a 	bl	8000540 <__aeabi_dmul>
 800560c:	a372      	add	r3, pc, #456	; (adr r3, 80057d8 <atan+0x2c0>)
 800560e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005612:	f7fa fddf 	bl	80001d4 <__adddf3>
 8005616:	4632      	mov	r2, r6
 8005618:	463b      	mov	r3, r7
 800561a:	f7fa ff91 	bl	8000540 <__aeabi_dmul>
 800561e:	a370      	add	r3, pc, #448	; (adr r3, 80057e0 <atan+0x2c8>)
 8005620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005624:	f7fa fdd6 	bl	80001d4 <__adddf3>
 8005628:	4632      	mov	r2, r6
 800562a:	463b      	mov	r3, r7
 800562c:	f7fa ff88 	bl	8000540 <__aeabi_dmul>
 8005630:	a36d      	add	r3, pc, #436	; (adr r3, 80057e8 <atan+0x2d0>)
 8005632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005636:	f7fa fdcd 	bl	80001d4 <__adddf3>
 800563a:	4632      	mov	r2, r6
 800563c:	463b      	mov	r3, r7
 800563e:	f7fa ff7f 	bl	8000540 <__aeabi_dmul>
 8005642:	a36b      	add	r3, pc, #428	; (adr r3, 80057f0 <atan+0x2d8>)
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	f7fa fdc4 	bl	80001d4 <__adddf3>
 800564c:	4632      	mov	r2, r6
 800564e:	463b      	mov	r3, r7
 8005650:	f7fa ff76 	bl	8000540 <__aeabi_dmul>
 8005654:	a368      	add	r3, pc, #416	; (adr r3, 80057f8 <atan+0x2e0>)
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f7fa fdbb 	bl	80001d4 <__adddf3>
 800565e:	4642      	mov	r2, r8
 8005660:	464b      	mov	r3, r9
 8005662:	f7fa ff6d 	bl	8000540 <__aeabi_dmul>
 8005666:	a366      	add	r3, pc, #408	; (adr r3, 8005800 <atan+0x2e8>)
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	4680      	mov	r8, r0
 800566e:	4689      	mov	r9, r1
 8005670:	4630      	mov	r0, r6
 8005672:	4639      	mov	r1, r7
 8005674:	f7fa ff64 	bl	8000540 <__aeabi_dmul>
 8005678:	a363      	add	r3, pc, #396	; (adr r3, 8005808 <atan+0x2f0>)
 800567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567e:	f7fa fda7 	bl	80001d0 <__aeabi_dsub>
 8005682:	4632      	mov	r2, r6
 8005684:	463b      	mov	r3, r7
 8005686:	f7fa ff5b 	bl	8000540 <__aeabi_dmul>
 800568a:	a361      	add	r3, pc, #388	; (adr r3, 8005810 <atan+0x2f8>)
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	f7fa fd9e 	bl	80001d0 <__aeabi_dsub>
 8005694:	4632      	mov	r2, r6
 8005696:	463b      	mov	r3, r7
 8005698:	f7fa ff52 	bl	8000540 <__aeabi_dmul>
 800569c:	a35e      	add	r3, pc, #376	; (adr r3, 8005818 <atan+0x300>)
 800569e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a2:	f7fa fd95 	bl	80001d0 <__aeabi_dsub>
 80056a6:	4632      	mov	r2, r6
 80056a8:	463b      	mov	r3, r7
 80056aa:	f7fa ff49 	bl	8000540 <__aeabi_dmul>
 80056ae:	a35c      	add	r3, pc, #368	; (adr r3, 8005820 <atan+0x308>)
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	f7fa fd8c 	bl	80001d0 <__aeabi_dsub>
 80056b8:	4632      	mov	r2, r6
 80056ba:	463b      	mov	r3, r7
 80056bc:	f7fa ff40 	bl	8000540 <__aeabi_dmul>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4640      	mov	r0, r8
 80056c6:	4649      	mov	r1, r9
 80056c8:	f7fa fd84 	bl	80001d4 <__adddf3>
 80056cc:	4622      	mov	r2, r4
 80056ce:	462b      	mov	r3, r5
 80056d0:	f7fa ff36 	bl	8000540 <__aeabi_dmul>
 80056d4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	d14b      	bne.n	8005776 <atan+0x25e>
 80056de:	4620      	mov	r0, r4
 80056e0:	4629      	mov	r1, r5
 80056e2:	f7fa fd75 	bl	80001d0 <__aeabi_dsub>
 80056e6:	e72c      	b.n	8005542 <atan+0x2a>
 80056e8:	ee10 0a10 	vmov	r0, s0
 80056ec:	4b53      	ldr	r3, [pc, #332]	; (800583c <atan+0x324>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	4629      	mov	r1, r5
 80056f2:	f7fa fd6d 	bl	80001d0 <__aeabi_dsub>
 80056f6:	4b51      	ldr	r3, [pc, #324]	; (800583c <atan+0x324>)
 80056f8:	4606      	mov	r6, r0
 80056fa:	460f      	mov	r7, r1
 80056fc:	2200      	movs	r2, #0
 80056fe:	4620      	mov	r0, r4
 8005700:	4629      	mov	r1, r5
 8005702:	f7fa fd67 	bl	80001d4 <__adddf3>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4630      	mov	r0, r6
 800570c:	4639      	mov	r1, r7
 800570e:	f7fb f841 	bl	8000794 <__aeabi_ddiv>
 8005712:	f04f 0a01 	mov.w	sl, #1
 8005716:	4604      	mov	r4, r0
 8005718:	460d      	mov	r5, r1
 800571a:	e764      	b.n	80055e6 <atan+0xce>
 800571c:	4b49      	ldr	r3, [pc, #292]	; (8005844 <atan+0x32c>)
 800571e:	429e      	cmp	r6, r3
 8005720:	da1d      	bge.n	800575e <atan+0x246>
 8005722:	ee10 0a10 	vmov	r0, s0
 8005726:	4b48      	ldr	r3, [pc, #288]	; (8005848 <atan+0x330>)
 8005728:	2200      	movs	r2, #0
 800572a:	4629      	mov	r1, r5
 800572c:	f7fa fd50 	bl	80001d0 <__aeabi_dsub>
 8005730:	4b45      	ldr	r3, [pc, #276]	; (8005848 <atan+0x330>)
 8005732:	4606      	mov	r6, r0
 8005734:	460f      	mov	r7, r1
 8005736:	2200      	movs	r2, #0
 8005738:	4620      	mov	r0, r4
 800573a:	4629      	mov	r1, r5
 800573c:	f7fa ff00 	bl	8000540 <__aeabi_dmul>
 8005740:	4b3e      	ldr	r3, [pc, #248]	; (800583c <atan+0x324>)
 8005742:	2200      	movs	r2, #0
 8005744:	f7fa fd46 	bl	80001d4 <__adddf3>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4630      	mov	r0, r6
 800574e:	4639      	mov	r1, r7
 8005750:	f7fb f820 	bl	8000794 <__aeabi_ddiv>
 8005754:	f04f 0a02 	mov.w	sl, #2
 8005758:	4604      	mov	r4, r0
 800575a:	460d      	mov	r5, r1
 800575c:	e743      	b.n	80055e6 <atan+0xce>
 800575e:	462b      	mov	r3, r5
 8005760:	ee10 2a10 	vmov	r2, s0
 8005764:	4939      	ldr	r1, [pc, #228]	; (800584c <atan+0x334>)
 8005766:	2000      	movs	r0, #0
 8005768:	f7fb f814 	bl	8000794 <__aeabi_ddiv>
 800576c:	f04f 0a03 	mov.w	sl, #3
 8005770:	4604      	mov	r4, r0
 8005772:	460d      	mov	r5, r1
 8005774:	e737      	b.n	80055e6 <atan+0xce>
 8005776:	4b36      	ldr	r3, [pc, #216]	; (8005850 <atan+0x338>)
 8005778:	4e36      	ldr	r6, [pc, #216]	; (8005854 <atan+0x33c>)
 800577a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800577e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8005782:	e9da 2300 	ldrd	r2, r3, [sl]
 8005786:	f7fa fd23 	bl	80001d0 <__aeabi_dsub>
 800578a:	4622      	mov	r2, r4
 800578c:	462b      	mov	r3, r5
 800578e:	f7fa fd1f 	bl	80001d0 <__aeabi_dsub>
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	e9d6 0100 	ldrd	r0, r1, [r6]
 800579a:	f7fa fd19 	bl	80001d0 <__aeabi_dsub>
 800579e:	f1bb 0f00 	cmp.w	fp, #0
 80057a2:	4604      	mov	r4, r0
 80057a4:	460d      	mov	r5, r1
 80057a6:	f6bf aed6 	bge.w	8005556 <atan+0x3e>
 80057aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057ae:	461d      	mov	r5, r3
 80057b0:	e6d1      	b.n	8005556 <atan+0x3e>
 80057b2:	a51d      	add	r5, pc, #116	; (adr r5, 8005828 <atan+0x310>)
 80057b4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80057b8:	e6cd      	b.n	8005556 <atan+0x3e>
 80057ba:	bf00      	nop
 80057bc:	f3af 8000 	nop.w
 80057c0:	54442d18 	.word	0x54442d18
 80057c4:	bff921fb 	.word	0xbff921fb
 80057c8:	8800759c 	.word	0x8800759c
 80057cc:	7e37e43c 	.word	0x7e37e43c
 80057d0:	e322da11 	.word	0xe322da11
 80057d4:	3f90ad3a 	.word	0x3f90ad3a
 80057d8:	24760deb 	.word	0x24760deb
 80057dc:	3fa97b4b 	.word	0x3fa97b4b
 80057e0:	a0d03d51 	.word	0xa0d03d51
 80057e4:	3fb10d66 	.word	0x3fb10d66
 80057e8:	c54c206e 	.word	0xc54c206e
 80057ec:	3fb745cd 	.word	0x3fb745cd
 80057f0:	920083ff 	.word	0x920083ff
 80057f4:	3fc24924 	.word	0x3fc24924
 80057f8:	5555550d 	.word	0x5555550d
 80057fc:	3fd55555 	.word	0x3fd55555
 8005800:	2c6a6c2f 	.word	0x2c6a6c2f
 8005804:	bfa2b444 	.word	0xbfa2b444
 8005808:	52defd9a 	.word	0x52defd9a
 800580c:	3fadde2d 	.word	0x3fadde2d
 8005810:	af749a6d 	.word	0xaf749a6d
 8005814:	3fb3b0f2 	.word	0x3fb3b0f2
 8005818:	fe231671 	.word	0xfe231671
 800581c:	3fbc71c6 	.word	0x3fbc71c6
 8005820:	9998ebc4 	.word	0x9998ebc4
 8005824:	3fc99999 	.word	0x3fc99999
 8005828:	54442d18 	.word	0x54442d18
 800582c:	3ff921fb 	.word	0x3ff921fb
 8005830:	440fffff 	.word	0x440fffff
 8005834:	7ff00000 	.word	0x7ff00000
 8005838:	3fdbffff 	.word	0x3fdbffff
 800583c:	3ff00000 	.word	0x3ff00000
 8005840:	3ff2ffff 	.word	0x3ff2ffff
 8005844:	40038000 	.word	0x40038000
 8005848:	3ff80000 	.word	0x3ff80000
 800584c:	bff00000 	.word	0xbff00000
 8005850:	08005ee0 	.word	0x08005ee0
 8005854:	08005ec0 	.word	0x08005ec0

08005858 <fabs>:
 8005858:	ec51 0b10 	vmov	r0, r1, d0
 800585c:	ee10 2a10 	vmov	r2, s0
 8005860:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005864:	ec43 2b10 	vmov	d0, r2, r3
 8005868:	4770      	bx	lr
	...

0800586c <asin>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	ed2d 8b02 	vpush	{d8}
 8005872:	ec55 4b10 	vmov	r4, r5, d0
 8005876:	f000 f82f 	bl	80058d8 <__ieee754_asin>
 800587a:	4622      	mov	r2, r4
 800587c:	462b      	mov	r3, r5
 800587e:	4620      	mov	r0, r4
 8005880:	4629      	mov	r1, r5
 8005882:	eeb0 8a40 	vmov.f32	s16, s0
 8005886:	eef0 8a60 	vmov.f32	s17, s1
 800588a:	f7fb f8f3 	bl	8000a74 <__aeabi_dcmpun>
 800588e:	b9a8      	cbnz	r0, 80058bc <asin+0x50>
 8005890:	ec45 4b10 	vmov	d0, r4, r5
 8005894:	f7ff ffe0 	bl	8005858 <fabs>
 8005898:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <asin+0x60>)
 800589a:	ec51 0b10 	vmov	r0, r1, d0
 800589e:	2200      	movs	r2, #0
 80058a0:	f7fb f8de 	bl	8000a60 <__aeabi_dcmpgt>
 80058a4:	b150      	cbz	r0, 80058bc <asin+0x50>
 80058a6:	f7ff fdf7 	bl	8005498 <__errno>
 80058aa:	ecbd 8b02 	vpop	{d8}
 80058ae:	2321      	movs	r3, #33	; 0x21
 80058b0:	6003      	str	r3, [r0, #0]
 80058b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058b6:	4806      	ldr	r0, [pc, #24]	; (80058d0 <asin+0x64>)
 80058b8:	f000 bad6 	b.w	8005e68 <nan>
 80058bc:	eeb0 0a48 	vmov.f32	s0, s16
 80058c0:	eef0 0a68 	vmov.f32	s1, s17
 80058c4:	ecbd 8b02 	vpop	{d8}
 80058c8:	bd38      	pop	{r3, r4, r5, pc}
 80058ca:	bf00      	nop
 80058cc:	3ff00000 	.word	0x3ff00000
 80058d0:	08005f00 	.word	0x08005f00
 80058d4:	00000000 	.word	0x00000000

080058d8 <__ieee754_asin>:
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	ed2d 8b04 	vpush	{d8-d9}
 80058e0:	ec55 4b10 	vmov	r4, r5, d0
 80058e4:	4bcc      	ldr	r3, [pc, #816]	; (8005c18 <__ieee754_asin+0x340>)
 80058e6:	b083      	sub	sp, #12
 80058e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80058ec:	4598      	cmp	r8, r3
 80058ee:	9501      	str	r5, [sp, #4]
 80058f0:	dd35      	ble.n	800595e <__ieee754_asin+0x86>
 80058f2:	ee10 3a10 	vmov	r3, s0
 80058f6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80058fa:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80058fe:	ea58 0303 	orrs.w	r3, r8, r3
 8005902:	d117      	bne.n	8005934 <__ieee754_asin+0x5c>
 8005904:	a3aa      	add	r3, pc, #680	; (adr r3, 8005bb0 <__ieee754_asin+0x2d8>)
 8005906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590a:	ee10 0a10 	vmov	r0, s0
 800590e:	4629      	mov	r1, r5
 8005910:	f7fa fe16 	bl	8000540 <__aeabi_dmul>
 8005914:	a3a8      	add	r3, pc, #672	; (adr r3, 8005bb8 <__ieee754_asin+0x2e0>)
 8005916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591a:	4606      	mov	r6, r0
 800591c:	460f      	mov	r7, r1
 800591e:	4620      	mov	r0, r4
 8005920:	4629      	mov	r1, r5
 8005922:	f7fa fe0d 	bl	8000540 <__aeabi_dmul>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4630      	mov	r0, r6
 800592c:	4639      	mov	r1, r7
 800592e:	f7fa fc51 	bl	80001d4 <__adddf3>
 8005932:	e00b      	b.n	800594c <__ieee754_asin+0x74>
 8005934:	ee10 2a10 	vmov	r2, s0
 8005938:	462b      	mov	r3, r5
 800593a:	ee10 0a10 	vmov	r0, s0
 800593e:	4629      	mov	r1, r5
 8005940:	f7fa fc46 	bl	80001d0 <__aeabi_dsub>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	f7fa ff24 	bl	8000794 <__aeabi_ddiv>
 800594c:	4604      	mov	r4, r0
 800594e:	460d      	mov	r5, r1
 8005950:	ec45 4b10 	vmov	d0, r4, r5
 8005954:	b003      	add	sp, #12
 8005956:	ecbd 8b04 	vpop	{d8-d9}
 800595a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800595e:	4baf      	ldr	r3, [pc, #700]	; (8005c1c <__ieee754_asin+0x344>)
 8005960:	4598      	cmp	r8, r3
 8005962:	dc11      	bgt.n	8005988 <__ieee754_asin+0xb0>
 8005964:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005968:	f280 80ae 	bge.w	8005ac8 <__ieee754_asin+0x1f0>
 800596c:	a394      	add	r3, pc, #592	; (adr r3, 8005bc0 <__ieee754_asin+0x2e8>)
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	ee10 0a10 	vmov	r0, s0
 8005976:	4629      	mov	r1, r5
 8005978:	f7fa fc2c 	bl	80001d4 <__adddf3>
 800597c:	4ba8      	ldr	r3, [pc, #672]	; (8005c20 <__ieee754_asin+0x348>)
 800597e:	2200      	movs	r2, #0
 8005980:	f7fb f86e 	bl	8000a60 <__aeabi_dcmpgt>
 8005984:	2800      	cmp	r0, #0
 8005986:	d1e3      	bne.n	8005950 <__ieee754_asin+0x78>
 8005988:	ec45 4b10 	vmov	d0, r4, r5
 800598c:	f7ff ff64 	bl	8005858 <fabs>
 8005990:	49a3      	ldr	r1, [pc, #652]	; (8005c20 <__ieee754_asin+0x348>)
 8005992:	ec53 2b10 	vmov	r2, r3, d0
 8005996:	2000      	movs	r0, #0
 8005998:	f7fa fc1a 	bl	80001d0 <__aeabi_dsub>
 800599c:	4ba1      	ldr	r3, [pc, #644]	; (8005c24 <__ieee754_asin+0x34c>)
 800599e:	2200      	movs	r2, #0
 80059a0:	f7fa fdce 	bl	8000540 <__aeabi_dmul>
 80059a4:	a388      	add	r3, pc, #544	; (adr r3, 8005bc8 <__ieee754_asin+0x2f0>)
 80059a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059aa:	4604      	mov	r4, r0
 80059ac:	460d      	mov	r5, r1
 80059ae:	f7fa fdc7 	bl	8000540 <__aeabi_dmul>
 80059b2:	a387      	add	r3, pc, #540	; (adr r3, 8005bd0 <__ieee754_asin+0x2f8>)
 80059b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b8:	f7fa fc0c 	bl	80001d4 <__adddf3>
 80059bc:	4622      	mov	r2, r4
 80059be:	462b      	mov	r3, r5
 80059c0:	f7fa fdbe 	bl	8000540 <__aeabi_dmul>
 80059c4:	a384      	add	r3, pc, #528	; (adr r3, 8005bd8 <__ieee754_asin+0x300>)
 80059c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ca:	f7fa fc01 	bl	80001d0 <__aeabi_dsub>
 80059ce:	4622      	mov	r2, r4
 80059d0:	462b      	mov	r3, r5
 80059d2:	f7fa fdb5 	bl	8000540 <__aeabi_dmul>
 80059d6:	a382      	add	r3, pc, #520	; (adr r3, 8005be0 <__ieee754_asin+0x308>)
 80059d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059dc:	f7fa fbfa 	bl	80001d4 <__adddf3>
 80059e0:	4622      	mov	r2, r4
 80059e2:	462b      	mov	r3, r5
 80059e4:	f7fa fdac 	bl	8000540 <__aeabi_dmul>
 80059e8:	a37f      	add	r3, pc, #508	; (adr r3, 8005be8 <__ieee754_asin+0x310>)
 80059ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ee:	f7fa fbef 	bl	80001d0 <__aeabi_dsub>
 80059f2:	4622      	mov	r2, r4
 80059f4:	462b      	mov	r3, r5
 80059f6:	f7fa fda3 	bl	8000540 <__aeabi_dmul>
 80059fa:	a37d      	add	r3, pc, #500	; (adr r3, 8005bf0 <__ieee754_asin+0x318>)
 80059fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a00:	f7fa fbe8 	bl	80001d4 <__adddf3>
 8005a04:	4622      	mov	r2, r4
 8005a06:	462b      	mov	r3, r5
 8005a08:	f7fa fd9a 	bl	8000540 <__aeabi_dmul>
 8005a0c:	a37a      	add	r3, pc, #488	; (adr r3, 8005bf8 <__ieee754_asin+0x320>)
 8005a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a12:	ec41 0b18 	vmov	d8, r0, r1
 8005a16:	4620      	mov	r0, r4
 8005a18:	4629      	mov	r1, r5
 8005a1a:	f7fa fd91 	bl	8000540 <__aeabi_dmul>
 8005a1e:	a378      	add	r3, pc, #480	; (adr r3, 8005c00 <__ieee754_asin+0x328>)
 8005a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a24:	f7fa fbd4 	bl	80001d0 <__aeabi_dsub>
 8005a28:	4622      	mov	r2, r4
 8005a2a:	462b      	mov	r3, r5
 8005a2c:	f7fa fd88 	bl	8000540 <__aeabi_dmul>
 8005a30:	a375      	add	r3, pc, #468	; (adr r3, 8005c08 <__ieee754_asin+0x330>)
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	f7fa fbcd 	bl	80001d4 <__adddf3>
 8005a3a:	4622      	mov	r2, r4
 8005a3c:	462b      	mov	r3, r5
 8005a3e:	f7fa fd7f 	bl	8000540 <__aeabi_dmul>
 8005a42:	a373      	add	r3, pc, #460	; (adr r3, 8005c10 <__ieee754_asin+0x338>)
 8005a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a48:	f7fa fbc2 	bl	80001d0 <__aeabi_dsub>
 8005a4c:	4622      	mov	r2, r4
 8005a4e:	462b      	mov	r3, r5
 8005a50:	f7fa fd76 	bl	8000540 <__aeabi_dmul>
 8005a54:	4b72      	ldr	r3, [pc, #456]	; (8005c20 <__ieee754_asin+0x348>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	f7fa fbbc 	bl	80001d4 <__adddf3>
 8005a5c:	ec45 4b10 	vmov	d0, r4, r5
 8005a60:	4606      	mov	r6, r0
 8005a62:	460f      	mov	r7, r1
 8005a64:	f000 f94c 	bl	8005d00 <__ieee754_sqrt>
 8005a68:	4b6f      	ldr	r3, [pc, #444]	; (8005c28 <__ieee754_asin+0x350>)
 8005a6a:	4598      	cmp	r8, r3
 8005a6c:	ec5b ab10 	vmov	sl, fp, d0
 8005a70:	f340 80dc 	ble.w	8005c2c <__ieee754_asin+0x354>
 8005a74:	4632      	mov	r2, r6
 8005a76:	463b      	mov	r3, r7
 8005a78:	ec51 0b18 	vmov	r0, r1, d8
 8005a7c:	f7fa fe8a 	bl	8000794 <__aeabi_ddiv>
 8005a80:	4652      	mov	r2, sl
 8005a82:	465b      	mov	r3, fp
 8005a84:	f7fa fd5c 	bl	8000540 <__aeabi_dmul>
 8005a88:	4652      	mov	r2, sl
 8005a8a:	465b      	mov	r3, fp
 8005a8c:	f7fa fba2 	bl	80001d4 <__adddf3>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	f7fa fb9e 	bl	80001d4 <__adddf3>
 8005a98:	a347      	add	r3, pc, #284	; (adr r3, 8005bb8 <__ieee754_asin+0x2e0>)
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	f7fa fb97 	bl	80001d0 <__aeabi_dsub>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	a142      	add	r1, pc, #264	; (adr r1, 8005bb0 <__ieee754_asin+0x2d8>)
 8005aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aac:	f7fa fb90 	bl	80001d0 <__aeabi_dsub>
 8005ab0:	9b01      	ldr	r3, [sp, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	bfdc      	itt	le
 8005ab6:	4602      	movle	r2, r0
 8005ab8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8005abc:	4604      	mov	r4, r0
 8005abe:	460d      	mov	r5, r1
 8005ac0:	bfdc      	itt	le
 8005ac2:	4614      	movle	r4, r2
 8005ac4:	461d      	movle	r5, r3
 8005ac6:	e743      	b.n	8005950 <__ieee754_asin+0x78>
 8005ac8:	ee10 2a10 	vmov	r2, s0
 8005acc:	ee10 0a10 	vmov	r0, s0
 8005ad0:	462b      	mov	r3, r5
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	f7fa fd34 	bl	8000540 <__aeabi_dmul>
 8005ad8:	a33b      	add	r3, pc, #236	; (adr r3, 8005bc8 <__ieee754_asin+0x2f0>)
 8005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ade:	4606      	mov	r6, r0
 8005ae0:	460f      	mov	r7, r1
 8005ae2:	f7fa fd2d 	bl	8000540 <__aeabi_dmul>
 8005ae6:	a33a      	add	r3, pc, #232	; (adr r3, 8005bd0 <__ieee754_asin+0x2f8>)
 8005ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aec:	f7fa fb72 	bl	80001d4 <__adddf3>
 8005af0:	4632      	mov	r2, r6
 8005af2:	463b      	mov	r3, r7
 8005af4:	f7fa fd24 	bl	8000540 <__aeabi_dmul>
 8005af8:	a337      	add	r3, pc, #220	; (adr r3, 8005bd8 <__ieee754_asin+0x300>)
 8005afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afe:	f7fa fb67 	bl	80001d0 <__aeabi_dsub>
 8005b02:	4632      	mov	r2, r6
 8005b04:	463b      	mov	r3, r7
 8005b06:	f7fa fd1b 	bl	8000540 <__aeabi_dmul>
 8005b0a:	a335      	add	r3, pc, #212	; (adr r3, 8005be0 <__ieee754_asin+0x308>)
 8005b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b10:	f7fa fb60 	bl	80001d4 <__adddf3>
 8005b14:	4632      	mov	r2, r6
 8005b16:	463b      	mov	r3, r7
 8005b18:	f7fa fd12 	bl	8000540 <__aeabi_dmul>
 8005b1c:	a332      	add	r3, pc, #200	; (adr r3, 8005be8 <__ieee754_asin+0x310>)
 8005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b22:	f7fa fb55 	bl	80001d0 <__aeabi_dsub>
 8005b26:	4632      	mov	r2, r6
 8005b28:	463b      	mov	r3, r7
 8005b2a:	f7fa fd09 	bl	8000540 <__aeabi_dmul>
 8005b2e:	a330      	add	r3, pc, #192	; (adr r3, 8005bf0 <__ieee754_asin+0x318>)
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	f7fa fb4e 	bl	80001d4 <__adddf3>
 8005b38:	4632      	mov	r2, r6
 8005b3a:	463b      	mov	r3, r7
 8005b3c:	f7fa fd00 	bl	8000540 <__aeabi_dmul>
 8005b40:	a32d      	add	r3, pc, #180	; (adr r3, 8005bf8 <__ieee754_asin+0x320>)
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	4680      	mov	r8, r0
 8005b48:	4689      	mov	r9, r1
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	f7fa fcf7 	bl	8000540 <__aeabi_dmul>
 8005b52:	a32b      	add	r3, pc, #172	; (adr r3, 8005c00 <__ieee754_asin+0x328>)
 8005b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b58:	f7fa fb3a 	bl	80001d0 <__aeabi_dsub>
 8005b5c:	4632      	mov	r2, r6
 8005b5e:	463b      	mov	r3, r7
 8005b60:	f7fa fcee 	bl	8000540 <__aeabi_dmul>
 8005b64:	a328      	add	r3, pc, #160	; (adr r3, 8005c08 <__ieee754_asin+0x330>)
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	f7fa fb33 	bl	80001d4 <__adddf3>
 8005b6e:	4632      	mov	r2, r6
 8005b70:	463b      	mov	r3, r7
 8005b72:	f7fa fce5 	bl	8000540 <__aeabi_dmul>
 8005b76:	a326      	add	r3, pc, #152	; (adr r3, 8005c10 <__ieee754_asin+0x338>)
 8005b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7c:	f7fa fb28 	bl	80001d0 <__aeabi_dsub>
 8005b80:	4632      	mov	r2, r6
 8005b82:	463b      	mov	r3, r7
 8005b84:	f7fa fcdc 	bl	8000540 <__aeabi_dmul>
 8005b88:	4b25      	ldr	r3, [pc, #148]	; (8005c20 <__ieee754_asin+0x348>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f7fa fb22 	bl	80001d4 <__adddf3>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4640      	mov	r0, r8
 8005b96:	4649      	mov	r1, r9
 8005b98:	f7fa fdfc 	bl	8000794 <__aeabi_ddiv>
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	462b      	mov	r3, r5
 8005ba0:	f7fa fcce 	bl	8000540 <__aeabi_dmul>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4620      	mov	r0, r4
 8005baa:	4629      	mov	r1, r5
 8005bac:	e6bf      	b.n	800592e <__ieee754_asin+0x56>
 8005bae:	bf00      	nop
 8005bb0:	54442d18 	.word	0x54442d18
 8005bb4:	3ff921fb 	.word	0x3ff921fb
 8005bb8:	33145c07 	.word	0x33145c07
 8005bbc:	3c91a626 	.word	0x3c91a626
 8005bc0:	8800759c 	.word	0x8800759c
 8005bc4:	7e37e43c 	.word	0x7e37e43c
 8005bc8:	0dfdf709 	.word	0x0dfdf709
 8005bcc:	3f023de1 	.word	0x3f023de1
 8005bd0:	7501b288 	.word	0x7501b288
 8005bd4:	3f49efe0 	.word	0x3f49efe0
 8005bd8:	b5688f3b 	.word	0xb5688f3b
 8005bdc:	3fa48228 	.word	0x3fa48228
 8005be0:	0e884455 	.word	0x0e884455
 8005be4:	3fc9c155 	.word	0x3fc9c155
 8005be8:	03eb6f7d 	.word	0x03eb6f7d
 8005bec:	3fd4d612 	.word	0x3fd4d612
 8005bf0:	55555555 	.word	0x55555555
 8005bf4:	3fc55555 	.word	0x3fc55555
 8005bf8:	b12e9282 	.word	0xb12e9282
 8005bfc:	3fb3b8c5 	.word	0x3fb3b8c5
 8005c00:	1b8d0159 	.word	0x1b8d0159
 8005c04:	3fe6066c 	.word	0x3fe6066c
 8005c08:	9c598ac8 	.word	0x9c598ac8
 8005c0c:	40002ae5 	.word	0x40002ae5
 8005c10:	1c8a2d4b 	.word	0x1c8a2d4b
 8005c14:	40033a27 	.word	0x40033a27
 8005c18:	3fefffff 	.word	0x3fefffff
 8005c1c:	3fdfffff 	.word	0x3fdfffff
 8005c20:	3ff00000 	.word	0x3ff00000
 8005c24:	3fe00000 	.word	0x3fe00000
 8005c28:	3fef3332 	.word	0x3fef3332
 8005c2c:	ee10 2a10 	vmov	r2, s0
 8005c30:	ee10 0a10 	vmov	r0, s0
 8005c34:	465b      	mov	r3, fp
 8005c36:	4659      	mov	r1, fp
 8005c38:	f7fa facc 	bl	80001d4 <__adddf3>
 8005c3c:	4632      	mov	r2, r6
 8005c3e:	463b      	mov	r3, r7
 8005c40:	ec41 0b19 	vmov	d9, r0, r1
 8005c44:	ec51 0b18 	vmov	r0, r1, d8
 8005c48:	f7fa fda4 	bl	8000794 <__aeabi_ddiv>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	ec51 0b19 	vmov	r0, r1, d9
 8005c54:	f7fa fc74 	bl	8000540 <__aeabi_dmul>
 8005c58:	f04f 0800 	mov.w	r8, #0
 8005c5c:	4606      	mov	r6, r0
 8005c5e:	460f      	mov	r7, r1
 8005c60:	4642      	mov	r2, r8
 8005c62:	465b      	mov	r3, fp
 8005c64:	4640      	mov	r0, r8
 8005c66:	4659      	mov	r1, fp
 8005c68:	f7fa fc6a 	bl	8000540 <__aeabi_dmul>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4620      	mov	r0, r4
 8005c72:	4629      	mov	r1, r5
 8005c74:	f7fa faac 	bl	80001d0 <__aeabi_dsub>
 8005c78:	4642      	mov	r2, r8
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	460d      	mov	r5, r1
 8005c7e:	465b      	mov	r3, fp
 8005c80:	4650      	mov	r0, sl
 8005c82:	4659      	mov	r1, fp
 8005c84:	f7fa faa6 	bl	80001d4 <__adddf3>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	4629      	mov	r1, r5
 8005c90:	f7fa fd80 	bl	8000794 <__aeabi_ddiv>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	f7fa fa9c 	bl	80001d4 <__adddf3>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	a113      	add	r1, pc, #76	; (adr r1, 8005cf0 <__ieee754_asin+0x418>)
 8005ca2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ca6:	f7fa fa93 	bl	80001d0 <__aeabi_dsub>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	4630      	mov	r0, r6
 8005cb0:	4639      	mov	r1, r7
 8005cb2:	f7fa fa8d 	bl	80001d0 <__aeabi_dsub>
 8005cb6:	4642      	mov	r2, r8
 8005cb8:	4604      	mov	r4, r0
 8005cba:	460d      	mov	r5, r1
 8005cbc:	465b      	mov	r3, fp
 8005cbe:	4640      	mov	r0, r8
 8005cc0:	4659      	mov	r1, fp
 8005cc2:	f7fa fa87 	bl	80001d4 <__adddf3>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	a10b      	add	r1, pc, #44	; (adr r1, 8005cf8 <__ieee754_asin+0x420>)
 8005ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cd0:	f7fa fa7e 	bl	80001d0 <__aeabi_dsub>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4620      	mov	r0, r4
 8005cda:	4629      	mov	r1, r5
 8005cdc:	f7fa fa78 	bl	80001d0 <__aeabi_dsub>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	a104      	add	r1, pc, #16	; (adr r1, 8005cf8 <__ieee754_asin+0x420>)
 8005ce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cea:	e6df      	b.n	8005aac <__ieee754_asin+0x1d4>
 8005cec:	f3af 8000 	nop.w
 8005cf0:	33145c07 	.word	0x33145c07
 8005cf4:	3c91a626 	.word	0x3c91a626
 8005cf8:	54442d18 	.word	0x54442d18
 8005cfc:	3fe921fb 	.word	0x3fe921fb

08005d00 <__ieee754_sqrt>:
 8005d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d04:	ec55 4b10 	vmov	r4, r5, d0
 8005d08:	4e55      	ldr	r6, [pc, #340]	; (8005e60 <__ieee754_sqrt+0x160>)
 8005d0a:	43ae      	bics	r6, r5
 8005d0c:	ee10 0a10 	vmov	r0, s0
 8005d10:	ee10 3a10 	vmov	r3, s0
 8005d14:	462a      	mov	r2, r5
 8005d16:	4629      	mov	r1, r5
 8005d18:	d110      	bne.n	8005d3c <__ieee754_sqrt+0x3c>
 8005d1a:	ee10 2a10 	vmov	r2, s0
 8005d1e:	462b      	mov	r3, r5
 8005d20:	f7fa fc0e 	bl	8000540 <__aeabi_dmul>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	4620      	mov	r0, r4
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	f7fa fa52 	bl	80001d4 <__adddf3>
 8005d30:	4604      	mov	r4, r0
 8005d32:	460d      	mov	r5, r1
 8005d34:	ec45 4b10 	vmov	d0, r4, r5
 8005d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d3c:	2d00      	cmp	r5, #0
 8005d3e:	dc10      	bgt.n	8005d62 <__ieee754_sqrt+0x62>
 8005d40:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005d44:	4330      	orrs	r0, r6
 8005d46:	d0f5      	beq.n	8005d34 <__ieee754_sqrt+0x34>
 8005d48:	b15d      	cbz	r5, 8005d62 <__ieee754_sqrt+0x62>
 8005d4a:	ee10 2a10 	vmov	r2, s0
 8005d4e:	462b      	mov	r3, r5
 8005d50:	ee10 0a10 	vmov	r0, s0
 8005d54:	f7fa fa3c 	bl	80001d0 <__aeabi_dsub>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	f7fa fd1a 	bl	8000794 <__aeabi_ddiv>
 8005d60:	e7e6      	b.n	8005d30 <__ieee754_sqrt+0x30>
 8005d62:	1512      	asrs	r2, r2, #20
 8005d64:	d074      	beq.n	8005e50 <__ieee754_sqrt+0x150>
 8005d66:	07d4      	lsls	r4, r2, #31
 8005d68:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005d6c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005d70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005d74:	bf5e      	ittt	pl
 8005d76:	0fda      	lsrpl	r2, r3, #31
 8005d78:	005b      	lslpl	r3, r3, #1
 8005d7a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005d7e:	2400      	movs	r4, #0
 8005d80:	0fda      	lsrs	r2, r3, #31
 8005d82:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005d86:	107f      	asrs	r7, r7, #1
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	2516      	movs	r5, #22
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005d92:	1886      	adds	r6, r0, r2
 8005d94:	428e      	cmp	r6, r1
 8005d96:	bfde      	ittt	le
 8005d98:	1b89      	suble	r1, r1, r6
 8005d9a:	18b0      	addle	r0, r6, r2
 8005d9c:	18a4      	addle	r4, r4, r2
 8005d9e:	0049      	lsls	r1, r1, #1
 8005da0:	3d01      	subs	r5, #1
 8005da2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005da6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005daa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005dae:	d1f0      	bne.n	8005d92 <__ieee754_sqrt+0x92>
 8005db0:	462a      	mov	r2, r5
 8005db2:	f04f 0e20 	mov.w	lr, #32
 8005db6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005dba:	4281      	cmp	r1, r0
 8005dbc:	eb06 0c05 	add.w	ip, r6, r5
 8005dc0:	dc02      	bgt.n	8005dc8 <__ieee754_sqrt+0xc8>
 8005dc2:	d113      	bne.n	8005dec <__ieee754_sqrt+0xec>
 8005dc4:	459c      	cmp	ip, r3
 8005dc6:	d811      	bhi.n	8005dec <__ieee754_sqrt+0xec>
 8005dc8:	f1bc 0f00 	cmp.w	ip, #0
 8005dcc:	eb0c 0506 	add.w	r5, ip, r6
 8005dd0:	da43      	bge.n	8005e5a <__ieee754_sqrt+0x15a>
 8005dd2:	2d00      	cmp	r5, #0
 8005dd4:	db41      	blt.n	8005e5a <__ieee754_sqrt+0x15a>
 8005dd6:	f100 0801 	add.w	r8, r0, #1
 8005dda:	1a09      	subs	r1, r1, r0
 8005ddc:	459c      	cmp	ip, r3
 8005dde:	bf88      	it	hi
 8005de0:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8005de4:	eba3 030c 	sub.w	r3, r3, ip
 8005de8:	4432      	add	r2, r6
 8005dea:	4640      	mov	r0, r8
 8005dec:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005df0:	f1be 0e01 	subs.w	lr, lr, #1
 8005df4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005df8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005dfc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005e00:	d1db      	bne.n	8005dba <__ieee754_sqrt+0xba>
 8005e02:	430b      	orrs	r3, r1
 8005e04:	d006      	beq.n	8005e14 <__ieee754_sqrt+0x114>
 8005e06:	1c50      	adds	r0, r2, #1
 8005e08:	bf13      	iteet	ne
 8005e0a:	3201      	addne	r2, #1
 8005e0c:	3401      	addeq	r4, #1
 8005e0e:	4672      	moveq	r2, lr
 8005e10:	f022 0201 	bicne.w	r2, r2, #1
 8005e14:	1063      	asrs	r3, r4, #1
 8005e16:	0852      	lsrs	r2, r2, #1
 8005e18:	07e1      	lsls	r1, r4, #31
 8005e1a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005e1e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005e22:	bf48      	it	mi
 8005e24:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005e28:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005e2c:	4614      	mov	r4, r2
 8005e2e:	e781      	b.n	8005d34 <__ieee754_sqrt+0x34>
 8005e30:	0ad9      	lsrs	r1, r3, #11
 8005e32:	3815      	subs	r0, #21
 8005e34:	055b      	lsls	r3, r3, #21
 8005e36:	2900      	cmp	r1, #0
 8005e38:	d0fa      	beq.n	8005e30 <__ieee754_sqrt+0x130>
 8005e3a:	02cd      	lsls	r5, r1, #11
 8005e3c:	d50a      	bpl.n	8005e54 <__ieee754_sqrt+0x154>
 8005e3e:	f1c2 0420 	rsb	r4, r2, #32
 8005e42:	fa23 f404 	lsr.w	r4, r3, r4
 8005e46:	1e55      	subs	r5, r2, #1
 8005e48:	4093      	lsls	r3, r2
 8005e4a:	4321      	orrs	r1, r4
 8005e4c:	1b42      	subs	r2, r0, r5
 8005e4e:	e78a      	b.n	8005d66 <__ieee754_sqrt+0x66>
 8005e50:	4610      	mov	r0, r2
 8005e52:	e7f0      	b.n	8005e36 <__ieee754_sqrt+0x136>
 8005e54:	0049      	lsls	r1, r1, #1
 8005e56:	3201      	adds	r2, #1
 8005e58:	e7ef      	b.n	8005e3a <__ieee754_sqrt+0x13a>
 8005e5a:	4680      	mov	r8, r0
 8005e5c:	e7bd      	b.n	8005dda <__ieee754_sqrt+0xda>
 8005e5e:	bf00      	nop
 8005e60:	7ff00000 	.word	0x7ff00000
 8005e64:	00000000 	.word	0x00000000

08005e68 <nan>:
 8005e68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005e70 <nan+0x8>
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	00000000 	.word	0x00000000
 8005e74:	7ff80000 	.word	0x7ff80000

08005e78 <_init>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr

08005e84 <_fini>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	bf00      	nop
 8005e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8a:	bc08      	pop	{r3}
 8005e8c:	469e      	mov	lr, r3
 8005e8e:	4770      	bx	lr
