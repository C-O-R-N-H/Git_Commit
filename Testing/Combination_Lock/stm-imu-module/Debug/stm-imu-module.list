
stm-imu-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006fc0  08006fc0  00016fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070a0  080070a0  0002011c  2**0
                  CONTENTS
  4 .ARM          00000000  080070a0  080070a0  0002011c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070a0  080070a0  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070a0  080070a0  000170a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070a4  080070a4  000170a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  080070a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002011c  2**0
                  CONTENTS
 10 .bss          0000045c  2000011c  2000011c  0002011c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000578  20000578  0002011c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000157da  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e96  00000000  00000000  00035926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  000387c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010c8  00000000  00000000  00039a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200cb  00000000  00000000  0003aac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f2d  00000000  00000000  0005ab93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bad3d  00000000  00000000  00072ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d7fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053e8  00000000  00000000  0012d850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000011c 	.word	0x2000011c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006fa8 	.word	0x08006fa8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000120 	.word	0x20000120
 80001cc:	08006fa8 	.word	0x08006fa8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <stm_accel_init>:
#include "accelerometer.h"
#include "LSM303DLHC_definitions.h"


void stm_accel_init(I2C_HandleTypeDef *i2c)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af04      	add	r7, sp, #16
 8000b9e:	6078      	str	r0, [r7, #4]
	// Set the sampling rate
	uint8_t reg_1 = CTRL_REG1_A_LOW_POWER_MODE_100_HZ | CTRL_REG1_A_Xen | CTRL_REG1_A_Yen | CTRL_REG1_A_Zen;
 8000ba0:	2357      	movs	r3, #87	; 0x57
 8000ba2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, accel_wr, LSM303DLHC_CTRL_REG1_A, 1, &reg_1, 1, 10);
 8000ba4:	230a      	movs	r3, #10
 8000ba6:	9302      	str	r3, [sp, #8]
 8000ba8:	2301      	movs	r3, #1
 8000baa:	9301      	str	r3, [sp, #4]
 8000bac:	f107 030f 	add.w	r3, r7, #15
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	2220      	movs	r2, #32
 8000bb6:	2132      	movs	r1, #50	; 0x32
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f001 ff23 	bl	8002a04 <HAL_I2C_Mem_Write>

//	// Enable block data update: output registers only updated once read
//	// Enable high-resolution output
//	uint8_t reg_4 = CTRL_REG4_A_BDU | CTRL_REG4_A_HR;
//	HAL_I2C_Mem_Write(i2c, accel_wr, LSM303DLHC_CTRL_REG4_A, 1, &reg_4, 1, 10);
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <find_zero_errors>:


void find_zero_errors(I2C_HandleTypeDef *i2c, int16_t *zero_errors)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b08a      	sub	sp, #40	; 0x28
 8000bca:	af02      	add	r7, sp, #8
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]

	const uint16_t n_samples = 400;
 8000bd0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bd4:	823b      	strh	r3, [r7, #16]
	const int16_t G = 16384;
 8000bd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bda:	81fb      	strh	r3, [r7, #14]

	int32_t sum_x = 0, sum_y = 0, sum_z = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
	int16_t accel_x, accel_y, accel_z;
	for (uint16_t i = 0; i < n_samples; i++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	827b      	strh	r3, [r7, #18]
 8000bec:	e023      	b.n	8000c36 <find_zero_errors+0x70>
	{
		read_stm_accel_data(i2c, &accel_x, &accel_y, &accel_z, zero_errors);
 8000bee:	f107 0008 	add.w	r0, r7, #8
 8000bf2:	f107 020a 	add.w	r2, r7, #10
 8000bf6:	f107 010c 	add.w	r1, r7, #12
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f000 f83d 	bl	8000c80 <read_stm_accel_data>
		sum_x += accel_x;
 8000c06:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	4413      	add	r3, r2
 8000c10:	61fb      	str	r3, [r7, #28]
		sum_y += accel_y;
 8000c12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c16:	461a      	mov	r2, r3
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
		sum_z += accel_z - G;
 8000c1e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000c22:	461a      	mov	r2, r3
 8000c24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 0; i < n_samples; i++)
 8000c30:	8a7b      	ldrh	r3, [r7, #18]
 8000c32:	3301      	adds	r3, #1
 8000c34:	827b      	strh	r3, [r7, #18]
 8000c36:	8a7a      	ldrh	r2, [r7, #18]
 8000c38:	8a3b      	ldrh	r3, [r7, #16]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d3d7      	bcc.n	8000bee <find_zero_errors+0x28>
	}

	zero_errors[0] = (int16_t)(sum_x / (int16_t)n_samples);
 8000c3e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c42:	461a      	mov	r2, r3
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	fb93 f3f2 	sdiv	r3, r3, r2
 8000c4a:	b21a      	sxth	r2, r3
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	801a      	strh	r2, [r3, #0]
	zero_errors[1] = (int16_t)(sum_y / (int16_t)n_samples);
 8000c50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c54:	461a      	mov	r2, r3
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	fb93 f2f2 	sdiv	r2, r3, r2
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	3302      	adds	r3, #2
 8000c60:	b212      	sxth	r2, r2
 8000c62:	801a      	strh	r2, [r3, #0]
	zero_errors[2] = (int16_t)(sum_z / (int16_t)n_samples);
 8000c64:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	fb93 f2f2 	sdiv	r2, r3, r2
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	3304      	adds	r3, #4
 8000c74:	b212      	sxth	r2, r2
 8000c76:	801a      	strh	r2, [r3, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	3720      	adds	r7, #32
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <read_stm_accel_data>:


void read_stm_accel_data(I2C_HandleTypeDef *i2c, int16_t *accel_x, int16_t *accel_y, int16_t *accel_z, int16_t *zero_errors)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af04      	add	r7, sp, #16
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	603b      	str	r3, [r7, #0]
	// Initialise windows for filtering
	static Window window_x, window_y, window_z;
	static bool windows_initialised = false;
	if (!windows_initialised)
 8000c8e:	4b63      	ldr	r3, [pc, #396]	; (8000e1c <read_stm_accel_data+0x19c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	f083 0301 	eor.w	r3, r3, #1
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d00b      	beq.n	8000cb4 <read_stm_accel_data+0x34>
	{
		window_init(&window_x);
 8000c9c:	4860      	ldr	r0, [pc, #384]	; (8000e20 <read_stm_accel_data+0x1a0>)
 8000c9e:	f000 f9f7 	bl	8001090 <window_init>
		window_init(&window_y);
 8000ca2:	4860      	ldr	r0, [pc, #384]	; (8000e24 <read_stm_accel_data+0x1a4>)
 8000ca4:	f000 f9f4 	bl	8001090 <window_init>
		window_init(&window_z);
 8000ca8:	485f      	ldr	r0, [pc, #380]	; (8000e28 <read_stm_accel_data+0x1a8>)
 8000caa:	f000 f9f1 	bl	8001090 <window_init>
		windows_initialised = true;
 8000cae:	4b5b      	ldr	r3, [pc, #364]	; (8000e1c <read_stm_accel_data+0x19c>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
	}

	// Read acceleration in the x-axis
	uint8_t accel_x_MSB = 0x00;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Read(i2c, accel_rd, OUT_X_H_A, 1, &accel_x_MSB, 1, 10);
 8000cb8:	230a      	movs	r3, #10
 8000cba:	9302      	str	r3, [sp, #8]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	9301      	str	r3, [sp, #4]
 8000cc0:	f107 0317 	add.w	r3, r7, #23
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	2229      	movs	r2, #41	; 0x29
 8000cca:	2133      	movs	r1, #51	; 0x33
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f001 ffad 	bl	8002c2c <HAL_I2C_Mem_Read>
	uint8_t accel_x_LSB = 0x00;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Mem_Read(i2c, accel_rd, OUT_X_L_A, 1, &accel_x_LSB, 1, 10);
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	9302      	str	r3, [sp, #8]
 8000cda:	2301      	movs	r3, #1
 8000cdc:	9301      	str	r3, [sp, #4]
 8000cde:	f107 0316 	add.w	r3, r7, #22
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	2228      	movs	r2, #40	; 0x28
 8000ce8:	2133      	movs	r1, #51	; 0x33
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f001 ff9e 	bl	8002c2c <HAL_I2C_Mem_Read>
	*accel_x = ((accel_x_MSB << 8) | accel_x_LSB) - zero_errors[0];
 8000cf0:	7dfb      	ldrb	r3, [r7, #23]
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	7dbb      	ldrb	r3, [r7, #22]
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	6a3b      	ldr	r3, [r7, #32]
 8000d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	801a      	strh	r2, [r3, #0]

	// Read acceleration in the y-axis
	uint8_t accel_y_MSB = 0x00;
 8000d12:	2300      	movs	r3, #0
 8000d14:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Read(i2c, accel_rd, OUT_Y_H_A, 1, &accel_y_MSB, 1, 10);
 8000d16:	230a      	movs	r3, #10
 8000d18:	9302      	str	r3, [sp, #8]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	f107 0315 	add.w	r3, r7, #21
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2301      	movs	r3, #1
 8000d26:	222b      	movs	r2, #43	; 0x2b
 8000d28:	2133      	movs	r1, #51	; 0x33
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f001 ff7e 	bl	8002c2c <HAL_I2C_Mem_Read>
	uint8_t accel_y_LSB = 0x00;
 8000d30:	2300      	movs	r3, #0
 8000d32:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Mem_Read(i2c, accel_rd, OUT_Y_L_A, 1, &accel_y_LSB, 1, 10);
 8000d34:	230a      	movs	r3, #10
 8000d36:	9302      	str	r3, [sp, #8]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2301      	movs	r3, #1
 8000d44:	222a      	movs	r2, #42	; 0x2a
 8000d46:	2133      	movs	r1, #51	; 0x33
 8000d48:	68f8      	ldr	r0, [r7, #12]
 8000d4a:	f001 ff6f 	bl	8002c2c <HAL_I2C_Mem_Read>
	*accel_y = ((accel_y_MSB << 8) | accel_y_LSB) - zero_errors[1];
 8000d4e:	7d7b      	ldrb	r3, [r7, #21]
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	b21a      	sxth	r2, r3
 8000d54:	7d3b      	ldrb	r3, [r7, #20]
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	6a3b      	ldr	r3, [r7, #32]
 8000d60:	3302      	adds	r3, #2
 8000d62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	b21a      	sxth	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	801a      	strh	r2, [r3, #0]

	// Read acceleration in the z-axis
	uint8_t accel_z_MSB = 0x00;
 8000d72:	2300      	movs	r3, #0
 8000d74:	74fb      	strb	r3, [r7, #19]
	HAL_I2C_Mem_Read(i2c, accel_rd, OUT_Z_H_A, 1, &accel_z_MSB, 1, 10);
 8000d76:	230a      	movs	r3, #10
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	f107 0313 	add.w	r3, r7, #19
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2301      	movs	r3, #1
 8000d86:	222d      	movs	r2, #45	; 0x2d
 8000d88:	2133      	movs	r1, #51	; 0x33
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f001 ff4e 	bl	8002c2c <HAL_I2C_Mem_Read>
	uint8_t accel_z_LSB = 0x00;
 8000d90:	2300      	movs	r3, #0
 8000d92:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Mem_Read(i2c, accel_rd, OUT_Z_L_A, 1, &accel_z_LSB, 1, 10);
 8000d94:	230a      	movs	r3, #10
 8000d96:	9302      	str	r3, [sp, #8]
 8000d98:	2301      	movs	r3, #1
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	f107 0312 	add.w	r3, r7, #18
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2301      	movs	r3, #1
 8000da4:	222c      	movs	r2, #44	; 0x2c
 8000da6:	2133      	movs	r1, #51	; 0x33
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f001 ff3f 	bl	8002c2c <HAL_I2C_Mem_Read>
	*accel_z = ((accel_z_MSB << 8) | accel_z_LSB) - zero_errors[2];
 8000dae:	7cfb      	ldrb	r3, [r7, #19]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	7cbb      	ldrb	r3, [r7, #18]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	6a3b      	ldr	r3, [r7, #32]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	801a      	strh	r2, [r3, #0]

	// Compute moving average of data
	*accel_x = moving_average(&window_x, *accel_x);
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4811      	ldr	r0, [pc, #68]	; (8000e20 <read_stm_accel_data+0x1a0>)
 8000ddc:	f000 f96c 	bl	80010b8 <moving_average>
 8000de0:	4603      	mov	r3, r0
 8000de2:	461a      	mov	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	801a      	strh	r2, [r3, #0]
	*accel_y = moving_average(&window_y, *accel_y);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dee:	4619      	mov	r1, r3
 8000df0:	480c      	ldr	r0, [pc, #48]	; (8000e24 <read_stm_accel_data+0x1a4>)
 8000df2:	f000 f961 	bl	80010b8 <moving_average>
 8000df6:	4603      	mov	r3, r0
 8000df8:	461a      	mov	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	801a      	strh	r2, [r3, #0]
	*accel_z = moving_average(&window_z, *accel_z);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e04:	4619      	mov	r1, r3
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <read_stm_accel_data+0x1a8>)
 8000e08:	f000 f956 	bl	80010b8 <moving_average>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	801a      	strh	r2, [r3, #0]
}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000138 	.word	0x20000138
 8000e20:	2000013c 	.word	0x2000013c
 8000e24:	20000148 	.word	0x20000148
 8000e28:	20000154 	.word	0x20000154
 8000e2c:	00000000 	.word	0x00000000

08000e30 <get_orientation>:


bool get_orientation(int16_t accel_x, int16_t accel_y, int16_t accel_z, int8_t *pitch, int8_t *roll)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	4603      	mov	r3, r0
 8000e3a:	81fb      	strh	r3, [r7, #14]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	81bb      	strh	r3, [r7, #12]
 8000e40:	4613      	mov	r3, r2
 8000e42:	817b      	strh	r3, [r7, #10]
	const float G = 16384;  // (2^16 / 4) since the full-scale of 16 bits is +/- 2g
 8000e44:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8000e48:	617b      	str	r3, [r7, #20]
	const int16_t valid_threshold = 5000;
 8000e4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e4e:	827b      	strh	r3, [r7, #18]

	*pitch = (int8_t)(atan((float)accel_y / (float)accel_z) * (180 / M_PI));  // pitch from horizontal in degrees
 8000e50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e54:	ee07 3a90 	vmov	s15, r3
 8000e58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e5c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e68:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e6c:	ee16 0a90 	vmov	r0, s13
 8000e70:	f7ff fb62 	bl	8000538 <__aeabi_f2d>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	ec43 2b10 	vmov	d0, r2, r3
 8000e7c:	f005 fbe4 	bl	8006648 <atan>
 8000e80:	ec51 0b10 	vmov	r0, r1, d0
 8000e84:	a320      	add	r3, pc, #128	; (adr r3, 8000f08 <get_orientation+0xd8>)
 8000e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8a:	f7ff fbad 	bl	80005e8 <__aeabi_dmul>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	4610      	mov	r0, r2
 8000e94:	4619      	mov	r1, r3
 8000e96:	f7ff fe57 	bl	8000b48 <__aeabi_d2iz>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	b25a      	sxtb	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	701a      	strb	r2, [r3, #0]
	*roll = (int8_t)(asin((float)accel_x / G) * (180 / M_PI));  // roll from horizontal in degrees
 8000ea2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ea6:	ee07 3a90 	vmov	s15, r3
 8000eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eae:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eb2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000eb6:	ee16 0a90 	vmov	r0, s13
 8000eba:	f7ff fb3d 	bl	8000538 <__aeabi_f2d>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	ec43 2b10 	vmov	d0, r2, r3
 8000ec6:	f005 fd69 	bl	800699c <asin>
 8000eca:	ec51 0b10 	vmov	r0, r1, d0
 8000ece:	a30e      	add	r3, pc, #56	; (adr r3, 8000f08 <get_orientation+0xd8>)
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	f7ff fb88 	bl	80005e8 <__aeabi_dmul>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4610      	mov	r0, r2
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f7ff fe32 	bl	8000b48 <__aeabi_d2iz>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b25a      	sxtb	r2, r3
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	701a      	strb	r2, [r3, #0]

	return accel_z >= valid_threshold ? true : false;  // If accel_z < threshold then STM is nearly upside down so data is invalid
 8000eec:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ef0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	bfac      	ite	ge
 8000ef8:	2301      	movge	r3, #1
 8000efa:	2300      	movlt	r3, #0
 8000efc:	b2db      	uxtb	r3, r3
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	1a63c1f8 	.word	0x1a63c1f8
 8000f0c:	404ca5dc 	.word	0x404ca5dc

08000f10 <get_velocity>:


void get_velocity(int8_t pitch, int8_t roll, int8_t *ptu_vel_pitch, int8_t *ptu_vel_yaw)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60ba      	str	r2, [r7, #8]
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	73fb      	strb	r3, [r7, #15]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	73bb      	strb	r3, [r7, #14]
	*ptu_vel_pitch = calculate_velocity(pitch);
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f811 	bl	8000f4e <calculate_velocity>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	701a      	strb	r2, [r3, #0]
	*ptu_vel_yaw = calculate_velocity(roll);
 8000f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f808 	bl	8000f4e <calculate_velocity>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	701a      	strb	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <calculate_velocity>:


int8_t calculate_velocity(int8_t angle)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b087      	sub	sp, #28
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	71fb      	strb	r3, [r7, #7]
	int8_t sign = angle >= 0 ? 1 : -1;
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db01      	blt.n	8000f64 <calculate_velocity+0x16>
 8000f60:	2301      	movs	r3, #1
 8000f62:	e001      	b.n	8000f68 <calculate_velocity+0x1a>
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f68:	75bb      	strb	r3, [r7, #22]
	int8_t return_vel = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	75fb      	strb	r3, [r7, #23]

	const int8_t threshold_1 = 6;
 8000f6e:	2306      	movs	r3, #6
 8000f70:	757b      	strb	r3, [r7, #21]
	const int8_t threshold_2 = 12;
 8000f72:	230c      	movs	r3, #12
 8000f74:	753b      	strb	r3, [r7, #20]
	const int8_t threshold_3 = 20;
 8000f76:	2314      	movs	r3, #20
 8000f78:	74fb      	strb	r3, [r7, #19]
	const int8_t threshold_4 = 29;
 8000f7a:	231d      	movs	r3, #29
 8000f7c:	74bb      	strb	r3, [r7, #18]
	const int8_t threshold_5 = 40;
 8000f7e:	2328      	movs	r3, #40	; 0x28
 8000f80:	747b      	strb	r3, [r7, #17]

	const int8_t vel_1 = 1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	743b      	strb	r3, [r7, #16]
	const int8_t vel_2 = 2;
 8000f86:	2302      	movs	r3, #2
 8000f88:	73fb      	strb	r3, [r7, #15]
	const int8_t vel_3 = 3;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	73bb      	strb	r3, [r7, #14]
	const int8_t vel_4 = 6;
 8000f8e:	2306      	movs	r3, #6
 8000f90:	737b      	strb	r3, [r7, #13]
	const int8_t vel_5 = 12;
 8000f92:	230c      	movs	r3, #12
 8000f94:	733b      	strb	r3, [r7, #12]

	if ((abs(angle) >= threshold_1) && (abs(angle) < threshold_2))
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	bfb8      	it	lt
 8000f9e:	425b      	neglt	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	db0d      	blt.n	8000fc8 <calculate_velocity+0x7a>
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	bfb8      	it	lt
 8000fb4:	425b      	neglt	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	da02      	bge.n	8000fc8 <calculate_velocity+0x7a>
	{
		return_vel = vel_1;
 8000fc2:	7c3b      	ldrb	r3, [r7, #16]
 8000fc4:	75fb      	strb	r3, [r7, #23]
 8000fc6:	e057      	b.n	8001078 <calculate_velocity+0x12a>
	}
	else if ((abs(angle) >= threshold_2) && (abs(angle) < threshold_3))
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bfb8      	it	lt
 8000fd0:	425b      	neglt	r3, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	db0d      	blt.n	8000ffa <calculate_velocity+0xac>
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	bfb8      	it	lt
 8000fe6:	425b      	neglt	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	461a      	mov	r2, r3
 8000fec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	da02      	bge.n	8000ffa <calculate_velocity+0xac>
	{
		return_vel = vel_2;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	75fb      	strb	r3, [r7, #23]
 8000ff8:	e03e      	b.n	8001078 <calculate_velocity+0x12a>
	}
	else if ((abs(angle) >= threshold_3) && (abs(angle) < threshold_4))
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bfb8      	it	lt
 8001002:	425b      	neglt	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	461a      	mov	r2, r3
 8001008:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800100c:	429a      	cmp	r2, r3
 800100e:	db0d      	blt.n	800102c <calculate_velocity+0xde>
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	bfb8      	it	lt
 8001018:	425b      	neglt	r3, r3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	461a      	mov	r2, r3
 800101e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001022:	429a      	cmp	r2, r3
 8001024:	da02      	bge.n	800102c <calculate_velocity+0xde>
	{
		return_vel = vel_3;
 8001026:	7bbb      	ldrb	r3, [r7, #14]
 8001028:	75fb      	strb	r3, [r7, #23]
 800102a:	e025      	b.n	8001078 <calculate_velocity+0x12a>
	}
	else if ((abs(angle) >= threshold_4) && (abs(angle) < threshold_5))
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	bfb8      	it	lt
 8001034:	425b      	neglt	r3, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800103e:	429a      	cmp	r2, r3
 8001040:	db0d      	blt.n	800105e <calculate_velocity+0x110>
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	bfb8      	it	lt
 800104a:	425b      	neglt	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001054:	429a      	cmp	r2, r3
 8001056:	da02      	bge.n	800105e <calculate_velocity+0x110>
	{
		return_vel = vel_4;
 8001058:	7b7b      	ldrb	r3, [r7, #13]
 800105a:	75fb      	strb	r3, [r7, #23]
 800105c:	e00c      	b.n	8001078 <calculate_velocity+0x12a>
	}
	else if (abs(angle) >= threshold_5)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	bfb8      	it	lt
 8001066:	425b      	neglt	r3, r3
 8001068:	b2db      	uxtb	r3, r3
 800106a:	461a      	mov	r2, r3
 800106c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001070:	429a      	cmp	r2, r3
 8001072:	db01      	blt.n	8001078 <calculate_velocity+0x12a>
	{
		return_vel = vel_5;
 8001074:	7b3b      	ldrb	r3, [r7, #12]
 8001076:	75fb      	strb	r3, [r7, #23]
	}

	return return_vel * sign;
 8001078:	7dfa      	ldrb	r2, [r7, #23]
 800107a:	7dbb      	ldrb	r3, [r7, #22]
 800107c:	fb12 f303 	smulbb	r3, r2, r3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	b25b      	sxtb	r3, r3
}
 8001084:	4618      	mov	r0, r3
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <window_init>:

#include "filter.h"


void window_init(Window *window)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	window->idx = 0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	729a      	strb	r2, [r3, #10]
	window->is_full = false;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	72da      	strb	r2, [r3, #11]
	memset(window->arr, 0, WINDOW_SIZE * sizeof(int16_t));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	220a      	movs	r2, #10
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 fe56 	bl	8005d5c <memset>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <moving_average>:


int16_t moving_average(Window *window, int16_t new_value)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
	update_window(window, new_value);
 80010c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010c8:	4619      	mov	r1, r3
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 f808 	bl	80010e0 <update_window>
	return mean(window);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 f831 	bl	8001138 <mean>
 80010d6:	4603      	mov	r3, r0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <update_window>:


void update_window(Window *window, int16_t new_value)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
	if (window->idx == WINDOW_SIZE - 1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7a9b      	ldrb	r3, [r3, #10]
 80010f0:	2b04      	cmp	r3, #4
 80010f2:	d102      	bne.n	80010fa <update_window+0x1a>
	{
		window->is_full = true;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	72da      	strb	r2, [r3, #11]
	}

	window->arr[window->idx] = new_value;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7a9b      	ldrb	r3, [r3, #10]
 80010fe:	4619      	mov	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	887a      	ldrh	r2, [r7, #2]
 8001104:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	window->idx = (window->idx + 1) % WINDOW_SIZE;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7a9b      	ldrb	r3, [r3, #10]
 800110c:	1c5a      	adds	r2, r3, #1
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <update_window+0x54>)
 8001110:	fb83 1302 	smull	r1, r3, r3, r2
 8001114:	1059      	asrs	r1, r3, #1
 8001116:	17d3      	asrs	r3, r2, #31
 8001118:	1ac9      	subs	r1, r1, r3
 800111a:	460b      	mov	r3, r1
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	1ad1      	subs	r1, r2, r3
 8001122:	b2ca      	uxtb	r2, r1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	729a      	strb	r2, [r3, #10]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	66666667 	.word	0x66666667

08001138 <mean>:


int16_t mean(Window *window)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	int32_t sum = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < WINDOW_SIZE; i++)
 8001144:	2300      	movs	r3, #0
 8001146:	72fb      	strb	r3, [r7, #11]
 8001148:	e00a      	b.n	8001160 <mean+0x28>
	{
		sum += window->arr[i];
 800114a:	7afa      	ldrb	r2, [r7, #11]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < WINDOW_SIZE; i++)
 800115a:	7afb      	ldrb	r3, [r7, #11]
 800115c:	3301      	adds	r3, #1
 800115e:	72fb      	strb	r3, [r7, #11]
 8001160:	7afb      	ldrb	r3, [r7, #11]
 8001162:	2b04      	cmp	r3, #4
 8001164:	d9f1      	bls.n	800114a <mean+0x12>
	}

	int8_t n_samples = window->is_full ? WINDOW_SIZE : window->idx;  // If the window is not yet full,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7adb      	ldrb	r3, [r3, #11]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <mean+0x3a>
 800116e:	2305      	movs	r3, #5
 8001170:	e002      	b.n	8001178 <mean+0x40>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	7a9b      	ldrb	r3, [r3, #10]
 8001176:	b25b      	sxtb	r3, r3
 8001178:	72bb      	strb	r3, [r7, #10]
																	 // the number of samples is the idx

	return sum / n_samples;  // Error associated with integer division is negligible
 800117a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	fb92 f3f3 	sdiv	r3, r2, r3
 8001184:	b21b      	sxth	r3, r3
}
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <enable_clocks>:
#include "led.h"
#include "stm32f303xc.h"


void enable_clocks()
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
	// Enable the clocks for GPIOA, C, and E
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <enable_clocks+0x1c>)
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <enable_clocks+0x1c>)
 800119e:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80011a2:	6153      	str	r3, [r2, #20]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000

080011b4 <initialise_board>:


void initialise_board()
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
	// Get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_mode_register = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <initialise_board+0x20>)
 80011bc:	607b      	str	r3, [r7, #4]
	*led_mode_register = 0x5555;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f245 5255 	movw	r2, #21845	; 0x5555
 80011c4:	801a      	strh	r2, [r3, #0]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	48001002 	.word	0x48001002

080011d8 <show_orientation_led>:


void show_orientation_led(int8_t pitch, int8_t roll, int8_t sensitivity)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	460b      	mov	r3, r1
 80011e4:	71bb      	strb	r3, [r7, #6]
 80011e6:	4613      	mov	r3, r2
 80011e8:	717b      	strb	r3, [r7, #5]
	LEDRegister *led_register = (LEDRegister *)(((uint8_t *)&(GPIOE->ODR)) + 1);
 80011ea:	4b5a      	ldr	r3, [pc, #360]	; (8001354 <show_orientation_led+0x17c>)
 80011ec:	60fb      	str	r3, [r7, #12]
	led_register->all_leds = 0;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]

	if (pitch < -1 * sensitivity && abs(roll) < sensitivity)
 80011f4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80011f8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011fc:	425b      	negs	r3, r3
 80011fe:	429a      	cmp	r2, r3
 8001200:	da10      	bge.n	8001224 <show_orientation_led+0x4c>
 8001202:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001206:	2b00      	cmp	r3, #0
 8001208:	bfb8      	it	lt
 800120a:	425b      	neglt	r3, r3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	461a      	mov	r2, r3
 8001210:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001214:	429a      	cmp	r2, r3
 8001216:	da05      	bge.n	8001224 <show_orientation_led+0x4c>
	{
		led_register->direction.north = 1;
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	7813      	ldrb	r3, [r2, #0]
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	7013      	strb	r3, [r2, #0]
 8001222:	e091      	b.n	8001348 <show_orientation_led+0x170>
	}
	else if (pitch > sensitivity && abs(roll) < sensitivity)
 8001224:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001228:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800122c:	429a      	cmp	r2, r3
 800122e:	dd10      	ble.n	8001252 <show_orientation_led+0x7a>
 8001230:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001234:	2b00      	cmp	r3, #0
 8001236:	bfb8      	it	lt
 8001238:	425b      	neglt	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001242:	429a      	cmp	r2, r3
 8001244:	da05      	bge.n	8001252 <show_orientation_led+0x7a>
	{
		led_register->direction.south = 1;
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	7813      	ldrb	r3, [r2, #0]
 800124a:	f043 0320 	orr.w	r3, r3, #32
 800124e:	7013      	strb	r3, [r2, #0]
 8001250:	e07a      	b.n	8001348 <show_orientation_led+0x170>
	}
	else if (roll < -1 * sensitivity && abs(pitch) < sensitivity)
 8001252:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001256:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800125a:	425b      	negs	r3, r3
 800125c:	429a      	cmp	r2, r3
 800125e:	da10      	bge.n	8001282 <show_orientation_led+0xaa>
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	bfb8      	it	lt
 8001268:	425b      	neglt	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001272:	429a      	cmp	r2, r3
 8001274:	da05      	bge.n	8001282 <show_orientation_led+0xaa>
	{
		led_register->direction.west = 1;
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	7813      	ldrb	r3, [r2, #0]
 800127a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800127e:	7013      	strb	r3, [r2, #0]
 8001280:	e062      	b.n	8001348 <show_orientation_led+0x170>
	}
	else if (roll > sensitivity && abs(pitch) < sensitivity)
 8001282:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001286:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800128a:	429a      	cmp	r2, r3
 800128c:	dd10      	ble.n	80012b0 <show_orientation_led+0xd8>
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	bfb8      	it	lt
 8001296:	425b      	neglt	r3, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	461a      	mov	r2, r3
 800129c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	da05      	bge.n	80012b0 <show_orientation_led+0xd8>
	{
		led_register->direction.east = 1;
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	7813      	ldrb	r3, [r2, #0]
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	7013      	strb	r3, [r2, #0]
 80012ae:	e04b      	b.n	8001348 <show_orientation_led+0x170>
	}
	else if (pitch < -1 * sensitivity && roll < -1 * sensitivity)
 80012b0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80012b4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012b8:	425b      	negs	r3, r3
 80012ba:	429a      	cmp	r2, r3
 80012bc:	da0c      	bge.n	80012d8 <show_orientation_led+0x100>
 80012be:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80012c2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012c6:	425b      	negs	r3, r3
 80012c8:	429a      	cmp	r2, r3
 80012ca:	da05      	bge.n	80012d8 <show_orientation_led+0x100>
	{
		led_register->direction.northwest = 1;
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	7813      	ldrb	r3, [r2, #0]
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	7013      	strb	r3, [r2, #0]
 80012d6:	e037      	b.n	8001348 <show_orientation_led+0x170>
	}
	else if (pitch < -1 * sensitivity && roll > sensitivity)
 80012d8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80012dc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012e0:	425b      	negs	r3, r3
 80012e2:	429a      	cmp	r2, r3
 80012e4:	da0b      	bge.n	80012fe <show_orientation_led+0x126>
 80012e6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80012ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dd05      	ble.n	80012fe <show_orientation_led+0x126>
	{
		led_register->direction.northeast = 1;
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	7813      	ldrb	r3, [r2, #0]
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	7013      	strb	r3, [r2, #0]
 80012fc:	e024      	b.n	8001348 <show_orientation_led+0x170>
	}
	else if (pitch > sensitivity && roll > sensitivity)
 80012fe:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001302:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001306:	429a      	cmp	r2, r3
 8001308:	dd0b      	ble.n	8001322 <show_orientation_led+0x14a>
 800130a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800130e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001312:	429a      	cmp	r2, r3
 8001314:	dd05      	ble.n	8001322 <show_orientation_led+0x14a>
	{
		led_register->direction.southeast = 1;
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	7813      	ldrb	r3, [r2, #0]
 800131a:	f043 0310 	orr.w	r3, r3, #16
 800131e:	7013      	strb	r3, [r2, #0]
 8001320:	e012      	b.n	8001348 <show_orientation_led+0x170>
	}
	else if (pitch > sensitivity && roll < -1 * sensitivity)
 8001322:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001326:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800132a:	429a      	cmp	r2, r3
 800132c:	dd0c      	ble.n	8001348 <show_orientation_led+0x170>
 800132e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001332:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001336:	425b      	negs	r3, r3
 8001338:	429a      	cmp	r2, r3
 800133a:	da05      	bge.n	8001348 <show_orientation_led+0x170>
	{
		led_register->direction.southwest = 1;
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	7813      	ldrb	r3, [r2, #0]
 8001340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001344:	7013      	strb	r3, [r2, #0]
	}
}
 8001346:	e7ff      	b.n	8001348 <show_orientation_led+0x170>
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	48001015 	.word	0x48001015

08001358 <set_led>:


void set_led(uint8_t led_mask)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	uint8_t *led_register = ((uint8_t *)&(GPIOE->ODR)) + 1;
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <set_led+0x20>)
 8001364:	60fb      	str	r3, [r7, #12]
	*led_register = led_mask;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	79fa      	ldrb	r2, [r7, #7]
 800136a:	701a      	strb	r2, [r3, #0]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	48001015 	.word	0x48001015

0800137c <flash_led>:
	*led_register = ((*led_register) << 1) | (last_led >> 7);
}


void flash_led(Colour colour, uint8_t n_times, uint16_t on_time, uint16_t off_time, Timer *timer)
{
 800137c:	b490      	push	{r4, r7}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	4604      	mov	r4, r0
 8001384:	4608      	mov	r0, r1
 8001386:	4611      	mov	r1, r2
 8001388:	461a      	mov	r2, r3
 800138a:	4623      	mov	r3, r4
 800138c:	71fb      	strb	r3, [r7, #7]
 800138e:	4603      	mov	r3, r0
 8001390:	71bb      	strb	r3, [r7, #6]
 8001392:	460b      	mov	r3, r1
 8001394:	80bb      	strh	r3, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	807b      	strh	r3, [r7, #2]
	static uint8_t n_flashes_left;
	static uint16_t static_on_time;
	static uint16_t static_off_time;
	static uint8_t original_led_register;
	static bool led_on;
	LEDRegister *led_register = (LEDRegister *)(((uint8_t *)&(GPIOE->ODR)) + 1);
 800139a:	4b4c      	ldr	r3, [pc, #304]	; (80014cc <flash_led+0x150>)
 800139c:	60fb      	str	r3, [r7, #12]

	if (n_times)  // n_times will always be > 0 when called from main and 0 when called from TIM4_IRQHandler
 800139e:	79bb      	ldrb	r3, [r7, #6]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d01d      	beq.n	80013e0 <flash_led+0x64>
	{			  // We are only interested in the arguments when flash_led is called main
		// Save these arguments for future calls
		static_colour = colour;
 80013a4:	4a4a      	ldr	r2, [pc, #296]	; (80014d0 <flash_led+0x154>)
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	7013      	strb	r3, [r2, #0]
		n_flashes_left = n_times;
 80013aa:	4a4a      	ldr	r2, [pc, #296]	; (80014d4 <flash_led+0x158>)
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	7013      	strb	r3, [r2, #0]
		static_on_time = on_time;
 80013b0:	4a49      	ldr	r2, [pc, #292]	; (80014d8 <flash_led+0x15c>)
 80013b2:	88bb      	ldrh	r3, [r7, #4]
 80013b4:	8013      	strh	r3, [r2, #0]
		static_off_time = off_time;
 80013b6:	4a49      	ldr	r2, [pc, #292]	; (80014dc <flash_led+0x160>)
 80013b8:	887b      	ldrh	r3, [r7, #2]
 80013ba:	8013      	strh	r3, [r2, #0]
		original_led_register = led_register->all_leds;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <flash_led+0x164>)
 80013c2:	701a      	strb	r2, [r3, #0]
		led_register->all_leds = 0;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
		led_on = false;
 80013ca:	4b46      	ldr	r3, [pc, #280]	; (80014e4 <flash_led+0x168>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]

		// Enable compare interrupt
		*(timer->InterruptEnableRegister) |= TIM_DIER_CC1IE;
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013da:	f042 0202 	orr.w	r2, r2, #2
 80013de:	601a      	str	r2, [r3, #0]
	}


	if (!led_on)
 80013e0:	4b40      	ldr	r3, [pc, #256]	; (80014e4 <flash_led+0x168>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	f083 0301 	eor.w	r3, r3, #1
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d043      	beq.n	8001476 <flash_led+0xfa>
	{
		// Turn on LEDs according to colour specified
		switch (static_colour)
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <flash_led+0x154>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d836      	bhi.n	8001464 <flash_led+0xe8>
 80013f6:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <flash_led+0x80>)
 80013f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fc:	0800140d 	.word	0x0800140d
 8001400:	08001423 	.word	0x08001423
 8001404:	08001439 	.word	0x08001439
 8001408:	0800144f 	.word	0x0800144f
		{
			case RED:
				led_register->colour.red_0 = 1;
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	7813      	ldrb	r3, [r2, #0]
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	7013      	strb	r3, [r2, #0]
				led_register->colour.red_1 = 1;
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	7813      	ldrb	r3, [r2, #0]
 800141a:	f043 0320 	orr.w	r3, r3, #32
 800141e:	7013      	strb	r3, [r2, #0]
				break;
 8001420:	e020      	b.n	8001464 <flash_led+0xe8>

			case GREEN:
				led_register->colour.green_0 = 1;
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	7813      	ldrb	r3, [r2, #0]
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	7013      	strb	r3, [r2, #0]
				led_register->colour.green_1 = 1;
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	7813      	ldrb	r3, [r2, #0]
 8001430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001434:	7013      	strb	r3, [r2, #0]
				break;
 8001436:	e015      	b.n	8001464 <flash_led+0xe8>

			case BLUE:
				led_register->colour.blue_0 = 1;
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	7813      	ldrb	r3, [r2, #0]
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	7013      	strb	r3, [r2, #0]
				led_register->colour.blue_1 = 1;
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	7813      	ldrb	r3, [r2, #0]
 8001446:	f043 0310 	orr.w	r3, r3, #16
 800144a:	7013      	strb	r3, [r2, #0]
				break;
 800144c:	e00a      	b.n	8001464 <flash_led+0xe8>

			case ORANGE:
				led_register->colour.orange_0 = 1;
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	7813      	ldrb	r3, [r2, #0]
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	7013      	strb	r3, [r2, #0]
				led_register->colour.orange_1 = 1;
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	7813      	ldrb	r3, [r2, #0]
 800145c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001460:	7013      	strb	r3, [r2, #0]
				break;
 8001462:	bf00      	nop
		}

		led_on = true;
 8001464:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <flash_led+0x168>)
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]

		// Set the compare value so that the interrupt is called after `on_time`
		*(timer->CompareRegister1) = static_on_time;
 800146a:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <flash_led+0x15c>)
 800146c:	881a      	ldrh	r2, [r3, #0]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	e021      	b.n	80014ba <flash_led+0x13e>
	}

	else
	{
		// Turn off the LEDs
		led_register->all_leds = 0;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
		led_on = false;
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <flash_led+0x168>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]

		// Set the compare value so that the interrupt is called after `off_time`
		*(timer->CompareRegister1) = static_off_time;
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <flash_led+0x160>)
 8001484:	881a      	ldrh	r2, [r3, #0]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148a:	601a      	str	r2, [r3, #0]

		n_flashes_left--;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <flash_led+0x158>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	3b01      	subs	r3, #1
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <flash_led+0x158>)
 8001496:	701a      	strb	r2, [r3, #0]
		if (n_flashes_left == 0)
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <flash_led+0x158>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10c      	bne.n	80014ba <flash_led+0x13e>
		{
			// Disable compare interrupt
			*(timer->InterruptEnableRegister) &= ~TIM_DIER_CC1IE;
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	f022 0202 	bic.w	r2, r2, #2
 80014ae:	601a      	str	r2, [r3, #0]

			// Change the LEDs back to the way they were before the first function call
			led_register->all_leds = original_led_register;
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <flash_led+0x164>)
 80014b2:	781a      	ldrb	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	701a      	strb	r2, [r3, #0]
			return;
 80014b8:	e003      	b.n	80014c2 <flash_led+0x146>
		}
	}

	// Reset the timer counter so that the interrupt is triggered again
	*(timer->TimerCount) = 0;
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
}
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc90      	pop	{r4, r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	48001015 	.word	0x48001015
 80014d0:	20000160 	.word	0x20000160
 80014d4:	20000161 	.word	0x20000161
 80014d8:	20000162 	.word	0x20000162
 80014dc:	20000164 	.word	0x20000164
 80014e0:	20000166 	.word	0x20000166
 80014e4:	20000167 	.word	0x20000167

080014e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b0a1      	sub	sp, #132	; 0x84
 80014ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ee:	f000 fef7 	bl	80022e0 <HAL_Init>

  /* USER CODE BEGIN Init */

	enable_clocks();
 80014f2:	f7ff fe4f 	bl	8001194 <enable_clocks>
	initialise_board();
 80014f6:	f7ff fe5d 	bl	80011b4 <initialise_board>
	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 80014fa:	2200      	movs	r2, #0
 80014fc:	4951      	ldr	r1, [pc, #324]	; (8001644 <main+0x15c>)
 80014fe:	2004      	movs	r0, #4
 8001500:	f000 fb62 	bl	8001bc8 <SerialInitialise>
	TimerInitialise(&TIMER3);  // For combination lock-related timing
 8001504:	4850      	ldr	r0, [pc, #320]	; (8001648 <main+0x160>)
 8001506:	f000 fe34 	bl	8002172 <TimerInitialise>
	TimerInitialise(&TIMER4);  // For LED-related timing
 800150a:	4850      	ldr	r0, [pc, #320]	; (800164c <main+0x164>)
 800150c:	f000 fe31 	bl	8002172 <TimerInitialise>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001510:	f000 f8ac 	bl	800166c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001514:	f000 fa12 	bl	800193c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001518:	f000 f90a 	bl	8001730 <MX_I2C1_Init>
  MX_SPI1_Init();
 800151c:	f000 f948 	bl	80017b0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8001520:	f000 f9ea 	bl	80018f8 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8001524:	f000 f982 	bl	800182c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001528:	2100      	movs	r1, #0
 800152a:	4849      	ldr	r0, [pc, #292]	; (8001650 <main+0x168>)
 800152c:	f003 fd90 	bl	8005050 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001530:	2104      	movs	r1, #4
 8001532:	4847      	ldr	r0, [pc, #284]	; (8001650 <main+0x168>)
 8001534:	f003 fd8c 	bl	8005050 <HAL_TIM_PWM_Start>

	stm_accel_init(&hi2c1);
 8001538:	4846      	ldr	r0, [pc, #280]	; (8001654 <main+0x16c>)
 800153a:	f7ff fb2d 	bl	8000b98 <stm_accel_init>

	char buffer[100];

	int16_t zero_errors[] = {0, 0, 0};  // Zero errors in x, y, and z axes
 800153e:	2300      	movs	r3, #0
 8001540:	81bb      	strh	r3, [r7, #12]
 8001542:	2300      	movs	r3, #0
 8001544:	81fb      	strh	r3, [r7, #14]
 8001546:	2300      	movs	r3, #0
 8001548:	823b      	strh	r3, [r7, #16]
	find_zero_errors(&hi2c1, zero_errors);
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	4619      	mov	r1, r3
 8001550:	4840      	ldr	r0, [pc, #256]	; (8001654 <main+0x16c>)
 8001552:	f7ff fb38 	bl	8000bc6 <find_zero_errors>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if (delay)  // Delay when flashing LEDs (prevent LED register being overridden)
 8001556:	4b40      	ldr	r3, [pc, #256]	; (8001658 <main+0x170>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <main+0x86>
		{
			HAL_Delay(delay);
 800155e:	4b3e      	ldr	r3, [pc, #248]	; (8001658 <main+0x170>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f000 ff22 	bl	80023ac <HAL_Delay>
			delay = 0;
 8001568:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <main+0x170>)
 800156a:	2200      	movs	r2, #0
 800156c:	801a      	strh	r2, [r3, #0]
		}

		if (!solved)
 800156e:	4b3b      	ldr	r3, [pc, #236]	; (800165c <main+0x174>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	f083 0301 	eor.w	r3, r3, #1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d053      	beq.n	8001624 <main+0x13c>
		{
			read_stm_accel_data(&hi2c1, &accel_x, &accel_y, &accel_z, zero_errors);
 800157c:	1db8      	adds	r0, r7, #6
 800157e:	f107 0208 	add.w	r2, r7, #8
 8001582:	f107 010a 	add.w	r1, r7, #10
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	4603      	mov	r3, r0
 800158e:	4831      	ldr	r0, [pc, #196]	; (8001654 <main+0x16c>)
 8001590:	f7ff fb76 	bl	8000c80 <read_stm_accel_data>

			if (get_orientation(accel_x, accel_y, accel_z, &stm_pitch, &stm_roll))
 8001594:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8001598:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800159c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015a0:	1d7c      	adds	r4, r7, #5
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	4623      	mov	r3, r4
 80015a8:	f7ff fc42 	bl	8000e30 <get_orientation>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00f      	beq.n	80015d2 <main+0xea>
			{
				show_orientation_led(stm_pitch, stm_roll, 6);
 80015b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80015b6:	f997 1004 	ldrsb.w	r1, [r7, #4]
 80015ba:	2206      	movs	r2, #6
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fe0b 	bl	80011d8 <show_orientation_led>
				get_velocity(stm_pitch, stm_roll, &ptu_vel_pitch, &ptu_vel_yaw);
 80015c2:	f997 0005 	ldrsb.w	r0, [r7, #5]
 80015c6:	f997 1004 	ldrsb.w	r1, [r7, #4]
 80015ca:	1cbb      	adds	r3, r7, #2
 80015cc:	1cfa      	adds	r2, r7, #3
 80015ce:	f7ff fc9f 	bl	8000f10 <get_velocity>
//				sprintf(buffer, "stm_pitch vel: %6d, \tyaw vel: %6d \r\n\n", ptu_vel_pitch, ptu_vel_yaw);
//				SerialOutputString(buffer, &USART1_PORT);
			}

			//move_ptu(TIM2, &horizontal_PWM, &vertical_PWM, ptu_vel_yaw, ptu_vel_pitch);
			TIM2->CCR1 = 1200;
 80015d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015d6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80015da:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 1200;
 80015dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80015e4:	639a      	str	r2, [r3, #56]	; 0x38


			sprintf(buffer, "horizontal_PWM: %6d, \tvertical_PWM: %6d \r\n", horizontal_PWM, vertical_PWM);
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <main+0x178>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <main+0x17c>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	f107 0014 	add.w	r0, r7, #20
 80015f8:	491b      	ldr	r1, [pc, #108]	; (8001668 <main+0x180>)
 80015fa:	f004 fbb7 	bl	8005d6c <siprintf>
			SerialOutputString(buffer, &USART1_PORT);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4910      	ldr	r1, [pc, #64]	; (8001644 <main+0x15c>)
 8001604:	4618      	mov	r0, r3
 8001606:	f000 fb70 	bl	8001cea <SerialOutputString>

			set_lock_compare_time(&TIMER3, ptu_vel_yaw, ptu_vel_pitch, 2000);  // Keep PTU still for 2000 ms to record value
 800160a:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800160e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001612:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001616:	480c      	ldr	r0, [pc, #48]	; (8001648 <main+0x160>)
 8001618:	f000 fdd4 	bl	80021c4 <set_lock_compare_time>

			HAL_Delay(10);
 800161c:	200a      	movs	r0, #10
 800161e:	f000 fec5 	bl	80023ac <HAL_Delay>
 8001622:	e798      	b.n	8001556 <main+0x6e>
		}

		else
		{
			set_led(0b10101010);
 8001624:	20aa      	movs	r0, #170	; 0xaa
 8001626:	f7ff fe97 	bl	8001358 <set_led>
			HAL_Delay(500);
 800162a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162e:	f000 febd 	bl	80023ac <HAL_Delay>
			set_led(0b01010101);
 8001632:	2055      	movs	r0, #85	; 0x55
 8001634:	f7ff fe90 	bl	8001358 <set_led>
			HAL_Delay(500);
 8001638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800163c:	f000 feb6 	bl	80023ac <HAL_Delay>
		if (delay)  // Delay when flashing LEDs (prevent LED register being overridden)
 8001640:	e789      	b.n	8001556 <main+0x6e>
 8001642:	bf00      	nop
 8001644:	20000004 	.word	0x20000004
 8001648:	20000040 	.word	0x20000040
 800164c:	20000078 	.word	0x20000078
 8001650:	20000220 	.word	0x20000220
 8001654:	20000168 	.word	0x20000168
 8001658:	2000055a 	.word	0x2000055a
 800165c:	20000558 	.word	0x20000558
 8001660:	20000002 	.word	0x20000002
 8001664:	20000000 	.word	0x20000000
 8001668:	08006fc0 	.word	0x08006fc0

0800166c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b09e      	sub	sp, #120	; 0x78
 8001670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001672:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001676:	2228      	movs	r2, #40	; 0x28
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f004 fb6e 	bl	8005d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001680:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001690:	463b      	mov	r3, r7
 8001692:	223c      	movs	r2, #60	; 0x3c
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f004 fb60 	bl	8005d5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800169c:	2303      	movs	r3, #3
 800169e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016aa:	2301      	movs	r3, #1
 80016ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ae:	2310      	movs	r3, #16
 80016b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b2:	2302      	movs	r3, #2
 80016b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ba:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80016bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016c0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016c6:	4618      	mov	r0, r3
 80016c8:	f001 ffec 	bl	80036a4 <HAL_RCC_OscConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80016d2:	f000 f9b1 	bl	8001a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d6:	230f      	movs	r3, #15
 80016d8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016da:	2302      	movs	r3, #2
 80016dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016de:	2300      	movs	r3, #0
 80016e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016f0:	2101      	movs	r1, #1
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 f814 	bl	8004720 <HAL_RCC_ClockConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016fe:	f000 f99b 	bl	8001a38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <SystemClock_Config+0xc0>)
 8001704:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800170a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800170e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001710:	463b      	mov	r3, r7
 8001712:	4618      	mov	r0, r3
 8001714:	f003 f9ea 	bl	8004aec <HAL_RCCEx_PeriphCLKConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800171e:	f000 f98b 	bl	8001a38 <Error_Handler>
  }
}
 8001722:	bf00      	nop
 8001724:	3778      	adds	r7, #120	; 0x78
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	00020020 	.word	0x00020020

08001730 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <MX_I2C1_Init+0x74>)
 8001736:	4a1c      	ldr	r2, [pc, #112]	; (80017a8 <MX_I2C1_Init+0x78>)
 8001738:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <MX_I2C1_Init+0x74>)
 800173c:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <MX_I2C1_Init+0x7c>)
 800173e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <MX_I2C1_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <MX_I2C1_Init+0x74>)
 8001748:	2201      	movs	r2, #1
 800174a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <MX_I2C1_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <MX_I2C1_Init+0x74>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <MX_I2C1_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_I2C1_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MX_I2C1_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800176a:	480e      	ldr	r0, [pc, #56]	; (80017a4 <MX_I2C1_Init+0x74>)
 800176c:	f001 f8ba 	bl	80028e4 <HAL_I2C_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001776:	f000 f95f 	bl	8001a38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800177a:	2100      	movs	r1, #0
 800177c:	4809      	ldr	r0, [pc, #36]	; (80017a4 <MX_I2C1_Init+0x74>)
 800177e:	f001 fe27 	bl	80033d0 <HAL_I2CEx_ConfigAnalogFilter>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001788:	f000 f956 	bl	8001a38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800178c:	2100      	movs	r1, #0
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_I2C1_Init+0x74>)
 8001790:	f001 fe69 	bl	8003466 <HAL_I2CEx_ConfigDigitalFilter>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800179a:	f000 f94d 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000168 	.word	0x20000168
 80017a8:	40005400 	.word	0x40005400
 80017ac:	2000090e 	.word	0x2000090e

080017b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <MX_SPI1_Init+0x74>)
 80017b6:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <MX_SPI1_Init+0x78>)
 80017b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_SPI1_Init+0x74>)
 80017bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <MX_SPI1_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <MX_SPI1_Init+0x74>)
 80017ca:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MX_SPI1_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <MX_SPI1_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_SPI1_Init+0x74>)
 80017de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <MX_SPI1_Init+0x74>)
 80017e6:	2208      	movs	r2, #8
 80017e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <MX_SPI1_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <MX_SPI1_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <MX_SPI1_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <MX_SPI1_Init+0x74>)
 80017fe:	2207      	movs	r2, #7
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <MX_SPI1_Init+0x74>)
 8001804:	2200      	movs	r2, #0
 8001806:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <MX_SPI1_Init+0x74>)
 800180a:	2208      	movs	r2, #8
 800180c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_SPI1_Init+0x74>)
 8001810:	f003 fb1c 	bl	8004e4c <HAL_SPI_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800181a:	f000 f90d 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200001bc 	.word	0x200001bc
 8001828:	40013000 	.word	0x40013000

0800182c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800183e:	463b      	mov	r3, r7
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
 800184c:	615a      	str	r2, [r3, #20]
 800184e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001850:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <MX_TIM2_Init+0xc8>)
 8001852:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001856:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001858:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <MX_TIM2_Init+0xc8>)
 800185a:	222f      	movs	r2, #47	; 0x2f
 800185c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185e:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <MX_TIM2_Init+0xc8>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001864:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <MX_TIM2_Init+0xc8>)
 8001866:	f644 6220 	movw	r2, #20000	; 0x4e20
 800186a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <MX_TIM2_Init+0xc8>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <MX_TIM2_Init+0xc8>)
 8001874:	2280      	movs	r2, #128	; 0x80
 8001876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001878:	481e      	ldr	r0, [pc, #120]	; (80018f4 <MX_TIM2_Init+0xc8>)
 800187a:	f003 fb92 	bl	8004fa2 <HAL_TIM_PWM_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001884:	f000 f8d8 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4619      	mov	r1, r3
 8001896:	4817      	ldr	r0, [pc, #92]	; (80018f4 <MX_TIM2_Init+0xc8>)
 8001898:	f004 f97a 	bl	8005b90 <HAL_TIMEx_MasterConfigSynchronization>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80018a2:	f000 f8c9 	bl	8001a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a6:	2360      	movs	r3, #96	; 0x60
 80018a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 80018aa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80018ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b8:	463b      	mov	r3, r7
 80018ba:	2200      	movs	r2, #0
 80018bc:	4619      	mov	r1, r3
 80018be:	480d      	ldr	r0, [pc, #52]	; (80018f4 <MX_TIM2_Init+0xc8>)
 80018c0:	f003 fcc6 	bl	8005250 <HAL_TIM_PWM_ConfigChannel>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80018ca:	f000 f8b5 	bl	8001a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ce:	463b      	mov	r3, r7
 80018d0:	2204      	movs	r2, #4
 80018d2:	4619      	mov	r1, r3
 80018d4:	4807      	ldr	r0, [pc, #28]	; (80018f4 <MX_TIM2_Init+0xc8>)
 80018d6:	f003 fcbb 	bl	8005250 <HAL_TIM_PWM_ConfigChannel>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80018e0:	f000 f8aa 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018e4:	4803      	ldr	r0, [pc, #12]	; (80018f4 <MX_TIM2_Init+0xc8>)
 80018e6:	f000 faed 	bl	8001ec4 <HAL_TIM_MspPostInit>

}
 80018ea:	bf00      	nop
 80018ec:	3728      	adds	r7, #40	; 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000220 	.word	0x20000220

080018f8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <MX_USB_PCD_Init+0x3c>)
 80018fe:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <MX_USB_PCD_Init+0x40>)
 8001900:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <MX_USB_PCD_Init+0x3c>)
 8001904:	2208      	movs	r2, #8
 8001906:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <MX_USB_PCD_Init+0x3c>)
 800190a:	2202      	movs	r2, #2
 800190c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_USB_PCD_Init+0x3c>)
 8001910:	2202      	movs	r2, #2
 8001912:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001914:	4b07      	ldr	r3, [pc, #28]	; (8001934 <MX_USB_PCD_Init+0x3c>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_USB_PCD_Init+0x3c>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <MX_USB_PCD_Init+0x3c>)
 8001922:	f001 fdec 	bl	80034fe <HAL_PCD_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800192c:	f000 f884 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	2000026c 	.word	0x2000026c
 8001938:	40005c00 	.word	0x40005c00

0800193c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001952:	4b37      	ldr	r3, [pc, #220]	; (8001a30 <MX_GPIO_Init+0xf4>)
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	4a36      	ldr	r2, [pc, #216]	; (8001a30 <MX_GPIO_Init+0xf4>)
 8001958:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800195c:	6153      	str	r3, [r2, #20]
 800195e:	4b34      	ldr	r3, [pc, #208]	; (8001a30 <MX_GPIO_Init+0xf4>)
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196a:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <MX_GPIO_Init+0xf4>)
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	4a30      	ldr	r2, [pc, #192]	; (8001a30 <MX_GPIO_Init+0xf4>)
 8001970:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001974:	6153      	str	r3, [r2, #20]
 8001976:	4b2e      	ldr	r3, [pc, #184]	; (8001a30 <MX_GPIO_Init+0xf4>)
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001982:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <MX_GPIO_Init+0xf4>)
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	4a2a      	ldr	r2, [pc, #168]	; (8001a30 <MX_GPIO_Init+0xf4>)
 8001988:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800198c:	6153      	str	r3, [r2, #20]
 800198e:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <MX_GPIO_Init+0xf4>)
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <MX_GPIO_Init+0xf4>)
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	4a24      	ldr	r2, [pc, #144]	; (8001a30 <MX_GPIO_Init+0xf4>)
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	6153      	str	r3, [r2, #20]
 80019a6:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <MX_GPIO_Init+0xf4>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <MX_GPIO_Init+0xf4>)
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	4a1e      	ldr	r2, [pc, #120]	; (8001a30 <MX_GPIO_Init+0xf4>)
 80019b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019bc:	6153      	str	r3, [r2, #20]
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <MX_GPIO_Init+0xf4>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80019ca:	2200      	movs	r2, #0
 80019cc:	f64f 7108 	movw	r1, #65288	; 0xff08
 80019d0:	4818      	ldr	r0, [pc, #96]	; (8001a34 <MX_GPIO_Init+0xf8>)
 80019d2:	f000 ff6f 	bl	80028b4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80019d6:	2337      	movs	r3, #55	; 0x37
 80019d8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019da:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	4812      	ldr	r0, [pc, #72]	; (8001a34 <MX_GPIO_Init+0xf8>)
 80019ec:	f000 fde8 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80019f0:	f64f 7308 	movw	r3, #65288	; 0xff08
 80019f4:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	480a      	ldr	r0, [pc, #40]	; (8001a34 <MX_GPIO_Init+0xf8>)
 8001a0a:	f000 fdd9 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a24:	f000 fdcc 	bl	80025c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	48001000 	.word	0x48001000

08001a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <Error_Handler+0x8>
	...

08001a44 <ptu_pos_is_correct>:
	tim->CCR2 = *vertical_PWM;
}


bool ptu_pos_is_correct(const uint16_t *desired_position)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	const uint16_t tolerance = 100;  // The PTU position must lie within position +/- tolerance in both axes
 8001a4c:	2364      	movs	r3, #100	; 0x64
 8001a4e:	81fb      	strh	r3, [r7, #14]
	bool horizontal_pos_is_correct = (horizontal_PWM > desired_position[0] - tolerance) &&
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <ptu_pos_is_correct+0xac>)
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	461a      	mov	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	89fb      	ldrh	r3, [r7, #14]
 8001a60:	1acb      	subs	r3, r1, r3
 8001a62:	429a      	cmp	r2, r3
 8001a64:	dd0c      	ble.n	8001a80 <ptu_pos_is_correct+0x3c>
								     (horizontal_PWM < desired_position[0] + tolerance);
 8001a66:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <ptu_pos_is_correct+0xac>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	4619      	mov	r1, r3
 8001a74:	89fb      	ldrh	r3, [r7, #14]
 8001a76:	440b      	add	r3, r1
	bool horizontal_pos_is_correct = (horizontal_PWM > desired_position[0] - tolerance) &&
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	da01      	bge.n	8001a80 <ptu_pos_is_correct+0x3c>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <ptu_pos_is_correct+0x3e>
 8001a80:	2300      	movs	r3, #0
 8001a82:	737b      	strb	r3, [r7, #13]
 8001a84:	7b7b      	ldrb	r3, [r7, #13]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	737b      	strb	r3, [r7, #13]
	bool vertical_pos_is_correct = (vertical_PWM > desired_position[1] - tolerance) &&
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <ptu_pos_is_correct+0xb0>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3302      	adds	r3, #2
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	89fb      	ldrh	r3, [r7, #14]
 8001a9e:	1acb      	subs	r3, r1, r3
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dd0d      	ble.n	8001ac0 <ptu_pos_is_correct+0x7c>
		     	 	 	 	 	   (vertical_PWM < desired_position[1] + tolerance);
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <ptu_pos_is_correct+0xb0>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3302      	adds	r3, #2
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	89fb      	ldrh	r3, [r7, #14]
 8001ab6:	440b      	add	r3, r1
	bool vertical_pos_is_correct = (vertical_PWM > desired_position[1] - tolerance) &&
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	da01      	bge.n	8001ac0 <ptu_pos_is_correct+0x7c>
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <ptu_pos_is_correct+0x7e>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	733b      	strb	r3, [r7, #12]
 8001ac4:	7b3b      	ldrb	r3, [r7, #12]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	733b      	strb	r3, [r7, #12]

	return horizontal_pos_is_correct && vertical_pos_is_correct;
 8001acc:	7b7b      	ldrb	r3, [r7, #13]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d004      	beq.n	8001adc <ptu_pos_is_correct+0x98>
 8001ad2:	7b3b      	ldrb	r3, [r7, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <ptu_pos_is_correct+0x98>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <ptu_pos_is_correct+0x9a>
 8001adc:	2300      	movs	r3, #0
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	b2db      	uxtb	r3, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	20000002 	.word	0x20000002
 8001af4:	20000000 	.word	0x20000000

08001af8 <check_ptu_pos>:


void check_ptu_pos()
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af02      	add	r7, sp, #8
	// Array containing the positions (horizontal_PWM, vertical_PWM) required to open the lock
	const uint16_t positions[3][2] = {
 8001afe:	4a2c      	ldr	r2, [pc, #176]	; (8001bb0 <check_ptu_pos+0xb8>)
 8001b00:	463b      	mov	r3, r7
 8001b02:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			{800, 1800},
			{2000, 600},
			{1500, 1500}
	};
	const uint8_t NUM_POSITIONS = 3;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	73fb      	strb	r3, [r7, #15]

	static uint8_t current_position = 0;

	if (ptu_pos_is_correct(positions[current_position]))
 8001b0c:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <check_ptu_pos+0xbc>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	463a      	mov	r2, r7
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff94 	bl	8001a44 <ptu_pos_is_correct>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d030      	beq.n	8001b84 <check_ptu_pos+0x8c>
	{
		current_position++;
 8001b22:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <check_ptu_pos+0xbc>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <check_ptu_pos+0xbc>)
 8001b2c:	701a      	strb	r2, [r3, #0]
		if (current_position == NUM_POSITIONS)
 8001b2e:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <check_ptu_pos+0xbc>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d117      	bne.n	8001b68 <check_ptu_pos+0x70>
		{
			flash_led(GREEN, 3, 800, 400, &TIMER4);
 8001b38:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <check_ptu_pos+0xc0>)
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001b40:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b44:	2103      	movs	r1, #3
 8001b46:	2001      	movs	r0, #1
 8001b48:	f7ff fc18 	bl	800137c <flash_led>
			delay = 3200;
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <check_ptu_pos+0xc4>)
 8001b4e:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001b52:	801a      	strh	r2, [r3, #0]

			// Disable compare interrupts
			TIM3->DIER &= TIM_DIER_CC1IE;
 8001b54:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <check_ptu_pos+0xc8>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4a19      	ldr	r2, [pc, #100]	; (8001bc0 <check_ptu_pos+0xc8>)
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	60d3      	str	r3, [r2, #12]

			solved = true;
 8001b60:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <check_ptu_pos+0xcc>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
	{
		current_position = 0;
		flash_led(RED, 2, 800, 400, &TIMER4);
		delay = 2000;
	}
}
 8001b66:	e01e      	b.n	8001ba6 <check_ptu_pos+0xae>
			flash_led(GREEN, 1, 800, 0, &TIMER4);
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <check_ptu_pos+0xc0>)
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b72:	2101      	movs	r1, #1
 8001b74:	2001      	movs	r0, #1
 8001b76:	f7ff fc01 	bl	800137c <flash_led>
			delay = 800;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <check_ptu_pos+0xc4>)
 8001b7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b80:	801a      	strh	r2, [r3, #0]
}
 8001b82:	e010      	b.n	8001ba6 <check_ptu_pos+0xae>
		current_position = 0;
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <check_ptu_pos+0xbc>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
		flash_led(RED, 2, 800, 400, &TIMER4);
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <check_ptu_pos+0xc0>)
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001b92:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b96:	2102      	movs	r1, #2
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f7ff fbef 	bl	800137c <flash_led>
		delay = 2000;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <check_ptu_pos+0xc4>)
 8001ba0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ba4:	801a      	strh	r2, [r3, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	08006fec 	.word	0x08006fec
 8001bb4:	2000055c 	.word	0x2000055c
 8001bb8:	20000078 	.word	0x20000078
 8001bbc:	2000055a 	.word	0x2000055a
 8001bc0:	40000400 	.word	0x40000400
 8001bc4:	20000558 	.word	0x20000558

08001bc8 <SerialInitialise>:


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t))
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	635a      	str	r2, [r3, #52]	; 0x34

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001bda:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <SerialInitialise+0xec>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	4a35      	ldr	r2, [pc, #212]	; (8001cb4 <SerialInitialise+0xec>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001be6:	4b33      	ldr	r3, [pc, #204]	; (8001cb4 <SerialInitialise+0xec>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	4a32      	ldr	r2, [pc, #200]	; (8001cb4 <SerialInitialise+0xec>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d106      	bne.n	8001c08 <SerialInitialise+0x40>
	{
		case SERIAL_GPIO_C:
			RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8001bfa:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <SerialInitialise+0xec>)
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	4a2d      	ldr	r2, [pc, #180]	; (8001cb4 <SerialInitialise+0xec>)
 8001c00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c04:	6153      	str	r3, [r2, #20]
			break;
 8001c06:	e000      	b.n	8001c0a <SerialInitialise+0x42>
		default:
			break;
 8001c08:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	6a12      	ldr	r2, [r2, #32]
 8001c12:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c1c:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	6959      	ldr	r1, [r3, #20]
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate);  // only 16 bits used!
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch (baudRate)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d825      	bhi.n	8001c96 <SerialInitialise+0xce>
 8001c4a:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <SerialInitialise+0x88>)
 8001c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c50:	08001c65 	.word	0x08001c65
 8001c54:	08001c6f 	.word	0x08001c6f
 8001c58:	08001c79 	.word	0x08001c79
 8001c5c:	08001c83 	.word	0x08001c83
 8001c60:	08001c8d 	.word	0x08001c8d
	{
		case BAUD_9600:
			*baud_rate_config = 5000;  // 9600 at 48MHz
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6a:	801a      	strh	r2, [r3, #0]
			break;
 8001c6c:	e013      	b.n	8001c96 <SerialInitialise+0xce>
		case BAUD_19200:
			*baud_rate_config = 2500;  // 19200 at 48MHz
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001c74:	801a      	strh	r2, [r3, #0]
			break;
 8001c76:	e00e      	b.n	8001c96 <SerialInitialise+0xce>
		case BAUD_38400:
			*baud_rate_config = 1250;  // 38400 at 48MHz
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001c7e:	801a      	strh	r2, [r3, #0]
			break;
 8001c80:	e009      	b.n	8001c96 <SerialInitialise+0xce>
		case BAUD_57600:
			*baud_rate_config = 833;  // 57600 at 48MHz
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f240 3241 	movw	r2, #833	; 0x341
 8001c88:	801a      	strh	r2, [r3, #0]
			break;
 8001c8a:	e004      	b.n	8001c96 <SerialInitialise+0xce>
		case BAUD_115200:
			*baud_rate_config = 417;  // 115200 at 48MHz
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f240 12a1 	movw	r2, #417	; 0x1a1
 8001c92:	801a      	strh	r2, [r3, #0]
			break;
 8001c94:	bf00      	nop
	}

	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f042 020d 	orr.w	r2, r2, #13
 8001ca4:	601a      	str	r2, [r3, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000

08001cb8 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8001cc4:	bf00      	nop
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f8      	beq.n	8001cc6 <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	79fa      	ldrb	r2, [r7, #7]
 8001cda:	b292      	uxth	r2, r2
 8001cdc:	801a      	strh	r2, [r3, #0]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <SerialOutputString>:


void SerialOutputString(char *pt, SerialPort *serial_port)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
	uint32_t counter = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8001cf8:	e00b      	b.n	8001d12 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	6839      	ldr	r1, [r7, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ffd9 	bl	8001cb8 <SerialOutputChar>
		counter++;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
		pt++;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1ef      	bne.n	8001cfa <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	4798      	blx	r3
}
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <HAL_MspInit+0x44>)
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <HAL_MspInit+0x44>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6193      	str	r3, [r2, #24]
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <HAL_MspInit+0x44>)
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_MspInit+0x44>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_MspInit+0x44>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	61d3      	str	r3, [r2, #28]
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_MspInit+0x44>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d6a:	2007      	movs	r0, #7
 8001d6c:	f000 fbf4 	bl	8002558 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000

08001d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a17      	ldr	r2, [pc, #92]	; (8001df8 <HAL_I2C_MspInit+0x7c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d127      	bne.n	8001dee <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <HAL_I2C_MspInit+0x80>)
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	4a16      	ldr	r2, [pc, #88]	; (8001dfc <HAL_I2C_MspInit+0x80>)
 8001da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da8:	6153      	str	r3, [r2, #20]
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <HAL_I2C_MspInit+0x80>)
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001db6:	23c0      	movs	r3, #192	; 0xc0
 8001db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dba:	2312      	movs	r3, #18
 8001dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480b      	ldr	r0, [pc, #44]	; (8001e00 <HAL_I2C_MspInit+0x84>)
 8001dd2:	f000 fbf5 	bl	80025c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_I2C_MspInit+0x80>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <HAL_I2C_MspInit+0x80>)
 8001ddc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001de0:	61d3      	str	r3, [r2, #28]
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_I2C_MspInit+0x80>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dee:	bf00      	nop
 8001df0:	3728      	adds	r7, #40	; 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40005400 	.word	0x40005400
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	48000400 	.word	0x48000400

08001e04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <HAL_SPI_MspInit+0x7c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d128      	bne.n	8001e78 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <HAL_SPI_MspInit+0x80>)
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	4a16      	ldr	r2, [pc, #88]	; (8001e84 <HAL_SPI_MspInit+0x80>)
 8001e2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e30:	6193      	str	r3, [r2, #24]
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <HAL_SPI_MspInit+0x80>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_SPI_MspInit+0x80>)
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <HAL_SPI_MspInit+0x80>)
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e48:	6153      	str	r3, [r2, #20]
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_SPI_MspInit+0x80>)
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001e56:	23e0      	movs	r3, #224	; 0xe0
 8001e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e66:	2305      	movs	r3, #5
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e74:	f000 fba4 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e78:	bf00      	nop
 8001e7a:	3728      	adds	r7, #40	; 0x28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40013000 	.word	0x40013000
 8001e84:	40021000 	.word	0x40021000

08001e88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e98:	d10b      	bne.n	8001eb2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_TIM_PWM_MspInit+0x38>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4a08      	ldr	r2, [pc, #32]	; (8001ec0 <HAL_TIM_PWM_MspInit+0x38>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	61d3      	str	r3, [r2, #28]
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_TIM_PWM_MspInit+0x38>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000

08001ec4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee4:	d11d      	bne.n	8001f22 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HAL_TIM_MspPostInit+0x68>)
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	4a10      	ldr	r2, [pc, #64]	; (8001f2c <HAL_TIM_MspPostInit+0x68>)
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef0:	6153      	str	r3, [r2, #20]
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_TIM_MspPostInit+0x68>)
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001efe:	f248 0302 	movw	r3, #32770	; 0x8002
 8001f02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f10:	2301      	movs	r3, #1
 8001f12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f1e:	f000 fb4f 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f22:	bf00      	nop
 8001f24:	3720      	adds	r7, #32
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000

08001f30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	; 0x28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <HAL_PCD_MspInit+0x80>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d129      	bne.n	8001fa6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_PCD_MspInit+0x84>)
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	4a17      	ldr	r2, [pc, #92]	; (8001fb4 <HAL_PCD_MspInit+0x84>)
 8001f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5c:	6153      	str	r3, [r2, #20]
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <HAL_PCD_MspInit+0x84>)
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001f6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001f7c:	230e      	movs	r3, #14
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8a:	f000 fb19 	bl	80025c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_PCD_MspInit+0x84>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	4a08      	ldr	r2, [pc, #32]	; (8001fb4 <HAL_PCD_MspInit+0x84>)
 8001f94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f98:	61d3      	str	r3, [r2, #28]
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_PCD_MspInit+0x84>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001fa6:	bf00      	nop
 8001fa8:	3728      	adds	r7, #40	; 0x28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40005c00 	.word	0x40005c00
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <NMI_Handler+0x4>

08001fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <HardFault_Handler+0x4>

08001fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <MemManage_Handler+0x4>

08001fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <BusFault_Handler+0x4>

08001fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <UsageFault_Handler+0x4>

08001fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002004:	f000 f9b2 	bl	800236c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}

0800200c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002014:	4a14      	ldr	r2, [pc, #80]	; (8002068 <_sbrk+0x5c>)
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <_sbrk+0x60>)
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <_sbrk+0x64>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <_sbrk+0x64>)
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <_sbrk+0x68>)
 800202c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <_sbrk+0x64>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	429a      	cmp	r2, r3
 800203a:	d207      	bcs.n	800204c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800203c:	f003 fe64 	bl	8005d08 <__errno>
 8002040:	4603      	mov	r3, r0
 8002042:	220c      	movs	r2, #12
 8002044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800204a:	e009      	b.n	8002060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002052:	4b07      	ldr	r3, [pc, #28]	; (8002070 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <_sbrk+0x64>)
 800205c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800205e:	68fb      	ldr	r3, [r7, #12]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	2000a000 	.word	0x2000a000
 800206c:	00000400 	.word	0x00000400
 8002070:	20000560 	.word	0x20000560
 8002074:	20000578 	.word	0x20000578

08002078 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <SystemInit+0x20>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002082:	4a05      	ldr	r2, [pc, #20]	; (8002098 <SystemInit+0x20>)
 8002084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	db0b      	blt.n	80020c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	f003 021f 	and.w	r2, r3, #31
 80020b4:	4907      	ldr	r1, [pc, #28]	; (80020d4 <__NVIC_EnableIRQ+0x38>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2001      	movs	r0, #1
 80020be:	fa00 f202 	lsl.w	r2, r0, r2
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000e100 	.word	0xe000e100

080020d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	db0a      	blt.n	8002102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	490c      	ldr	r1, [pc, #48]	; (8002124 <__NVIC_SetPriority+0x4c>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	0112      	lsls	r2, r2, #4
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	440b      	add	r3, r1
 80020fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002100:	e00a      	b.n	8002118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4908      	ldr	r1, [pc, #32]	; (8002128 <__NVIC_SetPriority+0x50>)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	3b04      	subs	r3, #4
 8002110:	0112      	lsls	r2, r2, #4
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	440b      	add	r3, r1
 8002116:	761a      	strb	r2, [r3, #24]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000e100 	.word	0xe000e100
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <enable_timer_interrupt>:
		4,
		TIM4_IRQn};


void enable_timer_interrupt(Timer *timer)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002134:	b672      	cpsid	i
}
 8002136:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	__disable_irq();

	// Enable compare interrupt
	*(timer->InterruptEnableRegister) |= TIM_DIER_CC1IE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	f042 0202 	orr.w	r2, r2, #2
 8002146:	601a      	str	r2, [r3, #0]

	// Tell the NVIC module that the timer interrupts should be handled
	NVIC_SetPriority(timer->TimerIRQn, timer->InterruptPriority);  // set priority
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214c:	b25a      	sxtb	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4619      	mov	r1, r3
 8002154:	4610      	mov	r0, r2
 8002156:	f7ff ffbf 	bl	80020d8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(timer->TimerIRQn);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215e:	b25b      	sxtb	r3, r3
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff9b 	bl	800209c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8002166:	b662      	cpsie	i
}
 8002168:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <TimerInitialise>:


// TimerInitialise - Initialise the timer
void TimerInitialise(Timer *timer)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
	// Enable the clock for the timer
	*(timer->ClockEnableRegister) |= timer->ClockEnableMask;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6999      	ldr	r1, [r3, #24]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

	// Set the prescaler
	*(timer->PrescalerRegister) = timer->PrescalerValue;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6a12      	ldr	r2, [r2, #32]
 8002194:	601a      	str	r2, [r3, #0]

	// Trigger the prescaler value
	*(timer->EventGenerationRegister) |= TIM_EGR_UG;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]

	// Enable interrupts
	enable_timer_interrupt(timer);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ffc0 	bl	800212c <enable_timer_interrupt>

	// Start the timer counter
	*(timer->ControlRegister1) |= TIM_CR1_CEN;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <set_lock_compare_time>:


void set_lock_compare_time(Timer *timer, int8_t ptu_vel_yaw, int8_t ptu_vel_pitch, uint16_t time_ms)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	4608      	mov	r0, r1
 80021ce:	4611      	mov	r1, r2
 80021d0:	461a      	mov	r2, r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	70fb      	strb	r3, [r7, #3]
 80021d6:	460b      	mov	r3, r1
 80021d8:	70bb      	strb	r3, [r7, #2]
 80021da:	4613      	mov	r3, r2
 80021dc:	803b      	strh	r3, [r7, #0]
	if (ptu_vel_yaw == 0 && ptu_vel_pitch == 0)
 80021de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d103      	bne.n	80021ee <set_lock_compare_time+0x2a>
 80021e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d015      	beq.n	800221a <set_lock_compare_time+0x56>
	{
		return;
	}

	uint16_t current_time = *(timer->TimerCount);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	81fb      	strh	r3, [r7, #14]
	uint16_t compare_time = (current_time + time_ms) % *(timer->AutoReloadRegister);
 80021f6:	89fa      	ldrh	r2, [r7, #14]
 80021f8:	883b      	ldrh	r3, [r7, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	461a      	mov	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	fbb2 f1f3 	udiv	r1, r2, r3
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	81bb      	strh	r3, [r7, #12]
	*(timer->CompareRegister1) = compare_time;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	89ba      	ldrh	r2, [r7, #12]
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	e000      	b.n	800221c <set_lock_compare_time+0x58>
		return;
 800221a:	bf00      	nop
}
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <TIM3_IRQHandler>:


void TIM3_IRQHandler()
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
	// If the interrupt was due to the channel 1 compare flag being raised
	if ((TIM3->SR & TIM_SR_CC1IF) != 0)
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <TIM3_IRQHandler+0x24>)
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d007      	beq.n	8002248 <TIM3_IRQHandler+0x20>
	{
		check_ptu_pos();
 8002238:	f7ff fc5e 	bl	8001af8 <check_ptu_pos>

		// Reset channel 1 compare flag
		TIM3->SR &= ~TIM_SR_CC1IF;
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <TIM3_IRQHandler+0x24>)
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	4a02      	ldr	r2, [pc, #8]	; (800224c <TIM3_IRQHandler+0x24>)
 8002242:	f023 0302 	bic.w	r3, r3, #2
 8002246:	6113      	str	r3, [r2, #16]
	}
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40000400 	.word	0x40000400

08002250 <TIM4_IRQHandler>:


void TIM4_IRQHandler()
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af02      	add	r7, sp, #8
	// If the interrupt was due to the channel 1 compare flag being raised
	if ((TIM4->SR & TIM_SR_CC1IF) != 0)
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <TIM4_IRQHandler+0x34>)
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00d      	beq.n	800227e <TIM4_IRQHandler+0x2e>
	{
		flash_led(0, 0, 0, 0, &TIMER4);  // Only the last argument is important, the rest are stored as static variables
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <TIM4_IRQHandler+0x38>)
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2300      	movs	r3, #0
 8002268:	2200      	movs	r2, #0
 800226a:	2100      	movs	r1, #0
 800226c:	2000      	movs	r0, #0
 800226e:	f7ff f885 	bl	800137c <flash_led>

		// Reset channel 1 compare flag
		TIM4->SR &= ~TIM_SR_CC1IF;
 8002272:	4b04      	ldr	r3, [pc, #16]	; (8002284 <TIM4_IRQHandler+0x34>)
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	4a03      	ldr	r2, [pc, #12]	; (8002284 <TIM4_IRQHandler+0x34>)
 8002278:	f023 0302 	bic.w	r3, r3, #2
 800227c:	6113      	str	r3, [r2, #16]
	}
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40000800 	.word	0x40000800
 8002288:	20000078 	.word	0x20000078

0800228c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800228c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022c4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002290:	f7ff fef2 	bl	8002078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002294:	480c      	ldr	r0, [pc, #48]	; (80022c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002296:	490d      	ldr	r1, [pc, #52]	; (80022cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002298:	4a0d      	ldr	r2, [pc, #52]	; (80022d0 <LoopForever+0xe>)
  movs r3, #0
 800229a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800229c:	e002      	b.n	80022a4 <LoopCopyDataInit>

0800229e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a2:	3304      	adds	r3, #4

080022a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a8:	d3f9      	bcc.n	800229e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022aa:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022ac:	4c0a      	ldr	r4, [pc, #40]	; (80022d8 <LoopForever+0x16>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b0:	e001      	b.n	80022b6 <LoopFillZerobss>

080022b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b4:	3204      	adds	r2, #4

080022b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b8:	d3fb      	bcc.n	80022b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ba:	f003 fd2b 	bl	8005d14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022be:	f7ff f913 	bl	80014e8 <main>

080022c2 <LoopForever>:

LoopForever:
    b LoopForever
 80022c2:	e7fe      	b.n	80022c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022c4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80022c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022cc:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 80022d0:	080070a8 	.word	0x080070a8
  ldr r2, =_sbss
 80022d4:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 80022d8:	20000578 	.word	0x20000578

080022dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022dc:	e7fe      	b.n	80022dc <ADC1_2_IRQHandler>
	...

080022e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_Init+0x28>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a07      	ldr	r2, [pc, #28]	; (8002308 <HAL_Init+0x28>)
 80022ea:	f043 0310 	orr.w	r3, r3, #16
 80022ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f0:	2003      	movs	r0, #3
 80022f2:	f000 f931 	bl	8002558 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f6:	2000      	movs	r0, #0
 80022f8:	f000 f808 	bl	800230c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022fc:	f7ff fd1a 	bl	8001d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40022000 	.word	0x40022000

0800230c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_InitTick+0x54>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_InitTick+0x58>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002322:	fbb3 f3f1 	udiv	r3, r3, r1
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f93b 	bl	80025a6 <HAL_SYSTICK_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e00e      	b.n	8002358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b0f      	cmp	r3, #15
 800233e:	d80a      	bhi.n	8002356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002340:	2200      	movs	r2, #0
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002348:	f000 f911 	bl	800256e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800234c:	4a06      	ldr	r2, [pc, #24]	; (8002368 <HAL_InitTick+0x5c>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	e000      	b.n	8002358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	2000003c 	.word	0x2000003c
 8002364:	200000b4 	.word	0x200000b4
 8002368:	200000b0 	.word	0x200000b0

0800236c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_IncTick+0x20>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_IncTick+0x24>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4413      	add	r3, r2
 800237c:	4a04      	ldr	r2, [pc, #16]	; (8002390 <HAL_IncTick+0x24>)
 800237e:	6013      	str	r3, [r2, #0]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	200000b4 	.word	0x200000b4
 8002390:	20000564 	.word	0x20000564

08002394 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return uwTick;  
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_GetTick+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000564 	.word	0x20000564

080023ac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff ffee 	bl	8002394 <HAL_GetTick>
 80023b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023c4:	d005      	beq.n	80023d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <HAL_Delay+0x44>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4413      	add	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80023d2:	bf00      	nop
 80023d4:	f7ff ffde 	bl	8002394 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d8f7      	bhi.n	80023d4 <HAL_Delay+0x28>
  {
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200000b4 	.word	0x200000b4

080023f4 <__NVIC_SetPriorityGrouping>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002410:	4013      	ands	r3, r2
 8002412:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800241c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002426:	4a04      	ldr	r2, [pc, #16]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	60d3      	str	r3, [r2, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_GetPriorityGrouping>:
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <__NVIC_GetPriorityGrouping+0x18>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	f003 0307 	and.w	r3, r3, #7
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_SetPriority>:
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	; (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002524:	d301      	bcc.n	800252a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002526:	2301      	movs	r3, #1
 8002528:	e00f      	b.n	800254a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <SysTick_Config+0x40>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002532:	210f      	movs	r1, #15
 8002534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002538:	f7ff ff8e 	bl	8002458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <SysTick_Config+0x40>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002542:	4b04      	ldr	r3, [pc, #16]	; (8002554 <SysTick_Config+0x40>)
 8002544:	2207      	movs	r2, #7
 8002546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	e000e010 	.word	0xe000e010

08002558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff47 	bl	80023f4 <__NVIC_SetPriorityGrouping>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002580:	f7ff ff5c 	bl	800243c <__NVIC_GetPriorityGrouping>
 8002584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f7ff ff8e 	bl	80024ac <NVIC_EncodePriority>
 8002590:	4602      	mov	r2, r0
 8002592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff5d 	bl	8002458 <__NVIC_SetPriority>
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ffb0 	bl	8002514 <SysTick_Config>
 80025b4:	4603      	mov	r3, r0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ce:	e154      	b.n	800287a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2101      	movs	r1, #1
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	4013      	ands	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8146 	beq.w	8002874 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d005      	beq.n	8002600 <HAL_GPIO_Init+0x40>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d130      	bne.n	8002662 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002636:	2201      	movs	r2, #1
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4013      	ands	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 0201 	and.w	r2, r3, #1
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b03      	cmp	r3, #3
 800266c:	d017      	beq.n	800269e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2203      	movs	r2, #3
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d123      	bne.n	80026f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	08da      	lsrs	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3208      	adds	r2, #8
 80026b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	08da      	lsrs	r2, r3, #3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3208      	adds	r2, #8
 80026ec:	6939      	ldr	r1, [r7, #16]
 80026ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	2203      	movs	r2, #3
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0203 	and.w	r2, r3, #3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 80a0 	beq.w	8002874 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002734:	4b58      	ldr	r3, [pc, #352]	; (8002898 <HAL_GPIO_Init+0x2d8>)
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	4a57      	ldr	r2, [pc, #348]	; (8002898 <HAL_GPIO_Init+0x2d8>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6193      	str	r3, [r2, #24]
 8002740:	4b55      	ldr	r3, [pc, #340]	; (8002898 <HAL_GPIO_Init+0x2d8>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800274c:	4a53      	ldr	r2, [pc, #332]	; (800289c <HAL_GPIO_Init+0x2dc>)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	3302      	adds	r3, #2
 8002754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	220f      	movs	r2, #15
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002776:	d019      	beq.n	80027ac <HAL_GPIO_Init+0x1ec>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a49      	ldr	r2, [pc, #292]	; (80028a0 <HAL_GPIO_Init+0x2e0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d013      	beq.n	80027a8 <HAL_GPIO_Init+0x1e8>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a48      	ldr	r2, [pc, #288]	; (80028a4 <HAL_GPIO_Init+0x2e4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d00d      	beq.n	80027a4 <HAL_GPIO_Init+0x1e4>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a47      	ldr	r2, [pc, #284]	; (80028a8 <HAL_GPIO_Init+0x2e8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d007      	beq.n	80027a0 <HAL_GPIO_Init+0x1e0>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a46      	ldr	r2, [pc, #280]	; (80028ac <HAL_GPIO_Init+0x2ec>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d101      	bne.n	800279c <HAL_GPIO_Init+0x1dc>
 8002798:	2304      	movs	r3, #4
 800279a:	e008      	b.n	80027ae <HAL_GPIO_Init+0x1ee>
 800279c:	2305      	movs	r3, #5
 800279e:	e006      	b.n	80027ae <HAL_GPIO_Init+0x1ee>
 80027a0:	2303      	movs	r3, #3
 80027a2:	e004      	b.n	80027ae <HAL_GPIO_Init+0x1ee>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e002      	b.n	80027ae <HAL_GPIO_Init+0x1ee>
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <HAL_GPIO_Init+0x1ee>
 80027ac:	2300      	movs	r3, #0
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	f002 0203 	and.w	r2, r2, #3
 80027b4:	0092      	lsls	r2, r2, #2
 80027b6:	4093      	lsls	r3, r2
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027be:	4937      	ldr	r1, [pc, #220]	; (800289c <HAL_GPIO_Init+0x2dc>)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	3302      	adds	r3, #2
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027cc:	4b38      	ldr	r3, [pc, #224]	; (80028b0 <HAL_GPIO_Init+0x2f0>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027f0:	4a2f      	ldr	r2, [pc, #188]	; (80028b0 <HAL_GPIO_Init+0x2f0>)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f6:	4b2e      	ldr	r3, [pc, #184]	; (80028b0 <HAL_GPIO_Init+0x2f0>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	43db      	mvns	r3, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800281a:	4a25      	ldr	r2, [pc, #148]	; (80028b0 <HAL_GPIO_Init+0x2f0>)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002820:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <HAL_GPIO_Init+0x2f0>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	43db      	mvns	r3, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002844:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <HAL_GPIO_Init+0x2f0>)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800284a:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <HAL_GPIO_Init+0x2f0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	43db      	mvns	r3, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4013      	ands	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800286e:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <HAL_GPIO_Init+0x2f0>)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	3301      	adds	r3, #1
 8002878:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	f47f aea3 	bne.w	80025d0 <HAL_GPIO_Init+0x10>
  }
}
 800288a:	bf00      	nop
 800288c:	bf00      	nop
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	40021000 	.word	0x40021000
 800289c:	40010000 	.word	0x40010000
 80028a0:	48000400 	.word	0x48000400
 80028a4:	48000800 	.word	0x48000800
 80028a8:	48000c00 	.word	0x48000c00
 80028ac:	48001000 	.word	0x48001000
 80028b0:	40010400 	.word	0x40010400

080028b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	807b      	strh	r3, [r7, #2]
 80028c0:	4613      	mov	r3, r2
 80028c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028c4:	787b      	ldrb	r3, [r7, #1]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ca:	887a      	ldrh	r2, [r7, #2]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028d0:	e002      	b.n	80028d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e081      	b.n	80029fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff fa36 	bl	8001d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2224      	movs	r2, #36	; 0x24
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002934:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002944:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d107      	bne.n	800295e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	e006      	b.n	800296c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800296a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b02      	cmp	r3, #2
 8002972:	d104      	bne.n	800297e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800297c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800298c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002990:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69d9      	ldr	r1, [r3, #28]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1a      	ldr	r2, [r3, #32]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	4611      	mov	r1, r2
 8002a10:	461a      	mov	r2, r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	817b      	strh	r3, [r7, #10]
 8002a16:	460b      	mov	r3, r1
 8002a18:	813b      	strh	r3, [r7, #8]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b20      	cmp	r3, #32
 8002a28:	f040 80f9 	bne.w	8002c1e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HAL_I2C_Mem_Write+0x34>
 8002a32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d105      	bne.n	8002a44 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a3e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0ed      	b.n	8002c20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_I2C_Mem_Write+0x4e>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e0e6      	b.n	8002c20 <HAL_I2C_Mem_Write+0x21c>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a5a:	f7ff fc9b 	bl	8002394 <HAL_GetTick>
 8002a5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	2319      	movs	r3, #25
 8002a66:	2201      	movs	r2, #1
 8002a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 fac3 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0d1      	b.n	8002c20 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2221      	movs	r2, #33	; 0x21
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2240      	movs	r2, #64	; 0x40
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a3a      	ldr	r2, [r7, #32]
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aa4:	88f8      	ldrh	r0, [r7, #6]
 8002aa6:	893a      	ldrh	r2, [r7, #8]
 8002aa8:	8979      	ldrh	r1, [r7, #10]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	9301      	str	r3, [sp, #4]
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f9d3 	bl	8002e60 <I2C_RequestMemoryWrite>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0a9      	b.n	8002c20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2bff      	cmp	r3, #255	; 0xff
 8002ad4:	d90e      	bls.n	8002af4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	22ff      	movs	r2, #255	; 0xff
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	8979      	ldrh	r1, [r7, #10]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 fc3d 	bl	800336c <I2C_TransferConfig>
 8002af2:	e00f      	b.n	8002b14 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	8979      	ldrh	r1, [r7, #10]
 8002b06:	2300      	movs	r3, #0
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 fc2c 	bl	800336c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 fabc 	bl	8003096 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e07b      	b.n	8002c20 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	781a      	ldrb	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d034      	beq.n	8002bcc <HAL_I2C_Mem_Write+0x1c8>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d130      	bne.n	8002bcc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	2200      	movs	r2, #0
 8002b72:	2180      	movs	r1, #128	; 0x80
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 fa3f 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e04d      	b.n	8002c20 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2bff      	cmp	r3, #255	; 0xff
 8002b8c:	d90e      	bls.n	8002bac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	22ff      	movs	r2, #255	; 0xff
 8002b92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	8979      	ldrh	r1, [r7, #10]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 fbe1 	bl	800336c <I2C_TransferConfig>
 8002baa:	e00f      	b.n	8002bcc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	8979      	ldrh	r1, [r7, #10]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 fbd0 	bl	800336c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d19e      	bne.n	8002b14 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 faa2 	bl	8003124 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e01a      	b.n	8002c20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <HAL_I2C_Mem_Write+0x224>)
 8002bfe:	400b      	ands	r3, r1
 8002c00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e000      	b.n	8002c20 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
  }
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	fe00e800 	.word	0xfe00e800

08002c2c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	4608      	mov	r0, r1
 8002c36:	4611      	mov	r1, r2
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	817b      	strh	r3, [r7, #10]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	813b      	strh	r3, [r7, #8]
 8002c42:	4613      	mov	r3, r2
 8002c44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	f040 80fd 	bne.w	8002e4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_I2C_Mem_Read+0x34>
 8002c5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d105      	bne.n	8002c6c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0f1      	b.n	8002e50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_I2C_Mem_Read+0x4e>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e0ea      	b.n	8002e50 <HAL_I2C_Mem_Read+0x224>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c82:	f7ff fb87 	bl	8002394 <HAL_GetTick>
 8002c86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2319      	movs	r3, #25
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f9af 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0d5      	b.n	8002e50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2222      	movs	r2, #34	; 0x22
 8002ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2240      	movs	r2, #64	; 0x40
 8002cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a3a      	ldr	r2, [r7, #32]
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ccc:	88f8      	ldrh	r0, [r7, #6]
 8002cce:	893a      	ldrh	r2, [r7, #8]
 8002cd0:	8979      	ldrh	r1, [r7, #10]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	4603      	mov	r3, r0
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f913 	bl	8002f08 <I2C_RequestMemoryRead>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0ad      	b.n	8002e50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2bff      	cmp	r3, #255	; 0xff
 8002cfc:	d90e      	bls.n	8002d1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	22ff      	movs	r2, #255	; 0xff
 8002d02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	8979      	ldrh	r1, [r7, #10]
 8002d0c:	4b52      	ldr	r3, [pc, #328]	; (8002e58 <HAL_I2C_Mem_Read+0x22c>)
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 fb29 	bl	800336c <I2C_TransferConfig>
 8002d1a:	e00f      	b.n	8002d3c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	8979      	ldrh	r1, [r7, #10]
 8002d2e:	4b4a      	ldr	r3, [pc, #296]	; (8002e58 <HAL_I2C_Mem_Read+0x22c>)
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 fb18 	bl	800336c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d42:	2200      	movs	r2, #0
 8002d44:	2104      	movs	r1, #4
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f956 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e07c      	b.n	8002e50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d034      	beq.n	8002dfc <HAL_I2C_Mem_Read+0x1d0>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d130      	bne.n	8002dfc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	2200      	movs	r2, #0
 8002da2:	2180      	movs	r1, #128	; 0x80
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f927 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e04d      	b.n	8002e50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2bff      	cmp	r3, #255	; 0xff
 8002dbc:	d90e      	bls.n	8002ddc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	22ff      	movs	r2, #255	; 0xff
 8002dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	8979      	ldrh	r1, [r7, #10]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 fac9 	bl	800336c <I2C_TransferConfig>
 8002dda:	e00f      	b.n	8002dfc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	8979      	ldrh	r1, [r7, #10]
 8002dee:	2300      	movs	r3, #0
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fab8 	bl	800336c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d19a      	bne.n	8002d3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f98a 	bl	8003124 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e01a      	b.n	8002e50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_I2C_Mem_Read+0x230>)
 8002e2e:	400b      	ands	r3, r1
 8002e30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e000      	b.n	8002e50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
  }
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	80002400 	.word	0x80002400
 8002e5c:	fe00e800 	.word	0xfe00e800

08002e60 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	4608      	mov	r0, r1
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	817b      	strh	r3, [r7, #10]
 8002e72:	460b      	mov	r3, r1
 8002e74:	813b      	strh	r3, [r7, #8]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	8979      	ldrh	r1, [r7, #10]
 8002e80:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <I2C_RequestMemoryWrite+0xa4>)
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fa6f 	bl	800336c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	69b9      	ldr	r1, [r7, #24]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f8ff 	bl	8003096 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e02c      	b.n	8002efc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ea2:	88fb      	ldrh	r3, [r7, #6]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d105      	bne.n	8002eb4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ea8:	893b      	ldrh	r3, [r7, #8]
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	629a      	str	r2, [r3, #40]	; 0x28
 8002eb2:	e015      	b.n	8002ee0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002eb4:	893b      	ldrh	r3, [r7, #8]
 8002eb6:	0a1b      	lsrs	r3, r3, #8
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	69b9      	ldr	r1, [r7, #24]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f8e5 	bl	8003096 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e012      	b.n	8002efc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed6:	893b      	ldrh	r3, [r7, #8]
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2180      	movs	r1, #128	; 0x80
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f884 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	80002000 	.word	0x80002000

08002f08 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	4608      	mov	r0, r1
 8002f12:	4611      	mov	r1, r2
 8002f14:	461a      	mov	r2, r3
 8002f16:	4603      	mov	r3, r0
 8002f18:	817b      	strh	r3, [r7, #10]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	813b      	strh	r3, [r7, #8]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	8979      	ldrh	r1, [r7, #10]
 8002f28:	4b20      	ldr	r3, [pc, #128]	; (8002fac <I2C_RequestMemoryRead+0xa4>)
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 fa1c 	bl	800336c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	69b9      	ldr	r1, [r7, #24]
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f8ac 	bl	8003096 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e02c      	b.n	8002fa2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d105      	bne.n	8002f5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f4e:	893b      	ldrh	r3, [r7, #8]
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
 8002f58:	e015      	b.n	8002f86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f5a:	893b      	ldrh	r3, [r7, #8]
 8002f5c:	0a1b      	lsrs	r3, r3, #8
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	69b9      	ldr	r1, [r7, #24]
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f892 	bl	8003096 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e012      	b.n	8002fa2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f7c:	893b      	ldrh	r3, [r7, #8]
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2140      	movs	r1, #64	; 0x40
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f831 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	80002000 	.word	0x80002000

08002fb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d103      	bne.n	8002fce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d007      	beq.n	8002fec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	619a      	str	r2, [r3, #24]
  }
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003008:	e031      	b.n	800306e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003010:	d02d      	beq.n	800306e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003012:	f7ff f9bf 	bl	8002394 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d302      	bcc.n	8003028 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d122      	bne.n	800306e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	4013      	ands	r3, r2
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	429a      	cmp	r2, r3
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	429a      	cmp	r2, r3
 8003044:	d113      	bne.n	800306e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	f043 0220 	orr.w	r2, r3, #32
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e00f      	b.n	800308e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699a      	ldr	r2, [r3, #24]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4013      	ands	r3, r2
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	429a      	cmp	r2, r3
 800307c:	bf0c      	ite	eq
 800307e:	2301      	moveq	r3, #1
 8003080:	2300      	movne	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	461a      	mov	r2, r3
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	429a      	cmp	r2, r3
 800308a:	d0be      	beq.n	800300a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030a2:	e033      	b.n	800310c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f87f 	bl	80031ac <I2C_IsErrorOccurred>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e031      	b.n	800311c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030be:	d025      	beq.n	800310c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c0:	f7ff f968 	bl	8002394 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d302      	bcc.n	80030d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d11a      	bne.n	800310c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d013      	beq.n	800310c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e007      	b.n	800311c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b02      	cmp	r3, #2
 8003118:	d1c4      	bne.n	80030a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003130:	e02f      	b.n	8003192 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f838 	bl	80031ac <I2C_IsErrorOccurred>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e02d      	b.n	80031a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003146:	f7ff f925 	bl	8002394 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	429a      	cmp	r2, r3
 8003154:	d302      	bcc.n	800315c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d11a      	bne.n	8003192 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b20      	cmp	r3, #32
 8003168:	d013      	beq.n	8003192 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	f043 0220 	orr.w	r2, r3, #32
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e007      	b.n	80031a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b20      	cmp	r3, #32
 800319e:	d1c8      	bne.n	8003132 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	; 0x28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d068      	beq.n	80032aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2210      	movs	r2, #16
 80031de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031e0:	e049      	b.n	8003276 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031e8:	d045      	beq.n	8003276 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031ea:	f7ff f8d3 	bl	8002394 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d302      	bcc.n	8003200 <I2C_IsErrorOccurred+0x54>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d13a      	bne.n	8003276 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800320a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003212:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800321e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003222:	d121      	bne.n	8003268 <I2C_IsErrorOccurred+0xbc>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800322a:	d01d      	beq.n	8003268 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	2b20      	cmp	r3, #32
 8003230:	d01a      	beq.n	8003268 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003240:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003242:	f7ff f8a7 	bl	8002394 <HAL_GetTick>
 8003246:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003248:	e00e      	b.n	8003268 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800324a:	f7ff f8a3 	bl	8002394 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b19      	cmp	r3, #25
 8003256:	d907      	bls.n	8003268 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	f043 0320 	orr.w	r3, r3, #32
 800325e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003266:	e006      	b.n	8003276 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b20      	cmp	r3, #32
 8003274:	d1e9      	bne.n	800324a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	f003 0320 	and.w	r3, r3, #32
 8003280:	2b20      	cmp	r3, #32
 8003282:	d003      	beq.n	800328c <I2C_IsErrorOccurred+0xe0>
 8003284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0aa      	beq.n	80031e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800328c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003290:	2b00      	cmp	r3, #0
 8003292:	d103      	bne.n	800329c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2220      	movs	r2, #32
 800329a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	f043 0304 	orr.w	r3, r3, #4
 80032a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00b      	beq.n	80032d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	f043 0308 	orr.w	r3, r3, #8
 80032e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00b      	beq.n	8003318 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	f043 0302 	orr.w	r3, r3, #2
 8003306:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003310:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01c      	beq.n	800335a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f7ff fe45 	bl	8002fb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6859      	ldr	r1, [r3, #4]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <I2C_IsErrorOccurred+0x1bc>)
 8003332:	400b      	ands	r3, r1
 8003334:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	431a      	orrs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800335a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800335e:	4618      	mov	r0, r3
 8003360:	3728      	adds	r7, #40	; 0x28
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	fe00e800 	.word	0xfe00e800

0800336c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	817b      	strh	r3, [r7, #10]
 800337a:	4613      	mov	r3, r2
 800337c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800337e:	897b      	ldrh	r3, [r7, #10]
 8003380:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003384:	7a7b      	ldrb	r3, [r7, #9]
 8003386:	041b      	lsls	r3, r3, #16
 8003388:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800338c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	4313      	orrs	r3, r2
 8003396:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800339a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	0d5b      	lsrs	r3, r3, #21
 80033a6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <I2C_TransferConfig+0x60>)
 80033ac:	430b      	orrs	r3, r1
 80033ae:	43db      	mvns	r3, r3
 80033b0:	ea02 0103 	and.w	r1, r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033be:	bf00      	nop
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	03ff63ff 	.word	0x03ff63ff

080033d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d138      	bne.n	8003458 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e032      	b.n	800345a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2224      	movs	r2, #36	; 0x24
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0201 	bic.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003422:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6819      	ldr	r1, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	e000      	b.n	800345a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003458:	2302      	movs	r3, #2
  }
}
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003466:	b480      	push	{r7}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b20      	cmp	r3, #32
 800347a:	d139      	bne.n	80034f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003486:	2302      	movs	r3, #2
 8003488:	e033      	b.n	80034f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2224      	movs	r2, #36	; 0x24
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e000      	b.n	80034f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034f0:	2302      	movs	r3, #2
  }
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003500:	b08b      	sub	sp, #44	; 0x2c
 8003502:	af06      	add	r7, sp, #24
 8003504:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0c4      	b.n	800369a <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d106      	bne.n	800352a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7fe fd03 	bl	8001f30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2203      	movs	r2, #3
 800352e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f002 fbaa 	bl	8005c90 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800353c:	2300      	movs	r3, #0
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	e040      	b.n	80035c4 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	440b      	add	r3, r1
 8003552:	3301      	adds	r3, #1
 8003554:	2201      	movs	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	440b      	add	r3, r1
 8003568:	7bfa      	ldrb	r2, [r7, #15]
 800356a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	440b      	add	r3, r1
 800357c:	3303      	adds	r3, #3
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003582:	7bfa      	ldrb	r2, [r7, #15]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	440b      	add	r3, r1
 8003590:	3338      	adds	r3, #56	; 0x38
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003596:	7bfa      	ldrb	r2, [r7, #15]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	440b      	add	r3, r1
 80035a4:	333c      	adds	r3, #60	; 0x3c
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035aa:	7bfa      	ldrb	r2, [r7, #15]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	440b      	add	r3, r1
 80035b8:	3340      	adds	r3, #64	; 0x40
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	3301      	adds	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d3b9      	bcc.n	8003542 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ce:	2300      	movs	r3, #0
 80035d0:	73fb      	strb	r3, [r7, #15]
 80035d2:	e044      	b.n	800365e <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	440b      	add	r3, r1
 80035e2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80035e6:	2200      	movs	r2, #0
 80035e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	440b      	add	r3, r1
 80035f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035fc:	7bfa      	ldrb	r2, [r7, #15]
 80035fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	440b      	add	r3, r1
 800360e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	440b      	add	r3, r1
 8003624:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800362c:	7bfa      	ldrb	r2, [r7, #15]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	440b      	add	r3, r1
 800363a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	440b      	add	r3, r1
 8003650:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	3301      	adds	r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
 800365e:	7bfa      	ldrb	r2, [r7, #15]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	429a      	cmp	r2, r3
 8003666:	d3b5      	bcc.n	80035d4 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	687e      	ldr	r6, [r7, #4]
 8003670:	466d      	mov	r5, sp
 8003672:	f106 0410 	add.w	r4, r6, #16
 8003676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	602b      	str	r3, [r5, #0]
 800367e:	1d33      	adds	r3, r6, #4
 8003680:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003682:	6838      	ldr	r0, [r7, #0]
 8003684:	f002 fb1f 	bl	8005cc6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080036a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036b4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d102      	bne.n	80036ca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f001 b823 	b.w	8004710 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 817d 	beq.w	80039da <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80036e0:	4bbc      	ldr	r3, [pc, #752]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d00c      	beq.n	8003706 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036ec:	4bb9      	ldr	r3, [pc, #740]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d15c      	bne.n	80037b2 <HAL_RCC_OscConfig+0x10e>
 80036f8:	4bb6      	ldr	r3, [pc, #728]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003704:	d155      	bne.n	80037b2 <HAL_RCC_OscConfig+0x10e>
 8003706:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800370a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003712:	fa93 f3a3 	rbit	r3, r3
 8003716:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800371a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	095b      	lsrs	r3, r3, #5
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b01      	cmp	r3, #1
 8003730:	d102      	bne.n	8003738 <HAL_RCC_OscConfig+0x94>
 8003732:	4ba8      	ldr	r3, [pc, #672]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	e015      	b.n	8003764 <HAL_RCC_OscConfig+0xc0>
 8003738:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800373c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003744:	fa93 f3a3 	rbit	r3, r3
 8003748:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800374c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003750:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003754:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003760:	4b9c      	ldr	r3, [pc, #624]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003768:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800376c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003770:	fa92 f2a2 	rbit	r2, r2
 8003774:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003778:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800377c:	fab2 f282 	clz	r2, r2
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	f042 0220 	orr.w	r2, r2, #32
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	f002 021f 	and.w	r2, r2, #31
 800378c:	2101      	movs	r1, #1
 800378e:	fa01 f202 	lsl.w	r2, r1, r2
 8003792:	4013      	ands	r3, r2
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 811f 	beq.w	80039d8 <HAL_RCC_OscConfig+0x334>
 800379a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f040 8116 	bne.w	80039d8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f000 bfaf 	b.w	8004710 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c2:	d106      	bne.n	80037d2 <HAL_RCC_OscConfig+0x12e>
 80037c4:	4b83      	ldr	r3, [pc, #524]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a82      	ldr	r2, [pc, #520]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 80037ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	e036      	b.n	8003840 <HAL_RCC_OscConfig+0x19c>
 80037d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10c      	bne.n	80037fc <HAL_RCC_OscConfig+0x158>
 80037e2:	4b7c      	ldr	r3, [pc, #496]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a7b      	ldr	r2, [pc, #492]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 80037e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4b79      	ldr	r3, [pc, #484]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a78      	ldr	r2, [pc, #480]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 80037f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e021      	b.n	8003840 <HAL_RCC_OscConfig+0x19c>
 80037fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003800:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x184>
 800380e:	4b71      	ldr	r3, [pc, #452]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a70      	ldr	r2, [pc, #448]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 8003814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	4b6e      	ldr	r3, [pc, #440]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a6d      	ldr	r2, [pc, #436]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 8003820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	e00b      	b.n	8003840 <HAL_RCC_OscConfig+0x19c>
 8003828:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a69      	ldr	r2, [pc, #420]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 800382e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	4b67      	ldr	r3, [pc, #412]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a66      	ldr	r2, [pc, #408]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 800383a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800383e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003840:	4b64      	ldr	r3, [pc, #400]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	f023 020f 	bic.w	r2, r3, #15
 8003848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	495f      	ldr	r1, [pc, #380]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 8003856:	4313      	orrs	r3, r2
 8003858:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800385a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d059      	beq.n	800391e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386a:	f7fe fd93 	bl	8002394 <HAL_GetTick>
 800386e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	e00a      	b.n	800388a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003874:	f7fe fd8e 	bl	8002394 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b64      	cmp	r3, #100	; 0x64
 8003882:	d902      	bls.n	800388a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	f000 bf43 	b.w	8004710 <HAL_RCC_OscConfig+0x106c>
 800388a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800388e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800389e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d102      	bne.n	80038bc <HAL_RCC_OscConfig+0x218>
 80038b6:	4b47      	ldr	r3, [pc, #284]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	e015      	b.n	80038e8 <HAL_RCC_OscConfig+0x244>
 80038bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038c0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80038c8:	fa93 f3a3 	rbit	r3, r3
 80038cc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80038d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038d4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80038d8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80038dc:	fa93 f3a3 	rbit	r3, r3
 80038e0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80038e4:	4b3b      	ldr	r3, [pc, #236]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038ec:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80038f0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80038f4:	fa92 f2a2 	rbit	r2, r2
 80038f8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80038fc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003900:	fab2 f282 	clz	r2, r2
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	f042 0220 	orr.w	r2, r2, #32
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	f002 021f 	and.w	r2, r2, #31
 8003910:	2101      	movs	r1, #1
 8003912:	fa01 f202 	lsl.w	r2, r1, r2
 8003916:	4013      	ands	r3, r2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0ab      	beq.n	8003874 <HAL_RCC_OscConfig+0x1d0>
 800391c:	e05d      	b.n	80039da <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391e:	f7fe fd39 	bl	8002394 <HAL_GetTick>
 8003922:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	e00a      	b.n	800393e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003928:	f7fe fd34 	bl	8002394 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b64      	cmp	r3, #100	; 0x64
 8003936:	d902      	bls.n	800393e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	f000 bee9 	b.w	8004710 <HAL_RCC_OscConfig+0x106c>
 800393e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003942:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003946:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800394a:	fa93 f3a3 	rbit	r3, r3
 800394e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003952:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003956:	fab3 f383 	clz	r3, r3
 800395a:	b2db      	uxtb	r3, r3
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	b2db      	uxtb	r3, r3
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d102      	bne.n	8003970 <HAL_RCC_OscConfig+0x2cc>
 800396a:	4b1a      	ldr	r3, [pc, #104]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	e015      	b.n	800399c <HAL_RCC_OscConfig+0x2f8>
 8003970:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003974:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003978:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800397c:	fa93 f3a3 	rbit	r3, r3
 8003980:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003988:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800398c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003990:	fa93 f3a3 	rbit	r3, r3
 8003994:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003998:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <HAL_RCC_OscConfig+0x330>)
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039a0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80039a4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80039a8:	fa92 f2a2 	rbit	r2, r2
 80039ac:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80039b0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80039b4:	fab2 f282 	clz	r2, r2
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	f042 0220 	orr.w	r2, r2, #32
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	f002 021f 	and.w	r2, r2, #31
 80039c4:	2101      	movs	r1, #1
 80039c6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ab      	bne.n	8003928 <HAL_RCC_OscConfig+0x284>
 80039d0:	e003      	b.n	80039da <HAL_RCC_OscConfig+0x336>
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 817d 	beq.w	8003cea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80039f0:	4ba6      	ldr	r3, [pc, #664]	; (8003c8c <HAL_RCC_OscConfig+0x5e8>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 030c 	and.w	r3, r3, #12
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00b      	beq.n	8003a14 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80039fc:	4ba3      	ldr	r3, [pc, #652]	; (8003c8c <HAL_RCC_OscConfig+0x5e8>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 030c 	and.w	r3, r3, #12
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d172      	bne.n	8003aee <HAL_RCC_OscConfig+0x44a>
 8003a08:	4ba0      	ldr	r3, [pc, #640]	; (8003c8c <HAL_RCC_OscConfig+0x5e8>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d16c      	bne.n	8003aee <HAL_RCC_OscConfig+0x44a>
 8003a14:	2302      	movs	r3, #2
 8003a16:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003a26:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d102      	bne.n	8003a44 <HAL_RCC_OscConfig+0x3a0>
 8003a3e:	4b93      	ldr	r3, [pc, #588]	; (8003c8c <HAL_RCC_OscConfig+0x5e8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	e013      	b.n	8003a6c <HAL_RCC_OscConfig+0x3c8>
 8003a44:	2302      	movs	r3, #2
 8003a46:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003a4e:	fa93 f3a3 	rbit	r3, r3
 8003a52:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003a56:	2302      	movs	r3, #2
 8003a58:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003a5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003a68:	4b88      	ldr	r3, [pc, #544]	; (8003c8c <HAL_RCC_OscConfig+0x5e8>)
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003a72:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003a76:	fa92 f2a2 	rbit	r2, r2
 8003a7a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003a7e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003a82:	fab2 f282 	clz	r2, r2
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	f042 0220 	orr.w	r2, r2, #32
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	f002 021f 	and.w	r2, r2, #31
 8003a92:	2101      	movs	r1, #1
 8003a94:	fa01 f202 	lsl.w	r2, r1, r2
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x410>
 8003a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d002      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	f000 be2e 	b.w	8004710 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab4:	4b75      	ldr	r3, [pc, #468]	; (8003c8c <HAL_RCC_OscConfig+0x5e8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	21f8      	movs	r1, #248	; 0xf8
 8003aca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003ad2:	fa91 f1a1 	rbit	r1, r1
 8003ad6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003ada:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003ade:	fab1 f181 	clz	r1, r1
 8003ae2:	b2c9      	uxtb	r1, r1
 8003ae4:	408b      	lsls	r3, r1
 8003ae6:	4969      	ldr	r1, [pc, #420]	; (8003c8c <HAL_RCC_OscConfig+0x5e8>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aec:	e0fd      	b.n	8003cea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 8088 	beq.w	8003c10 <HAL_RCC_OscConfig+0x56c>
 8003b00:	2301      	movs	r3, #1
 8003b02:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b06:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003b0a:	fa93 f3a3 	rbit	r3, r3
 8003b0e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003b12:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	461a      	mov	r2, r3
 8003b28:	2301      	movs	r3, #1
 8003b2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fe fc32 	bl	8002394 <HAL_GetTick>
 8003b30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b34:	e00a      	b.n	8003b4c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b36:	f7fe fc2d 	bl	8002394 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d902      	bls.n	8003b4c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	f000 bde2 	b.w	8004710 <HAL_RCC_OscConfig+0x106c>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003b56:	fa93 f3a3 	rbit	r3, r3
 8003b5a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003b5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b62:	fab3 f383 	clz	r3, r3
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d102      	bne.n	8003b7c <HAL_RCC_OscConfig+0x4d8>
 8003b76:	4b45      	ldr	r3, [pc, #276]	; (8003c8c <HAL_RCC_OscConfig+0x5e8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	e013      	b.n	8003ba4 <HAL_RCC_OscConfig+0x500>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b82:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003b86:	fa93 f3a3 	rbit	r3, r3
 8003b8a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003b8e:	2302      	movs	r3, #2
 8003b90:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003b94:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003ba0:	4b3a      	ldr	r3, [pc, #232]	; (8003c8c <HAL_RCC_OscConfig+0x5e8>)
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003baa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003bae:	fa92 f2a2 	rbit	r2, r2
 8003bb2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003bb6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003bba:	fab2 f282 	clz	r2, r2
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	f042 0220 	orr.w	r2, r2, #32
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	f002 021f 	and.w	r2, r2, #31
 8003bca:	2101      	movs	r1, #1
 8003bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0af      	beq.n	8003b36 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd6:	4b2d      	ldr	r3, [pc, #180]	; (8003c8c <HAL_RCC_OscConfig+0x5e8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	21f8      	movs	r1, #248	; 0xf8
 8003bec:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003bf4:	fa91 f1a1 	rbit	r1, r1
 8003bf8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003bfc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003c00:	fab1 f181 	clz	r1, r1
 8003c04:	b2c9      	uxtb	r1, r1
 8003c06:	408b      	lsls	r3, r1
 8003c08:	4920      	ldr	r1, [pc, #128]	; (8003c8c <HAL_RCC_OscConfig+0x5e8>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	600b      	str	r3, [r1, #0]
 8003c0e:	e06c      	b.n	8003cea <HAL_RCC_OscConfig+0x646>
 8003c10:	2301      	movs	r3, #1
 8003c12:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c16:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003c1a:	fa93 f3a3 	rbit	r3, r3
 8003c1e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003c22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c26:	fab3 f383 	clz	r3, r3
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	461a      	mov	r2, r3
 8003c38:	2300      	movs	r3, #0
 8003c3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7fe fbaa 	bl	8002394 <HAL_GetTick>
 8003c40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c44:	e00a      	b.n	8003c5c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c46:	f7fe fba5 	bl	8002394 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d902      	bls.n	8003c5c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	f000 bd5a 	b.w	8004710 <HAL_RCC_OscConfig+0x106c>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003c66:	fa93 f3a3 	rbit	r3, r3
 8003c6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003c6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c72:	fab3 f383 	clz	r3, r3
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d104      	bne.n	8003c90 <HAL_RCC_OscConfig+0x5ec>
 8003c86:	4b01      	ldr	r3, [pc, #4]	; (8003c8c <HAL_RCC_OscConfig+0x5e8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	e015      	b.n	8003cb8 <HAL_RCC_OscConfig+0x614>
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	2302      	movs	r3, #2
 8003c92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ca8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003cac:	fa93 f3a3 	rbit	r3, r3
 8003cb0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003cb4:	4bc8      	ldr	r3, [pc, #800]	; (8003fd8 <HAL_RCC_OscConfig+0x934>)
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	2202      	movs	r2, #2
 8003cba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003cbe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003cc2:	fa92 f2a2 	rbit	r2, r2
 8003cc6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003cca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003cce:	fab2 f282 	clz	r2, r2
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	f042 0220 	orr.w	r2, r2, #32
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	f002 021f 	and.w	r2, r2, #31
 8003cde:	2101      	movs	r1, #1
 8003ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1ad      	bne.n	8003c46 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 8110 	beq.w	8003f20 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d079      	beq.n	8003e04 <HAL_RCC_OscConfig+0x760>
 8003d10:	2301      	movs	r3, #1
 8003d12:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d1a:	fa93 f3a3 	rbit	r3, r3
 8003d1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4bab      	ldr	r3, [pc, #684]	; (8003fdc <HAL_RCC_OscConfig+0x938>)
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	461a      	mov	r2, r3
 8003d36:	2301      	movs	r3, #1
 8003d38:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3a:	f7fe fb2b 	bl	8002394 <HAL_GetTick>
 8003d3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d42:	e00a      	b.n	8003d5a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d44:	f7fe fb26 	bl	8002394 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d902      	bls.n	8003d5a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	f000 bcdb 	b.w	8004710 <HAL_RCC_OscConfig+0x106c>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d64:	fa93 f3a3 	rbit	r3, r3
 8003d68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d70:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003d74:	2202      	movs	r2, #2
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	fa93 f2a3 	rbit	r2, r3
 8003d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d98:	2202      	movs	r2, #2
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	fa93 f2a3 	rbit	r2, r3
 8003daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003db2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db4:	4b88      	ldr	r3, [pc, #544]	; (8003fd8 <HAL_RCC_OscConfig+0x934>)
 8003db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dbc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003dc0:	2102      	movs	r1, #2
 8003dc2:	6019      	str	r1, [r3, #0]
 8003dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	fa93 f1a3 	rbit	r1, r3
 8003dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003dda:	6019      	str	r1, [r3, #0]
  return result;
 8003ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	fab3 f383 	clz	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	2101      	movs	r1, #1
 8003df8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0a0      	beq.n	8003d44 <HAL_RCC_OscConfig+0x6a0>
 8003e02:	e08d      	b.n	8003f20 <HAL_RCC_OscConfig+0x87c>
 8003e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e08:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	fa93 f2a3 	rbit	r2, r3
 8003e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e22:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003e26:	601a      	str	r2, [r3, #0]
  return result;
 8003e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003e30:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e32:	fab3 f383 	clz	r3, r3
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	4b68      	ldr	r3, [pc, #416]	; (8003fdc <HAL_RCC_OscConfig+0x938>)
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	461a      	mov	r2, r3
 8003e42:	2300      	movs	r3, #0
 8003e44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e46:	f7fe faa5 	bl	8002394 <HAL_GetTick>
 8003e4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e50:	f7fe faa0 	bl	8002394 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d902      	bls.n	8003e66 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	f000 bc55 	b.w	8004710 <HAL_RCC_OscConfig+0x106c>
 8003e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003e6e:	2202      	movs	r2, #2
 8003e70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e76:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	fa93 f2a3 	rbit	r2, r3
 8003e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e84:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003e92:	2202      	movs	r2, #2
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	fa93 f2a3 	rbit	r2, r3
 8003ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	fa93 f2a3 	rbit	r2, r3
 8003ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ecc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003ed0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed2:	4b41      	ldr	r3, [pc, #260]	; (8003fd8 <HAL_RCC_OscConfig+0x934>)
 8003ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eda:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003ede:	2102      	movs	r1, #2
 8003ee0:	6019      	str	r1, [r3, #0]
 8003ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	fa93 f1a3 	rbit	r1, r3
 8003ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ef8:	6019      	str	r1, [r3, #0]
  return result;
 8003efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	fab3 f383 	clz	r3, r3
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	2101      	movs	r1, #1
 8003f16:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d197      	bne.n	8003e50 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 81a1 	beq.w	8004278 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f36:	2300      	movs	r3, #0
 8003f38:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f3c:	4b26      	ldr	r3, [pc, #152]	; (8003fd8 <HAL_RCC_OscConfig+0x934>)
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d116      	bne.n	8003f76 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f48:	4b23      	ldr	r3, [pc, #140]	; (8003fd8 <HAL_RCC_OscConfig+0x934>)
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	4a22      	ldr	r2, [pc, #136]	; (8003fd8 <HAL_RCC_OscConfig+0x934>)
 8003f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f52:	61d3      	str	r3, [r2, #28]
 8003f54:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <HAL_RCC_OscConfig+0x934>)
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f60:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003f6e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f76:	4b1a      	ldr	r3, [pc, #104]	; (8003fe0 <HAL_RCC_OscConfig+0x93c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d11a      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f82:	4b17      	ldr	r3, [pc, #92]	; (8003fe0 <HAL_RCC_OscConfig+0x93c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a16      	ldr	r2, [pc, #88]	; (8003fe0 <HAL_RCC_OscConfig+0x93c>)
 8003f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8e:	f7fe fa01 	bl	8002394 <HAL_GetTick>
 8003f92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f96:	e009      	b.n	8003fac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f98:	f7fe f9fc 	bl	8002394 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b64      	cmp	r3, #100	; 0x64
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e3b1      	b.n	8004710 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fac:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <HAL_RCC_OscConfig+0x93c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0ef      	beq.n	8003f98 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d10d      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x940>
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <HAL_RCC_OscConfig+0x934>)
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	4a02      	ldr	r2, [pc, #8]	; (8003fd8 <HAL_RCC_OscConfig+0x934>)
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	6213      	str	r3, [r2, #32]
 8003fd4:	e03c      	b.n	8004050 <HAL_RCC_OscConfig+0x9ac>
 8003fd6:	bf00      	nop
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	10908120 	.word	0x10908120
 8003fe0:	40007000 	.word	0x40007000
 8003fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10c      	bne.n	800400e <HAL_RCC_OscConfig+0x96a>
 8003ff4:	4bc1      	ldr	r3, [pc, #772]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	4ac0      	ldr	r2, [pc, #768]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	6213      	str	r3, [r2, #32]
 8004000:	4bbe      	ldr	r3, [pc, #760]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	4abd      	ldr	r2, [pc, #756]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 8004006:	f023 0304 	bic.w	r3, r3, #4
 800400a:	6213      	str	r3, [r2, #32]
 800400c:	e020      	b.n	8004050 <HAL_RCC_OscConfig+0x9ac>
 800400e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004012:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2b05      	cmp	r3, #5
 800401c:	d10c      	bne.n	8004038 <HAL_RCC_OscConfig+0x994>
 800401e:	4bb7      	ldr	r3, [pc, #732]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	4ab6      	ldr	r2, [pc, #728]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 8004024:	f043 0304 	orr.w	r3, r3, #4
 8004028:	6213      	str	r3, [r2, #32]
 800402a:	4bb4      	ldr	r3, [pc, #720]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	4ab3      	ldr	r2, [pc, #716]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 8004030:	f043 0301 	orr.w	r3, r3, #1
 8004034:	6213      	str	r3, [r2, #32]
 8004036:	e00b      	b.n	8004050 <HAL_RCC_OscConfig+0x9ac>
 8004038:	4bb0      	ldr	r3, [pc, #704]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	4aaf      	ldr	r2, [pc, #700]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	6213      	str	r3, [r2, #32]
 8004044:	4bad      	ldr	r3, [pc, #692]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	4aac      	ldr	r2, [pc, #688]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 800404a:	f023 0304 	bic.w	r3, r3, #4
 800404e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004054:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8081 	beq.w	8004164 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004062:	f7fe f997 	bl	8002394 <HAL_GetTick>
 8004066:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406a:	e00b      	b.n	8004084 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800406c:	f7fe f992 	bl	8002394 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f241 3288 	movw	r2, #5000	; 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e345      	b.n	8004710 <HAL_RCC_OscConfig+0x106c>
 8004084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004088:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800408c:	2202      	movs	r2, #2
 800408e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004094:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	fa93 f2a3 	rbit	r2, r3
 800409e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80040b0:	2202      	movs	r2, #2
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	fa93 f2a3 	rbit	r2, r3
 80040c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80040ca:	601a      	str	r2, [r3, #0]
  return result;
 80040cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80040d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d6:	fab3 f383 	clz	r3, r3
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	095b      	lsrs	r3, r3, #5
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	f043 0302 	orr.w	r3, r3, #2
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d102      	bne.n	80040f0 <HAL_RCC_OscConfig+0xa4c>
 80040ea:	4b84      	ldr	r3, [pc, #528]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	e013      	b.n	8004118 <HAL_RCC_OscConfig+0xa74>
 80040f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80040f8:	2202      	movs	r2, #2
 80040fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004100:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	fa93 f2a3 	rbit	r2, r3
 800410a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	4b79      	ldr	r3, [pc, #484]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800411c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004120:	2102      	movs	r1, #2
 8004122:	6011      	str	r1, [r2, #0]
 8004124:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004128:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	fa92 f1a2 	rbit	r1, r2
 8004132:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004136:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800413a:	6011      	str	r1, [r2, #0]
  return result;
 800413c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004140:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	fab2 f282 	clz	r2, r2
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	f002 021f 	and.w	r2, r2, #31
 8004156:	2101      	movs	r1, #1
 8004158:	fa01 f202 	lsl.w	r2, r1, r2
 800415c:	4013      	ands	r3, r2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d084      	beq.n	800406c <HAL_RCC_OscConfig+0x9c8>
 8004162:	e07f      	b.n	8004264 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004164:	f7fe f916 	bl	8002394 <HAL_GetTick>
 8004168:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800416c:	e00b      	b.n	8004186 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800416e:	f7fe f911 	bl	8002394 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f241 3288 	movw	r2, #5000	; 0x1388
 800417e:	4293      	cmp	r3, r2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e2c4      	b.n	8004710 <HAL_RCC_OscConfig+0x106c>
 8004186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800418a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800418e:	2202      	movs	r2, #2
 8004190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004196:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	fa93 f2a3 	rbit	r2, r3
 80041a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80041b2:	2202      	movs	r2, #2
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	fa93 f2a3 	rbit	r2, r3
 80041c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80041cc:	601a      	str	r2, [r3, #0]
  return result;
 80041ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80041d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d8:	fab3 f383 	clz	r3, r3
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f043 0302 	orr.w	r3, r3, #2
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d102      	bne.n	80041f2 <HAL_RCC_OscConfig+0xb4e>
 80041ec:	4b43      	ldr	r3, [pc, #268]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	e013      	b.n	800421a <HAL_RCC_OscConfig+0xb76>
 80041f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80041fa:	2202      	movs	r2, #2
 80041fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004202:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	fa93 f2a3 	rbit	r2, r3
 800420c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004210:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	4b39      	ldr	r3, [pc, #228]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800421e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004222:	2102      	movs	r1, #2
 8004224:	6011      	str	r1, [r2, #0]
 8004226:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800422a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	fa92 f1a2 	rbit	r1, r2
 8004234:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004238:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800423c:	6011      	str	r1, [r2, #0]
  return result;
 800423e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004242:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	fab2 f282 	clz	r2, r2
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	f002 021f 	and.w	r2, r2, #31
 8004258:	2101      	movs	r1, #1
 800425a:	fa01 f202 	lsl.w	r2, r1, r2
 800425e:	4013      	ands	r3, r2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d184      	bne.n	800416e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004264:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004268:	2b01      	cmp	r3, #1
 800426a:	d105      	bne.n	8004278 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800426c:	4b23      	ldr	r3, [pc, #140]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	4a22      	ldr	r2, [pc, #136]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 8004272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004276:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800427c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 8242 	beq.w	800470e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800428a:	4b1c      	ldr	r3, [pc, #112]	; (80042fc <HAL_RCC_OscConfig+0xc58>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f003 030c 	and.w	r3, r3, #12
 8004292:	2b08      	cmp	r3, #8
 8004294:	f000 8213 	beq.w	80046be <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	f040 8162 	bne.w	800456e <HAL_RCC_OscConfig+0xeca>
 80042aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ae:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80042b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042bc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	fa93 f2a3 	rbit	r2, r3
 80042c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80042ce:	601a      	str	r2, [r3, #0]
  return result;
 80042d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80042d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042da:	fab3 f383 	clz	r3, r3
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	461a      	mov	r2, r3
 80042ec:	2300      	movs	r3, #0
 80042ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7fe f850 	bl	8002394 <HAL_GetTick>
 80042f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042f8:	e00c      	b.n	8004314 <HAL_RCC_OscConfig+0xc70>
 80042fa:	bf00      	nop
 80042fc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004300:	f7fe f848 	bl	8002394 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e1fd      	b.n	8004710 <HAL_RCC_OscConfig+0x106c>
 8004314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004318:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800431c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004326:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	fa93 f2a3 	rbit	r2, r3
 8004330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004334:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004338:	601a      	str	r2, [r3, #0]
  return result;
 800433a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800433e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004342:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004344:	fab3 f383 	clz	r3, r3
 8004348:	b2db      	uxtb	r3, r3
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b01      	cmp	r3, #1
 8004356:	d102      	bne.n	800435e <HAL_RCC_OscConfig+0xcba>
 8004358:	4bb0      	ldr	r3, [pc, #704]	; (800461c <HAL_RCC_OscConfig+0xf78>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	e027      	b.n	80043ae <HAL_RCC_OscConfig+0xd0a>
 800435e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004362:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004366:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800436a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004370:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	fa93 f2a3 	rbit	r2, r3
 800437a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004388:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800438c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004396:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	fa93 f2a3 	rbit	r2, r3
 80043a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	4b9c      	ldr	r3, [pc, #624]	; (800461c <HAL_RCC_OscConfig+0xf78>)
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043b2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80043b6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043ba:	6011      	str	r1, [r2, #0]
 80043bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043c0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	fa92 f1a2 	rbit	r1, r2
 80043ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043ce:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80043d2:	6011      	str	r1, [r2, #0]
  return result;
 80043d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043d8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	fab2 f282 	clz	r2, r2
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	f042 0220 	orr.w	r2, r2, #32
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	f002 021f 	and.w	r2, r2, #31
 80043ee:	2101      	movs	r1, #1
 80043f0:	fa01 f202 	lsl.w	r2, r1, r2
 80043f4:	4013      	ands	r3, r2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d182      	bne.n	8004300 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043fa:	4b88      	ldr	r3, [pc, #544]	; (800461c <HAL_RCC_OscConfig+0xf78>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004406:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800440e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004412:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	430b      	orrs	r3, r1
 800441c:	497f      	ldr	r1, [pc, #508]	; (800461c <HAL_RCC_OscConfig+0xf78>)
 800441e:	4313      	orrs	r3, r2
 8004420:	604b      	str	r3, [r1, #4]
 8004422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004426:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800442a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800442e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004434:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	fa93 f2a3 	rbit	r2, r3
 800443e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004442:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004446:	601a      	str	r2, [r3, #0]
  return result;
 8004448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800444c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004450:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004452:	fab3 f383 	clz	r3, r3
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800445c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	461a      	mov	r2, r3
 8004464:	2301      	movs	r3, #1
 8004466:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fd ff94 	bl	8002394 <HAL_GetTick>
 800446c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004470:	e009      	b.n	8004486 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004472:	f7fd ff8f 	bl	8002394 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e144      	b.n	8004710 <HAL_RCC_OscConfig+0x106c>
 8004486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800448a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800448e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004492:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004498:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	fa93 f2a3 	rbit	r2, r3
 80044a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80044aa:	601a      	str	r2, [r3, #0]
  return result;
 80044ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80044b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044b6:	fab3 f383 	clz	r3, r3
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	095b      	lsrs	r3, r3, #5
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d102      	bne.n	80044d0 <HAL_RCC_OscConfig+0xe2c>
 80044ca:	4b54      	ldr	r3, [pc, #336]	; (800461c <HAL_RCC_OscConfig+0xf78>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	e027      	b.n	8004520 <HAL_RCC_OscConfig+0xe7c>
 80044d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80044d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	fa93 f2a3 	rbit	r2, r3
 80044ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044fa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80044fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004508:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	fa93 f2a3 	rbit	r2, r3
 8004512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004516:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	4b3f      	ldr	r3, [pc, #252]	; (800461c <HAL_RCC_OscConfig+0xf78>)
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004524:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004528:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800452c:	6011      	str	r1, [r2, #0]
 800452e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004532:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	fa92 f1a2 	rbit	r1, r2
 800453c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004540:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004544:	6011      	str	r1, [r2, #0]
  return result;
 8004546:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800454a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	fab2 f282 	clz	r2, r2
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	f042 0220 	orr.w	r2, r2, #32
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	f002 021f 	and.w	r2, r2, #31
 8004560:	2101      	movs	r1, #1
 8004562:	fa01 f202 	lsl.w	r2, r1, r2
 8004566:	4013      	ands	r3, r2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d082      	beq.n	8004472 <HAL_RCC_OscConfig+0xdce>
 800456c:	e0cf      	b.n	800470e <HAL_RCC_OscConfig+0x106a>
 800456e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004572:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004576:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800457a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004580:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	fa93 f2a3 	rbit	r2, r3
 800458a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800458e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004592:	601a      	str	r2, [r3, #0]
  return result;
 8004594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004598:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800459c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459e:	fab3 f383 	clz	r3, r3
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	461a      	mov	r2, r3
 80045b0:	2300      	movs	r3, #0
 80045b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b4:	f7fd feee 	bl	8002394 <HAL_GetTick>
 80045b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045bc:	e009      	b.n	80045d2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045be:	f7fd fee9 	bl	8002394 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e09e      	b.n	8004710 <HAL_RCC_OscConfig+0x106c>
 80045d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80045da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	fa93 f2a3 	rbit	r2, r3
 80045ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80045f6:	601a      	str	r2, [r3, #0]
  return result;
 80045f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045fc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004600:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004602:	fab3 f383 	clz	r3, r3
 8004606:	b2db      	uxtb	r3, r3
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	b2db      	uxtb	r3, r3
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b01      	cmp	r3, #1
 8004614:	d104      	bne.n	8004620 <HAL_RCC_OscConfig+0xf7c>
 8004616:	4b01      	ldr	r3, [pc, #4]	; (800461c <HAL_RCC_OscConfig+0xf78>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	e029      	b.n	8004670 <HAL_RCC_OscConfig+0xfcc>
 800461c:	40021000 	.word	0x40021000
 8004620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004624:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004628:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800462c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004632:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	fa93 f2a3 	rbit	r2, r3
 800463c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004640:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800464e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004658:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	fa93 f2a3 	rbit	r2, r3
 8004662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004666:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	4b2b      	ldr	r3, [pc, #172]	; (800471c <HAL_RCC_OscConfig+0x1078>)
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004674:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004678:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800467c:	6011      	str	r1, [r2, #0]
 800467e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004682:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	fa92 f1a2 	rbit	r1, r2
 800468c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004690:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004694:	6011      	str	r1, [r2, #0]
  return result;
 8004696:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800469a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	fab2 f282 	clz	r2, r2
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	f042 0220 	orr.w	r2, r2, #32
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	f002 021f 	and.w	r2, r2, #31
 80046b0:	2101      	movs	r1, #1
 80046b2:	fa01 f202 	lsl.w	r2, r1, r2
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d180      	bne.n	80045be <HAL_RCC_OscConfig+0xf1a>
 80046bc:	e027      	b.n	800470e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e01e      	b.n	8004710 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046d2:	4b12      	ldr	r3, [pc, #72]	; (800471c <HAL_RCC_OscConfig+0x1078>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80046da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80046de:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d10b      	bne.n	800470a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80046f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80046f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80046fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004706:	429a      	cmp	r2, r3
 8004708:	d001      	beq.n	800470e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40021000 	.word	0x40021000

08004720 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b09e      	sub	sp, #120	; 0x78
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e162      	b.n	80049fe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004738:	4b90      	ldr	r3, [pc, #576]	; (800497c <HAL_RCC_ClockConfig+0x25c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d910      	bls.n	8004768 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004746:	4b8d      	ldr	r3, [pc, #564]	; (800497c <HAL_RCC_ClockConfig+0x25c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f023 0207 	bic.w	r2, r3, #7
 800474e:	498b      	ldr	r1, [pc, #556]	; (800497c <HAL_RCC_ClockConfig+0x25c>)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	4313      	orrs	r3, r2
 8004754:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004756:	4b89      	ldr	r3, [pc, #548]	; (800497c <HAL_RCC_ClockConfig+0x25c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d001      	beq.n	8004768 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e14a      	b.n	80049fe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d008      	beq.n	8004786 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004774:	4b82      	ldr	r3, [pc, #520]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	497f      	ldr	r1, [pc, #508]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004782:	4313      	orrs	r3, r2
 8004784:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80dc 	beq.w	800494c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d13c      	bne.n	8004816 <HAL_RCC_ClockConfig+0xf6>
 800479c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047a4:	fa93 f3a3 	rbit	r3, r3
 80047a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80047aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ac:	fab3 f383 	clz	r3, r3
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d102      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xa6>
 80047c0:	4b6f      	ldr	r3, [pc, #444]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	e00f      	b.n	80047e6 <HAL_RCC_ClockConfig+0xc6>
 80047c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ce:	fa93 f3a3 	rbit	r3, r3
 80047d2:	667b      	str	r3, [r7, #100]	; 0x64
 80047d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047d8:	663b      	str	r3, [r7, #96]	; 0x60
 80047da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047dc:	fa93 f3a3 	rbit	r3, r3
 80047e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047e2:	4b67      	ldr	r3, [pc, #412]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80047ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047ee:	fa92 f2a2 	rbit	r2, r2
 80047f2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80047f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047f6:	fab2 f282 	clz	r2, r2
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	f042 0220 	orr.w	r2, r2, #32
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	f002 021f 	and.w	r2, r2, #31
 8004806:	2101      	movs	r1, #1
 8004808:	fa01 f202 	lsl.w	r2, r1, r2
 800480c:	4013      	ands	r3, r2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d17b      	bne.n	800490a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e0f3      	b.n	80049fe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b02      	cmp	r3, #2
 800481c:	d13c      	bne.n	8004898 <HAL_RCC_ClockConfig+0x178>
 800481e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004822:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004826:	fa93 f3a3 	rbit	r3, r3
 800482a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800482c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482e:	fab3 f383 	clz	r3, r3
 8004832:	b2db      	uxtb	r3, r3
 8004834:	095b      	lsrs	r3, r3, #5
 8004836:	b2db      	uxtb	r3, r3
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b01      	cmp	r3, #1
 8004840:	d102      	bne.n	8004848 <HAL_RCC_ClockConfig+0x128>
 8004842:	4b4f      	ldr	r3, [pc, #316]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	e00f      	b.n	8004868 <HAL_RCC_ClockConfig+0x148>
 8004848:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800484c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004850:	fa93 f3a3 	rbit	r3, r3
 8004854:	647b      	str	r3, [r7, #68]	; 0x44
 8004856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800485a:	643b      	str	r3, [r7, #64]	; 0x40
 800485c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800485e:	fa93 f3a3 	rbit	r3, r3
 8004862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004864:	4b46      	ldr	r3, [pc, #280]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800486c:	63ba      	str	r2, [r7, #56]	; 0x38
 800486e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004870:	fa92 f2a2 	rbit	r2, r2
 8004874:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004878:	fab2 f282 	clz	r2, r2
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	f042 0220 	orr.w	r2, r2, #32
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	f002 021f 	and.w	r2, r2, #31
 8004888:	2101      	movs	r1, #1
 800488a:	fa01 f202 	lsl.w	r2, r1, r2
 800488e:	4013      	ands	r3, r2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d13a      	bne.n	800490a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0b2      	b.n	80049fe <HAL_RCC_ClockConfig+0x2de>
 8004898:	2302      	movs	r3, #2
 800489a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	fa93 f3a3 	rbit	r3, r3
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80048a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a6:	fab3 f383 	clz	r3, r3
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d102      	bne.n	80048c0 <HAL_RCC_ClockConfig+0x1a0>
 80048ba:	4b31      	ldr	r3, [pc, #196]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	e00d      	b.n	80048dc <HAL_RCC_ClockConfig+0x1bc>
 80048c0:	2302      	movs	r3, #2
 80048c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	fa93 f3a3 	rbit	r3, r3
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
 80048cc:	2302      	movs	r3, #2
 80048ce:	623b      	str	r3, [r7, #32]
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	fa93 f3a3 	rbit	r3, r3
 80048d6:	61fb      	str	r3, [r7, #28]
 80048d8:	4b29      	ldr	r3, [pc, #164]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	2202      	movs	r2, #2
 80048de:	61ba      	str	r2, [r7, #24]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	fa92 f2a2 	rbit	r2, r2
 80048e6:	617a      	str	r2, [r7, #20]
  return result;
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	fab2 f282 	clz	r2, r2
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	f042 0220 	orr.w	r2, r2, #32
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	f002 021f 	and.w	r2, r2, #31
 80048fa:	2101      	movs	r1, #1
 80048fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004900:	4013      	ands	r3, r2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e079      	b.n	80049fe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800490a:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f023 0203 	bic.w	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	491a      	ldr	r1, [pc, #104]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800491c:	f7fd fd3a 	bl	8002394 <HAL_GetTick>
 8004920:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004922:	e00a      	b.n	800493a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004924:	f7fd fd36 	bl	8002394 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e061      	b.n	80049fe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493a:	4b11      	ldr	r3, [pc, #68]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f003 020c 	and.w	r2, r3, #12
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	429a      	cmp	r2, r3
 800494a:	d1eb      	bne.n	8004924 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800494c:	4b0b      	ldr	r3, [pc, #44]	; (800497c <HAL_RCC_ClockConfig+0x25c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d214      	bcs.n	8004984 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495a:	4b08      	ldr	r3, [pc, #32]	; (800497c <HAL_RCC_ClockConfig+0x25c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f023 0207 	bic.w	r2, r3, #7
 8004962:	4906      	ldr	r1, [pc, #24]	; (800497c <HAL_RCC_ClockConfig+0x25c>)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	4313      	orrs	r3, r2
 8004968:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800496a:	4b04      	ldr	r3, [pc, #16]	; (800497c <HAL_RCC_ClockConfig+0x25c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d005      	beq.n	8004984 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e040      	b.n	80049fe <HAL_RCC_ClockConfig+0x2de>
 800497c:	40022000 	.word	0x40022000
 8004980:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004990:	4b1d      	ldr	r3, [pc, #116]	; (8004a08 <HAL_RCC_ClockConfig+0x2e8>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	491a      	ldr	r1, [pc, #104]	; (8004a08 <HAL_RCC_ClockConfig+0x2e8>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d009      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ae:	4b16      	ldr	r3, [pc, #88]	; (8004a08 <HAL_RCC_ClockConfig+0x2e8>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	4912      	ldr	r1, [pc, #72]	; (8004a08 <HAL_RCC_ClockConfig+0x2e8>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80049c2:	f000 f829 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80049c6:	4601      	mov	r1, r0
 80049c8:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <HAL_RCC_ClockConfig+0x2e8>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049d0:	22f0      	movs	r2, #240	; 0xf0
 80049d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	fa92 f2a2 	rbit	r2, r2
 80049da:	60fa      	str	r2, [r7, #12]
  return result;
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	fab2 f282 	clz	r2, r2
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	40d3      	lsrs	r3, r2
 80049e6:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <HAL_RCC_ClockConfig+0x2ec>)
 80049e8:	5cd3      	ldrb	r3, [r2, r3]
 80049ea:	fa21 f303 	lsr.w	r3, r1, r3
 80049ee:	4a08      	ldr	r2, [pc, #32]	; (8004a10 <HAL_RCC_ClockConfig+0x2f0>)
 80049f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80049f2:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <HAL_RCC_ClockConfig+0x2f4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fd fc88 	bl	800230c <HAL_InitTick>
  
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3778      	adds	r7, #120	; 0x78
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	08006ff8 	.word	0x08006ff8
 8004a10:	2000003c 	.word	0x2000003c
 8004a14:	200000b0 	.word	0x200000b0

08004a18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b08b      	sub	sp, #44	; 0x2c
 8004a1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	2300      	movs	r3, #0
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	2300      	movs	r3, #0
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004a32:	4b29      	ldr	r3, [pc, #164]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f003 030c 	and.w	r3, r3, #12
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d002      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0x30>
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d003      	beq.n	8004a4e <HAL_RCC_GetSysClockFreq+0x36>
 8004a46:	e03c      	b.n	8004ac2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a48:	4b24      	ldr	r3, [pc, #144]	; (8004adc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a4a:	623b      	str	r3, [r7, #32]
      break;
 8004a4c:	e03c      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004a54:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004a58:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	fa92 f2a2 	rbit	r2, r2
 8004a60:	607a      	str	r2, [r7, #4]
  return result;
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	fab2 f282 	clz	r2, r2
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	40d3      	lsrs	r3, r2
 8004a6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004a6e:	5cd3      	ldrb	r3, [r2, r3]
 8004a70:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004a72:	4b19      	ldr	r3, [pc, #100]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	220f      	movs	r2, #15
 8004a7c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	fa92 f2a2 	rbit	r2, r2
 8004a84:	60fa      	str	r2, [r7, #12]
  return result;
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	fab2 f282 	clz	r2, r2
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	40d3      	lsrs	r3, r2
 8004a90:	4a14      	ldr	r2, [pc, #80]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004a92:	5cd3      	ldrb	r3, [r2, r3]
 8004a94:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d008      	beq.n	8004ab2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004aa0:	4a0e      	ldr	r2, [pc, #56]	; (8004adc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab0:	e004      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	4a0c      	ldr	r2, [pc, #48]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ab6:	fb02 f303 	mul.w	r3, r2, r3
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	623b      	str	r3, [r7, #32]
      break;
 8004ac0:	e002      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ac4:	623b      	str	r3, [r7, #32]
      break;
 8004ac6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	372c      	adds	r7, #44	; 0x2c
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	007a1200 	.word	0x007a1200
 8004ae0:	08007008 	.word	0x08007008
 8004ae4:	08007018 	.word	0x08007018
 8004ae8:	003d0900 	.word	0x003d0900

08004aec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b092      	sub	sp, #72	; 0x48
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004afc:	2300      	movs	r3, #0
 8004afe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 80d4 	beq.w	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b10:	4b4e      	ldr	r3, [pc, #312]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10e      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1c:	4b4b      	ldr	r3, [pc, #300]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	4a4a      	ldr	r2, [pc, #296]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b26:	61d3      	str	r3, [r2, #28]
 8004b28:	4b48      	ldr	r3, [pc, #288]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b30:	60bb      	str	r3, [r7, #8]
 8004b32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b34:	2301      	movs	r3, #1
 8004b36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3a:	4b45      	ldr	r3, [pc, #276]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d118      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b46:	4b42      	ldr	r3, [pc, #264]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a41      	ldr	r2, [pc, #260]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b52:	f7fd fc1f 	bl	8002394 <HAL_GetTick>
 8004b56:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b58:	e008      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5a:	f7fd fc1b 	bl	8002394 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b64      	cmp	r3, #100	; 0x64
 8004b66:	d901      	bls.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e169      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6c:	4b38      	ldr	r3, [pc, #224]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f0      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b78:	4b34      	ldr	r3, [pc, #208]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b80:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 8084 	beq.w	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d07c      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b98:	4b2c      	ldr	r3, [pc, #176]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ba6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004baa:	fa93 f3a3 	rbit	r3, r3
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bb2:	fab3 f383 	clz	r3, r3
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	461a      	mov	r2, r3
 8004bba:	4b26      	ldr	r3, [pc, #152]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bce:	fa93 f3a3 	rbit	r3, r3
 8004bd2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bd6:	fab3 f383 	clz	r3, r3
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	461a      	mov	r2, r3
 8004be6:	2300      	movs	r3, #0
 8004be8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bea:	4a18      	ldr	r2, [pc, #96]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d04b      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfa:	f7fd fbcb 	bl	8002394 <HAL_GetTick>
 8004bfe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c00:	e00a      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c02:	f7fd fbc7 	bl	8002394 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e113      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	fa93 f3a3 	rbit	r3, r3
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
 8004c24:	2302      	movs	r3, #2
 8004c26:	623b      	str	r3, [r7, #32]
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	fa93 f3a3 	rbit	r3, r3
 8004c2e:	61fb      	str	r3, [r7, #28]
  return result;
 8004c30:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c32:	fab3 f383 	clz	r3, r3
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f043 0302 	orr.w	r3, r3, #2
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d108      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004c46:	4b01      	ldr	r3, [pc, #4]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	e00d      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	40007000 	.word	0x40007000
 8004c54:	10908100 	.word	0x10908100
 8004c58:	2302      	movs	r3, #2
 8004c5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	fa93 f3a3 	rbit	r3, r3
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	4b78      	ldr	r3, [pc, #480]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	2202      	movs	r2, #2
 8004c6a:	613a      	str	r2, [r7, #16]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	fa92 f2a2 	rbit	r2, r2
 8004c72:	60fa      	str	r2, [r7, #12]
  return result;
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	fab2 f282 	clz	r2, r2
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	f002 021f 	and.w	r2, r2, #31
 8004c86:	2101      	movs	r1, #1
 8004c88:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0b7      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004c92:	4b6d      	ldr	r3, [pc, #436]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	496a      	ldr	r1, [pc, #424]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ca4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d105      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cac:	4b66      	ldr	r3, [pc, #408]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	4a65      	ldr	r2, [pc, #404]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d008      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cc4:	4b60      	ldr	r3, [pc, #384]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc8:	f023 0203 	bic.w	r2, r3, #3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	495d      	ldr	r1, [pc, #372]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d008      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ce2:	4b59      	ldr	r3, [pc, #356]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	4956      	ldr	r1, [pc, #344]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d00:	4b51      	ldr	r3, [pc, #324]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	494e      	ldr	r1, [pc, #312]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d008      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d1e:	4b4a      	ldr	r3, [pc, #296]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	f023 0210 	bic.w	r2, r3, #16
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	4947      	ldr	r1, [pc, #284]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d008      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004d3c:	4b42      	ldr	r3, [pc, #264]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	493f      	ldr	r1, [pc, #252]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d008      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d5a:	4b3b      	ldr	r3, [pc, #236]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5e:	f023 0220 	bic.w	r2, r3, #32
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	4938      	ldr	r1, [pc, #224]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d008      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d78:	4b33      	ldr	r3, [pc, #204]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	4930      	ldr	r1, [pc, #192]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d008      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d96:	4b2c      	ldr	r3, [pc, #176]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	4929      	ldr	r1, [pc, #164]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d008      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004db4:	4b24      	ldr	r3, [pc, #144]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	4921      	ldr	r1, [pc, #132]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d008      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004dd2:	4b1d      	ldr	r3, [pc, #116]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	491a      	ldr	r1, [pc, #104]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d008      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004df0:	4b15      	ldr	r3, [pc, #84]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	4912      	ldr	r1, [pc, #72]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d008      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004e0e:	4b0e      	ldr	r3, [pc, #56]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	490b      	ldr	r1, [pc, #44]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e38:	4903      	ldr	r1, [pc, #12]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3748      	adds	r7, #72	; 0x48
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40021000 	.word	0x40021000

08004e4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e09d      	b.n	8004f9a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d108      	bne.n	8004e78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e6e:	d009      	beq.n	8004e84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	61da      	str	r2, [r3, #28]
 8004e76:	e005      	b.n	8004e84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fc ffb0 	bl	8001e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ec4:	d902      	bls.n	8004ecc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	e002      	b.n	8004ed2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ed0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004eda:	d007      	beq.n	8004eec <HAL_SPI_Init+0xa0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ee4:	d002      	beq.n	8004eec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2e:	ea42 0103 	orr.w	r1, r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	0c1b      	lsrs	r3, r3, #16
 8004f48:	f003 0204 	and.w	r2, r3, #4
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f68:	ea42 0103 	orr.w	r1, r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69da      	ldr	r2, [r3, #28]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e049      	b.n	8005048 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7fc ff5d 	bl	8001e88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f000 fa49 	bl	8005478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d109      	bne.n	8005074 <HAL_TIM_PWM_Start+0x24>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b01      	cmp	r3, #1
 800506a:	bf14      	ite	ne
 800506c:	2301      	movne	r3, #1
 800506e:	2300      	moveq	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	e03c      	b.n	80050ee <HAL_TIM_PWM_Start+0x9e>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2b04      	cmp	r3, #4
 8005078:	d109      	bne.n	800508e <HAL_TIM_PWM_Start+0x3e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b01      	cmp	r3, #1
 8005084:	bf14      	ite	ne
 8005086:	2301      	movne	r3, #1
 8005088:	2300      	moveq	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	e02f      	b.n	80050ee <HAL_TIM_PWM_Start+0x9e>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b08      	cmp	r3, #8
 8005092:	d109      	bne.n	80050a8 <HAL_TIM_PWM_Start+0x58>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b01      	cmp	r3, #1
 800509e:	bf14      	ite	ne
 80050a0:	2301      	movne	r3, #1
 80050a2:	2300      	moveq	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	e022      	b.n	80050ee <HAL_TIM_PWM_Start+0x9e>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b0c      	cmp	r3, #12
 80050ac:	d109      	bne.n	80050c2 <HAL_TIM_PWM_Start+0x72>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	bf14      	ite	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	2300      	moveq	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	e015      	b.n	80050ee <HAL_TIM_PWM_Start+0x9e>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b10      	cmp	r3, #16
 80050c6:	d109      	bne.n	80050dc <HAL_TIM_PWM_Start+0x8c>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	bf14      	ite	ne
 80050d4:	2301      	movne	r3, #1
 80050d6:	2300      	moveq	r3, #0
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	e008      	b.n	80050ee <HAL_TIM_PWM_Start+0x9e>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	bf14      	ite	ne
 80050e8:	2301      	movne	r3, #1
 80050ea:	2300      	moveq	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e097      	b.n	8005226 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d104      	bne.n	8005106 <HAL_TIM_PWM_Start+0xb6>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005104:	e023      	b.n	800514e <HAL_TIM_PWM_Start+0xfe>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b04      	cmp	r3, #4
 800510a:	d104      	bne.n	8005116 <HAL_TIM_PWM_Start+0xc6>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005114:	e01b      	b.n	800514e <HAL_TIM_PWM_Start+0xfe>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b08      	cmp	r3, #8
 800511a:	d104      	bne.n	8005126 <HAL_TIM_PWM_Start+0xd6>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005124:	e013      	b.n	800514e <HAL_TIM_PWM_Start+0xfe>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b0c      	cmp	r3, #12
 800512a:	d104      	bne.n	8005136 <HAL_TIM_PWM_Start+0xe6>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005134:	e00b      	b.n	800514e <HAL_TIM_PWM_Start+0xfe>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b10      	cmp	r3, #16
 800513a:	d104      	bne.n	8005146 <HAL_TIM_PWM_Start+0xf6>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005144:	e003      	b.n	800514e <HAL_TIM_PWM_Start+0xfe>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2202      	movs	r2, #2
 800514a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2201      	movs	r2, #1
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fcf4 	bl	8005b44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a33      	ldr	r2, [pc, #204]	; (8005230 <HAL_TIM_PWM_Start+0x1e0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d013      	beq.n	800518e <HAL_TIM_PWM_Start+0x13e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a32      	ldr	r2, [pc, #200]	; (8005234 <HAL_TIM_PWM_Start+0x1e4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00e      	beq.n	800518e <HAL_TIM_PWM_Start+0x13e>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a30      	ldr	r2, [pc, #192]	; (8005238 <HAL_TIM_PWM_Start+0x1e8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d009      	beq.n	800518e <HAL_TIM_PWM_Start+0x13e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a2f      	ldr	r2, [pc, #188]	; (800523c <HAL_TIM_PWM_Start+0x1ec>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d004      	beq.n	800518e <HAL_TIM_PWM_Start+0x13e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a2d      	ldr	r2, [pc, #180]	; (8005240 <HAL_TIM_PWM_Start+0x1f0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d101      	bne.n	8005192 <HAL_TIM_PWM_Start+0x142>
 800518e:	2301      	movs	r3, #1
 8005190:	e000      	b.n	8005194 <HAL_TIM_PWM_Start+0x144>
 8005192:	2300      	movs	r3, #0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a20      	ldr	r2, [pc, #128]	; (8005230 <HAL_TIM_PWM_Start+0x1e0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d018      	beq.n	80051e4 <HAL_TIM_PWM_Start+0x194>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ba:	d013      	beq.n	80051e4 <HAL_TIM_PWM_Start+0x194>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a20      	ldr	r2, [pc, #128]	; (8005244 <HAL_TIM_PWM_Start+0x1f4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00e      	beq.n	80051e4 <HAL_TIM_PWM_Start+0x194>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a1f      	ldr	r2, [pc, #124]	; (8005248 <HAL_TIM_PWM_Start+0x1f8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d009      	beq.n	80051e4 <HAL_TIM_PWM_Start+0x194>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a17      	ldr	r2, [pc, #92]	; (8005234 <HAL_TIM_PWM_Start+0x1e4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d004      	beq.n	80051e4 <HAL_TIM_PWM_Start+0x194>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a16      	ldr	r2, [pc, #88]	; (8005238 <HAL_TIM_PWM_Start+0x1e8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d115      	bne.n	8005210 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	4b18      	ldr	r3, [pc, #96]	; (800524c <HAL_TIM_PWM_Start+0x1fc>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b06      	cmp	r3, #6
 80051f4:	d015      	beq.n	8005222 <HAL_TIM_PWM_Start+0x1d2>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fc:	d011      	beq.n	8005222 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0201 	orr.w	r2, r2, #1
 800520c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520e:	e008      	b.n	8005222 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	e000      	b.n	8005224 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005222:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40012c00 	.word	0x40012c00
 8005234:	40013400 	.word	0x40013400
 8005238:	40014000 	.word	0x40014000
 800523c:	40014400 	.word	0x40014400
 8005240:	40014800 	.word	0x40014800
 8005244:	40000400 	.word	0x40000400
 8005248:	40000800 	.word	0x40000800
 800524c:	00010007 	.word	0x00010007

08005250 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800526a:	2302      	movs	r3, #2
 800526c:	e0ff      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b14      	cmp	r3, #20
 800527a:	f200 80f0 	bhi.w	800545e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800527e:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005284:	080052d9 	.word	0x080052d9
 8005288:	0800545f 	.word	0x0800545f
 800528c:	0800545f 	.word	0x0800545f
 8005290:	0800545f 	.word	0x0800545f
 8005294:	08005319 	.word	0x08005319
 8005298:	0800545f 	.word	0x0800545f
 800529c:	0800545f 	.word	0x0800545f
 80052a0:	0800545f 	.word	0x0800545f
 80052a4:	0800535b 	.word	0x0800535b
 80052a8:	0800545f 	.word	0x0800545f
 80052ac:	0800545f 	.word	0x0800545f
 80052b0:	0800545f 	.word	0x0800545f
 80052b4:	0800539b 	.word	0x0800539b
 80052b8:	0800545f 	.word	0x0800545f
 80052bc:	0800545f 	.word	0x0800545f
 80052c0:	0800545f 	.word	0x0800545f
 80052c4:	080053dd 	.word	0x080053dd
 80052c8:	0800545f 	.word	0x0800545f
 80052cc:	0800545f 	.word	0x0800545f
 80052d0:	0800545f 	.word	0x0800545f
 80052d4:	0800541d 	.word	0x0800541d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 f95a 	bl	8005598 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0208 	orr.w	r2, r2, #8
 80052f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0204 	bic.w	r2, r2, #4
 8005302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6999      	ldr	r1, [r3, #24]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	691a      	ldr	r2, [r3, #16]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	619a      	str	r2, [r3, #24]
      break;
 8005316:	e0a5      	b.n	8005464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68b9      	ldr	r1, [r7, #8]
 800531e:	4618      	mov	r0, r3
 8005320:	f000 f9ca 	bl	80056b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6999      	ldr	r1, [r3, #24]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	021a      	lsls	r2, r3, #8
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	619a      	str	r2, [r3, #24]
      break;
 8005358:	e084      	b.n	8005464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fa33 	bl	80057cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69da      	ldr	r2, [r3, #28]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0208 	orr.w	r2, r2, #8
 8005374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69da      	ldr	r2, [r3, #28]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0204 	bic.w	r2, r2, #4
 8005384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69d9      	ldr	r1, [r3, #28]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	61da      	str	r2, [r3, #28]
      break;
 8005398:	e064      	b.n	8005464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68b9      	ldr	r1, [r7, #8]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fa9b 	bl	80058dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69da      	ldr	r2, [r3, #28]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69da      	ldr	r2, [r3, #28]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69d9      	ldr	r1, [r3, #28]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	021a      	lsls	r2, r3, #8
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	61da      	str	r2, [r3, #28]
      break;
 80053da:	e043      	b.n	8005464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fae4 	bl	80059b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0208 	orr.w	r2, r2, #8
 80053f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0204 	bic.w	r2, r2, #4
 8005406:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	691a      	ldr	r2, [r3, #16]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800541a:	e023      	b.n	8005464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fb28 	bl	8005a78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005436:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005446:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	021a      	lsls	r2, r3, #8
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800545c:	e002      	b.n	8005464 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	75fb      	strb	r3, [r7, #23]
      break;
 8005462:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800546c:	7dfb      	ldrb	r3, [r7, #23]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop

08005478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a3c      	ldr	r2, [pc, #240]	; (800557c <TIM_Base_SetConfig+0x104>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00f      	beq.n	80054b0 <TIM_Base_SetConfig+0x38>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005496:	d00b      	beq.n	80054b0 <TIM_Base_SetConfig+0x38>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a39      	ldr	r2, [pc, #228]	; (8005580 <TIM_Base_SetConfig+0x108>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d007      	beq.n	80054b0 <TIM_Base_SetConfig+0x38>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a38      	ldr	r2, [pc, #224]	; (8005584 <TIM_Base_SetConfig+0x10c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_Base_SetConfig+0x38>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a37      	ldr	r2, [pc, #220]	; (8005588 <TIM_Base_SetConfig+0x110>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d108      	bne.n	80054c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a2d      	ldr	r2, [pc, #180]	; (800557c <TIM_Base_SetConfig+0x104>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d01b      	beq.n	8005502 <TIM_Base_SetConfig+0x8a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d0:	d017      	beq.n	8005502 <TIM_Base_SetConfig+0x8a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a2a      	ldr	r2, [pc, #168]	; (8005580 <TIM_Base_SetConfig+0x108>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d013      	beq.n	8005502 <TIM_Base_SetConfig+0x8a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a29      	ldr	r2, [pc, #164]	; (8005584 <TIM_Base_SetConfig+0x10c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00f      	beq.n	8005502 <TIM_Base_SetConfig+0x8a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a28      	ldr	r2, [pc, #160]	; (8005588 <TIM_Base_SetConfig+0x110>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00b      	beq.n	8005502 <TIM_Base_SetConfig+0x8a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a27      	ldr	r2, [pc, #156]	; (800558c <TIM_Base_SetConfig+0x114>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d007      	beq.n	8005502 <TIM_Base_SetConfig+0x8a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a26      	ldr	r2, [pc, #152]	; (8005590 <TIM_Base_SetConfig+0x118>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d003      	beq.n	8005502 <TIM_Base_SetConfig+0x8a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a25      	ldr	r2, [pc, #148]	; (8005594 <TIM_Base_SetConfig+0x11c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d108      	bne.n	8005514 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a10      	ldr	r2, [pc, #64]	; (800557c <TIM_Base_SetConfig+0x104>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d00f      	beq.n	8005560 <TIM_Base_SetConfig+0xe8>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a11      	ldr	r2, [pc, #68]	; (8005588 <TIM_Base_SetConfig+0x110>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00b      	beq.n	8005560 <TIM_Base_SetConfig+0xe8>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a10      	ldr	r2, [pc, #64]	; (800558c <TIM_Base_SetConfig+0x114>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d007      	beq.n	8005560 <TIM_Base_SetConfig+0xe8>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a0f      	ldr	r2, [pc, #60]	; (8005590 <TIM_Base_SetConfig+0x118>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_Base_SetConfig+0xe8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a0e      	ldr	r2, [pc, #56]	; (8005594 <TIM_Base_SetConfig+0x11c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d103      	bne.n	8005568 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	615a      	str	r2, [r3, #20]
}
 800556e:	bf00      	nop
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40012c00 	.word	0x40012c00
 8005580:	40000400 	.word	0x40000400
 8005584:	40000800 	.word	0x40000800
 8005588:	40013400 	.word	0x40013400
 800558c:	40014000 	.word	0x40014000
 8005590:	40014400 	.word	0x40014400
 8005594:	40014800 	.word	0x40014800

08005598 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f023 0201 	bic.w	r2, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0303 	bic.w	r3, r3, #3
 80055d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f023 0302 	bic.w	r3, r3, #2
 80055e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a2c      	ldr	r2, [pc, #176]	; (80056a4 <TIM_OC1_SetConfig+0x10c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00f      	beq.n	8005618 <TIM_OC1_SetConfig+0x80>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a2b      	ldr	r2, [pc, #172]	; (80056a8 <TIM_OC1_SetConfig+0x110>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00b      	beq.n	8005618 <TIM_OC1_SetConfig+0x80>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a2a      	ldr	r2, [pc, #168]	; (80056ac <TIM_OC1_SetConfig+0x114>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d007      	beq.n	8005618 <TIM_OC1_SetConfig+0x80>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a29      	ldr	r2, [pc, #164]	; (80056b0 <TIM_OC1_SetConfig+0x118>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d003      	beq.n	8005618 <TIM_OC1_SetConfig+0x80>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a28      	ldr	r2, [pc, #160]	; (80056b4 <TIM_OC1_SetConfig+0x11c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d10c      	bne.n	8005632 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f023 0308 	bic.w	r3, r3, #8
 800561e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f023 0304 	bic.w	r3, r3, #4
 8005630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a1b      	ldr	r2, [pc, #108]	; (80056a4 <TIM_OC1_SetConfig+0x10c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00f      	beq.n	800565a <TIM_OC1_SetConfig+0xc2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a1a      	ldr	r2, [pc, #104]	; (80056a8 <TIM_OC1_SetConfig+0x110>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00b      	beq.n	800565a <TIM_OC1_SetConfig+0xc2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a19      	ldr	r2, [pc, #100]	; (80056ac <TIM_OC1_SetConfig+0x114>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d007      	beq.n	800565a <TIM_OC1_SetConfig+0xc2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a18      	ldr	r2, [pc, #96]	; (80056b0 <TIM_OC1_SetConfig+0x118>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d003      	beq.n	800565a <TIM_OC1_SetConfig+0xc2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a17      	ldr	r2, [pc, #92]	; (80056b4 <TIM_OC1_SetConfig+0x11c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d111      	bne.n	800567e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	621a      	str	r2, [r3, #32]
}
 8005698:	bf00      	nop
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	40012c00 	.word	0x40012c00
 80056a8:	40013400 	.word	0x40013400
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40014400 	.word	0x40014400
 80056b4:	40014800 	.word	0x40014800

080056b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f023 0210 	bic.w	r2, r3, #16
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f023 0320 	bic.w	r3, r3, #32
 8005706:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4313      	orrs	r3, r2
 8005712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a28      	ldr	r2, [pc, #160]	; (80057b8 <TIM_OC2_SetConfig+0x100>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d003      	beq.n	8005724 <TIM_OC2_SetConfig+0x6c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a27      	ldr	r2, [pc, #156]	; (80057bc <TIM_OC2_SetConfig+0x104>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d10d      	bne.n	8005740 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800572a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a1d      	ldr	r2, [pc, #116]	; (80057b8 <TIM_OC2_SetConfig+0x100>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00f      	beq.n	8005768 <TIM_OC2_SetConfig+0xb0>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a1c      	ldr	r2, [pc, #112]	; (80057bc <TIM_OC2_SetConfig+0x104>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d00b      	beq.n	8005768 <TIM_OC2_SetConfig+0xb0>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a1b      	ldr	r2, [pc, #108]	; (80057c0 <TIM_OC2_SetConfig+0x108>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d007      	beq.n	8005768 <TIM_OC2_SetConfig+0xb0>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a1a      	ldr	r2, [pc, #104]	; (80057c4 <TIM_OC2_SetConfig+0x10c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d003      	beq.n	8005768 <TIM_OC2_SetConfig+0xb0>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a19      	ldr	r2, [pc, #100]	; (80057c8 <TIM_OC2_SetConfig+0x110>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d113      	bne.n	8005790 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800576e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005776:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4313      	orrs	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	621a      	str	r2, [r3, #32]
}
 80057aa:	bf00      	nop
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40013400 	.word	0x40013400
 80057c0:	40014000 	.word	0x40014000
 80057c4:	40014400 	.word	0x40014400
 80057c8:	40014800 	.word	0x40014800

080057cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0303 	bic.w	r3, r3, #3
 8005806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a27      	ldr	r2, [pc, #156]	; (80058c8 <TIM_OC3_SetConfig+0xfc>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d003      	beq.n	8005836 <TIM_OC3_SetConfig+0x6a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a26      	ldr	r2, [pc, #152]	; (80058cc <TIM_OC3_SetConfig+0x100>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d10d      	bne.n	8005852 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800583c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005850:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a1c      	ldr	r2, [pc, #112]	; (80058c8 <TIM_OC3_SetConfig+0xfc>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00f      	beq.n	800587a <TIM_OC3_SetConfig+0xae>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a1b      	ldr	r2, [pc, #108]	; (80058cc <TIM_OC3_SetConfig+0x100>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00b      	beq.n	800587a <TIM_OC3_SetConfig+0xae>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a1a      	ldr	r2, [pc, #104]	; (80058d0 <TIM_OC3_SetConfig+0x104>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d007      	beq.n	800587a <TIM_OC3_SetConfig+0xae>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a19      	ldr	r2, [pc, #100]	; (80058d4 <TIM_OC3_SetConfig+0x108>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d003      	beq.n	800587a <TIM_OC3_SetConfig+0xae>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a18      	ldr	r2, [pc, #96]	; (80058d8 <TIM_OC3_SetConfig+0x10c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d113      	bne.n	80058a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4313      	orrs	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	621a      	str	r2, [r3, #32]
}
 80058bc:	bf00      	nop
 80058be:	371c      	adds	r7, #28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	40012c00 	.word	0x40012c00
 80058cc:	40013400 	.word	0x40013400
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40014400 	.word	0x40014400
 80058d8:	40014800 	.word	0x40014800

080058dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800590a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800590e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800592a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	031b      	lsls	r3, r3, #12
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a18      	ldr	r2, [pc, #96]	; (800599c <TIM_OC4_SetConfig+0xc0>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d00f      	beq.n	8005960 <TIM_OC4_SetConfig+0x84>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a17      	ldr	r2, [pc, #92]	; (80059a0 <TIM_OC4_SetConfig+0xc4>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00b      	beq.n	8005960 <TIM_OC4_SetConfig+0x84>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a16      	ldr	r2, [pc, #88]	; (80059a4 <TIM_OC4_SetConfig+0xc8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d007      	beq.n	8005960 <TIM_OC4_SetConfig+0x84>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a15      	ldr	r2, [pc, #84]	; (80059a8 <TIM_OC4_SetConfig+0xcc>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d003      	beq.n	8005960 <TIM_OC4_SetConfig+0x84>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a14      	ldr	r2, [pc, #80]	; (80059ac <TIM_OC4_SetConfig+0xd0>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d109      	bne.n	8005974 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005966:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	019b      	lsls	r3, r3, #6
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	621a      	str	r2, [r3, #32]
}
 800598e:	bf00      	nop
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	40012c00 	.word	0x40012c00
 80059a0:	40013400 	.word	0x40013400
 80059a4:	40014000 	.word	0x40014000
 80059a8:	40014400 	.word	0x40014400
 80059ac:	40014800 	.word	0x40014800

080059b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80059f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	041b      	lsls	r3, r3, #16
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a17      	ldr	r2, [pc, #92]	; (8005a64 <TIM_OC5_SetConfig+0xb4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00f      	beq.n	8005a2a <TIM_OC5_SetConfig+0x7a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a16      	ldr	r2, [pc, #88]	; (8005a68 <TIM_OC5_SetConfig+0xb8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00b      	beq.n	8005a2a <TIM_OC5_SetConfig+0x7a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a15      	ldr	r2, [pc, #84]	; (8005a6c <TIM_OC5_SetConfig+0xbc>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d007      	beq.n	8005a2a <TIM_OC5_SetConfig+0x7a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a14      	ldr	r2, [pc, #80]	; (8005a70 <TIM_OC5_SetConfig+0xc0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d003      	beq.n	8005a2a <TIM_OC5_SetConfig+0x7a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a13      	ldr	r2, [pc, #76]	; (8005a74 <TIM_OC5_SetConfig+0xc4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d109      	bne.n	8005a3e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	021b      	lsls	r3, r3, #8
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	621a      	str	r2, [r3, #32]
}
 8005a58:	bf00      	nop
 8005a5a:	371c      	adds	r7, #28
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	40012c00 	.word	0x40012c00
 8005a68:	40013400 	.word	0x40013400
 8005a6c:	40014000 	.word	0x40014000
 8005a70:	40014400 	.word	0x40014400
 8005a74:	40014800 	.word	0x40014800

08005a78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	021b      	lsls	r3, r3, #8
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005abe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	051b      	lsls	r3, r3, #20
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a18      	ldr	r2, [pc, #96]	; (8005b30 <TIM_OC6_SetConfig+0xb8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00f      	beq.n	8005af4 <TIM_OC6_SetConfig+0x7c>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a17      	ldr	r2, [pc, #92]	; (8005b34 <TIM_OC6_SetConfig+0xbc>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d00b      	beq.n	8005af4 <TIM_OC6_SetConfig+0x7c>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a16      	ldr	r2, [pc, #88]	; (8005b38 <TIM_OC6_SetConfig+0xc0>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d007      	beq.n	8005af4 <TIM_OC6_SetConfig+0x7c>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a15      	ldr	r2, [pc, #84]	; (8005b3c <TIM_OC6_SetConfig+0xc4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_OC6_SetConfig+0x7c>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a14      	ldr	r2, [pc, #80]	; (8005b40 <TIM_OC6_SetConfig+0xc8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d109      	bne.n	8005b08 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005afa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	029b      	lsls	r3, r3, #10
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	621a      	str	r2, [r3, #32]
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40012c00 	.word	0x40012c00
 8005b34:	40013400 	.word	0x40013400
 8005b38:	40014000 	.word	0x40014000
 8005b3c:	40014400 	.word	0x40014400
 8005b40:	40014800 	.word	0x40014800

08005b44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f003 031f 	and.w	r3, r3, #31
 8005b56:	2201      	movs	r2, #1
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a1a      	ldr	r2, [r3, #32]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	43db      	mvns	r3, r3
 8005b66:	401a      	ands	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a1a      	ldr	r2, [r3, #32]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f003 031f 	and.w	r3, r3, #31
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	621a      	str	r2, [r3, #32]
}
 8005b82:	bf00      	nop
 8005b84:	371c      	adds	r7, #28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
	...

08005b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e063      	b.n	8005c70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a2b      	ldr	r2, [pc, #172]	; (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a2a      	ldr	r2, [pc, #168]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d108      	bne.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005be2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1b      	ldr	r2, [pc, #108]	; (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d018      	beq.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c1a:	d013      	beq.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00e      	beq.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d009      	beq.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a12      	ldr	r2, [pc, #72]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d004      	beq.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a13      	ldr	r2, [pc, #76]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d10c      	bne.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	40012c00 	.word	0x40012c00
 8005c80:	40013400 	.word	0x40013400
 8005c84:	40000400 	.word	0x40000400
 8005c88:	40000800 	.word	0x40000800
 8005c8c:	40014000 	.word	0x40014000

08005c90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c98:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005c9c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	43db      	mvns	r3, r3
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	4013      	ands	r3, r2
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	f107 0014 	add.w	r0, r7, #20
 8005cd4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	b004      	add	sp, #16
 8005d06:	4770      	bx	lr

08005d08 <__errno>:
 8005d08:	4b01      	ldr	r3, [pc, #4]	; (8005d10 <__errno+0x8>)
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	200000b8 	.word	0x200000b8

08005d14 <__libc_init_array>:
 8005d14:	b570      	push	{r4, r5, r6, lr}
 8005d16:	4d0d      	ldr	r5, [pc, #52]	; (8005d4c <__libc_init_array+0x38>)
 8005d18:	4c0d      	ldr	r4, [pc, #52]	; (8005d50 <__libc_init_array+0x3c>)
 8005d1a:	1b64      	subs	r4, r4, r5
 8005d1c:	10a4      	asrs	r4, r4, #2
 8005d1e:	2600      	movs	r6, #0
 8005d20:	42a6      	cmp	r6, r4
 8005d22:	d109      	bne.n	8005d38 <__libc_init_array+0x24>
 8005d24:	4d0b      	ldr	r5, [pc, #44]	; (8005d54 <__libc_init_array+0x40>)
 8005d26:	4c0c      	ldr	r4, [pc, #48]	; (8005d58 <__libc_init_array+0x44>)
 8005d28:	f001 f93e 	bl	8006fa8 <_init>
 8005d2c:	1b64      	subs	r4, r4, r5
 8005d2e:	10a4      	asrs	r4, r4, #2
 8005d30:	2600      	movs	r6, #0
 8005d32:	42a6      	cmp	r6, r4
 8005d34:	d105      	bne.n	8005d42 <__libc_init_array+0x2e>
 8005d36:	bd70      	pop	{r4, r5, r6, pc}
 8005d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d3c:	4798      	blx	r3
 8005d3e:	3601      	adds	r6, #1
 8005d40:	e7ee      	b.n	8005d20 <__libc_init_array+0xc>
 8005d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d46:	4798      	blx	r3
 8005d48:	3601      	adds	r6, #1
 8005d4a:	e7f2      	b.n	8005d32 <__libc_init_array+0x1e>
 8005d4c:	080070a0 	.word	0x080070a0
 8005d50:	080070a0 	.word	0x080070a0
 8005d54:	080070a0 	.word	0x080070a0
 8005d58:	080070a4 	.word	0x080070a4

08005d5c <memset>:
 8005d5c:	4402      	add	r2, r0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d100      	bne.n	8005d66 <memset+0xa>
 8005d64:	4770      	bx	lr
 8005d66:	f803 1b01 	strb.w	r1, [r3], #1
 8005d6a:	e7f9      	b.n	8005d60 <memset+0x4>

08005d6c <siprintf>:
 8005d6c:	b40e      	push	{r1, r2, r3}
 8005d6e:	b500      	push	{lr}
 8005d70:	b09c      	sub	sp, #112	; 0x70
 8005d72:	ab1d      	add	r3, sp, #116	; 0x74
 8005d74:	9002      	str	r0, [sp, #8]
 8005d76:	9006      	str	r0, [sp, #24]
 8005d78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d7c:	4809      	ldr	r0, [pc, #36]	; (8005da4 <siprintf+0x38>)
 8005d7e:	9107      	str	r1, [sp, #28]
 8005d80:	9104      	str	r1, [sp, #16]
 8005d82:	4909      	ldr	r1, [pc, #36]	; (8005da8 <siprintf+0x3c>)
 8005d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d88:	9105      	str	r1, [sp, #20]
 8005d8a:	6800      	ldr	r0, [r0, #0]
 8005d8c:	9301      	str	r3, [sp, #4]
 8005d8e:	a902      	add	r1, sp, #8
 8005d90:	f000 f868 	bl	8005e64 <_svfiprintf_r>
 8005d94:	9b02      	ldr	r3, [sp, #8]
 8005d96:	2200      	movs	r2, #0
 8005d98:	701a      	strb	r2, [r3, #0]
 8005d9a:	b01c      	add	sp, #112	; 0x70
 8005d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005da0:	b003      	add	sp, #12
 8005da2:	4770      	bx	lr
 8005da4:	200000b8 	.word	0x200000b8
 8005da8:	ffff0208 	.word	0xffff0208

08005dac <__ssputs_r>:
 8005dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db0:	688e      	ldr	r6, [r1, #8]
 8005db2:	429e      	cmp	r6, r3
 8005db4:	4682      	mov	sl, r0
 8005db6:	460c      	mov	r4, r1
 8005db8:	4690      	mov	r8, r2
 8005dba:	461f      	mov	r7, r3
 8005dbc:	d838      	bhi.n	8005e30 <__ssputs_r+0x84>
 8005dbe:	898a      	ldrh	r2, [r1, #12]
 8005dc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005dc4:	d032      	beq.n	8005e2c <__ssputs_r+0x80>
 8005dc6:	6825      	ldr	r5, [r4, #0]
 8005dc8:	6909      	ldr	r1, [r1, #16]
 8005dca:	eba5 0901 	sub.w	r9, r5, r1
 8005dce:	6965      	ldr	r5, [r4, #20]
 8005dd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005dd8:	3301      	adds	r3, #1
 8005dda:	444b      	add	r3, r9
 8005ddc:	106d      	asrs	r5, r5, #1
 8005dde:	429d      	cmp	r5, r3
 8005de0:	bf38      	it	cc
 8005de2:	461d      	movcc	r5, r3
 8005de4:	0553      	lsls	r3, r2, #21
 8005de6:	d531      	bpl.n	8005e4c <__ssputs_r+0xa0>
 8005de8:	4629      	mov	r1, r5
 8005dea:	f000 fb63 	bl	80064b4 <_malloc_r>
 8005dee:	4606      	mov	r6, r0
 8005df0:	b950      	cbnz	r0, 8005e08 <__ssputs_r+0x5c>
 8005df2:	230c      	movs	r3, #12
 8005df4:	f8ca 3000 	str.w	r3, [sl]
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dfe:	81a3      	strh	r3, [r4, #12]
 8005e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e08:	6921      	ldr	r1, [r4, #16]
 8005e0a:	464a      	mov	r2, r9
 8005e0c:	f000 fabe 	bl	800638c <memcpy>
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1a:	81a3      	strh	r3, [r4, #12]
 8005e1c:	6126      	str	r6, [r4, #16]
 8005e1e:	6165      	str	r5, [r4, #20]
 8005e20:	444e      	add	r6, r9
 8005e22:	eba5 0509 	sub.w	r5, r5, r9
 8005e26:	6026      	str	r6, [r4, #0]
 8005e28:	60a5      	str	r5, [r4, #8]
 8005e2a:	463e      	mov	r6, r7
 8005e2c:	42be      	cmp	r6, r7
 8005e2e:	d900      	bls.n	8005e32 <__ssputs_r+0x86>
 8005e30:	463e      	mov	r6, r7
 8005e32:	6820      	ldr	r0, [r4, #0]
 8005e34:	4632      	mov	r2, r6
 8005e36:	4641      	mov	r1, r8
 8005e38:	f000 fab6 	bl	80063a8 <memmove>
 8005e3c:	68a3      	ldr	r3, [r4, #8]
 8005e3e:	1b9b      	subs	r3, r3, r6
 8005e40:	60a3      	str	r3, [r4, #8]
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	4433      	add	r3, r6
 8005e46:	6023      	str	r3, [r4, #0]
 8005e48:	2000      	movs	r0, #0
 8005e4a:	e7db      	b.n	8005e04 <__ssputs_r+0x58>
 8005e4c:	462a      	mov	r2, r5
 8005e4e:	f000 fba5 	bl	800659c <_realloc_r>
 8005e52:	4606      	mov	r6, r0
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d1e1      	bne.n	8005e1c <__ssputs_r+0x70>
 8005e58:	6921      	ldr	r1, [r4, #16]
 8005e5a:	4650      	mov	r0, sl
 8005e5c:	f000 fabe 	bl	80063dc <_free_r>
 8005e60:	e7c7      	b.n	8005df2 <__ssputs_r+0x46>
	...

08005e64 <_svfiprintf_r>:
 8005e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e68:	4698      	mov	r8, r3
 8005e6a:	898b      	ldrh	r3, [r1, #12]
 8005e6c:	061b      	lsls	r3, r3, #24
 8005e6e:	b09d      	sub	sp, #116	; 0x74
 8005e70:	4607      	mov	r7, r0
 8005e72:	460d      	mov	r5, r1
 8005e74:	4614      	mov	r4, r2
 8005e76:	d50e      	bpl.n	8005e96 <_svfiprintf_r+0x32>
 8005e78:	690b      	ldr	r3, [r1, #16]
 8005e7a:	b963      	cbnz	r3, 8005e96 <_svfiprintf_r+0x32>
 8005e7c:	2140      	movs	r1, #64	; 0x40
 8005e7e:	f000 fb19 	bl	80064b4 <_malloc_r>
 8005e82:	6028      	str	r0, [r5, #0]
 8005e84:	6128      	str	r0, [r5, #16]
 8005e86:	b920      	cbnz	r0, 8005e92 <_svfiprintf_r+0x2e>
 8005e88:	230c      	movs	r3, #12
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e90:	e0d1      	b.n	8006036 <_svfiprintf_r+0x1d2>
 8005e92:	2340      	movs	r3, #64	; 0x40
 8005e94:	616b      	str	r3, [r5, #20]
 8005e96:	2300      	movs	r3, #0
 8005e98:	9309      	str	r3, [sp, #36]	; 0x24
 8005e9a:	2320      	movs	r3, #32
 8005e9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ea0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ea4:	2330      	movs	r3, #48	; 0x30
 8005ea6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006050 <_svfiprintf_r+0x1ec>
 8005eaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eae:	f04f 0901 	mov.w	r9, #1
 8005eb2:	4623      	mov	r3, r4
 8005eb4:	469a      	mov	sl, r3
 8005eb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eba:	b10a      	cbz	r2, 8005ec0 <_svfiprintf_r+0x5c>
 8005ebc:	2a25      	cmp	r2, #37	; 0x25
 8005ebe:	d1f9      	bne.n	8005eb4 <_svfiprintf_r+0x50>
 8005ec0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ec4:	d00b      	beq.n	8005ede <_svfiprintf_r+0x7a>
 8005ec6:	465b      	mov	r3, fp
 8005ec8:	4622      	mov	r2, r4
 8005eca:	4629      	mov	r1, r5
 8005ecc:	4638      	mov	r0, r7
 8005ece:	f7ff ff6d 	bl	8005dac <__ssputs_r>
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	f000 80aa 	beq.w	800602c <_svfiprintf_r+0x1c8>
 8005ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eda:	445a      	add	r2, fp
 8005edc:	9209      	str	r2, [sp, #36]	; 0x24
 8005ede:	f89a 3000 	ldrb.w	r3, [sl]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80a2 	beq.w	800602c <_svfiprintf_r+0x1c8>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ef2:	f10a 0a01 	add.w	sl, sl, #1
 8005ef6:	9304      	str	r3, [sp, #16]
 8005ef8:	9307      	str	r3, [sp, #28]
 8005efa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005efe:	931a      	str	r3, [sp, #104]	; 0x68
 8005f00:	4654      	mov	r4, sl
 8005f02:	2205      	movs	r2, #5
 8005f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f08:	4851      	ldr	r0, [pc, #324]	; (8006050 <_svfiprintf_r+0x1ec>)
 8005f0a:	f7fa f961 	bl	80001d0 <memchr>
 8005f0e:	9a04      	ldr	r2, [sp, #16]
 8005f10:	b9d8      	cbnz	r0, 8005f4a <_svfiprintf_r+0xe6>
 8005f12:	06d0      	lsls	r0, r2, #27
 8005f14:	bf44      	itt	mi
 8005f16:	2320      	movmi	r3, #32
 8005f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f1c:	0711      	lsls	r1, r2, #28
 8005f1e:	bf44      	itt	mi
 8005f20:	232b      	movmi	r3, #43	; 0x2b
 8005f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f26:	f89a 3000 	ldrb.w	r3, [sl]
 8005f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f2c:	d015      	beq.n	8005f5a <_svfiprintf_r+0xf6>
 8005f2e:	9a07      	ldr	r2, [sp, #28]
 8005f30:	4654      	mov	r4, sl
 8005f32:	2000      	movs	r0, #0
 8005f34:	f04f 0c0a 	mov.w	ip, #10
 8005f38:	4621      	mov	r1, r4
 8005f3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f3e:	3b30      	subs	r3, #48	; 0x30
 8005f40:	2b09      	cmp	r3, #9
 8005f42:	d94e      	bls.n	8005fe2 <_svfiprintf_r+0x17e>
 8005f44:	b1b0      	cbz	r0, 8005f74 <_svfiprintf_r+0x110>
 8005f46:	9207      	str	r2, [sp, #28]
 8005f48:	e014      	b.n	8005f74 <_svfiprintf_r+0x110>
 8005f4a:	eba0 0308 	sub.w	r3, r0, r8
 8005f4e:	fa09 f303 	lsl.w	r3, r9, r3
 8005f52:	4313      	orrs	r3, r2
 8005f54:	9304      	str	r3, [sp, #16]
 8005f56:	46a2      	mov	sl, r4
 8005f58:	e7d2      	b.n	8005f00 <_svfiprintf_r+0x9c>
 8005f5a:	9b03      	ldr	r3, [sp, #12]
 8005f5c:	1d19      	adds	r1, r3, #4
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	9103      	str	r1, [sp, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	bfbb      	ittet	lt
 8005f66:	425b      	neglt	r3, r3
 8005f68:	f042 0202 	orrlt.w	r2, r2, #2
 8005f6c:	9307      	strge	r3, [sp, #28]
 8005f6e:	9307      	strlt	r3, [sp, #28]
 8005f70:	bfb8      	it	lt
 8005f72:	9204      	strlt	r2, [sp, #16]
 8005f74:	7823      	ldrb	r3, [r4, #0]
 8005f76:	2b2e      	cmp	r3, #46	; 0x2e
 8005f78:	d10c      	bne.n	8005f94 <_svfiprintf_r+0x130>
 8005f7a:	7863      	ldrb	r3, [r4, #1]
 8005f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f7e:	d135      	bne.n	8005fec <_svfiprintf_r+0x188>
 8005f80:	9b03      	ldr	r3, [sp, #12]
 8005f82:	1d1a      	adds	r2, r3, #4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	9203      	str	r2, [sp, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bfb8      	it	lt
 8005f8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005f90:	3402      	adds	r4, #2
 8005f92:	9305      	str	r3, [sp, #20]
 8005f94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006060 <_svfiprintf_r+0x1fc>
 8005f98:	7821      	ldrb	r1, [r4, #0]
 8005f9a:	2203      	movs	r2, #3
 8005f9c:	4650      	mov	r0, sl
 8005f9e:	f7fa f917 	bl	80001d0 <memchr>
 8005fa2:	b140      	cbz	r0, 8005fb6 <_svfiprintf_r+0x152>
 8005fa4:	2340      	movs	r3, #64	; 0x40
 8005fa6:	eba0 000a 	sub.w	r0, r0, sl
 8005faa:	fa03 f000 	lsl.w	r0, r3, r0
 8005fae:	9b04      	ldr	r3, [sp, #16]
 8005fb0:	4303      	orrs	r3, r0
 8005fb2:	3401      	adds	r4, #1
 8005fb4:	9304      	str	r3, [sp, #16]
 8005fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fba:	4826      	ldr	r0, [pc, #152]	; (8006054 <_svfiprintf_r+0x1f0>)
 8005fbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fc0:	2206      	movs	r2, #6
 8005fc2:	f7fa f905 	bl	80001d0 <memchr>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	d038      	beq.n	800603c <_svfiprintf_r+0x1d8>
 8005fca:	4b23      	ldr	r3, [pc, #140]	; (8006058 <_svfiprintf_r+0x1f4>)
 8005fcc:	bb1b      	cbnz	r3, 8006016 <_svfiprintf_r+0x1b2>
 8005fce:	9b03      	ldr	r3, [sp, #12]
 8005fd0:	3307      	adds	r3, #7
 8005fd2:	f023 0307 	bic.w	r3, r3, #7
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	9303      	str	r3, [sp, #12]
 8005fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fdc:	4433      	add	r3, r6
 8005fde:	9309      	str	r3, [sp, #36]	; 0x24
 8005fe0:	e767      	b.n	8005eb2 <_svfiprintf_r+0x4e>
 8005fe2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	2001      	movs	r0, #1
 8005fea:	e7a5      	b.n	8005f38 <_svfiprintf_r+0xd4>
 8005fec:	2300      	movs	r3, #0
 8005fee:	3401      	adds	r4, #1
 8005ff0:	9305      	str	r3, [sp, #20]
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	f04f 0c0a 	mov.w	ip, #10
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ffe:	3a30      	subs	r2, #48	; 0x30
 8006000:	2a09      	cmp	r2, #9
 8006002:	d903      	bls.n	800600c <_svfiprintf_r+0x1a8>
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0c5      	beq.n	8005f94 <_svfiprintf_r+0x130>
 8006008:	9105      	str	r1, [sp, #20]
 800600a:	e7c3      	b.n	8005f94 <_svfiprintf_r+0x130>
 800600c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006010:	4604      	mov	r4, r0
 8006012:	2301      	movs	r3, #1
 8006014:	e7f0      	b.n	8005ff8 <_svfiprintf_r+0x194>
 8006016:	ab03      	add	r3, sp, #12
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	462a      	mov	r2, r5
 800601c:	4b0f      	ldr	r3, [pc, #60]	; (800605c <_svfiprintf_r+0x1f8>)
 800601e:	a904      	add	r1, sp, #16
 8006020:	4638      	mov	r0, r7
 8006022:	f3af 8000 	nop.w
 8006026:	1c42      	adds	r2, r0, #1
 8006028:	4606      	mov	r6, r0
 800602a:	d1d6      	bne.n	8005fda <_svfiprintf_r+0x176>
 800602c:	89ab      	ldrh	r3, [r5, #12]
 800602e:	065b      	lsls	r3, r3, #25
 8006030:	f53f af2c 	bmi.w	8005e8c <_svfiprintf_r+0x28>
 8006034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006036:	b01d      	add	sp, #116	; 0x74
 8006038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800603c:	ab03      	add	r3, sp, #12
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	462a      	mov	r2, r5
 8006042:	4b06      	ldr	r3, [pc, #24]	; (800605c <_svfiprintf_r+0x1f8>)
 8006044:	a904      	add	r1, sp, #16
 8006046:	4638      	mov	r0, r7
 8006048:	f000 f87a 	bl	8006140 <_printf_i>
 800604c:	e7eb      	b.n	8006026 <_svfiprintf_r+0x1c2>
 800604e:	bf00      	nop
 8006050:	08007028 	.word	0x08007028
 8006054:	08007032 	.word	0x08007032
 8006058:	00000000 	.word	0x00000000
 800605c:	08005dad 	.word	0x08005dad
 8006060:	0800702e 	.word	0x0800702e

08006064 <_printf_common>:
 8006064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006068:	4616      	mov	r6, r2
 800606a:	4699      	mov	r9, r3
 800606c:	688a      	ldr	r2, [r1, #8]
 800606e:	690b      	ldr	r3, [r1, #16]
 8006070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006074:	4293      	cmp	r3, r2
 8006076:	bfb8      	it	lt
 8006078:	4613      	movlt	r3, r2
 800607a:	6033      	str	r3, [r6, #0]
 800607c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006080:	4607      	mov	r7, r0
 8006082:	460c      	mov	r4, r1
 8006084:	b10a      	cbz	r2, 800608a <_printf_common+0x26>
 8006086:	3301      	adds	r3, #1
 8006088:	6033      	str	r3, [r6, #0]
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	0699      	lsls	r1, r3, #26
 800608e:	bf42      	ittt	mi
 8006090:	6833      	ldrmi	r3, [r6, #0]
 8006092:	3302      	addmi	r3, #2
 8006094:	6033      	strmi	r3, [r6, #0]
 8006096:	6825      	ldr	r5, [r4, #0]
 8006098:	f015 0506 	ands.w	r5, r5, #6
 800609c:	d106      	bne.n	80060ac <_printf_common+0x48>
 800609e:	f104 0a19 	add.w	sl, r4, #25
 80060a2:	68e3      	ldr	r3, [r4, #12]
 80060a4:	6832      	ldr	r2, [r6, #0]
 80060a6:	1a9b      	subs	r3, r3, r2
 80060a8:	42ab      	cmp	r3, r5
 80060aa:	dc26      	bgt.n	80060fa <_printf_common+0x96>
 80060ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060b0:	1e13      	subs	r3, r2, #0
 80060b2:	6822      	ldr	r2, [r4, #0]
 80060b4:	bf18      	it	ne
 80060b6:	2301      	movne	r3, #1
 80060b8:	0692      	lsls	r2, r2, #26
 80060ba:	d42b      	bmi.n	8006114 <_printf_common+0xb0>
 80060bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060c0:	4649      	mov	r1, r9
 80060c2:	4638      	mov	r0, r7
 80060c4:	47c0      	blx	r8
 80060c6:	3001      	adds	r0, #1
 80060c8:	d01e      	beq.n	8006108 <_printf_common+0xa4>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	68e5      	ldr	r5, [r4, #12]
 80060ce:	6832      	ldr	r2, [r6, #0]
 80060d0:	f003 0306 	and.w	r3, r3, #6
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	bf08      	it	eq
 80060d8:	1aad      	subeq	r5, r5, r2
 80060da:	68a3      	ldr	r3, [r4, #8]
 80060dc:	6922      	ldr	r2, [r4, #16]
 80060de:	bf0c      	ite	eq
 80060e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060e4:	2500      	movne	r5, #0
 80060e6:	4293      	cmp	r3, r2
 80060e8:	bfc4      	itt	gt
 80060ea:	1a9b      	subgt	r3, r3, r2
 80060ec:	18ed      	addgt	r5, r5, r3
 80060ee:	2600      	movs	r6, #0
 80060f0:	341a      	adds	r4, #26
 80060f2:	42b5      	cmp	r5, r6
 80060f4:	d11a      	bne.n	800612c <_printf_common+0xc8>
 80060f6:	2000      	movs	r0, #0
 80060f8:	e008      	b.n	800610c <_printf_common+0xa8>
 80060fa:	2301      	movs	r3, #1
 80060fc:	4652      	mov	r2, sl
 80060fe:	4649      	mov	r1, r9
 8006100:	4638      	mov	r0, r7
 8006102:	47c0      	blx	r8
 8006104:	3001      	adds	r0, #1
 8006106:	d103      	bne.n	8006110 <_printf_common+0xac>
 8006108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800610c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006110:	3501      	adds	r5, #1
 8006112:	e7c6      	b.n	80060a2 <_printf_common+0x3e>
 8006114:	18e1      	adds	r1, r4, r3
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	2030      	movs	r0, #48	; 0x30
 800611a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800611e:	4422      	add	r2, r4
 8006120:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006124:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006128:	3302      	adds	r3, #2
 800612a:	e7c7      	b.n	80060bc <_printf_common+0x58>
 800612c:	2301      	movs	r3, #1
 800612e:	4622      	mov	r2, r4
 8006130:	4649      	mov	r1, r9
 8006132:	4638      	mov	r0, r7
 8006134:	47c0      	blx	r8
 8006136:	3001      	adds	r0, #1
 8006138:	d0e6      	beq.n	8006108 <_printf_common+0xa4>
 800613a:	3601      	adds	r6, #1
 800613c:	e7d9      	b.n	80060f2 <_printf_common+0x8e>
	...

08006140 <_printf_i>:
 8006140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006144:	7e0f      	ldrb	r7, [r1, #24]
 8006146:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006148:	2f78      	cmp	r7, #120	; 0x78
 800614a:	4691      	mov	r9, r2
 800614c:	4680      	mov	r8, r0
 800614e:	460c      	mov	r4, r1
 8006150:	469a      	mov	sl, r3
 8006152:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006156:	d807      	bhi.n	8006168 <_printf_i+0x28>
 8006158:	2f62      	cmp	r7, #98	; 0x62
 800615a:	d80a      	bhi.n	8006172 <_printf_i+0x32>
 800615c:	2f00      	cmp	r7, #0
 800615e:	f000 80d8 	beq.w	8006312 <_printf_i+0x1d2>
 8006162:	2f58      	cmp	r7, #88	; 0x58
 8006164:	f000 80a3 	beq.w	80062ae <_printf_i+0x16e>
 8006168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800616c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006170:	e03a      	b.n	80061e8 <_printf_i+0xa8>
 8006172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006176:	2b15      	cmp	r3, #21
 8006178:	d8f6      	bhi.n	8006168 <_printf_i+0x28>
 800617a:	a101      	add	r1, pc, #4	; (adr r1, 8006180 <_printf_i+0x40>)
 800617c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006180:	080061d9 	.word	0x080061d9
 8006184:	080061ed 	.word	0x080061ed
 8006188:	08006169 	.word	0x08006169
 800618c:	08006169 	.word	0x08006169
 8006190:	08006169 	.word	0x08006169
 8006194:	08006169 	.word	0x08006169
 8006198:	080061ed 	.word	0x080061ed
 800619c:	08006169 	.word	0x08006169
 80061a0:	08006169 	.word	0x08006169
 80061a4:	08006169 	.word	0x08006169
 80061a8:	08006169 	.word	0x08006169
 80061ac:	080062f9 	.word	0x080062f9
 80061b0:	0800621d 	.word	0x0800621d
 80061b4:	080062db 	.word	0x080062db
 80061b8:	08006169 	.word	0x08006169
 80061bc:	08006169 	.word	0x08006169
 80061c0:	0800631b 	.word	0x0800631b
 80061c4:	08006169 	.word	0x08006169
 80061c8:	0800621d 	.word	0x0800621d
 80061cc:	08006169 	.word	0x08006169
 80061d0:	08006169 	.word	0x08006169
 80061d4:	080062e3 	.word	0x080062e3
 80061d8:	682b      	ldr	r3, [r5, #0]
 80061da:	1d1a      	adds	r2, r3, #4
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	602a      	str	r2, [r5, #0]
 80061e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061e8:	2301      	movs	r3, #1
 80061ea:	e0a3      	b.n	8006334 <_printf_i+0x1f4>
 80061ec:	6820      	ldr	r0, [r4, #0]
 80061ee:	6829      	ldr	r1, [r5, #0]
 80061f0:	0606      	lsls	r6, r0, #24
 80061f2:	f101 0304 	add.w	r3, r1, #4
 80061f6:	d50a      	bpl.n	800620e <_printf_i+0xce>
 80061f8:	680e      	ldr	r6, [r1, #0]
 80061fa:	602b      	str	r3, [r5, #0]
 80061fc:	2e00      	cmp	r6, #0
 80061fe:	da03      	bge.n	8006208 <_printf_i+0xc8>
 8006200:	232d      	movs	r3, #45	; 0x2d
 8006202:	4276      	negs	r6, r6
 8006204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006208:	485e      	ldr	r0, [pc, #376]	; (8006384 <_printf_i+0x244>)
 800620a:	230a      	movs	r3, #10
 800620c:	e019      	b.n	8006242 <_printf_i+0x102>
 800620e:	680e      	ldr	r6, [r1, #0]
 8006210:	602b      	str	r3, [r5, #0]
 8006212:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006216:	bf18      	it	ne
 8006218:	b236      	sxthne	r6, r6
 800621a:	e7ef      	b.n	80061fc <_printf_i+0xbc>
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	6820      	ldr	r0, [r4, #0]
 8006220:	1d19      	adds	r1, r3, #4
 8006222:	6029      	str	r1, [r5, #0]
 8006224:	0601      	lsls	r1, r0, #24
 8006226:	d501      	bpl.n	800622c <_printf_i+0xec>
 8006228:	681e      	ldr	r6, [r3, #0]
 800622a:	e002      	b.n	8006232 <_printf_i+0xf2>
 800622c:	0646      	lsls	r6, r0, #25
 800622e:	d5fb      	bpl.n	8006228 <_printf_i+0xe8>
 8006230:	881e      	ldrh	r6, [r3, #0]
 8006232:	4854      	ldr	r0, [pc, #336]	; (8006384 <_printf_i+0x244>)
 8006234:	2f6f      	cmp	r7, #111	; 0x6f
 8006236:	bf0c      	ite	eq
 8006238:	2308      	moveq	r3, #8
 800623a:	230a      	movne	r3, #10
 800623c:	2100      	movs	r1, #0
 800623e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006242:	6865      	ldr	r5, [r4, #4]
 8006244:	60a5      	str	r5, [r4, #8]
 8006246:	2d00      	cmp	r5, #0
 8006248:	bfa2      	ittt	ge
 800624a:	6821      	ldrge	r1, [r4, #0]
 800624c:	f021 0104 	bicge.w	r1, r1, #4
 8006250:	6021      	strge	r1, [r4, #0]
 8006252:	b90e      	cbnz	r6, 8006258 <_printf_i+0x118>
 8006254:	2d00      	cmp	r5, #0
 8006256:	d04d      	beq.n	80062f4 <_printf_i+0x1b4>
 8006258:	4615      	mov	r5, r2
 800625a:	fbb6 f1f3 	udiv	r1, r6, r3
 800625e:	fb03 6711 	mls	r7, r3, r1, r6
 8006262:	5dc7      	ldrb	r7, [r0, r7]
 8006264:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006268:	4637      	mov	r7, r6
 800626a:	42bb      	cmp	r3, r7
 800626c:	460e      	mov	r6, r1
 800626e:	d9f4      	bls.n	800625a <_printf_i+0x11a>
 8006270:	2b08      	cmp	r3, #8
 8006272:	d10b      	bne.n	800628c <_printf_i+0x14c>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	07de      	lsls	r6, r3, #31
 8006278:	d508      	bpl.n	800628c <_printf_i+0x14c>
 800627a:	6923      	ldr	r3, [r4, #16]
 800627c:	6861      	ldr	r1, [r4, #4]
 800627e:	4299      	cmp	r1, r3
 8006280:	bfde      	ittt	le
 8006282:	2330      	movle	r3, #48	; 0x30
 8006284:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006288:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800628c:	1b52      	subs	r2, r2, r5
 800628e:	6122      	str	r2, [r4, #16]
 8006290:	f8cd a000 	str.w	sl, [sp]
 8006294:	464b      	mov	r3, r9
 8006296:	aa03      	add	r2, sp, #12
 8006298:	4621      	mov	r1, r4
 800629a:	4640      	mov	r0, r8
 800629c:	f7ff fee2 	bl	8006064 <_printf_common>
 80062a0:	3001      	adds	r0, #1
 80062a2:	d14c      	bne.n	800633e <_printf_i+0x1fe>
 80062a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062a8:	b004      	add	sp, #16
 80062aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ae:	4835      	ldr	r0, [pc, #212]	; (8006384 <_printf_i+0x244>)
 80062b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062b4:	6829      	ldr	r1, [r5, #0]
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80062bc:	6029      	str	r1, [r5, #0]
 80062be:	061d      	lsls	r5, r3, #24
 80062c0:	d514      	bpl.n	80062ec <_printf_i+0x1ac>
 80062c2:	07df      	lsls	r7, r3, #31
 80062c4:	bf44      	itt	mi
 80062c6:	f043 0320 	orrmi.w	r3, r3, #32
 80062ca:	6023      	strmi	r3, [r4, #0]
 80062cc:	b91e      	cbnz	r6, 80062d6 <_printf_i+0x196>
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	f023 0320 	bic.w	r3, r3, #32
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	2310      	movs	r3, #16
 80062d8:	e7b0      	b.n	800623c <_printf_i+0xfc>
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	f043 0320 	orr.w	r3, r3, #32
 80062e0:	6023      	str	r3, [r4, #0]
 80062e2:	2378      	movs	r3, #120	; 0x78
 80062e4:	4828      	ldr	r0, [pc, #160]	; (8006388 <_printf_i+0x248>)
 80062e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062ea:	e7e3      	b.n	80062b4 <_printf_i+0x174>
 80062ec:	0659      	lsls	r1, r3, #25
 80062ee:	bf48      	it	mi
 80062f0:	b2b6      	uxthmi	r6, r6
 80062f2:	e7e6      	b.n	80062c2 <_printf_i+0x182>
 80062f4:	4615      	mov	r5, r2
 80062f6:	e7bb      	b.n	8006270 <_printf_i+0x130>
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	6826      	ldr	r6, [r4, #0]
 80062fc:	6961      	ldr	r1, [r4, #20]
 80062fe:	1d18      	adds	r0, r3, #4
 8006300:	6028      	str	r0, [r5, #0]
 8006302:	0635      	lsls	r5, r6, #24
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	d501      	bpl.n	800630c <_printf_i+0x1cc>
 8006308:	6019      	str	r1, [r3, #0]
 800630a:	e002      	b.n	8006312 <_printf_i+0x1d2>
 800630c:	0670      	lsls	r0, r6, #25
 800630e:	d5fb      	bpl.n	8006308 <_printf_i+0x1c8>
 8006310:	8019      	strh	r1, [r3, #0]
 8006312:	2300      	movs	r3, #0
 8006314:	6123      	str	r3, [r4, #16]
 8006316:	4615      	mov	r5, r2
 8006318:	e7ba      	b.n	8006290 <_printf_i+0x150>
 800631a:	682b      	ldr	r3, [r5, #0]
 800631c:	1d1a      	adds	r2, r3, #4
 800631e:	602a      	str	r2, [r5, #0]
 8006320:	681d      	ldr	r5, [r3, #0]
 8006322:	6862      	ldr	r2, [r4, #4]
 8006324:	2100      	movs	r1, #0
 8006326:	4628      	mov	r0, r5
 8006328:	f7f9 ff52 	bl	80001d0 <memchr>
 800632c:	b108      	cbz	r0, 8006332 <_printf_i+0x1f2>
 800632e:	1b40      	subs	r0, r0, r5
 8006330:	6060      	str	r0, [r4, #4]
 8006332:	6863      	ldr	r3, [r4, #4]
 8006334:	6123      	str	r3, [r4, #16]
 8006336:	2300      	movs	r3, #0
 8006338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800633c:	e7a8      	b.n	8006290 <_printf_i+0x150>
 800633e:	6923      	ldr	r3, [r4, #16]
 8006340:	462a      	mov	r2, r5
 8006342:	4649      	mov	r1, r9
 8006344:	4640      	mov	r0, r8
 8006346:	47d0      	blx	sl
 8006348:	3001      	adds	r0, #1
 800634a:	d0ab      	beq.n	80062a4 <_printf_i+0x164>
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	079b      	lsls	r3, r3, #30
 8006350:	d413      	bmi.n	800637a <_printf_i+0x23a>
 8006352:	68e0      	ldr	r0, [r4, #12]
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	4298      	cmp	r0, r3
 8006358:	bfb8      	it	lt
 800635a:	4618      	movlt	r0, r3
 800635c:	e7a4      	b.n	80062a8 <_printf_i+0x168>
 800635e:	2301      	movs	r3, #1
 8006360:	4632      	mov	r2, r6
 8006362:	4649      	mov	r1, r9
 8006364:	4640      	mov	r0, r8
 8006366:	47d0      	blx	sl
 8006368:	3001      	adds	r0, #1
 800636a:	d09b      	beq.n	80062a4 <_printf_i+0x164>
 800636c:	3501      	adds	r5, #1
 800636e:	68e3      	ldr	r3, [r4, #12]
 8006370:	9903      	ldr	r1, [sp, #12]
 8006372:	1a5b      	subs	r3, r3, r1
 8006374:	42ab      	cmp	r3, r5
 8006376:	dcf2      	bgt.n	800635e <_printf_i+0x21e>
 8006378:	e7eb      	b.n	8006352 <_printf_i+0x212>
 800637a:	2500      	movs	r5, #0
 800637c:	f104 0619 	add.w	r6, r4, #25
 8006380:	e7f5      	b.n	800636e <_printf_i+0x22e>
 8006382:	bf00      	nop
 8006384:	08007039 	.word	0x08007039
 8006388:	0800704a 	.word	0x0800704a

0800638c <memcpy>:
 800638c:	440a      	add	r2, r1
 800638e:	4291      	cmp	r1, r2
 8006390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006394:	d100      	bne.n	8006398 <memcpy+0xc>
 8006396:	4770      	bx	lr
 8006398:	b510      	push	{r4, lr}
 800639a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800639e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063a2:	4291      	cmp	r1, r2
 80063a4:	d1f9      	bne.n	800639a <memcpy+0xe>
 80063a6:	bd10      	pop	{r4, pc}

080063a8 <memmove>:
 80063a8:	4288      	cmp	r0, r1
 80063aa:	b510      	push	{r4, lr}
 80063ac:	eb01 0402 	add.w	r4, r1, r2
 80063b0:	d902      	bls.n	80063b8 <memmove+0x10>
 80063b2:	4284      	cmp	r4, r0
 80063b4:	4623      	mov	r3, r4
 80063b6:	d807      	bhi.n	80063c8 <memmove+0x20>
 80063b8:	1e43      	subs	r3, r0, #1
 80063ba:	42a1      	cmp	r1, r4
 80063bc:	d008      	beq.n	80063d0 <memmove+0x28>
 80063be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063c6:	e7f8      	b.n	80063ba <memmove+0x12>
 80063c8:	4402      	add	r2, r0
 80063ca:	4601      	mov	r1, r0
 80063cc:	428a      	cmp	r2, r1
 80063ce:	d100      	bne.n	80063d2 <memmove+0x2a>
 80063d0:	bd10      	pop	{r4, pc}
 80063d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063da:	e7f7      	b.n	80063cc <memmove+0x24>

080063dc <_free_r>:
 80063dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063de:	2900      	cmp	r1, #0
 80063e0:	d044      	beq.n	800646c <_free_r+0x90>
 80063e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063e6:	9001      	str	r0, [sp, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f1a1 0404 	sub.w	r4, r1, #4
 80063ee:	bfb8      	it	lt
 80063f0:	18e4      	addlt	r4, r4, r3
 80063f2:	f000 f913 	bl	800661c <__malloc_lock>
 80063f6:	4a1e      	ldr	r2, [pc, #120]	; (8006470 <_free_r+0x94>)
 80063f8:	9801      	ldr	r0, [sp, #4]
 80063fa:	6813      	ldr	r3, [r2, #0]
 80063fc:	b933      	cbnz	r3, 800640c <_free_r+0x30>
 80063fe:	6063      	str	r3, [r4, #4]
 8006400:	6014      	str	r4, [r2, #0]
 8006402:	b003      	add	sp, #12
 8006404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006408:	f000 b90e 	b.w	8006628 <__malloc_unlock>
 800640c:	42a3      	cmp	r3, r4
 800640e:	d908      	bls.n	8006422 <_free_r+0x46>
 8006410:	6825      	ldr	r5, [r4, #0]
 8006412:	1961      	adds	r1, r4, r5
 8006414:	428b      	cmp	r3, r1
 8006416:	bf01      	itttt	eq
 8006418:	6819      	ldreq	r1, [r3, #0]
 800641a:	685b      	ldreq	r3, [r3, #4]
 800641c:	1949      	addeq	r1, r1, r5
 800641e:	6021      	streq	r1, [r4, #0]
 8006420:	e7ed      	b.n	80063fe <_free_r+0x22>
 8006422:	461a      	mov	r2, r3
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	b10b      	cbz	r3, 800642c <_free_r+0x50>
 8006428:	42a3      	cmp	r3, r4
 800642a:	d9fa      	bls.n	8006422 <_free_r+0x46>
 800642c:	6811      	ldr	r1, [r2, #0]
 800642e:	1855      	adds	r5, r2, r1
 8006430:	42a5      	cmp	r5, r4
 8006432:	d10b      	bne.n	800644c <_free_r+0x70>
 8006434:	6824      	ldr	r4, [r4, #0]
 8006436:	4421      	add	r1, r4
 8006438:	1854      	adds	r4, r2, r1
 800643a:	42a3      	cmp	r3, r4
 800643c:	6011      	str	r1, [r2, #0]
 800643e:	d1e0      	bne.n	8006402 <_free_r+0x26>
 8006440:	681c      	ldr	r4, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	6053      	str	r3, [r2, #4]
 8006446:	4421      	add	r1, r4
 8006448:	6011      	str	r1, [r2, #0]
 800644a:	e7da      	b.n	8006402 <_free_r+0x26>
 800644c:	d902      	bls.n	8006454 <_free_r+0x78>
 800644e:	230c      	movs	r3, #12
 8006450:	6003      	str	r3, [r0, #0]
 8006452:	e7d6      	b.n	8006402 <_free_r+0x26>
 8006454:	6825      	ldr	r5, [r4, #0]
 8006456:	1961      	adds	r1, r4, r5
 8006458:	428b      	cmp	r3, r1
 800645a:	bf04      	itt	eq
 800645c:	6819      	ldreq	r1, [r3, #0]
 800645e:	685b      	ldreq	r3, [r3, #4]
 8006460:	6063      	str	r3, [r4, #4]
 8006462:	bf04      	itt	eq
 8006464:	1949      	addeq	r1, r1, r5
 8006466:	6021      	streq	r1, [r4, #0]
 8006468:	6054      	str	r4, [r2, #4]
 800646a:	e7ca      	b.n	8006402 <_free_r+0x26>
 800646c:	b003      	add	sp, #12
 800646e:	bd30      	pop	{r4, r5, pc}
 8006470:	20000568 	.word	0x20000568

08006474 <sbrk_aligned>:
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	4e0e      	ldr	r6, [pc, #56]	; (80064b0 <sbrk_aligned+0x3c>)
 8006478:	460c      	mov	r4, r1
 800647a:	6831      	ldr	r1, [r6, #0]
 800647c:	4605      	mov	r5, r0
 800647e:	b911      	cbnz	r1, 8006486 <sbrk_aligned+0x12>
 8006480:	f000 f8bc 	bl	80065fc <_sbrk_r>
 8006484:	6030      	str	r0, [r6, #0]
 8006486:	4621      	mov	r1, r4
 8006488:	4628      	mov	r0, r5
 800648a:	f000 f8b7 	bl	80065fc <_sbrk_r>
 800648e:	1c43      	adds	r3, r0, #1
 8006490:	d00a      	beq.n	80064a8 <sbrk_aligned+0x34>
 8006492:	1cc4      	adds	r4, r0, #3
 8006494:	f024 0403 	bic.w	r4, r4, #3
 8006498:	42a0      	cmp	r0, r4
 800649a:	d007      	beq.n	80064ac <sbrk_aligned+0x38>
 800649c:	1a21      	subs	r1, r4, r0
 800649e:	4628      	mov	r0, r5
 80064a0:	f000 f8ac 	bl	80065fc <_sbrk_r>
 80064a4:	3001      	adds	r0, #1
 80064a6:	d101      	bne.n	80064ac <sbrk_aligned+0x38>
 80064a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80064ac:	4620      	mov	r0, r4
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
 80064b0:	2000056c 	.word	0x2000056c

080064b4 <_malloc_r>:
 80064b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b8:	1ccd      	adds	r5, r1, #3
 80064ba:	f025 0503 	bic.w	r5, r5, #3
 80064be:	3508      	adds	r5, #8
 80064c0:	2d0c      	cmp	r5, #12
 80064c2:	bf38      	it	cc
 80064c4:	250c      	movcc	r5, #12
 80064c6:	2d00      	cmp	r5, #0
 80064c8:	4607      	mov	r7, r0
 80064ca:	db01      	blt.n	80064d0 <_malloc_r+0x1c>
 80064cc:	42a9      	cmp	r1, r5
 80064ce:	d905      	bls.n	80064dc <_malloc_r+0x28>
 80064d0:	230c      	movs	r3, #12
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	2600      	movs	r6, #0
 80064d6:	4630      	mov	r0, r6
 80064d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064dc:	4e2e      	ldr	r6, [pc, #184]	; (8006598 <_malloc_r+0xe4>)
 80064de:	f000 f89d 	bl	800661c <__malloc_lock>
 80064e2:	6833      	ldr	r3, [r6, #0]
 80064e4:	461c      	mov	r4, r3
 80064e6:	bb34      	cbnz	r4, 8006536 <_malloc_r+0x82>
 80064e8:	4629      	mov	r1, r5
 80064ea:	4638      	mov	r0, r7
 80064ec:	f7ff ffc2 	bl	8006474 <sbrk_aligned>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	4604      	mov	r4, r0
 80064f4:	d14d      	bne.n	8006592 <_malloc_r+0xde>
 80064f6:	6834      	ldr	r4, [r6, #0]
 80064f8:	4626      	mov	r6, r4
 80064fa:	2e00      	cmp	r6, #0
 80064fc:	d140      	bne.n	8006580 <_malloc_r+0xcc>
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	4631      	mov	r1, r6
 8006502:	4638      	mov	r0, r7
 8006504:	eb04 0803 	add.w	r8, r4, r3
 8006508:	f000 f878 	bl	80065fc <_sbrk_r>
 800650c:	4580      	cmp	r8, r0
 800650e:	d13a      	bne.n	8006586 <_malloc_r+0xd2>
 8006510:	6821      	ldr	r1, [r4, #0]
 8006512:	3503      	adds	r5, #3
 8006514:	1a6d      	subs	r5, r5, r1
 8006516:	f025 0503 	bic.w	r5, r5, #3
 800651a:	3508      	adds	r5, #8
 800651c:	2d0c      	cmp	r5, #12
 800651e:	bf38      	it	cc
 8006520:	250c      	movcc	r5, #12
 8006522:	4629      	mov	r1, r5
 8006524:	4638      	mov	r0, r7
 8006526:	f7ff ffa5 	bl	8006474 <sbrk_aligned>
 800652a:	3001      	adds	r0, #1
 800652c:	d02b      	beq.n	8006586 <_malloc_r+0xd2>
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	442b      	add	r3, r5
 8006532:	6023      	str	r3, [r4, #0]
 8006534:	e00e      	b.n	8006554 <_malloc_r+0xa0>
 8006536:	6822      	ldr	r2, [r4, #0]
 8006538:	1b52      	subs	r2, r2, r5
 800653a:	d41e      	bmi.n	800657a <_malloc_r+0xc6>
 800653c:	2a0b      	cmp	r2, #11
 800653e:	d916      	bls.n	800656e <_malloc_r+0xba>
 8006540:	1961      	adds	r1, r4, r5
 8006542:	42a3      	cmp	r3, r4
 8006544:	6025      	str	r5, [r4, #0]
 8006546:	bf18      	it	ne
 8006548:	6059      	strne	r1, [r3, #4]
 800654a:	6863      	ldr	r3, [r4, #4]
 800654c:	bf08      	it	eq
 800654e:	6031      	streq	r1, [r6, #0]
 8006550:	5162      	str	r2, [r4, r5]
 8006552:	604b      	str	r3, [r1, #4]
 8006554:	4638      	mov	r0, r7
 8006556:	f104 060b 	add.w	r6, r4, #11
 800655a:	f000 f865 	bl	8006628 <__malloc_unlock>
 800655e:	f026 0607 	bic.w	r6, r6, #7
 8006562:	1d23      	adds	r3, r4, #4
 8006564:	1af2      	subs	r2, r6, r3
 8006566:	d0b6      	beq.n	80064d6 <_malloc_r+0x22>
 8006568:	1b9b      	subs	r3, r3, r6
 800656a:	50a3      	str	r3, [r4, r2]
 800656c:	e7b3      	b.n	80064d6 <_malloc_r+0x22>
 800656e:	6862      	ldr	r2, [r4, #4]
 8006570:	42a3      	cmp	r3, r4
 8006572:	bf0c      	ite	eq
 8006574:	6032      	streq	r2, [r6, #0]
 8006576:	605a      	strne	r2, [r3, #4]
 8006578:	e7ec      	b.n	8006554 <_malloc_r+0xa0>
 800657a:	4623      	mov	r3, r4
 800657c:	6864      	ldr	r4, [r4, #4]
 800657e:	e7b2      	b.n	80064e6 <_malloc_r+0x32>
 8006580:	4634      	mov	r4, r6
 8006582:	6876      	ldr	r6, [r6, #4]
 8006584:	e7b9      	b.n	80064fa <_malloc_r+0x46>
 8006586:	230c      	movs	r3, #12
 8006588:	603b      	str	r3, [r7, #0]
 800658a:	4638      	mov	r0, r7
 800658c:	f000 f84c 	bl	8006628 <__malloc_unlock>
 8006590:	e7a1      	b.n	80064d6 <_malloc_r+0x22>
 8006592:	6025      	str	r5, [r4, #0]
 8006594:	e7de      	b.n	8006554 <_malloc_r+0xa0>
 8006596:	bf00      	nop
 8006598:	20000568 	.word	0x20000568

0800659c <_realloc_r>:
 800659c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a0:	4680      	mov	r8, r0
 80065a2:	4614      	mov	r4, r2
 80065a4:	460e      	mov	r6, r1
 80065a6:	b921      	cbnz	r1, 80065b2 <_realloc_r+0x16>
 80065a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065ac:	4611      	mov	r1, r2
 80065ae:	f7ff bf81 	b.w	80064b4 <_malloc_r>
 80065b2:	b92a      	cbnz	r2, 80065c0 <_realloc_r+0x24>
 80065b4:	f7ff ff12 	bl	80063dc <_free_r>
 80065b8:	4625      	mov	r5, r4
 80065ba:	4628      	mov	r0, r5
 80065bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065c0:	f000 f838 	bl	8006634 <_malloc_usable_size_r>
 80065c4:	4284      	cmp	r4, r0
 80065c6:	4607      	mov	r7, r0
 80065c8:	d802      	bhi.n	80065d0 <_realloc_r+0x34>
 80065ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065ce:	d812      	bhi.n	80065f6 <_realloc_r+0x5a>
 80065d0:	4621      	mov	r1, r4
 80065d2:	4640      	mov	r0, r8
 80065d4:	f7ff ff6e 	bl	80064b4 <_malloc_r>
 80065d8:	4605      	mov	r5, r0
 80065da:	2800      	cmp	r0, #0
 80065dc:	d0ed      	beq.n	80065ba <_realloc_r+0x1e>
 80065de:	42bc      	cmp	r4, r7
 80065e0:	4622      	mov	r2, r4
 80065e2:	4631      	mov	r1, r6
 80065e4:	bf28      	it	cs
 80065e6:	463a      	movcs	r2, r7
 80065e8:	f7ff fed0 	bl	800638c <memcpy>
 80065ec:	4631      	mov	r1, r6
 80065ee:	4640      	mov	r0, r8
 80065f0:	f7ff fef4 	bl	80063dc <_free_r>
 80065f4:	e7e1      	b.n	80065ba <_realloc_r+0x1e>
 80065f6:	4635      	mov	r5, r6
 80065f8:	e7df      	b.n	80065ba <_realloc_r+0x1e>
	...

080065fc <_sbrk_r>:
 80065fc:	b538      	push	{r3, r4, r5, lr}
 80065fe:	4d06      	ldr	r5, [pc, #24]	; (8006618 <_sbrk_r+0x1c>)
 8006600:	2300      	movs	r3, #0
 8006602:	4604      	mov	r4, r0
 8006604:	4608      	mov	r0, r1
 8006606:	602b      	str	r3, [r5, #0]
 8006608:	f7fb fd00 	bl	800200c <_sbrk>
 800660c:	1c43      	adds	r3, r0, #1
 800660e:	d102      	bne.n	8006616 <_sbrk_r+0x1a>
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	b103      	cbz	r3, 8006616 <_sbrk_r+0x1a>
 8006614:	6023      	str	r3, [r4, #0]
 8006616:	bd38      	pop	{r3, r4, r5, pc}
 8006618:	20000570 	.word	0x20000570

0800661c <__malloc_lock>:
 800661c:	4801      	ldr	r0, [pc, #4]	; (8006624 <__malloc_lock+0x8>)
 800661e:	f000 b811 	b.w	8006644 <__retarget_lock_acquire_recursive>
 8006622:	bf00      	nop
 8006624:	20000574 	.word	0x20000574

08006628 <__malloc_unlock>:
 8006628:	4801      	ldr	r0, [pc, #4]	; (8006630 <__malloc_unlock+0x8>)
 800662a:	f000 b80c 	b.w	8006646 <__retarget_lock_release_recursive>
 800662e:	bf00      	nop
 8006630:	20000574 	.word	0x20000574

08006634 <_malloc_usable_size_r>:
 8006634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006638:	1f18      	subs	r0, r3, #4
 800663a:	2b00      	cmp	r3, #0
 800663c:	bfbc      	itt	lt
 800663e:	580b      	ldrlt	r3, [r1, r0]
 8006640:	18c0      	addlt	r0, r0, r3
 8006642:	4770      	bx	lr

08006644 <__retarget_lock_acquire_recursive>:
 8006644:	4770      	bx	lr

08006646 <__retarget_lock_release_recursive>:
 8006646:	4770      	bx	lr

08006648 <atan>:
 8006648:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664c:	ec55 4b10 	vmov	r4, r5, d0
 8006650:	4bc3      	ldr	r3, [pc, #780]	; (8006960 <atan+0x318>)
 8006652:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006656:	429e      	cmp	r6, r3
 8006658:	46ab      	mov	fp, r5
 800665a:	dd18      	ble.n	800668e <atan+0x46>
 800665c:	4bc1      	ldr	r3, [pc, #772]	; (8006964 <atan+0x31c>)
 800665e:	429e      	cmp	r6, r3
 8006660:	dc01      	bgt.n	8006666 <atan+0x1e>
 8006662:	d109      	bne.n	8006678 <atan+0x30>
 8006664:	b144      	cbz	r4, 8006678 <atan+0x30>
 8006666:	4622      	mov	r2, r4
 8006668:	462b      	mov	r3, r5
 800666a:	4620      	mov	r0, r4
 800666c:	4629      	mov	r1, r5
 800666e:	f7f9 fe05 	bl	800027c <__adddf3>
 8006672:	4604      	mov	r4, r0
 8006674:	460d      	mov	r5, r1
 8006676:	e006      	b.n	8006686 <atan+0x3e>
 8006678:	f1bb 0f00 	cmp.w	fp, #0
 800667c:	f300 8131 	bgt.w	80068e2 <atan+0x29a>
 8006680:	a59b      	add	r5, pc, #620	; (adr r5, 80068f0 <atan+0x2a8>)
 8006682:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006686:	ec45 4b10 	vmov	d0, r4, r5
 800668a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800668e:	4bb6      	ldr	r3, [pc, #728]	; (8006968 <atan+0x320>)
 8006690:	429e      	cmp	r6, r3
 8006692:	dc14      	bgt.n	80066be <atan+0x76>
 8006694:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006698:	429e      	cmp	r6, r3
 800669a:	dc0d      	bgt.n	80066b8 <atan+0x70>
 800669c:	a396      	add	r3, pc, #600	; (adr r3, 80068f8 <atan+0x2b0>)
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	ee10 0a10 	vmov	r0, s0
 80066a6:	4629      	mov	r1, r5
 80066a8:	f7f9 fde8 	bl	800027c <__adddf3>
 80066ac:	4baf      	ldr	r3, [pc, #700]	; (800696c <atan+0x324>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	f7fa fa2a 	bl	8000b08 <__aeabi_dcmpgt>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d1e6      	bne.n	8006686 <atan+0x3e>
 80066b8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80066bc:	e02b      	b.n	8006716 <atan+0xce>
 80066be:	f000 f963 	bl	8006988 <fabs>
 80066c2:	4bab      	ldr	r3, [pc, #684]	; (8006970 <atan+0x328>)
 80066c4:	429e      	cmp	r6, r3
 80066c6:	ec55 4b10 	vmov	r4, r5, d0
 80066ca:	f300 80bf 	bgt.w	800684c <atan+0x204>
 80066ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80066d2:	429e      	cmp	r6, r3
 80066d4:	f300 80a0 	bgt.w	8006818 <atan+0x1d0>
 80066d8:	ee10 2a10 	vmov	r2, s0
 80066dc:	ee10 0a10 	vmov	r0, s0
 80066e0:	462b      	mov	r3, r5
 80066e2:	4629      	mov	r1, r5
 80066e4:	f7f9 fdca 	bl	800027c <__adddf3>
 80066e8:	4ba0      	ldr	r3, [pc, #640]	; (800696c <atan+0x324>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	f7f9 fdc4 	bl	8000278 <__aeabi_dsub>
 80066f0:	2200      	movs	r2, #0
 80066f2:	4606      	mov	r6, r0
 80066f4:	460f      	mov	r7, r1
 80066f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066fa:	4620      	mov	r0, r4
 80066fc:	4629      	mov	r1, r5
 80066fe:	f7f9 fdbd 	bl	800027c <__adddf3>
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	4630      	mov	r0, r6
 8006708:	4639      	mov	r1, r7
 800670a:	f7fa f897 	bl	800083c <__aeabi_ddiv>
 800670e:	f04f 0a00 	mov.w	sl, #0
 8006712:	4604      	mov	r4, r0
 8006714:	460d      	mov	r5, r1
 8006716:	4622      	mov	r2, r4
 8006718:	462b      	mov	r3, r5
 800671a:	4620      	mov	r0, r4
 800671c:	4629      	mov	r1, r5
 800671e:	f7f9 ff63 	bl	80005e8 <__aeabi_dmul>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	4680      	mov	r8, r0
 8006728:	4689      	mov	r9, r1
 800672a:	f7f9 ff5d 	bl	80005e8 <__aeabi_dmul>
 800672e:	a374      	add	r3, pc, #464	; (adr r3, 8006900 <atan+0x2b8>)
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	4606      	mov	r6, r0
 8006736:	460f      	mov	r7, r1
 8006738:	f7f9 ff56 	bl	80005e8 <__aeabi_dmul>
 800673c:	a372      	add	r3, pc, #456	; (adr r3, 8006908 <atan+0x2c0>)
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	f7f9 fd9b 	bl	800027c <__adddf3>
 8006746:	4632      	mov	r2, r6
 8006748:	463b      	mov	r3, r7
 800674a:	f7f9 ff4d 	bl	80005e8 <__aeabi_dmul>
 800674e:	a370      	add	r3, pc, #448	; (adr r3, 8006910 <atan+0x2c8>)
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	f7f9 fd92 	bl	800027c <__adddf3>
 8006758:	4632      	mov	r2, r6
 800675a:	463b      	mov	r3, r7
 800675c:	f7f9 ff44 	bl	80005e8 <__aeabi_dmul>
 8006760:	a36d      	add	r3, pc, #436	; (adr r3, 8006918 <atan+0x2d0>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f7f9 fd89 	bl	800027c <__adddf3>
 800676a:	4632      	mov	r2, r6
 800676c:	463b      	mov	r3, r7
 800676e:	f7f9 ff3b 	bl	80005e8 <__aeabi_dmul>
 8006772:	a36b      	add	r3, pc, #428	; (adr r3, 8006920 <atan+0x2d8>)
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f7f9 fd80 	bl	800027c <__adddf3>
 800677c:	4632      	mov	r2, r6
 800677e:	463b      	mov	r3, r7
 8006780:	f7f9 ff32 	bl	80005e8 <__aeabi_dmul>
 8006784:	a368      	add	r3, pc, #416	; (adr r3, 8006928 <atan+0x2e0>)
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	f7f9 fd77 	bl	800027c <__adddf3>
 800678e:	4642      	mov	r2, r8
 8006790:	464b      	mov	r3, r9
 8006792:	f7f9 ff29 	bl	80005e8 <__aeabi_dmul>
 8006796:	a366      	add	r3, pc, #408	; (adr r3, 8006930 <atan+0x2e8>)
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	4680      	mov	r8, r0
 800679e:	4689      	mov	r9, r1
 80067a0:	4630      	mov	r0, r6
 80067a2:	4639      	mov	r1, r7
 80067a4:	f7f9 ff20 	bl	80005e8 <__aeabi_dmul>
 80067a8:	a363      	add	r3, pc, #396	; (adr r3, 8006938 <atan+0x2f0>)
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f7f9 fd63 	bl	8000278 <__aeabi_dsub>
 80067b2:	4632      	mov	r2, r6
 80067b4:	463b      	mov	r3, r7
 80067b6:	f7f9 ff17 	bl	80005e8 <__aeabi_dmul>
 80067ba:	a361      	add	r3, pc, #388	; (adr r3, 8006940 <atan+0x2f8>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f7f9 fd5a 	bl	8000278 <__aeabi_dsub>
 80067c4:	4632      	mov	r2, r6
 80067c6:	463b      	mov	r3, r7
 80067c8:	f7f9 ff0e 	bl	80005e8 <__aeabi_dmul>
 80067cc:	a35e      	add	r3, pc, #376	; (adr r3, 8006948 <atan+0x300>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	f7f9 fd51 	bl	8000278 <__aeabi_dsub>
 80067d6:	4632      	mov	r2, r6
 80067d8:	463b      	mov	r3, r7
 80067da:	f7f9 ff05 	bl	80005e8 <__aeabi_dmul>
 80067de:	a35c      	add	r3, pc, #368	; (adr r3, 8006950 <atan+0x308>)
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	f7f9 fd48 	bl	8000278 <__aeabi_dsub>
 80067e8:	4632      	mov	r2, r6
 80067ea:	463b      	mov	r3, r7
 80067ec:	f7f9 fefc 	bl	80005e8 <__aeabi_dmul>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4640      	mov	r0, r8
 80067f6:	4649      	mov	r1, r9
 80067f8:	f7f9 fd40 	bl	800027c <__adddf3>
 80067fc:	4622      	mov	r2, r4
 80067fe:	462b      	mov	r3, r5
 8006800:	f7f9 fef2 	bl	80005e8 <__aeabi_dmul>
 8006804:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	d14b      	bne.n	80068a6 <atan+0x25e>
 800680e:	4620      	mov	r0, r4
 8006810:	4629      	mov	r1, r5
 8006812:	f7f9 fd31 	bl	8000278 <__aeabi_dsub>
 8006816:	e72c      	b.n	8006672 <atan+0x2a>
 8006818:	ee10 0a10 	vmov	r0, s0
 800681c:	4b53      	ldr	r3, [pc, #332]	; (800696c <atan+0x324>)
 800681e:	2200      	movs	r2, #0
 8006820:	4629      	mov	r1, r5
 8006822:	f7f9 fd29 	bl	8000278 <__aeabi_dsub>
 8006826:	4b51      	ldr	r3, [pc, #324]	; (800696c <atan+0x324>)
 8006828:	4606      	mov	r6, r0
 800682a:	460f      	mov	r7, r1
 800682c:	2200      	movs	r2, #0
 800682e:	4620      	mov	r0, r4
 8006830:	4629      	mov	r1, r5
 8006832:	f7f9 fd23 	bl	800027c <__adddf3>
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	4630      	mov	r0, r6
 800683c:	4639      	mov	r1, r7
 800683e:	f7f9 fffd 	bl	800083c <__aeabi_ddiv>
 8006842:	f04f 0a01 	mov.w	sl, #1
 8006846:	4604      	mov	r4, r0
 8006848:	460d      	mov	r5, r1
 800684a:	e764      	b.n	8006716 <atan+0xce>
 800684c:	4b49      	ldr	r3, [pc, #292]	; (8006974 <atan+0x32c>)
 800684e:	429e      	cmp	r6, r3
 8006850:	da1d      	bge.n	800688e <atan+0x246>
 8006852:	ee10 0a10 	vmov	r0, s0
 8006856:	4b48      	ldr	r3, [pc, #288]	; (8006978 <atan+0x330>)
 8006858:	2200      	movs	r2, #0
 800685a:	4629      	mov	r1, r5
 800685c:	f7f9 fd0c 	bl	8000278 <__aeabi_dsub>
 8006860:	4b45      	ldr	r3, [pc, #276]	; (8006978 <atan+0x330>)
 8006862:	4606      	mov	r6, r0
 8006864:	460f      	mov	r7, r1
 8006866:	2200      	movs	r2, #0
 8006868:	4620      	mov	r0, r4
 800686a:	4629      	mov	r1, r5
 800686c:	f7f9 febc 	bl	80005e8 <__aeabi_dmul>
 8006870:	4b3e      	ldr	r3, [pc, #248]	; (800696c <atan+0x324>)
 8006872:	2200      	movs	r2, #0
 8006874:	f7f9 fd02 	bl	800027c <__adddf3>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	4630      	mov	r0, r6
 800687e:	4639      	mov	r1, r7
 8006880:	f7f9 ffdc 	bl	800083c <__aeabi_ddiv>
 8006884:	f04f 0a02 	mov.w	sl, #2
 8006888:	4604      	mov	r4, r0
 800688a:	460d      	mov	r5, r1
 800688c:	e743      	b.n	8006716 <atan+0xce>
 800688e:	462b      	mov	r3, r5
 8006890:	ee10 2a10 	vmov	r2, s0
 8006894:	4939      	ldr	r1, [pc, #228]	; (800697c <atan+0x334>)
 8006896:	2000      	movs	r0, #0
 8006898:	f7f9 ffd0 	bl	800083c <__aeabi_ddiv>
 800689c:	f04f 0a03 	mov.w	sl, #3
 80068a0:	4604      	mov	r4, r0
 80068a2:	460d      	mov	r5, r1
 80068a4:	e737      	b.n	8006716 <atan+0xce>
 80068a6:	4b36      	ldr	r3, [pc, #216]	; (8006980 <atan+0x338>)
 80068a8:	4e36      	ldr	r6, [pc, #216]	; (8006984 <atan+0x33c>)
 80068aa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80068ae:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80068b2:	e9da 2300 	ldrd	r2, r3, [sl]
 80068b6:	f7f9 fcdf 	bl	8000278 <__aeabi_dsub>
 80068ba:	4622      	mov	r2, r4
 80068bc:	462b      	mov	r3, r5
 80068be:	f7f9 fcdb 	bl	8000278 <__aeabi_dsub>
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80068ca:	f7f9 fcd5 	bl	8000278 <__aeabi_dsub>
 80068ce:	f1bb 0f00 	cmp.w	fp, #0
 80068d2:	4604      	mov	r4, r0
 80068d4:	460d      	mov	r5, r1
 80068d6:	f6bf aed6 	bge.w	8006686 <atan+0x3e>
 80068da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068de:	461d      	mov	r5, r3
 80068e0:	e6d1      	b.n	8006686 <atan+0x3e>
 80068e2:	a51d      	add	r5, pc, #116	; (adr r5, 8006958 <atan+0x310>)
 80068e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80068e8:	e6cd      	b.n	8006686 <atan+0x3e>
 80068ea:	bf00      	nop
 80068ec:	f3af 8000 	nop.w
 80068f0:	54442d18 	.word	0x54442d18
 80068f4:	bff921fb 	.word	0xbff921fb
 80068f8:	8800759c 	.word	0x8800759c
 80068fc:	7e37e43c 	.word	0x7e37e43c
 8006900:	e322da11 	.word	0xe322da11
 8006904:	3f90ad3a 	.word	0x3f90ad3a
 8006908:	24760deb 	.word	0x24760deb
 800690c:	3fa97b4b 	.word	0x3fa97b4b
 8006910:	a0d03d51 	.word	0xa0d03d51
 8006914:	3fb10d66 	.word	0x3fb10d66
 8006918:	c54c206e 	.word	0xc54c206e
 800691c:	3fb745cd 	.word	0x3fb745cd
 8006920:	920083ff 	.word	0x920083ff
 8006924:	3fc24924 	.word	0x3fc24924
 8006928:	5555550d 	.word	0x5555550d
 800692c:	3fd55555 	.word	0x3fd55555
 8006930:	2c6a6c2f 	.word	0x2c6a6c2f
 8006934:	bfa2b444 	.word	0xbfa2b444
 8006938:	52defd9a 	.word	0x52defd9a
 800693c:	3fadde2d 	.word	0x3fadde2d
 8006940:	af749a6d 	.word	0xaf749a6d
 8006944:	3fb3b0f2 	.word	0x3fb3b0f2
 8006948:	fe231671 	.word	0xfe231671
 800694c:	3fbc71c6 	.word	0x3fbc71c6
 8006950:	9998ebc4 	.word	0x9998ebc4
 8006954:	3fc99999 	.word	0x3fc99999
 8006958:	54442d18 	.word	0x54442d18
 800695c:	3ff921fb 	.word	0x3ff921fb
 8006960:	440fffff 	.word	0x440fffff
 8006964:	7ff00000 	.word	0x7ff00000
 8006968:	3fdbffff 	.word	0x3fdbffff
 800696c:	3ff00000 	.word	0x3ff00000
 8006970:	3ff2ffff 	.word	0x3ff2ffff
 8006974:	40038000 	.word	0x40038000
 8006978:	3ff80000 	.word	0x3ff80000
 800697c:	bff00000 	.word	0xbff00000
 8006980:	08007080 	.word	0x08007080
 8006984:	08007060 	.word	0x08007060

08006988 <fabs>:
 8006988:	ec51 0b10 	vmov	r0, r1, d0
 800698c:	ee10 2a10 	vmov	r2, s0
 8006990:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006994:	ec43 2b10 	vmov	d0, r2, r3
 8006998:	4770      	bx	lr
	...

0800699c <asin>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	ed2d 8b02 	vpush	{d8}
 80069a2:	ec55 4b10 	vmov	r4, r5, d0
 80069a6:	f000 f82f 	bl	8006a08 <__ieee754_asin>
 80069aa:	4622      	mov	r2, r4
 80069ac:	462b      	mov	r3, r5
 80069ae:	4620      	mov	r0, r4
 80069b0:	4629      	mov	r1, r5
 80069b2:	eeb0 8a40 	vmov.f32	s16, s0
 80069b6:	eef0 8a60 	vmov.f32	s17, s1
 80069ba:	f7fa f8af 	bl	8000b1c <__aeabi_dcmpun>
 80069be:	b9a8      	cbnz	r0, 80069ec <asin+0x50>
 80069c0:	ec45 4b10 	vmov	d0, r4, r5
 80069c4:	f7ff ffe0 	bl	8006988 <fabs>
 80069c8:	4b0c      	ldr	r3, [pc, #48]	; (80069fc <asin+0x60>)
 80069ca:	ec51 0b10 	vmov	r0, r1, d0
 80069ce:	2200      	movs	r2, #0
 80069d0:	f7fa f89a 	bl	8000b08 <__aeabi_dcmpgt>
 80069d4:	b150      	cbz	r0, 80069ec <asin+0x50>
 80069d6:	f7ff f997 	bl	8005d08 <__errno>
 80069da:	ecbd 8b02 	vpop	{d8}
 80069de:	2321      	movs	r3, #33	; 0x21
 80069e0:	6003      	str	r3, [r0, #0]
 80069e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069e6:	4806      	ldr	r0, [pc, #24]	; (8006a00 <asin+0x64>)
 80069e8:	f000 bad6 	b.w	8006f98 <nan>
 80069ec:	eeb0 0a48 	vmov.f32	s0, s16
 80069f0:	eef0 0a68 	vmov.f32	s1, s17
 80069f4:	ecbd 8b02 	vpop	{d8}
 80069f8:	bd38      	pop	{r3, r4, r5, pc}
 80069fa:	bf00      	nop
 80069fc:	3ff00000 	.word	0x3ff00000
 8006a00:	0800702d 	.word	0x0800702d
 8006a04:	00000000 	.word	0x00000000

08006a08 <__ieee754_asin>:
 8006a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0c:	ed2d 8b04 	vpush	{d8-d9}
 8006a10:	ec55 4b10 	vmov	r4, r5, d0
 8006a14:	4bcc      	ldr	r3, [pc, #816]	; (8006d48 <__ieee754_asin+0x340>)
 8006a16:	b083      	sub	sp, #12
 8006a18:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006a1c:	4598      	cmp	r8, r3
 8006a1e:	9501      	str	r5, [sp, #4]
 8006a20:	dd35      	ble.n	8006a8e <__ieee754_asin+0x86>
 8006a22:	ee10 3a10 	vmov	r3, s0
 8006a26:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8006a2a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8006a2e:	ea58 0303 	orrs.w	r3, r8, r3
 8006a32:	d117      	bne.n	8006a64 <__ieee754_asin+0x5c>
 8006a34:	a3aa      	add	r3, pc, #680	; (adr r3, 8006ce0 <__ieee754_asin+0x2d8>)
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	ee10 0a10 	vmov	r0, s0
 8006a3e:	4629      	mov	r1, r5
 8006a40:	f7f9 fdd2 	bl	80005e8 <__aeabi_dmul>
 8006a44:	a3a8      	add	r3, pc, #672	; (adr r3, 8006ce8 <__ieee754_asin+0x2e0>)
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	460f      	mov	r7, r1
 8006a4e:	4620      	mov	r0, r4
 8006a50:	4629      	mov	r1, r5
 8006a52:	f7f9 fdc9 	bl	80005e8 <__aeabi_dmul>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	4639      	mov	r1, r7
 8006a5e:	f7f9 fc0d 	bl	800027c <__adddf3>
 8006a62:	e00b      	b.n	8006a7c <__ieee754_asin+0x74>
 8006a64:	ee10 2a10 	vmov	r2, s0
 8006a68:	462b      	mov	r3, r5
 8006a6a:	ee10 0a10 	vmov	r0, s0
 8006a6e:	4629      	mov	r1, r5
 8006a70:	f7f9 fc02 	bl	8000278 <__aeabi_dsub>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	f7f9 fee0 	bl	800083c <__aeabi_ddiv>
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	460d      	mov	r5, r1
 8006a80:	ec45 4b10 	vmov	d0, r4, r5
 8006a84:	b003      	add	sp, #12
 8006a86:	ecbd 8b04 	vpop	{d8-d9}
 8006a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8e:	4baf      	ldr	r3, [pc, #700]	; (8006d4c <__ieee754_asin+0x344>)
 8006a90:	4598      	cmp	r8, r3
 8006a92:	dc11      	bgt.n	8006ab8 <__ieee754_asin+0xb0>
 8006a94:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006a98:	f280 80ae 	bge.w	8006bf8 <__ieee754_asin+0x1f0>
 8006a9c:	a394      	add	r3, pc, #592	; (adr r3, 8006cf0 <__ieee754_asin+0x2e8>)
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	ee10 0a10 	vmov	r0, s0
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	f7f9 fbe8 	bl	800027c <__adddf3>
 8006aac:	4ba8      	ldr	r3, [pc, #672]	; (8006d50 <__ieee754_asin+0x348>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f7fa f82a 	bl	8000b08 <__aeabi_dcmpgt>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d1e3      	bne.n	8006a80 <__ieee754_asin+0x78>
 8006ab8:	ec45 4b10 	vmov	d0, r4, r5
 8006abc:	f7ff ff64 	bl	8006988 <fabs>
 8006ac0:	49a3      	ldr	r1, [pc, #652]	; (8006d50 <__ieee754_asin+0x348>)
 8006ac2:	ec53 2b10 	vmov	r2, r3, d0
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	f7f9 fbd6 	bl	8000278 <__aeabi_dsub>
 8006acc:	4ba1      	ldr	r3, [pc, #644]	; (8006d54 <__ieee754_asin+0x34c>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f7f9 fd8a 	bl	80005e8 <__aeabi_dmul>
 8006ad4:	a388      	add	r3, pc, #544	; (adr r3, 8006cf8 <__ieee754_asin+0x2f0>)
 8006ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ada:	4604      	mov	r4, r0
 8006adc:	460d      	mov	r5, r1
 8006ade:	f7f9 fd83 	bl	80005e8 <__aeabi_dmul>
 8006ae2:	a387      	add	r3, pc, #540	; (adr r3, 8006d00 <__ieee754_asin+0x2f8>)
 8006ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae8:	f7f9 fbc8 	bl	800027c <__adddf3>
 8006aec:	4622      	mov	r2, r4
 8006aee:	462b      	mov	r3, r5
 8006af0:	f7f9 fd7a 	bl	80005e8 <__aeabi_dmul>
 8006af4:	a384      	add	r3, pc, #528	; (adr r3, 8006d08 <__ieee754_asin+0x300>)
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	f7f9 fbbd 	bl	8000278 <__aeabi_dsub>
 8006afe:	4622      	mov	r2, r4
 8006b00:	462b      	mov	r3, r5
 8006b02:	f7f9 fd71 	bl	80005e8 <__aeabi_dmul>
 8006b06:	a382      	add	r3, pc, #520	; (adr r3, 8006d10 <__ieee754_asin+0x308>)
 8006b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0c:	f7f9 fbb6 	bl	800027c <__adddf3>
 8006b10:	4622      	mov	r2, r4
 8006b12:	462b      	mov	r3, r5
 8006b14:	f7f9 fd68 	bl	80005e8 <__aeabi_dmul>
 8006b18:	a37f      	add	r3, pc, #508	; (adr r3, 8006d18 <__ieee754_asin+0x310>)
 8006b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1e:	f7f9 fbab 	bl	8000278 <__aeabi_dsub>
 8006b22:	4622      	mov	r2, r4
 8006b24:	462b      	mov	r3, r5
 8006b26:	f7f9 fd5f 	bl	80005e8 <__aeabi_dmul>
 8006b2a:	a37d      	add	r3, pc, #500	; (adr r3, 8006d20 <__ieee754_asin+0x318>)
 8006b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b30:	f7f9 fba4 	bl	800027c <__adddf3>
 8006b34:	4622      	mov	r2, r4
 8006b36:	462b      	mov	r3, r5
 8006b38:	f7f9 fd56 	bl	80005e8 <__aeabi_dmul>
 8006b3c:	a37a      	add	r3, pc, #488	; (adr r3, 8006d28 <__ieee754_asin+0x320>)
 8006b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b42:	ec41 0b18 	vmov	d8, r0, r1
 8006b46:	4620      	mov	r0, r4
 8006b48:	4629      	mov	r1, r5
 8006b4a:	f7f9 fd4d 	bl	80005e8 <__aeabi_dmul>
 8006b4e:	a378      	add	r3, pc, #480	; (adr r3, 8006d30 <__ieee754_asin+0x328>)
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	f7f9 fb90 	bl	8000278 <__aeabi_dsub>
 8006b58:	4622      	mov	r2, r4
 8006b5a:	462b      	mov	r3, r5
 8006b5c:	f7f9 fd44 	bl	80005e8 <__aeabi_dmul>
 8006b60:	a375      	add	r3, pc, #468	; (adr r3, 8006d38 <__ieee754_asin+0x330>)
 8006b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b66:	f7f9 fb89 	bl	800027c <__adddf3>
 8006b6a:	4622      	mov	r2, r4
 8006b6c:	462b      	mov	r3, r5
 8006b6e:	f7f9 fd3b 	bl	80005e8 <__aeabi_dmul>
 8006b72:	a373      	add	r3, pc, #460	; (adr r3, 8006d40 <__ieee754_asin+0x338>)
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	f7f9 fb7e 	bl	8000278 <__aeabi_dsub>
 8006b7c:	4622      	mov	r2, r4
 8006b7e:	462b      	mov	r3, r5
 8006b80:	f7f9 fd32 	bl	80005e8 <__aeabi_dmul>
 8006b84:	4b72      	ldr	r3, [pc, #456]	; (8006d50 <__ieee754_asin+0x348>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	f7f9 fb78 	bl	800027c <__adddf3>
 8006b8c:	ec45 4b10 	vmov	d0, r4, r5
 8006b90:	4606      	mov	r6, r0
 8006b92:	460f      	mov	r7, r1
 8006b94:	f000 f94c 	bl	8006e30 <__ieee754_sqrt>
 8006b98:	4b6f      	ldr	r3, [pc, #444]	; (8006d58 <__ieee754_asin+0x350>)
 8006b9a:	4598      	cmp	r8, r3
 8006b9c:	ec5b ab10 	vmov	sl, fp, d0
 8006ba0:	f340 80dc 	ble.w	8006d5c <__ieee754_asin+0x354>
 8006ba4:	4632      	mov	r2, r6
 8006ba6:	463b      	mov	r3, r7
 8006ba8:	ec51 0b18 	vmov	r0, r1, d8
 8006bac:	f7f9 fe46 	bl	800083c <__aeabi_ddiv>
 8006bb0:	4652      	mov	r2, sl
 8006bb2:	465b      	mov	r3, fp
 8006bb4:	f7f9 fd18 	bl	80005e8 <__aeabi_dmul>
 8006bb8:	4652      	mov	r2, sl
 8006bba:	465b      	mov	r3, fp
 8006bbc:	f7f9 fb5e 	bl	800027c <__adddf3>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	f7f9 fb5a 	bl	800027c <__adddf3>
 8006bc8:	a347      	add	r3, pc, #284	; (adr r3, 8006ce8 <__ieee754_asin+0x2e0>)
 8006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bce:	f7f9 fb53 	bl	8000278 <__aeabi_dsub>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	a142      	add	r1, pc, #264	; (adr r1, 8006ce0 <__ieee754_asin+0x2d8>)
 8006bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bdc:	f7f9 fb4c 	bl	8000278 <__aeabi_dsub>
 8006be0:	9b01      	ldr	r3, [sp, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	bfdc      	itt	le
 8006be6:	4602      	movle	r2, r0
 8006be8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8006bec:	4604      	mov	r4, r0
 8006bee:	460d      	mov	r5, r1
 8006bf0:	bfdc      	itt	le
 8006bf2:	4614      	movle	r4, r2
 8006bf4:	461d      	movle	r5, r3
 8006bf6:	e743      	b.n	8006a80 <__ieee754_asin+0x78>
 8006bf8:	ee10 2a10 	vmov	r2, s0
 8006bfc:	ee10 0a10 	vmov	r0, s0
 8006c00:	462b      	mov	r3, r5
 8006c02:	4629      	mov	r1, r5
 8006c04:	f7f9 fcf0 	bl	80005e8 <__aeabi_dmul>
 8006c08:	a33b      	add	r3, pc, #236	; (adr r3, 8006cf8 <__ieee754_asin+0x2f0>)
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	4606      	mov	r6, r0
 8006c10:	460f      	mov	r7, r1
 8006c12:	f7f9 fce9 	bl	80005e8 <__aeabi_dmul>
 8006c16:	a33a      	add	r3, pc, #232	; (adr r3, 8006d00 <__ieee754_asin+0x2f8>)
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	f7f9 fb2e 	bl	800027c <__adddf3>
 8006c20:	4632      	mov	r2, r6
 8006c22:	463b      	mov	r3, r7
 8006c24:	f7f9 fce0 	bl	80005e8 <__aeabi_dmul>
 8006c28:	a337      	add	r3, pc, #220	; (adr r3, 8006d08 <__ieee754_asin+0x300>)
 8006c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2e:	f7f9 fb23 	bl	8000278 <__aeabi_dsub>
 8006c32:	4632      	mov	r2, r6
 8006c34:	463b      	mov	r3, r7
 8006c36:	f7f9 fcd7 	bl	80005e8 <__aeabi_dmul>
 8006c3a:	a335      	add	r3, pc, #212	; (adr r3, 8006d10 <__ieee754_asin+0x308>)
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	f7f9 fb1c 	bl	800027c <__adddf3>
 8006c44:	4632      	mov	r2, r6
 8006c46:	463b      	mov	r3, r7
 8006c48:	f7f9 fcce 	bl	80005e8 <__aeabi_dmul>
 8006c4c:	a332      	add	r3, pc, #200	; (adr r3, 8006d18 <__ieee754_asin+0x310>)
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	f7f9 fb11 	bl	8000278 <__aeabi_dsub>
 8006c56:	4632      	mov	r2, r6
 8006c58:	463b      	mov	r3, r7
 8006c5a:	f7f9 fcc5 	bl	80005e8 <__aeabi_dmul>
 8006c5e:	a330      	add	r3, pc, #192	; (adr r3, 8006d20 <__ieee754_asin+0x318>)
 8006c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c64:	f7f9 fb0a 	bl	800027c <__adddf3>
 8006c68:	4632      	mov	r2, r6
 8006c6a:	463b      	mov	r3, r7
 8006c6c:	f7f9 fcbc 	bl	80005e8 <__aeabi_dmul>
 8006c70:	a32d      	add	r3, pc, #180	; (adr r3, 8006d28 <__ieee754_asin+0x320>)
 8006c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c76:	4680      	mov	r8, r0
 8006c78:	4689      	mov	r9, r1
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	4639      	mov	r1, r7
 8006c7e:	f7f9 fcb3 	bl	80005e8 <__aeabi_dmul>
 8006c82:	a32b      	add	r3, pc, #172	; (adr r3, 8006d30 <__ieee754_asin+0x328>)
 8006c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c88:	f7f9 faf6 	bl	8000278 <__aeabi_dsub>
 8006c8c:	4632      	mov	r2, r6
 8006c8e:	463b      	mov	r3, r7
 8006c90:	f7f9 fcaa 	bl	80005e8 <__aeabi_dmul>
 8006c94:	a328      	add	r3, pc, #160	; (adr r3, 8006d38 <__ieee754_asin+0x330>)
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	f7f9 faef 	bl	800027c <__adddf3>
 8006c9e:	4632      	mov	r2, r6
 8006ca0:	463b      	mov	r3, r7
 8006ca2:	f7f9 fca1 	bl	80005e8 <__aeabi_dmul>
 8006ca6:	a326      	add	r3, pc, #152	; (adr r3, 8006d40 <__ieee754_asin+0x338>)
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f7f9 fae4 	bl	8000278 <__aeabi_dsub>
 8006cb0:	4632      	mov	r2, r6
 8006cb2:	463b      	mov	r3, r7
 8006cb4:	f7f9 fc98 	bl	80005e8 <__aeabi_dmul>
 8006cb8:	4b25      	ldr	r3, [pc, #148]	; (8006d50 <__ieee754_asin+0x348>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f7f9 fade 	bl	800027c <__adddf3>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	4649      	mov	r1, r9
 8006cc8:	f7f9 fdb8 	bl	800083c <__aeabi_ddiv>
 8006ccc:	4622      	mov	r2, r4
 8006cce:	462b      	mov	r3, r5
 8006cd0:	f7f9 fc8a 	bl	80005e8 <__aeabi_dmul>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4620      	mov	r0, r4
 8006cda:	4629      	mov	r1, r5
 8006cdc:	e6bf      	b.n	8006a5e <__ieee754_asin+0x56>
 8006cde:	bf00      	nop
 8006ce0:	54442d18 	.word	0x54442d18
 8006ce4:	3ff921fb 	.word	0x3ff921fb
 8006ce8:	33145c07 	.word	0x33145c07
 8006cec:	3c91a626 	.word	0x3c91a626
 8006cf0:	8800759c 	.word	0x8800759c
 8006cf4:	7e37e43c 	.word	0x7e37e43c
 8006cf8:	0dfdf709 	.word	0x0dfdf709
 8006cfc:	3f023de1 	.word	0x3f023de1
 8006d00:	7501b288 	.word	0x7501b288
 8006d04:	3f49efe0 	.word	0x3f49efe0
 8006d08:	b5688f3b 	.word	0xb5688f3b
 8006d0c:	3fa48228 	.word	0x3fa48228
 8006d10:	0e884455 	.word	0x0e884455
 8006d14:	3fc9c155 	.word	0x3fc9c155
 8006d18:	03eb6f7d 	.word	0x03eb6f7d
 8006d1c:	3fd4d612 	.word	0x3fd4d612
 8006d20:	55555555 	.word	0x55555555
 8006d24:	3fc55555 	.word	0x3fc55555
 8006d28:	b12e9282 	.word	0xb12e9282
 8006d2c:	3fb3b8c5 	.word	0x3fb3b8c5
 8006d30:	1b8d0159 	.word	0x1b8d0159
 8006d34:	3fe6066c 	.word	0x3fe6066c
 8006d38:	9c598ac8 	.word	0x9c598ac8
 8006d3c:	40002ae5 	.word	0x40002ae5
 8006d40:	1c8a2d4b 	.word	0x1c8a2d4b
 8006d44:	40033a27 	.word	0x40033a27
 8006d48:	3fefffff 	.word	0x3fefffff
 8006d4c:	3fdfffff 	.word	0x3fdfffff
 8006d50:	3ff00000 	.word	0x3ff00000
 8006d54:	3fe00000 	.word	0x3fe00000
 8006d58:	3fef3332 	.word	0x3fef3332
 8006d5c:	ee10 2a10 	vmov	r2, s0
 8006d60:	ee10 0a10 	vmov	r0, s0
 8006d64:	465b      	mov	r3, fp
 8006d66:	4659      	mov	r1, fp
 8006d68:	f7f9 fa88 	bl	800027c <__adddf3>
 8006d6c:	4632      	mov	r2, r6
 8006d6e:	463b      	mov	r3, r7
 8006d70:	ec41 0b19 	vmov	d9, r0, r1
 8006d74:	ec51 0b18 	vmov	r0, r1, d8
 8006d78:	f7f9 fd60 	bl	800083c <__aeabi_ddiv>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	ec51 0b19 	vmov	r0, r1, d9
 8006d84:	f7f9 fc30 	bl	80005e8 <__aeabi_dmul>
 8006d88:	f04f 0800 	mov.w	r8, #0
 8006d8c:	4606      	mov	r6, r0
 8006d8e:	460f      	mov	r7, r1
 8006d90:	4642      	mov	r2, r8
 8006d92:	465b      	mov	r3, fp
 8006d94:	4640      	mov	r0, r8
 8006d96:	4659      	mov	r1, fp
 8006d98:	f7f9 fc26 	bl	80005e8 <__aeabi_dmul>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4620      	mov	r0, r4
 8006da2:	4629      	mov	r1, r5
 8006da4:	f7f9 fa68 	bl	8000278 <__aeabi_dsub>
 8006da8:	4642      	mov	r2, r8
 8006daa:	4604      	mov	r4, r0
 8006dac:	460d      	mov	r5, r1
 8006dae:	465b      	mov	r3, fp
 8006db0:	4650      	mov	r0, sl
 8006db2:	4659      	mov	r1, fp
 8006db4:	f7f9 fa62 	bl	800027c <__adddf3>
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	f7f9 fd3c 	bl	800083c <__aeabi_ddiv>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	f7f9 fa58 	bl	800027c <__adddf3>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	a113      	add	r1, pc, #76	; (adr r1, 8006e20 <__ieee754_asin+0x418>)
 8006dd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dd6:	f7f9 fa4f 	bl	8000278 <__aeabi_dsub>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4630      	mov	r0, r6
 8006de0:	4639      	mov	r1, r7
 8006de2:	f7f9 fa49 	bl	8000278 <__aeabi_dsub>
 8006de6:	4642      	mov	r2, r8
 8006de8:	4604      	mov	r4, r0
 8006dea:	460d      	mov	r5, r1
 8006dec:	465b      	mov	r3, fp
 8006dee:	4640      	mov	r0, r8
 8006df0:	4659      	mov	r1, fp
 8006df2:	f7f9 fa43 	bl	800027c <__adddf3>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	a10b      	add	r1, pc, #44	; (adr r1, 8006e28 <__ieee754_asin+0x420>)
 8006dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e00:	f7f9 fa3a 	bl	8000278 <__aeabi_dsub>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4620      	mov	r0, r4
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	f7f9 fa34 	bl	8000278 <__aeabi_dsub>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	a104      	add	r1, pc, #16	; (adr r1, 8006e28 <__ieee754_asin+0x420>)
 8006e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e1a:	e6df      	b.n	8006bdc <__ieee754_asin+0x1d4>
 8006e1c:	f3af 8000 	nop.w
 8006e20:	33145c07 	.word	0x33145c07
 8006e24:	3c91a626 	.word	0x3c91a626
 8006e28:	54442d18 	.word	0x54442d18
 8006e2c:	3fe921fb 	.word	0x3fe921fb

08006e30 <__ieee754_sqrt>:
 8006e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e34:	ec55 4b10 	vmov	r4, r5, d0
 8006e38:	4e55      	ldr	r6, [pc, #340]	; (8006f90 <__ieee754_sqrt+0x160>)
 8006e3a:	43ae      	bics	r6, r5
 8006e3c:	ee10 0a10 	vmov	r0, s0
 8006e40:	ee10 3a10 	vmov	r3, s0
 8006e44:	462a      	mov	r2, r5
 8006e46:	4629      	mov	r1, r5
 8006e48:	d110      	bne.n	8006e6c <__ieee754_sqrt+0x3c>
 8006e4a:	ee10 2a10 	vmov	r2, s0
 8006e4e:	462b      	mov	r3, r5
 8006e50:	f7f9 fbca 	bl	80005e8 <__aeabi_dmul>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4620      	mov	r0, r4
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	f7f9 fa0e 	bl	800027c <__adddf3>
 8006e60:	4604      	mov	r4, r0
 8006e62:	460d      	mov	r5, r1
 8006e64:	ec45 4b10 	vmov	d0, r4, r5
 8006e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e6c:	2d00      	cmp	r5, #0
 8006e6e:	dc10      	bgt.n	8006e92 <__ieee754_sqrt+0x62>
 8006e70:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006e74:	4330      	orrs	r0, r6
 8006e76:	d0f5      	beq.n	8006e64 <__ieee754_sqrt+0x34>
 8006e78:	b15d      	cbz	r5, 8006e92 <__ieee754_sqrt+0x62>
 8006e7a:	ee10 2a10 	vmov	r2, s0
 8006e7e:	462b      	mov	r3, r5
 8006e80:	ee10 0a10 	vmov	r0, s0
 8006e84:	f7f9 f9f8 	bl	8000278 <__aeabi_dsub>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	f7f9 fcd6 	bl	800083c <__aeabi_ddiv>
 8006e90:	e7e6      	b.n	8006e60 <__ieee754_sqrt+0x30>
 8006e92:	1512      	asrs	r2, r2, #20
 8006e94:	d074      	beq.n	8006f80 <__ieee754_sqrt+0x150>
 8006e96:	07d4      	lsls	r4, r2, #31
 8006e98:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006e9c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006ea0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006ea4:	bf5e      	ittt	pl
 8006ea6:	0fda      	lsrpl	r2, r3, #31
 8006ea8:	005b      	lslpl	r3, r3, #1
 8006eaa:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006eae:	2400      	movs	r4, #0
 8006eb0:	0fda      	lsrs	r2, r3, #31
 8006eb2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006eb6:	107f      	asrs	r7, r7, #1
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	2516      	movs	r5, #22
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006ec2:	1886      	adds	r6, r0, r2
 8006ec4:	428e      	cmp	r6, r1
 8006ec6:	bfde      	ittt	le
 8006ec8:	1b89      	suble	r1, r1, r6
 8006eca:	18b0      	addle	r0, r6, r2
 8006ecc:	18a4      	addle	r4, r4, r2
 8006ece:	0049      	lsls	r1, r1, #1
 8006ed0:	3d01      	subs	r5, #1
 8006ed2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006ed6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006eda:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006ede:	d1f0      	bne.n	8006ec2 <__ieee754_sqrt+0x92>
 8006ee0:	462a      	mov	r2, r5
 8006ee2:	f04f 0e20 	mov.w	lr, #32
 8006ee6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006eea:	4281      	cmp	r1, r0
 8006eec:	eb06 0c05 	add.w	ip, r6, r5
 8006ef0:	dc02      	bgt.n	8006ef8 <__ieee754_sqrt+0xc8>
 8006ef2:	d113      	bne.n	8006f1c <__ieee754_sqrt+0xec>
 8006ef4:	459c      	cmp	ip, r3
 8006ef6:	d811      	bhi.n	8006f1c <__ieee754_sqrt+0xec>
 8006ef8:	f1bc 0f00 	cmp.w	ip, #0
 8006efc:	eb0c 0506 	add.w	r5, ip, r6
 8006f00:	da43      	bge.n	8006f8a <__ieee754_sqrt+0x15a>
 8006f02:	2d00      	cmp	r5, #0
 8006f04:	db41      	blt.n	8006f8a <__ieee754_sqrt+0x15a>
 8006f06:	f100 0801 	add.w	r8, r0, #1
 8006f0a:	1a09      	subs	r1, r1, r0
 8006f0c:	459c      	cmp	ip, r3
 8006f0e:	bf88      	it	hi
 8006f10:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8006f14:	eba3 030c 	sub.w	r3, r3, ip
 8006f18:	4432      	add	r2, r6
 8006f1a:	4640      	mov	r0, r8
 8006f1c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006f20:	f1be 0e01 	subs.w	lr, lr, #1
 8006f24:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006f28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006f2c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006f30:	d1db      	bne.n	8006eea <__ieee754_sqrt+0xba>
 8006f32:	430b      	orrs	r3, r1
 8006f34:	d006      	beq.n	8006f44 <__ieee754_sqrt+0x114>
 8006f36:	1c50      	adds	r0, r2, #1
 8006f38:	bf13      	iteet	ne
 8006f3a:	3201      	addne	r2, #1
 8006f3c:	3401      	addeq	r4, #1
 8006f3e:	4672      	moveq	r2, lr
 8006f40:	f022 0201 	bicne.w	r2, r2, #1
 8006f44:	1063      	asrs	r3, r4, #1
 8006f46:	0852      	lsrs	r2, r2, #1
 8006f48:	07e1      	lsls	r1, r4, #31
 8006f4a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006f4e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006f52:	bf48      	it	mi
 8006f54:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006f58:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006f5c:	4614      	mov	r4, r2
 8006f5e:	e781      	b.n	8006e64 <__ieee754_sqrt+0x34>
 8006f60:	0ad9      	lsrs	r1, r3, #11
 8006f62:	3815      	subs	r0, #21
 8006f64:	055b      	lsls	r3, r3, #21
 8006f66:	2900      	cmp	r1, #0
 8006f68:	d0fa      	beq.n	8006f60 <__ieee754_sqrt+0x130>
 8006f6a:	02cd      	lsls	r5, r1, #11
 8006f6c:	d50a      	bpl.n	8006f84 <__ieee754_sqrt+0x154>
 8006f6e:	f1c2 0420 	rsb	r4, r2, #32
 8006f72:	fa23 f404 	lsr.w	r4, r3, r4
 8006f76:	1e55      	subs	r5, r2, #1
 8006f78:	4093      	lsls	r3, r2
 8006f7a:	4321      	orrs	r1, r4
 8006f7c:	1b42      	subs	r2, r0, r5
 8006f7e:	e78a      	b.n	8006e96 <__ieee754_sqrt+0x66>
 8006f80:	4610      	mov	r0, r2
 8006f82:	e7f0      	b.n	8006f66 <__ieee754_sqrt+0x136>
 8006f84:	0049      	lsls	r1, r1, #1
 8006f86:	3201      	adds	r2, #1
 8006f88:	e7ef      	b.n	8006f6a <__ieee754_sqrt+0x13a>
 8006f8a:	4680      	mov	r8, r0
 8006f8c:	e7bd      	b.n	8006f0a <__ieee754_sqrt+0xda>
 8006f8e:	bf00      	nop
 8006f90:	7ff00000 	.word	0x7ff00000
 8006f94:	00000000 	.word	0x00000000

08006f98 <nan>:
 8006f98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006fa0 <nan+0x8>
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	00000000 	.word	0x00000000
 8006fa4:	7ff80000 	.word	0x7ff80000

08006fa8 <_init>:
 8006fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006faa:	bf00      	nop
 8006fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fae:	bc08      	pop	{r3}
 8006fb0:	469e      	mov	lr, r3
 8006fb2:	4770      	bx	lr

08006fb4 <_fini>:
 8006fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb6:	bf00      	nop
 8006fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fba:	bc08      	pop	{r3}
 8006fbc:	469e      	mov	lr, r3
 8006fbe:	4770      	bx	lr
