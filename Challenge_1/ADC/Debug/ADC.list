
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000385c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080039e4  080039e4  000139e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a14  08003a14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a14  08003a14  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a14  08003a14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a14  08003a14  00013a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a18  08003a18  00013a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000c0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000cc  200000cc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000084e5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018f6  00000000  00000000  00028521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000700  00000000  00000000  00029e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000638  00000000  00000000  0002a518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c943  00000000  00000000  0002ab50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009b83  00000000  00000000  00047493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad7db  00000000  00000000  00051016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fe7f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b08  00000000  00000000  000fe844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080039cc 	.word	0x080039cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080039cc 	.word	0x080039cc

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 faff 	bl	80007d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f851 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f943 	bl	8000460 <MX_GPIO_Init>
  MX_DMA_Init();
 80001da:	f000 f923 	bl	8000424 <MX_DMA_Init>
  MX_ADC1_Init();
 80001de:	f000 f8a3 	bl	8000328 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80001e2:	4b1e      	ldr	r3, [pc, #120]	; (800025c <main+0x94>)
 80001e4:	607b      	str	r3, [r7, #4]
  *led_register = 0b10101010;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	22aa      	movs	r2, #170	; 0xaa
 80001ea:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResults, adcChannels);
 80001ec:	2302      	movs	r3, #2
 80001ee:	461a      	mov	r2, r3
 80001f0:	491b      	ldr	r1, [pc, #108]	; (8000260 <main+0x98>)
 80001f2:	481c      	ldr	r0, [pc, #112]	; (8000264 <main+0x9c>)
 80001f4:	f000 fd6a 	bl	8000ccc <HAL_ADC_Start_DMA>
	  while (adcConvComplete == 0)
 80001f8:	bf00      	nop
 80001fa:	4b1b      	ldr	r3, [pc, #108]	; (8000268 <main+0xa0>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d0fb      	beq.n	80001fa <main+0x32>
	  {

	  }
	  adcConvComplete = 0;
 8000202:	4b19      	ldr	r3, [pc, #100]	; (8000268 <main+0xa0>)
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]

	  pitch = adcResults[0]/(4000/12);
 8000208:	4b15      	ldr	r3, [pc, #84]	; (8000260 <main+0x98>)
 800020a:	881b      	ldrh	r3, [r3, #0]
 800020c:	b29a      	uxth	r2, r3
 800020e:	4b17      	ldr	r3, [pc, #92]	; (800026c <main+0xa4>)
 8000210:	fba3 1302 	umull	r1, r3, r3, r2
 8000214:	1ad2      	subs	r2, r2, r3
 8000216:	0852      	lsrs	r2, r2, #1
 8000218:	4413      	add	r3, r2
 800021a:	0a1b      	lsrs	r3, r3, #8
 800021c:	b29b      	uxth	r3, r3
 800021e:	b2da      	uxtb	r2, r3
 8000220:	4b13      	ldr	r3, [pc, #76]	; (8000270 <main+0xa8>)
 8000222:	701a      	strb	r2, [r3, #0]
	  *led_register = (0b00000001<<pitch)-1;
 8000224:	4b12      	ldr	r3, [pc, #72]	; (8000270 <main+0xa8>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	461a      	mov	r2, r3
 800022a:	2301      	movs	r3, #1
 800022c:	4093      	lsls	r3, r2
 800022e:	b2db      	uxtb	r3, r3
 8000230:	3b01      	subs	r3, #1
 8000232:	b2da      	uxtb	r2, r3
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	701a      	strb	r2, [r3, #0]

	  yaw = adcResults[1]/(4000/12);
 8000238:	4b09      	ldr	r3, [pc, #36]	; (8000260 <main+0x98>)
 800023a:	885b      	ldrh	r3, [r3, #2]
 800023c:	b29a      	uxth	r2, r3
 800023e:	4b0b      	ldr	r3, [pc, #44]	; (800026c <main+0xa4>)
 8000240:	fba3 1302 	umull	r1, r3, r3, r2
 8000244:	1ad2      	subs	r2, r2, r3
 8000246:	0852      	lsrs	r2, r2, #1
 8000248:	4413      	add	r3, r2
 800024a:	0a1b      	lsrs	r3, r3, #8
 800024c:	b29b      	uxth	r3, r3
 800024e:	b2da      	uxtb	r2, r3
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <main+0xac>)
 8000252:	701a      	strb	r2, [r3, #0]

	  HAL_Delay(100);
 8000254:	2064      	movs	r0, #100	; 0x64
 8000256:	f000 fb21 	bl	800089c <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResults, adcChannels);
 800025a:	e7c7      	b.n	80001ec <main+0x24>
 800025c:	48001015 	.word	0x48001015
 8000260:	200000bc 	.word	0x200000bc
 8000264:	20000028 	.word	0x20000028
 8000268:	200000c0 	.word	0x200000c0
 800026c:	899c0f61 	.word	0x899c0f61
 8000270:	200000c4 	.word	0x200000c4
 8000274:	200000c5 	.word	0x200000c5

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b09e      	sub	sp, #120	; 0x78
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f003 fb98 	bl	80039bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	463b      	mov	r3, r7
 800029e:	223c      	movs	r2, #60	; 0x3c
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f003 fb8a 	bl	80039bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a8:	2302      	movs	r3, #2
 80002aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	2301      	movs	r3, #1
 80002ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b0:	2310      	movs	r3, #16
 80002b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b4:	2302      	movs	r3, #2
 80002b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b8:	2300      	movs	r3, #0
 80002ba:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002bc:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80002c0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 ff80 	bl	80021cc <HAL_RCC_OscConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002d2:	f000 f97b 	bl	80005cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d6:	230f      	movs	r3, #15
 80002d8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002da:	2302      	movs	r3, #2
 80002dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002f0:	2101      	movs	r1, #1
 80002f2:	4618      	mov	r0, r3
 80002f4:	f002 ffa8 	bl	8003248 <HAL_RCC_ClockConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002fe:	f000 f965 	bl	80005cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000302:	2380      	movs	r3, #128	; 0x80
 8000304:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000306:	f44f 7380 	mov.w	r3, #256	; 0x100
 800030a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030c:	463b      	mov	r3, r7
 800030e:	4618      	mov	r0, r3
 8000310:	f003 f980 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800031a:	f000 f957 	bl	80005cc <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3778      	adds	r7, #120	; 0x78
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b08a      	sub	sp, #40	; 0x28
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800032e:	f107 031c 	add.w	r3, r7, #28
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]
 8000344:	60da      	str	r2, [r3, #12]
 8000346:	611a      	str	r2, [r3, #16]
 8000348:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800034a:	4b35      	ldr	r3, [pc, #212]	; (8000420 <MX_ADC1_Init+0xf8>)
 800034c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000350:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000352:	4b33      	ldr	r3, [pc, #204]	; (8000420 <MX_ADC1_Init+0xf8>)
 8000354:	2200      	movs	r2, #0
 8000356:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000358:	4b31      	ldr	r3, [pc, #196]	; (8000420 <MX_ADC1_Init+0xf8>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800035e:	4b30      	ldr	r3, [pc, #192]	; (8000420 <MX_ADC1_Init+0xf8>)
 8000360:	2201      	movs	r2, #1
 8000362:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000364:	4b2e      	ldr	r3, [pc, #184]	; (8000420 <MX_ADC1_Init+0xf8>)
 8000366:	2200      	movs	r2, #0
 8000368:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800036a:	4b2d      	ldr	r3, [pc, #180]	; (8000420 <MX_ADC1_Init+0xf8>)
 800036c:	2200      	movs	r2, #0
 800036e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000372:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <MX_ADC1_Init+0xf8>)
 8000374:	2200      	movs	r2, #0
 8000376:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000378:	4b29      	ldr	r3, [pc, #164]	; (8000420 <MX_ADC1_Init+0xf8>)
 800037a:	2201      	movs	r2, #1
 800037c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800037e:	4b28      	ldr	r3, [pc, #160]	; (8000420 <MX_ADC1_Init+0xf8>)
 8000380:	2200      	movs	r2, #0
 8000382:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000384:	4b26      	ldr	r3, [pc, #152]	; (8000420 <MX_ADC1_Init+0xf8>)
 8000386:	2202      	movs	r2, #2
 8000388:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800038a:	4b25      	ldr	r3, [pc, #148]	; (8000420 <MX_ADC1_Init+0xf8>)
 800038c:	2200      	movs	r2, #0
 800038e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000392:	4b23      	ldr	r3, [pc, #140]	; (8000420 <MX_ADC1_Init+0xf8>)
 8000394:	2204      	movs	r2, #4
 8000396:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000398:	4b21      	ldr	r3, [pc, #132]	; (8000420 <MX_ADC1_Init+0xf8>)
 800039a:	2200      	movs	r2, #0
 800039c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800039e:	4b20      	ldr	r3, [pc, #128]	; (8000420 <MX_ADC1_Init+0xf8>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003a4:	481e      	ldr	r0, [pc, #120]	; (8000420 <MX_ADC1_Init+0xf8>)
 80003a6:	f000 fab1 	bl	800090c <HAL_ADC_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80003b0:	f000 f90c 	bl	80005cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003b4:	2300      	movs	r3, #0
 80003b6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003b8:	f107 031c 	add.w	r3, r7, #28
 80003bc:	4619      	mov	r1, r3
 80003be:	4818      	ldr	r0, [pc, #96]	; (8000420 <MX_ADC1_Init+0xf8>)
 80003c0:	f001 f88c 	bl	80014dc <HAL_ADCEx_MultiModeConfigChannel>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80003ca:	f000 f8ff 	bl	80005cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003ce:	2302      	movs	r3, #2
 80003d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d2:	2301      	movs	r3, #1
 80003d4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003d6:	2300      	movs	r3, #0
 80003d8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003de:	2300      	movs	r3, #0
 80003e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	4619      	mov	r1, r3
 80003ea:	480d      	ldr	r0, [pc, #52]	; (8000420 <MX_ADC1_Init+0xf8>)
 80003ec:	f000 fd8a 	bl	8000f04 <HAL_ADC_ConfigChannel>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003f6:	f000 f8e9 	bl	80005cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003fa:	2301      	movs	r3, #1
 80003fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003fe:	2302      	movs	r3, #2
 8000400:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	4619      	mov	r1, r3
 8000406:	4806      	ldr	r0, [pc, #24]	; (8000420 <MX_ADC1_Init+0xf8>)
 8000408:	f000 fd7c 	bl	8000f04 <HAL_ADC_ConfigChannel>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000412:	f000 f8db 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000416:	bf00      	nop
 8000418:	3728      	adds	r7, #40	; 0x28
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20000028 	.word	0x20000028

08000424 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_DMA_Init+0x38>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a0b      	ldr	r2, [pc, #44]	; (800045c <MX_DMA_Init+0x38>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6153      	str	r3, [r2, #20]
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <MX_DMA_Init+0x38>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000442:	2200      	movs	r2, #0
 8000444:	2100      	movs	r1, #0
 8000446:	200b      	movs	r0, #11
 8000448:	f001 fb45 	bl	8001ad6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800044c:	200b      	movs	r0, #11
 800044e:	f001 fb5e 	bl	8001b0e <HAL_NVIC_EnableIRQ>

}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08a      	sub	sp, #40	; 0x28
 8000464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000466:	f107 0314 	add.w	r3, r7, #20
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
 8000474:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000476:	4b4a      	ldr	r3, [pc, #296]	; (80005a0 <MX_GPIO_Init+0x140>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	4a49      	ldr	r2, [pc, #292]	; (80005a0 <MX_GPIO_Init+0x140>)
 800047c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000480:	6153      	str	r3, [r2, #20]
 8000482:	4b47      	ldr	r3, [pc, #284]	; (80005a0 <MX_GPIO_Init+0x140>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800048a:	613b      	str	r3, [r7, #16]
 800048c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048e:	4b44      	ldr	r3, [pc, #272]	; (80005a0 <MX_GPIO_Init+0x140>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a43      	ldr	r2, [pc, #268]	; (80005a0 <MX_GPIO_Init+0x140>)
 8000494:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000498:	6153      	str	r3, [r2, #20]
 800049a:	4b41      	ldr	r3, [pc, #260]	; (80005a0 <MX_GPIO_Init+0x140>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004a6:	4b3e      	ldr	r3, [pc, #248]	; (80005a0 <MX_GPIO_Init+0x140>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a3d      	ldr	r2, [pc, #244]	; (80005a0 <MX_GPIO_Init+0x140>)
 80004ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b3b      	ldr	r3, [pc, #236]	; (80005a0 <MX_GPIO_Init+0x140>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b38      	ldr	r3, [pc, #224]	; (80005a0 <MX_GPIO_Init+0x140>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a37      	ldr	r2, [pc, #220]	; (80005a0 <MX_GPIO_Init+0x140>)
 80004c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b35      	ldr	r3, [pc, #212]	; (80005a0 <MX_GPIO_Init+0x140>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d6:	4b32      	ldr	r3, [pc, #200]	; (80005a0 <MX_GPIO_Init+0x140>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a31      	ldr	r2, [pc, #196]	; (80005a0 <MX_GPIO_Init+0x140>)
 80004dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b2f      	ldr	r3, [pc, #188]	; (80005a0 <MX_GPIO_Init+0x140>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004ee:	2200      	movs	r2, #0
 80004f0:	f64f 7108 	movw	r1, #65288	; 0xff08
 80004f4:	482b      	ldr	r0, [pc, #172]	; (80005a4 <MX_GPIO_Init+0x144>)
 80004f6:	f001 fe51 	bl	800219c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80004fa:	2337      	movs	r3, #55	; 0x37
 80004fc:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004fe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000508:	f107 0314 	add.w	r3, r7, #20
 800050c:	4619      	mov	r1, r3
 800050e:	4825      	ldr	r0, [pc, #148]	; (80005a4 <MX_GPIO_Init+0x144>)
 8000510:	f001 fcca 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000514:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000518:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051a:	2301      	movs	r3, #1
 800051c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	2300      	movs	r3, #0
 8000524:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	4619      	mov	r1, r3
 800052c:	481d      	ldr	r0, [pc, #116]	; (80005a4 <MX_GPIO_Init+0x144>)
 800052e:	f001 fcbb 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000532:	23e0      	movs	r3, #224	; 0xe0
 8000534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000536:	2302      	movs	r3, #2
 8000538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	2300      	movs	r3, #0
 8000540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000542:	2305      	movs	r3, #5
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	4619      	mov	r1, r3
 800054c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000550:	f001 fcaa 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000554:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055a:	2302      	movs	r3, #2
 800055c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000562:	2303      	movs	r3, #3
 8000564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000566:	230e      	movs	r3, #14
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	4619      	mov	r1, r3
 8000570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000574:	f001 fc98 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000578:	23c0      	movs	r3, #192	; 0xc0
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800057c:	2312      	movs	r3, #18
 800057e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2300      	movs	r3, #0
 8000586:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000588:	2304      	movs	r3, #4
 800058a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_GPIO_Init+0x148>)
 8000594:	f001 fc88 	bl	8001ea8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000598:	bf00      	nop
 800059a:	3728      	adds	r7, #40	; 0x28
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	48001000 	.word	0x48001000
 80005a8:	48000400 	.word	0x48000400

080005ac <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	adcConvComplete = 1;
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	601a      	str	r2, [r3, #0]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	200000c0 	.word	0x200000c0

080005cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
}
 80005d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <Error_Handler+0x8>
	...

080005d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <HAL_MspInit+0x44>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <HAL_MspInit+0x44>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6193      	str	r3, [r2, #24]
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HAL_MspInit+0x44>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <HAL_MspInit+0x44>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <HAL_MspInit+0x44>)
 80005fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000600:	61d3      	str	r3, [r2, #28]
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_MspInit+0x44>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800060e:	2007      	movs	r0, #7
 8000610:	f001 fa56 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000

08000620 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000640:	d14c      	bne.n	80006dc <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <HAL_ADC_MspInit+0xc4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <HAL_ADC_MspInit+0xc4>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	6153      	str	r3, [r2, #20]
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <HAL_ADC_MspInit+0xc4>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <HAL_ADC_MspInit+0xc4>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <HAL_ADC_MspInit+0xc4>)
 8000660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <HAL_ADC_MspInit+0xc4>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000672:	2303      	movs	r3, #3
 8000674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000676:	2303      	movs	r3, #3
 8000678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000688:	f001 fc0e 	bl	8001ea8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <HAL_ADC_MspInit+0xc8>)
 800068e:	4a17      	ldr	r2, [pc, #92]	; (80006ec <HAL_ADC_MspInit+0xcc>)
 8000690:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <HAL_ADC_MspInit+0xc8>)
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <HAL_ADC_MspInit+0xc8>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_ADC_MspInit+0xc8>)
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <HAL_ADC_MspInit+0xc8>)
 80006a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <HAL_ADC_MspInit+0xc8>)
 80006ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_ADC_MspInit+0xc8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <HAL_ADC_MspInit+0xc8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006c0:	4809      	ldr	r0, [pc, #36]	; (80006e8 <HAL_ADC_MspInit+0xc8>)
 80006c2:	f001 fa3e 	bl	8001b42 <HAL_DMA_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80006cc:	f7ff ff7e 	bl	80005cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <HAL_ADC_MspInit+0xc8>)
 80006d4:	639a      	str	r2, [r3, #56]	; 0x38
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <HAL_ADC_MspInit+0xc8>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006dc:	bf00      	nop
 80006de:	3728      	adds	r7, #40	; 0x28
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000
 80006e8:	20000078 	.word	0x20000078
 80006ec:	40020008 	.word	0x40020008

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <NMI_Handler+0x4>

080006f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <HardFault_Handler+0x4>

080006fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <MemManage_Handler+0x4>

08000702 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <UsageFault_Handler+0x4>

0800070e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073c:	f000 f88e 	bl	800085c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <DMA1_Channel1_IRQHandler+0x10>)
 800074a:	f001 faa0 	bl	8001c8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000078 	.word	0x20000078

08000758 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <SystemInit+0x20>)
 800075e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000762:	4a05      	ldr	r2, [pc, #20]	; (8000778 <SystemInit+0x20>)
 8000764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800077c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000780:	f7ff ffea 	bl	8000758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000786:	490d      	ldr	r1, [pc, #52]	; (80007bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000788:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <LoopForever+0xe>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800078c:	e002      	b.n	8000794 <LoopCopyDataInit>

0800078e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000792:	3304      	adds	r3, #4

08000794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000798:	d3f9      	bcc.n	800078e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079a:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800079c:	4c0a      	ldr	r4, [pc, #40]	; (80007c8 <LoopForever+0x16>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a0:	e001      	b.n	80007a6 <LoopFillZerobss>

080007a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a4:	3204      	adds	r2, #4

080007a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a8:	d3fb      	bcc.n	80007a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007aa:	f003 f8e3 	bl	8003974 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ae:	f7ff fd0b 	bl	80001c8 <main>

080007b2 <LoopForever>:

LoopForever:
    b LoopForever
 80007b2:	e7fe      	b.n	80007b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007b4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007c0:	08003a1c 	.word	0x08003a1c
  ldr r2, =_sbss
 80007c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007c8:	200000cc 	.word	0x200000cc

080007cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC1_2_IRQHandler>
	...

080007d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <HAL_Init+0x28>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <HAL_Init+0x28>)
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e0:	2003      	movs	r0, #3
 80007e2:	f001 f96d 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 f808 	bl	80007fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ec:	f7ff fef4 	bl	80005d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40022000 	.word	0x40022000

080007fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_InitTick+0x54>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_InitTick+0x58>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000812:	fbb3 f3f1 	udiv	r3, r3, r1
 8000816:	fbb2 f3f3 	udiv	r3, r2, r3
 800081a:	4618      	mov	r0, r3
 800081c:	f001 f985 	bl	8001b2a <HAL_SYSTICK_Config>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e00e      	b.n	8000848 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b0f      	cmp	r3, #15
 800082e:	d80a      	bhi.n	8000846 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000830:	2200      	movs	r2, #0
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	f04f 30ff 	mov.w	r0, #4294967295
 8000838:	f001 f94d 	bl	8001ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800083c:	4a06      	ldr	r2, [pc, #24]	; (8000858 <HAL_InitTick+0x5c>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000842:	2300      	movs	r3, #0
 8000844:	e000      	b.n	8000848 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
}
 8000848:	4618      	mov	r0, r3
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000000 	.word	0x20000000
 8000854:	20000008 	.word	0x20000008
 8000858:	20000004 	.word	0x20000004

0800085c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_IncTick+0x20>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_IncTick+0x24>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4413      	add	r3, r2
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <HAL_IncTick+0x24>)
 800086e:	6013      	str	r3, [r2, #0]
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	20000008 	.word	0x20000008
 8000880:	200000c8 	.word	0x200000c8

08000884 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return uwTick;  
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <HAL_GetTick+0x14>)
 800088a:	681b      	ldr	r3, [r3, #0]
}
 800088c:	4618      	mov	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	200000c8 	.word	0x200000c8

0800089c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a4:	f7ff ffee 	bl	8000884 <HAL_GetTick>
 80008a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b4:	d005      	beq.n	80008c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008b6:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <HAL_Delay+0x44>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4413      	add	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008c2:	bf00      	nop
 80008c4:	f7ff ffde 	bl	8000884 <HAL_GetTick>
 80008c8:	4602      	mov	r2, r0
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d8f7      	bhi.n	80008c4 <HAL_Delay+0x28>
  {
  }
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000008 	.word	0x20000008

080008e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b09a      	sub	sp, #104	; 0x68
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000914:	2300      	movs	r3, #0
 8000916:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800091a:	2300      	movs	r3, #0
 800091c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d101      	bne.n	800092c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000928:	2301      	movs	r3, #1
 800092a:	e1c9      	b.n	8000cc0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	691b      	ldr	r3, [r3, #16]
 8000930:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 0310 	and.w	r3, r3, #16
 800093a:	2b00      	cmp	r3, #0
 800093c:	d176      	bne.n	8000a2c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	2b00      	cmp	r3, #0
 8000944:	d152      	bne.n	80009ec <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff fe5d 	bl	8000620 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000970:	2b00      	cmp	r3, #0
 8000972:	d13b      	bne.n	80009ec <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f000 ff6d 	bl	8001854 <ADC_Disable>
 800097a:	4603      	mov	r3, r0
 800097c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	f003 0310 	and.w	r3, r3, #16
 8000988:	2b00      	cmp	r3, #0
 800098a:	d12f      	bne.n	80009ec <HAL_ADC_Init+0xe0>
 800098c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000990:	2b00      	cmp	r3, #0
 8000992:	d12b      	bne.n	80009ec <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800099c:	f023 0302 	bic.w	r3, r3, #2
 80009a0:	f043 0202 	orr.w	r2, r3, #2
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80009b6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	689a      	ldr	r2, [r3, #8]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009c6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80009c8:	4b86      	ldr	r3, [pc, #536]	; (8000be4 <HAL_ADC_Init+0x2d8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a86      	ldr	r2, [pc, #536]	; (8000be8 <HAL_ADC_Init+0x2dc>)
 80009ce:	fba2 2303 	umull	r2, r3, r2, r3
 80009d2:	0c9a      	lsrs	r2, r3, #18
 80009d4:	4613      	mov	r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4413      	add	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009de:	e002      	b.n	80009e6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1f9      	bne.n	80009e0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d007      	beq.n	8000a0a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a08:	d110      	bne.n	8000a2c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f023 0312 	bic.w	r3, r3, #18
 8000a12:	f043 0210 	orr.w	r2, r3, #16
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f043 0201 	orr.w	r2, r3, #1
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	f003 0310 	and.w	r3, r3, #16
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	f040 8136 	bne.w	8000ca6 <HAL_ADC_Init+0x39a>
 8000a3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8131 	bne.w	8000ca6 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f040 8129 	bne.w	8000ca6 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000a5c:	f043 0202 	orr.w	r2, r3, #2
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a6c:	d004      	beq.n	8000a78 <HAL_ADC_Init+0x16c>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a5e      	ldr	r2, [pc, #376]	; (8000bec <HAL_ADC_Init+0x2e0>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d101      	bne.n	8000a7c <HAL_ADC_Init+0x170>
 8000a78:	4b5d      	ldr	r3, [pc, #372]	; (8000bf0 <HAL_ADC_Init+0x2e4>)
 8000a7a:	e000      	b.n	8000a7e <HAL_ADC_Init+0x172>
 8000a7c:	4b5d      	ldr	r3, [pc, #372]	; (8000bf4 <HAL_ADC_Init+0x2e8>)
 8000a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a88:	d102      	bne.n	8000a90 <HAL_ADC_Init+0x184>
 8000a8a:	4b58      	ldr	r3, [pc, #352]	; (8000bec <HAL_ADC_Init+0x2e0>)
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	e01a      	b.n	8000ac6 <HAL_ADC_Init+0x1ba>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a55      	ldr	r2, [pc, #340]	; (8000bec <HAL_ADC_Init+0x2e0>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d103      	bne.n	8000aa2 <HAL_ADC_Init+0x196>
 8000a9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	e011      	b.n	8000ac6 <HAL_ADC_Init+0x1ba>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a54      	ldr	r2, [pc, #336]	; (8000bf8 <HAL_ADC_Init+0x2ec>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d102      	bne.n	8000ab2 <HAL_ADC_Init+0x1a6>
 8000aac:	4b53      	ldr	r3, [pc, #332]	; (8000bfc <HAL_ADC_Init+0x2f0>)
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	e009      	b.n	8000ac6 <HAL_ADC_Init+0x1ba>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a51      	ldr	r2, [pc, #324]	; (8000bfc <HAL_ADC_Init+0x2f0>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d102      	bne.n	8000ac2 <HAL_ADC_Init+0x1b6>
 8000abc:	4b4e      	ldr	r3, [pc, #312]	; (8000bf8 <HAL_ADC_Init+0x2ec>)
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	e001      	b.n	8000ac6 <HAL_ADC_Init+0x1ba>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	f003 0303 	and.w	r3, r3, #3
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d108      	bne.n	8000ae6 <HAL_ADC_Init+0x1da>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d101      	bne.n	8000ae6 <HAL_ADC_Init+0x1da>
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e000      	b.n	8000ae8 <HAL_ADC_Init+0x1dc>
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d11c      	bne.n	8000b26 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000aec:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d010      	beq.n	8000b14 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	f003 0303 	and.w	r3, r3, #3
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d107      	bne.n	8000b0e <HAL_ADC_Init+0x202>
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d101      	bne.n	8000b0e <HAL_ADC_Init+0x202>
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e000      	b.n	8000b10 <HAL_ADC_Init+0x204>
 8000b0e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d108      	bne.n	8000b26 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	431a      	orrs	r2, r3
 8000b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b24:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7e5b      	ldrb	r3, [r3, #25]
 8000b2a:	035b      	lsls	r3, r3, #13
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b30:	2a01      	cmp	r2, #1
 8000b32:	d002      	beq.n	8000b3a <HAL_ADC_Init+0x22e>
 8000b34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b38:	e000      	b.n	8000b3c <HAL_ADC_Init+0x230>
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	431a      	orrs	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d11b      	bne.n	8000b92 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7e5b      	ldrb	r3, [r3, #25]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d109      	bne.n	8000b76 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b66:	3b01      	subs	r3, #1
 8000b68:	045a      	lsls	r2, r3, #17
 8000b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b72:	663b      	str	r3, [r7, #96]	; 0x60
 8000b74:	e00d      	b.n	8000b92 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000b7e:	f043 0220 	orr.w	r2, r3, #32
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f043 0201 	orr.w	r2, r3, #1
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d03a      	beq.n	8000c10 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <HAL_ADC_Init+0x2ec>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d004      	beq.n	8000bae <HAL_ADC_Init+0x2a2>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <HAL_ADC_Init+0x2f0>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d128      	bne.n	8000c00 <HAL_ADC_Init+0x2f4>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000bb6:	d012      	beq.n	8000bde <HAL_ADC_Init+0x2d2>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bc0:	d00a      	beq.n	8000bd8 <HAL_ADC_Init+0x2cc>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000bca:	d002      	beq.n	8000bd2 <HAL_ADC_Init+0x2c6>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd0:	e018      	b.n	8000c04 <HAL_ADC_Init+0x2f8>
 8000bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd6:	e015      	b.n	8000c04 <HAL_ADC_Init+0x2f8>
 8000bd8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000bdc:	e012      	b.n	8000c04 <HAL_ADC_Init+0x2f8>
 8000bde:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000be2:	e00f      	b.n	8000c04 <HAL_ADC_Init+0x2f8>
 8000be4:	20000000 	.word	0x20000000
 8000be8:	431bde83 	.word	0x431bde83
 8000bec:	50000100 	.word	0x50000100
 8000bf0:	50000300 	.word	0x50000300
 8000bf4:	50000700 	.word	0x50000700
 8000bf8:	50000400 	.word	0x50000400
 8000bfc:	50000500 	.word	0x50000500
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	f003 030c 	and.w	r3, r3, #12
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d114      	bne.n	8000c48 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	6812      	ldr	r2, [r2, #0]
 8000c28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c2c:	f023 0302 	bic.w	r3, r3, #2
 8000c30:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7e1b      	ldrb	r3, [r3, #24]
 8000c36:	039a      	lsls	r2, r3, #14
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4313      	orrs	r3, r2
 8000c42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c44:	4313      	orrs	r3, r2
 8000c46:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68da      	ldr	r2, [r3, #12]
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <HAL_ADC_Init+0x3bc>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	6812      	ldr	r2, [r2, #0]
 8000c56:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d10c      	bne.n	8000c7e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f023 010f 	bic.w	r1, r3, #15
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	1e5a      	subs	r2, r3, #1
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	631a      	str	r2, [r3, #48]	; 0x30
 8000c7c:	e007      	b.n	8000c8e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f022 020f 	bic.w	r2, r2, #15
 8000c8c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f023 0303 	bic.w	r3, r3, #3
 8000c9c:	f043 0201 	orr.w	r2, r3, #1
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca4:	e00a      	b.n	8000cbc <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f023 0312 	bic.w	r3, r3, #18
 8000cae:	f043 0210 	orr.w	r2, r3, #16
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000cbc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3768      	adds	r7, #104	; 0x68
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	fff0c007 	.word	0xfff0c007

08000ccc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f040 80f7 	bne.w	8000eda <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d101      	bne.n	8000cfa <HAL_ADC_Start_DMA+0x2e>
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	e0f2      	b.n	8000ee0 <HAL_ADC_Start_DMA+0x214>
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d0a:	d004      	beq.n	8000d16 <HAL_ADC_Start_DMA+0x4a>
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a75      	ldr	r2, [pc, #468]	; (8000ee8 <HAL_ADC_Start_DMA+0x21c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d109      	bne.n	8000d2a <HAL_ADC_Start_DMA+0x5e>
 8000d16:	4b75      	ldr	r3, [pc, #468]	; (8000eec <HAL_ADC_Start_DMA+0x220>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f003 031f 	and.w	r3, r3, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	bf0c      	ite	eq
 8000d22:	2301      	moveq	r3, #1
 8000d24:	2300      	movne	r3, #0
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	e008      	b.n	8000d3c <HAL_ADC_Start_DMA+0x70>
 8000d2a:	4b71      	ldr	r3, [pc, #452]	; (8000ef0 <HAL_ADC_Start_DMA+0x224>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f003 031f 	and.w	r3, r3, #31
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	bf0c      	ite	eq
 8000d36:	2301      	moveq	r3, #1
 8000d38:	2300      	movne	r3, #0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f000 80c5 	beq.w	8000ecc <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000d42:	68f8      	ldr	r0, [r7, #12]
 8000d44:	f000 fd22 	bl	800178c <ADC_Enable>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000d4c:	7dfb      	ldrb	r3, [r7, #23]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 80b7 	bne.w	8000ec2 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d5c:	f023 0301 	bic.w	r3, r3, #1
 8000d60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d70:	d004      	beq.n	8000d7c <HAL_ADC_Start_DMA+0xb0>
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a5c      	ldr	r2, [pc, #368]	; (8000ee8 <HAL_ADC_Start_DMA+0x21c>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d106      	bne.n	8000d8a <HAL_ADC_Start_DMA+0xbe>
 8000d7c:	4b5b      	ldr	r3, [pc, #364]	; (8000eec <HAL_ADC_Start_DMA+0x220>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f003 031f 	and.w	r3, r3, #31
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d010      	beq.n	8000daa <HAL_ADC_Start_DMA+0xde>
 8000d88:	e005      	b.n	8000d96 <HAL_ADC_Start_DMA+0xca>
 8000d8a:	4b59      	ldr	r3, [pc, #356]	; (8000ef0 <HAL_ADC_Start_DMA+0x224>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f003 031f 	and.w	r3, r3, #31
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d009      	beq.n	8000daa <HAL_ADC_Start_DMA+0xde>
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d9e:	d004      	beq.n	8000daa <HAL_ADC_Start_DMA+0xde>
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a53      	ldr	r2, [pc, #332]	; (8000ef4 <HAL_ADC_Start_DMA+0x228>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d115      	bne.n	8000dd6 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d036      	beq.n	8000e32 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dcc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000dd4:	e02d      	b.n	8000e32 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dea:	d004      	beq.n	8000df6 <HAL_ADC_Start_DMA+0x12a>
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a3d      	ldr	r2, [pc, #244]	; (8000ee8 <HAL_ADC_Start_DMA+0x21c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d10a      	bne.n	8000e0c <HAL_ADC_Start_DMA+0x140>
 8000df6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	bf14      	ite	ne
 8000e04:	2301      	movne	r3, #1
 8000e06:	2300      	moveq	r3, #0
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	e008      	b.n	8000e1e <HAL_ADC_Start_DMA+0x152>
 8000e0c:	4b39      	ldr	r3, [pc, #228]	; (8000ef4 <HAL_ADC_Start_DMA+0x228>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	bf14      	ite	ne
 8000e18:	2301      	movne	r3, #1
 8000e1a:	2300      	moveq	r3, #0
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d007      	beq.n	8000e32 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e3e:	d106      	bne.n	8000e4e <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e44:	f023 0206 	bic.w	r2, r3, #6
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	645a      	str	r2, [r3, #68]	; 0x44
 8000e4c:	e002      	b.n	8000e54 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2200      	movs	r2, #0
 8000e52:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e60:	4a25      	ldr	r2, [pc, #148]	; (8000ef8 <HAL_ADC_Start_DMA+0x22c>)
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e68:	4a24      	ldr	r2, [pc, #144]	; (8000efc <HAL_ADC_Start_DMA+0x230>)
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e70:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <HAL_ADC_Start_DMA+0x234>)
 8000e72:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	221c      	movs	r2, #28
 8000e7a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 0210 	orr.w	r2, r2, #16
 8000e8a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f042 0201 	orr.w	r2, r2, #1
 8000e9a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3340      	adds	r3, #64	; 0x40
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f000 fe90 	bl	8001bd0 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f042 0204 	orr.w	r2, r2, #4
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	e00d      	b.n	8000ede <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000eca:	e008      	b.n	8000ede <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000ed8:	e001      	b.n	8000ede <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000eda:	2302      	movs	r3, #2
 8000edc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	50000100 	.word	0x50000100
 8000eec:	50000300 	.word	0x50000300
 8000ef0:	50000700 	.word	0x50000700
 8000ef4:	50000400 	.word	0x50000400
 8000ef8:	080016c1 	.word	0x080016c1
 8000efc:	0800173b 	.word	0x0800173b
 8000f00:	08001757 	.word	0x08001757

08000f04 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b09b      	sub	sp, #108	; 0x6c
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d101      	bne.n	8000f26 <HAL_ADC_ConfigChannel+0x22>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e2ca      	b.n	80014bc <HAL_ADC_ConfigChannel+0x5b8>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f040 82ae 	bne.w	800149a <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	d81c      	bhi.n	8000f80 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	4613      	mov	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	461a      	mov	r2, r3
 8000f5a:	231f      	movs	r3, #31
 8000f5c:	4093      	lsls	r3, r2
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	4019      	ands	r1, r3
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	6818      	ldr	r0, [r3, #0]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fa00 f203 	lsl.w	r2, r0, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f7e:	e063      	b.n	8001048 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b09      	cmp	r3, #9
 8000f86:	d81e      	bhi.n	8000fc6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	4613      	mov	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4413      	add	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	3b1e      	subs	r3, #30
 8000f9c:	221f      	movs	r2, #31
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	4019      	ands	r1, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	3b1e      	subs	r3, #30
 8000fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	635a      	str	r2, [r3, #52]	; 0x34
 8000fc4:	e040      	b.n	8001048 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b0e      	cmp	r3, #14
 8000fcc:	d81e      	bhi.n	800100c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	3b3c      	subs	r3, #60	; 0x3c
 8000fe2:	221f      	movs	r2, #31
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	4019      	ands	r1, r3
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	6818      	ldr	r0, [r3, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	3b3c      	subs	r3, #60	; 0x3c
 8000ffe:	fa00 f203 	lsl.w	r2, r0, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	430a      	orrs	r2, r1
 8001008:	639a      	str	r2, [r3, #56]	; 0x38
 800100a:	e01d      	b.n	8001048 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	3b5a      	subs	r3, #90	; 0x5a
 8001020:	221f      	movs	r2, #31
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	4019      	ands	r1, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	6818      	ldr	r0, [r3, #0]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4413      	add	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	3b5a      	subs	r3, #90	; 0x5a
 800103c:	fa00 f203 	lsl.w	r2, r0, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	2b00      	cmp	r3, #0
 8001054:	f040 80e5 	bne.w	8001222 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b09      	cmp	r3, #9
 800105e:	d91c      	bls.n	800109a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6999      	ldr	r1, [r3, #24]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	3b1e      	subs	r3, #30
 8001072:	2207      	movs	r2, #7
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	4019      	ands	r1, r3
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	6898      	ldr	r0, [r3, #8]
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	3b1e      	subs	r3, #30
 800108c:	fa00 f203 	lsl.w	r2, r0, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	430a      	orrs	r2, r1
 8001096:	619a      	str	r2, [r3, #24]
 8001098:	e019      	b.n	80010ce <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6959      	ldr	r1, [r3, #20]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	2207      	movs	r2, #7
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4019      	ands	r1, r3
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	6898      	ldr	r0, [r3, #8]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4613      	mov	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	fa00 f203 	lsl.w	r2, r0, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	430a      	orrs	r2, r1
 80010cc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	695a      	ldr	r2, [r3, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	08db      	lsrs	r3, r3, #3
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d84f      	bhi.n	8001190 <HAL_ADC_ConfigChannel+0x28c>
 80010f0:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <HAL_ADC_ConfigChannel+0x1f4>)
 80010f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f6:	bf00      	nop
 80010f8:	08001109 	.word	0x08001109
 80010fc:	0800112b 	.word	0x0800112b
 8001100:	0800114d 	.word	0x0800114d
 8001104:	0800116f 	.word	0x0800116f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800110e:	4b9a      	ldr	r3, [pc, #616]	; (8001378 <HAL_ADC_ConfigChannel+0x474>)
 8001110:	4013      	ands	r3, r2
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	6812      	ldr	r2, [r2, #0]
 8001116:	0691      	lsls	r1, r2, #26
 8001118:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800111a:	430a      	orrs	r2, r1
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001126:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001128:	e07e      	b.n	8001228 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001130:	4b91      	ldr	r3, [pc, #580]	; (8001378 <HAL_ADC_ConfigChannel+0x474>)
 8001132:	4013      	ands	r3, r2
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	0691      	lsls	r1, r2, #26
 800113a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800113c:	430a      	orrs	r2, r1
 800113e:	431a      	orrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001148:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800114a:	e06d      	b.n	8001228 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001152:	4b89      	ldr	r3, [pc, #548]	; (8001378 <HAL_ADC_ConfigChannel+0x474>)
 8001154:	4013      	ands	r3, r2
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	6812      	ldr	r2, [r2, #0]
 800115a:	0691      	lsls	r1, r2, #26
 800115c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800115e:	430a      	orrs	r2, r1
 8001160:	431a      	orrs	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800116a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800116c:	e05c      	b.n	8001228 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001174:	4b80      	ldr	r3, [pc, #512]	; (8001378 <HAL_ADC_ConfigChannel+0x474>)
 8001176:	4013      	ands	r3, r2
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	6812      	ldr	r2, [r2, #0]
 800117c:	0691      	lsls	r1, r2, #26
 800117e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001180:	430a      	orrs	r2, r1
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800118c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800118e:	e04b      	b.n	8001228 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001196:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	069b      	lsls	r3, r3, #26
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d107      	bne.n	80011b4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80011b2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80011ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	069b      	lsls	r3, r3, #26
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d107      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80011d6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	069b      	lsls	r3, r3, #26
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d107      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80011fa:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001202:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	069b      	lsls	r3, r3, #26
 800120c:	429a      	cmp	r2, r3
 800120e:	d10a      	bne.n	8001226 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800121e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001220:	e001      	b.n	8001226 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001222:	bf00      	nop
 8001224:	e000      	b.n	8001228 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001226:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	2b01      	cmp	r3, #1
 8001234:	d108      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x344>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x344>
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <HAL_ADC_ConfigChannel+0x346>
 8001248:	2300      	movs	r3, #0
 800124a:	2b00      	cmp	r3, #0
 800124c:	f040 8130 	bne.w	80014b0 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d00f      	beq.n	8001278 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2201      	movs	r2, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	400a      	ands	r2, r1
 8001272:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001276:	e049      	b.n	800130c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2201      	movs	r2, #1
 8001286:	409a      	lsls	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b09      	cmp	r3, #9
 8001298:	d91c      	bls.n	80012d4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6999      	ldr	r1, [r3, #24]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	3b1b      	subs	r3, #27
 80012ac:	2207      	movs	r2, #7
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	4019      	ands	r1, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	6898      	ldr	r0, [r3, #8]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4613      	mov	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4413      	add	r3, r2
 80012c4:	3b1b      	subs	r3, #27
 80012c6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	619a      	str	r2, [r3, #24]
 80012d2:	e01b      	b.n	800130c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6959      	ldr	r1, [r3, #20]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	4613      	mov	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	4413      	add	r3, r2
 80012e6:	2207      	movs	r2, #7
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	4019      	ands	r1, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	6898      	ldr	r0, [r3, #8]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	4613      	mov	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4413      	add	r3, r2
 8001300:	fa00 f203 	lsl.w	r2, r0, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001314:	d004      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x41c>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a18      	ldr	r2, [pc, #96]	; (800137c <HAL_ADC_ConfigChannel+0x478>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d101      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x420>
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <HAL_ADC_ConfigChannel+0x47c>)
 8001322:	e000      	b.n	8001326 <HAL_ADC_ConfigChannel+0x422>
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <HAL_ADC_ConfigChannel+0x480>)
 8001326:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b10      	cmp	r3, #16
 800132e:	d105      	bne.n	800133c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001338:	2b00      	cmp	r3, #0
 800133a:	d015      	beq.n	8001368 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001340:	2b11      	cmp	r3, #17
 8001342:	d105      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00b      	beq.n	8001368 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001354:	2b12      	cmp	r3, #18
 8001356:	f040 80ab 	bne.w	80014b0 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800135a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001362:	2b00      	cmp	r3, #0
 8001364:	f040 80a4 	bne.w	80014b0 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001370:	d10a      	bne.n	8001388 <HAL_ADC_ConfigChannel+0x484>
 8001372:	4b02      	ldr	r3, [pc, #8]	; (800137c <HAL_ADC_ConfigChannel+0x478>)
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	e022      	b.n	80013be <HAL_ADC_ConfigChannel+0x4ba>
 8001378:	83fff000 	.word	0x83fff000
 800137c:	50000100 	.word	0x50000100
 8001380:	50000300 	.word	0x50000300
 8001384:	50000700 	.word	0x50000700
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a4e      	ldr	r2, [pc, #312]	; (80014c8 <HAL_ADC_ConfigChannel+0x5c4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d103      	bne.n	800139a <HAL_ADC_ConfigChannel+0x496>
 8001392:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	e011      	b.n	80013be <HAL_ADC_ConfigChannel+0x4ba>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a4b      	ldr	r2, [pc, #300]	; (80014cc <HAL_ADC_ConfigChannel+0x5c8>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d102      	bne.n	80013aa <HAL_ADC_ConfigChannel+0x4a6>
 80013a4:	4b4a      	ldr	r3, [pc, #296]	; (80014d0 <HAL_ADC_ConfigChannel+0x5cc>)
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	e009      	b.n	80013be <HAL_ADC_ConfigChannel+0x4ba>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a48      	ldr	r2, [pc, #288]	; (80014d0 <HAL_ADC_ConfigChannel+0x5cc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d102      	bne.n	80013ba <HAL_ADC_ConfigChannel+0x4b6>
 80013b4:	4b45      	ldr	r3, [pc, #276]	; (80014cc <HAL_ADC_ConfigChannel+0x5c8>)
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	e001      	b.n	80013be <HAL_ADC_ConfigChannel+0x4ba>
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d108      	bne.n	80013de <HAL_ADC_ConfigChannel+0x4da>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d101      	bne.n	80013de <HAL_ADC_ConfigChannel+0x4da>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x4dc>
 80013de:	2300      	movs	r3, #0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d150      	bne.n	8001486 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013e4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d010      	beq.n	800140c <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d107      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x502>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x502>
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_ADC_ConfigChannel+0x504>
 8001406:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001408:	2b00      	cmp	r3, #0
 800140a:	d13c      	bne.n	8001486 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b10      	cmp	r3, #16
 8001412:	d11d      	bne.n	8001450 <HAL_ADC_ConfigChannel+0x54c>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800141c:	d118      	bne.n	8001450 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800141e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001428:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <HAL_ADC_ConfigChannel+0x5d0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a2a      	ldr	r2, [pc, #168]	; (80014d8 <HAL_ADC_ConfigChannel+0x5d4>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	0c9a      	lsrs	r2, r3, #18
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001440:	e002      	b.n	8001448 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3b01      	subs	r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f9      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800144e:	e02e      	b.n	80014ae <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b11      	cmp	r3, #17
 8001456:	d10b      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x56c>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001460:	d106      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800146a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800146c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800146e:	e01e      	b.n	80014ae <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b12      	cmp	r3, #18
 8001476:	d11a      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001480:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001482:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001484:	e013      	b.n	80014ae <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f043 0220 	orr.w	r2, r3, #32
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001498:	e00a      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f043 0220 	orr.w	r2, r3, #32
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80014ac:	e000      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014ae:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80014b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80014bc:	4618      	mov	r0, r3
 80014be:	376c      	adds	r7, #108	; 0x6c
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	50000100 	.word	0x50000100
 80014cc:	50000400 	.word	0x50000400
 80014d0:	50000500 	.word	0x50000500
 80014d4:	20000000 	.word	0x20000000
 80014d8:	431bde83 	.word	0x431bde83

080014dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80014dc:	b480      	push	{r7}
 80014de:	b099      	sub	sp, #100	; 0x64
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014f4:	d102      	bne.n	80014fc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80014f6:	4b6d      	ldr	r3, [pc, #436]	; (80016ac <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	e01a      	b.n	8001532 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a6a      	ldr	r2, [pc, #424]	; (80016ac <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d103      	bne.n	800150e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001506:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	e011      	b.n	8001532 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a67      	ldr	r2, [pc, #412]	; (80016b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d102      	bne.n	800151e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001518:	4b66      	ldr	r3, [pc, #408]	; (80016b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	e009      	b.n	8001532 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a64      	ldr	r2, [pc, #400]	; (80016b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d102      	bne.n	800152e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001528:	4b61      	ldr	r3, [pc, #388]	; (80016b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	e001      	b.n	8001532 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0b0      	b.n	800169e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001546:	2302      	movs	r3, #2
 8001548:	e0a9      	b.n	800169e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	f040 808d 	bne.w	800167c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	2b00      	cmp	r3, #0
 800156c:	f040 8086 	bne.w	800167c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001578:	d004      	beq.n	8001584 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a4b      	ldr	r2, [pc, #300]	; (80016ac <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d101      	bne.n	8001588 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001584:	4b4c      	ldr	r3, [pc, #304]	; (80016b8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001586:	e000      	b.n	800158a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001588:	4b4c      	ldr	r3, [pc, #304]	; (80016bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800158a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d040      	beq.n	8001616 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015a6:	035b      	lsls	r3, r3, #13
 80015a8:	430b      	orrs	r3, r1
 80015aa:	431a      	orrs	r2, r3
 80015ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015ae:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d108      	bne.n	80015d0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80015d0:	2300      	movs	r3, #0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d15c      	bne.n	8001690 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d107      	bne.n	80015f2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80015f2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d14b      	bne.n	8001690 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80015f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001600:	f023 030f 	bic.w	r3, r3, #15
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	6811      	ldr	r1, [r2, #0]
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	6892      	ldr	r2, [r2, #8]
 800160c:	430a      	orrs	r2, r1
 800160e:	431a      	orrs	r2, r3
 8001610:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001612:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001614:	e03c      	b.n	8001690 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800161e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001620:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b01      	cmp	r3, #1
 800162e:	d108      	bne.n	8001642 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b01      	cmp	r3, #1
 800163c:	d101      	bne.n	8001642 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001642:	2300      	movs	r3, #0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d123      	bne.n	8001690 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b01      	cmp	r3, #1
 8001652:	d107      	bne.n	8001664 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001664:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001666:	2b00      	cmp	r3, #0
 8001668:	d112      	bne.n	8001690 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800166a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001672:	f023 030f 	bic.w	r3, r3, #15
 8001676:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001678:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800167a:	e009      	b.n	8001690 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	f043 0220 	orr.w	r2, r3, #32
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800168e:	e000      	b.n	8001692 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001690:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800169a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800169e:	4618      	mov	r0, r3
 80016a0:	3764      	adds	r7, #100	; 0x64
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	50000100 	.word	0x50000100
 80016b0:	50000400 	.word	0x50000400
 80016b4:	50000500 	.word	0x50000500
 80016b8:	50000300 	.word	0x50000300
 80016bc:	50000700 	.word	0x50000700

080016c0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d126      	bne.n	8001728 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d115      	bne.n	8001720 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d111      	bne.n	8001720 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d105      	bne.n	8001720 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f043 0201 	orr.w	r2, r3, #1
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f7fe ff43 	bl	80005ac <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001726:	e004      	b.n	8001732 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	4798      	blx	r3
}
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f7ff f8cb 	bl	80008e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001774:	f043 0204 	orr.w	r2, r3, #4
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f7ff f8bb 	bl	80008f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d108      	bne.n	80017b8 <ADC_Enable+0x2c>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d101      	bne.n	80017b8 <ADC_Enable+0x2c>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <ADC_Enable+0x2e>
 80017b8:	2300      	movs	r3, #0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d143      	bne.n	8001846 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <ADC_Enable+0xc4>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00d      	beq.n	80017e8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f043 0210 	orr.w	r2, r3, #16
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017dc:	f043 0201 	orr.w	r2, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e02f      	b.n	8001848 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0201 	orr.w	r2, r2, #1
 80017f6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80017f8:	f7ff f844 	bl	8000884 <HAL_GetTick>
 80017fc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017fe:	e01b      	b.n	8001838 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001800:	f7ff f840 	bl	8000884 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d914      	bls.n	8001838 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b01      	cmp	r3, #1
 800181a:	d00d      	beq.n	8001838 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f043 0210 	orr.w	r2, r3, #16
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182c:	f043 0201 	orr.w	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e007      	b.n	8001848 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b01      	cmp	r3, #1
 8001844:	d1dc      	bne.n	8001800 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	8000003f 	.word	0x8000003f

08001854 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b01      	cmp	r3, #1
 800186c:	d108      	bne.n	8001880 <ADC_Disable+0x2c>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <ADC_Disable+0x2c>
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <ADC_Disable+0x2e>
 8001880:	2300      	movs	r3, #0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d047      	beq.n	8001916 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 030d 	and.w	r3, r3, #13
 8001890:	2b01      	cmp	r3, #1
 8001892:	d10f      	bne.n	80018b4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0202 	orr.w	r2, r2, #2
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2203      	movs	r2, #3
 80018aa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80018ac:	f7fe ffea 	bl	8000884 <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018b2:	e029      	b.n	8001908 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f043 0210 	orr.w	r2, r3, #16
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c4:	f043 0201 	orr.w	r2, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e023      	b.n	8001918 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018d0:	f7fe ffd8 	bl	8000884 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d914      	bls.n	8001908 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d10d      	bne.n	8001908 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f043 0210 	orr.w	r2, r3, #16
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fc:	f043 0201 	orr.w	r2, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e007      	b.n	8001918 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b01      	cmp	r3, #1
 8001914:	d0dc      	beq.n	80018d0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db0b      	blt.n	80019ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	f003 021f 	and.w	r2, r3, #31
 800199c:	4907      	ldr	r1, [pc, #28]	; (80019bc <__NVIC_EnableIRQ+0x38>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	2001      	movs	r0, #1
 80019a6:	fa00 f202 	lsl.w	r2, r0, r2
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e100 	.word	0xe000e100

080019c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db0a      	blt.n	80019ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	490c      	ldr	r1, [pc, #48]	; (8001a0c <__NVIC_SetPriority+0x4c>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e8:	e00a      	b.n	8001a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <__NVIC_SetPriority+0x50>)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	3b04      	subs	r3, #4
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	761a      	strb	r2, [r3, #24]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f1c3 0307 	rsb	r3, r3, #7
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	bf28      	it	cs
 8001a32:	2304      	movcs	r3, #4
 8001a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d902      	bls.n	8001a44 <NVIC_EncodePriority+0x30>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3b03      	subs	r3, #3
 8001a42:	e000      	b.n	8001a46 <NVIC_EncodePriority+0x32>
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	401a      	ands	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	4313      	orrs	r3, r2
         );
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a8c:	d301      	bcc.n	8001a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00f      	b.n	8001ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <SysTick_Config+0x40>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9a:	210f      	movs	r1, #15
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f7ff ff8e 	bl	80019c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <SysTick_Config+0x40>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <SysTick_Config+0x40>)
 8001aac:	2207      	movs	r2, #7
 8001aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	e000e010 	.word	0xe000e010

08001ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff29 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae8:	f7ff ff3e 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	6978      	ldr	r0, [r7, #20]
 8001af4:	f7ff ff8e 	bl	8001a14 <NVIC_EncodePriority>
 8001af8:	4602      	mov	r2, r0
 8001afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff5d 	bl	80019c0 <__NVIC_SetPriority>
}
 8001b06:	bf00      	nop
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff31 	bl	8001984 <__NVIC_EnableIRQ>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ffa2 	bl	8001a7c <SysTick_Config>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e037      	b.n	8001bc8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f940 	bl	8001e30 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}  
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <HAL_DMA_Start_IT+0x20>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e04a      	b.n	8001c86 <HAL_DMA_Start_IT+0xb6>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d13a      	bne.n	8001c78 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2202      	movs	r2, #2
 8001c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0201 	bic.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 f8d4 	bl	8001dd4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 020e 	orr.w	r2, r2, #14
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	e00f      	b.n	8001c66 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 020a 	orr.w	r2, r2, #10
 8001c54:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0204 	bic.w	r2, r2, #4
 8001c64:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	e005      	b.n	8001c84 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001c80:	2302      	movs	r3, #2
 8001c82:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	2204      	movs	r2, #4
 8001cac:	409a      	lsls	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d024      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x72>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d01f      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d107      	bne.n	8001cde <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0204 	bic.w	r2, r2, #4
 8001cdc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cec:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d06a      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001cfe:	e065      	b.n	8001dcc <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	2202      	movs	r2, #2
 8001d06:	409a      	lsls	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d02c      	beq.n	8001d6a <HAL_DMA_IRQHandler+0xdc>
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d027      	beq.n	8001d6a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0320 	and.w	r3, r3, #32
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10b      	bne.n	8001d40 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 020a 	bic.w	r2, r2, #10
 8001d36:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d48:	2102      	movs	r1, #2
 8001d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d035      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001d68:	e030      	b.n	8001dcc <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	2208      	movs	r2, #8
 8001d70:	409a      	lsls	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d028      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x13e>
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d023      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 020e 	bic.w	r2, r2, #14
 8001d92:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001da2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d004      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	4798      	blx	r3
    }
  }
}  
 8001dca:	e7ff      	b.n	8001dcc <HAL_DMA_IRQHandler+0x13e>
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dea:	2101      	movs	r1, #1
 8001dec:	fa01 f202 	lsl.w	r2, r1, r2
 8001df0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b10      	cmp	r3, #16
 8001e00:	d108      	bne.n	8001e14 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e12:	e007      	b.n	8001e24 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	60da      	str	r2, [r3, #12]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <DMA_CalcBaseAndBitshift+0x60>)
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d80f      	bhi.n	8001e64 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <DMA_CalcBaseAndBitshift+0x64>)
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <DMA_CalcBaseAndBitshift+0x68>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	009a      	lsls	r2, r3, #2
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a0f      	ldr	r2, [pc, #60]	; (8001e9c <DMA_CalcBaseAndBitshift+0x6c>)
 8001e60:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001e62:	e00e      	b.n	8001e82 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <DMA_CalcBaseAndBitshift+0x70>)
 8001e6c:	4413      	add	r3, r2
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <DMA_CalcBaseAndBitshift+0x68>)
 8001e70:	fba2 2303 	umull	r2, r3, r2, r3
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	009a      	lsls	r2, r3, #2
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <DMA_CalcBaseAndBitshift+0x74>)
 8001e80:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40020407 	.word	0x40020407
 8001e94:	bffdfff8 	.word	0xbffdfff8
 8001e98:	cccccccd 	.word	0xcccccccd
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	bffdfbf8 	.word	0xbffdfbf8
 8001ea4:	40020400 	.word	0x40020400

08001ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb6:	e154      	b.n	8002162 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8146 	beq.w	800215c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d005      	beq.n	8001ee8 <HAL_GPIO_Init+0x40>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d130      	bne.n	8001f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f1e:	2201      	movs	r2, #1
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	091b      	lsrs	r3, r3, #4
 8001f34:	f003 0201 	and.w	r2, r3, #1
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d017      	beq.n	8001f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	2203      	movs	r2, #3
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d123      	bne.n	8001fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	08da      	lsrs	r2, r3, #3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3208      	adds	r2, #8
 8001f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	220f      	movs	r2, #15
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	08da      	lsrs	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3208      	adds	r2, #8
 8001fd4:	6939      	ldr	r1, [r7, #16]
 8001fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 0203 	and.w	r2, r3, #3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 80a0 	beq.w	800215c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201c:	4b58      	ldr	r3, [pc, #352]	; (8002180 <HAL_GPIO_Init+0x2d8>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4a57      	ldr	r2, [pc, #348]	; (8002180 <HAL_GPIO_Init+0x2d8>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	4b55      	ldr	r3, [pc, #340]	; (8002180 <HAL_GPIO_Init+0x2d8>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002034:	4a53      	ldr	r2, [pc, #332]	; (8002184 <HAL_GPIO_Init+0x2dc>)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	089b      	lsrs	r3, r3, #2
 800203a:	3302      	adds	r3, #2
 800203c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002040:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	220f      	movs	r2, #15
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800205e:	d019      	beq.n	8002094 <HAL_GPIO_Init+0x1ec>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a49      	ldr	r2, [pc, #292]	; (8002188 <HAL_GPIO_Init+0x2e0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d013      	beq.n	8002090 <HAL_GPIO_Init+0x1e8>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a48      	ldr	r2, [pc, #288]	; (800218c <HAL_GPIO_Init+0x2e4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d00d      	beq.n	800208c <HAL_GPIO_Init+0x1e4>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a47      	ldr	r2, [pc, #284]	; (8002190 <HAL_GPIO_Init+0x2e8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d007      	beq.n	8002088 <HAL_GPIO_Init+0x1e0>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a46      	ldr	r2, [pc, #280]	; (8002194 <HAL_GPIO_Init+0x2ec>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d101      	bne.n	8002084 <HAL_GPIO_Init+0x1dc>
 8002080:	2304      	movs	r3, #4
 8002082:	e008      	b.n	8002096 <HAL_GPIO_Init+0x1ee>
 8002084:	2305      	movs	r3, #5
 8002086:	e006      	b.n	8002096 <HAL_GPIO_Init+0x1ee>
 8002088:	2303      	movs	r3, #3
 800208a:	e004      	b.n	8002096 <HAL_GPIO_Init+0x1ee>
 800208c:	2302      	movs	r3, #2
 800208e:	e002      	b.n	8002096 <HAL_GPIO_Init+0x1ee>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <HAL_GPIO_Init+0x1ee>
 8002094:	2300      	movs	r3, #0
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	f002 0203 	and.w	r2, r2, #3
 800209c:	0092      	lsls	r2, r2, #2
 800209e:	4093      	lsls	r3, r2
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020a6:	4937      	ldr	r1, [pc, #220]	; (8002184 <HAL_GPIO_Init+0x2dc>)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3302      	adds	r3, #2
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b4:	4b38      	ldr	r3, [pc, #224]	; (8002198 <HAL_GPIO_Init+0x2f0>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	43db      	mvns	r3, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020d8:	4a2f      	ldr	r2, [pc, #188]	; (8002198 <HAL_GPIO_Init+0x2f0>)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020de:	4b2e      	ldr	r3, [pc, #184]	; (8002198 <HAL_GPIO_Init+0x2f0>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002102:	4a25      	ldr	r2, [pc, #148]	; (8002198 <HAL_GPIO_Init+0x2f0>)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002108:	4b23      	ldr	r3, [pc, #140]	; (8002198 <HAL_GPIO_Init+0x2f0>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	43db      	mvns	r3, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800212c:	4a1a      	ldr	r2, [pc, #104]	; (8002198 <HAL_GPIO_Init+0x2f0>)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002132:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_GPIO_Init+0x2f0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002156:	4a10      	ldr	r2, [pc, #64]	; (8002198 <HAL_GPIO_Init+0x2f0>)
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	3301      	adds	r3, #1
 8002160:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	f47f aea3 	bne.w	8001eb8 <HAL_GPIO_Init+0x10>
  }
}
 8002172:	bf00      	nop
 8002174:	bf00      	nop
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	40021000 	.word	0x40021000
 8002184:	40010000 	.word	0x40010000
 8002188:	48000400 	.word	0x48000400
 800218c:	48000800 	.word	0x48000800
 8002190:	48000c00 	.word	0x48000c00
 8002194:	48001000 	.word	0x48001000
 8002198:	40010400 	.word	0x40010400

0800219c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
 80021a8:	4613      	mov	r3, r2
 80021aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021ac:	787b      	ldrb	r3, [r7, #1]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021b8:	e002      	b.n	80021c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021dc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	f001 b823 	b.w	8003238 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 817d 	beq.w	8002502 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002208:	4bbc      	ldr	r3, [pc, #752]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b04      	cmp	r3, #4
 8002212:	d00c      	beq.n	800222e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002214:	4bb9      	ldr	r3, [pc, #740]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b08      	cmp	r3, #8
 800221e:	d15c      	bne.n	80022da <HAL_RCC_OscConfig+0x10e>
 8002220:	4bb6      	ldr	r3, [pc, #728]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222c:	d155      	bne.n	80022da <HAL_RCC_OscConfig+0x10e>
 800222e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002232:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002242:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d102      	bne.n	8002260 <HAL_RCC_OscConfig+0x94>
 800225a:	4ba8      	ldr	r3, [pc, #672]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	e015      	b.n	800228c <HAL_RCC_OscConfig+0xc0>
 8002260:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002264:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002274:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002278:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800227c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002288:	4b9c      	ldr	r3, [pc, #624]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002290:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002294:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002298:	fa92 f2a2 	rbit	r2, r2
 800229c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80022a0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80022a4:	fab2 f282 	clz	r2, r2
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	f042 0220 	orr.w	r2, r2, #32
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	f002 021f 	and.w	r2, r2, #31
 80022b4:	2101      	movs	r1, #1
 80022b6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 811f 	beq.w	8002500 <HAL_RCC_OscConfig+0x334>
 80022c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 8116 	bne.w	8002500 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	f000 bfaf 	b.w	8003238 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x12e>
 80022ec:	4b83      	ldr	r3, [pc, #524]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a82      	ldr	r2, [pc, #520]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 80022f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	e036      	b.n	8002368 <HAL_RCC_OscConfig+0x19c>
 80022fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x158>
 800230a:	4b7c      	ldr	r3, [pc, #496]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a7b      	ldr	r2, [pc, #492]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 8002310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	4b79      	ldr	r3, [pc, #484]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a78      	ldr	r2, [pc, #480]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 800231c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e021      	b.n	8002368 <HAL_RCC_OscConfig+0x19c>
 8002324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002328:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002334:	d10c      	bne.n	8002350 <HAL_RCC_OscConfig+0x184>
 8002336:	4b71      	ldr	r3, [pc, #452]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a70      	ldr	r2, [pc, #448]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 800233c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	4b6e      	ldr	r3, [pc, #440]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6d      	ldr	r2, [pc, #436]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 8002348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e00b      	b.n	8002368 <HAL_RCC_OscConfig+0x19c>
 8002350:	4b6a      	ldr	r3, [pc, #424]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a69      	ldr	r2, [pc, #420]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 8002356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	4b67      	ldr	r3, [pc, #412]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a66      	ldr	r2, [pc, #408]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 8002362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002366:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002368:	4b64      	ldr	r3, [pc, #400]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	f023 020f 	bic.w	r2, r3, #15
 8002370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002374:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	495f      	ldr	r1, [pc, #380]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 800237e:	4313      	orrs	r3, r2
 8002380:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d059      	beq.n	8002446 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe fa77 	bl	8000884 <HAL_GetTick>
 8002396:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800239c:	f7fe fa72 	bl	8000884 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b64      	cmp	r3, #100	; 0x64
 80023aa:	d902      	bls.n	80023b2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	f000 bf43 	b.w	8003238 <HAL_RCC_OscConfig+0x106c>
 80023b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80023c6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	095b      	lsrs	r3, r3, #5
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d102      	bne.n	80023e4 <HAL_RCC_OscConfig+0x218>
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	e015      	b.n	8002410 <HAL_RCC_OscConfig+0x244>
 80023e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80023f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023fc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002400:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002404:	fa93 f3a3 	rbit	r3, r3
 8002408:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800240c:	4b3b      	ldr	r3, [pc, #236]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002414:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002418:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800241c:	fa92 f2a2 	rbit	r2, r2
 8002420:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002424:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002428:	fab2 f282 	clz	r2, r2
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	f042 0220 	orr.w	r2, r2, #32
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	f002 021f 	and.w	r2, r2, #31
 8002438:	2101      	movs	r1, #1
 800243a:	fa01 f202 	lsl.w	r2, r1, r2
 800243e:	4013      	ands	r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0ab      	beq.n	800239c <HAL_RCC_OscConfig+0x1d0>
 8002444:	e05d      	b.n	8002502 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002446:	f7fe fa1d 	bl	8000884 <HAL_GetTick>
 800244a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244e:	e00a      	b.n	8002466 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002450:	f7fe fa18 	bl	8000884 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b64      	cmp	r3, #100	; 0x64
 800245e:	d902      	bls.n	8002466 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	f000 bee9 	b.w	8003238 <HAL_RCC_OscConfig+0x106c>
 8002466:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800246a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002472:	fa93 f3a3 	rbit	r3, r3
 8002476:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800247a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	095b      	lsrs	r3, r3, #5
 8002486:	b2db      	uxtb	r3, r3
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b01      	cmp	r3, #1
 8002490:	d102      	bne.n	8002498 <HAL_RCC_OscConfig+0x2cc>
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	e015      	b.n	80024c4 <HAL_RCC_OscConfig+0x2f8>
 8002498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800249c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80024ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80024b4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80024c0:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <HAL_RCC_OscConfig+0x330>)
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024c8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80024cc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80024d0:	fa92 f2a2 	rbit	r2, r2
 80024d4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80024d8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80024dc:	fab2 f282 	clz	r2, r2
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f042 0220 	orr.w	r2, r2, #32
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	f002 021f 	and.w	r2, r2, #31
 80024ec:	2101      	movs	r1, #1
 80024ee:	fa01 f202 	lsl.w	r2, r1, r2
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1ab      	bne.n	8002450 <HAL_RCC_OscConfig+0x284>
 80024f8:	e003      	b.n	8002502 <HAL_RCC_OscConfig+0x336>
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002506:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 817d 	beq.w	8002812 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002518:	4ba6      	ldr	r3, [pc, #664]	; (80027b4 <HAL_RCC_OscConfig+0x5e8>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00b      	beq.n	800253c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002524:	4ba3      	ldr	r3, [pc, #652]	; (80027b4 <HAL_RCC_OscConfig+0x5e8>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	2b08      	cmp	r3, #8
 800252e:	d172      	bne.n	8002616 <HAL_RCC_OscConfig+0x44a>
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCC_OscConfig+0x5e8>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d16c      	bne.n	8002616 <HAL_RCC_OscConfig+0x44a>
 800253c:	2302      	movs	r3, #2
 800253e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800254e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d102      	bne.n	800256c <HAL_RCC_OscConfig+0x3a0>
 8002566:	4b93      	ldr	r3, [pc, #588]	; (80027b4 <HAL_RCC_OscConfig+0x5e8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	e013      	b.n	8002594 <HAL_RCC_OscConfig+0x3c8>
 800256c:	2302      	movs	r3, #2
 800256e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800257e:	2302      	movs	r3, #2
 8002580:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002584:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002590:	4b88      	ldr	r3, [pc, #544]	; (80027b4 <HAL_RCC_OscConfig+0x5e8>)
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	2202      	movs	r2, #2
 8002596:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800259a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800259e:	fa92 f2a2 	rbit	r2, r2
 80025a2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80025a6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80025aa:	fab2 f282 	clz	r2, r2
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	f042 0220 	orr.w	r2, r2, #32
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	f002 021f 	and.w	r2, r2, #31
 80025ba:	2101      	movs	r1, #1
 80025bc:	fa01 f202 	lsl.w	r2, r1, r2
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <HAL_RCC_OscConfig+0x410>
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d002      	beq.n	80025dc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	f000 be2e 	b.w	8003238 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025dc:	4b75      	ldr	r3, [pc, #468]	; (80027b4 <HAL_RCC_OscConfig+0x5e8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	21f8      	movs	r1, #248	; 0xf8
 80025f2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80025fa:	fa91 f1a1 	rbit	r1, r1
 80025fe:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002602:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002606:	fab1 f181 	clz	r1, r1
 800260a:	b2c9      	uxtb	r1, r1
 800260c:	408b      	lsls	r3, r1
 800260e:	4969      	ldr	r1, [pc, #420]	; (80027b4 <HAL_RCC_OscConfig+0x5e8>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002614:	e0fd      	b.n	8002812 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 8088 	beq.w	8002738 <HAL_RCC_OscConfig+0x56c>
 8002628:	2301      	movs	r3, #1
 800262a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800263a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002648:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	461a      	mov	r2, r3
 8002650:	2301      	movs	r3, #1
 8002652:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7fe f916 	bl	8000884 <HAL_GetTick>
 8002658:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265e:	f7fe f911 	bl	8000884 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d902      	bls.n	8002674 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	f000 bde2 	b.w	8003238 <HAL_RCC_OscConfig+0x106c>
 8002674:	2302      	movs	r3, #2
 8002676:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002686:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d102      	bne.n	80026a4 <HAL_RCC_OscConfig+0x4d8>
 800269e:	4b45      	ldr	r3, [pc, #276]	; (80027b4 <HAL_RCC_OscConfig+0x5e8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	e013      	b.n	80026cc <HAL_RCC_OscConfig+0x500>
 80026a4:	2302      	movs	r3, #2
 80026a6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80026b6:	2302      	movs	r3, #2
 80026b8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80026c8:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x5e8>)
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	2202      	movs	r2, #2
 80026ce:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80026d2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80026d6:	fa92 f2a2 	rbit	r2, r2
 80026da:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80026de:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80026e2:	fab2 f282 	clz	r2, r2
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	f042 0220 	orr.w	r2, r2, #32
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	f002 021f 	and.w	r2, r2, #31
 80026f2:	2101      	movs	r1, #1
 80026f4:	fa01 f202 	lsl.w	r2, r1, r2
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0af      	beq.n	800265e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fe:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <HAL_RCC_OscConfig+0x5e8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	21f8      	movs	r1, #248	; 0xf8
 8002714:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800271c:	fa91 f1a1 	rbit	r1, r1
 8002720:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002724:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002728:	fab1 f181 	clz	r1, r1
 800272c:	b2c9      	uxtb	r1, r1
 800272e:	408b      	lsls	r3, r1
 8002730:	4920      	ldr	r1, [pc, #128]	; (80027b4 <HAL_RCC_OscConfig+0x5e8>)
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]
 8002736:	e06c      	b.n	8002812 <HAL_RCC_OscConfig+0x646>
 8002738:	2301      	movs	r3, #1
 800273a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800274a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002758:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	461a      	mov	r2, r3
 8002760:	2300      	movs	r3, #0
 8002762:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7fe f88e 	bl	8000884 <HAL_GetTick>
 8002768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276e:	f7fe f889 	bl	8000884 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d902      	bls.n	8002784 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	f000 bd5a 	b.w	8003238 <HAL_RCC_OscConfig+0x106c>
 8002784:	2302      	movs	r3, #2
 8002786:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002796:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	095b      	lsrs	r3, r3, #5
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d104      	bne.n	80027b8 <HAL_RCC_OscConfig+0x5ec>
 80027ae:	4b01      	ldr	r3, [pc, #4]	; (80027b4 <HAL_RCC_OscConfig+0x5e8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	e015      	b.n	80027e0 <HAL_RCC_OscConfig+0x614>
 80027b4:	40021000 	.word	0x40021000
 80027b8:	2302      	movs	r3, #2
 80027ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80027ca:	2302      	movs	r3, #2
 80027cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80027d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80027dc:	4bc8      	ldr	r3, [pc, #800]	; (8002b00 <HAL_RCC_OscConfig+0x934>)
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	2202      	movs	r2, #2
 80027e2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80027e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80027ea:	fa92 f2a2 	rbit	r2, r2
 80027ee:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80027f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80027f6:	fab2 f282 	clz	r2, r2
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	f042 0220 	orr.w	r2, r2, #32
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	f002 021f 	and.w	r2, r2, #31
 8002806:	2101      	movs	r1, #1
 8002808:	fa01 f202 	lsl.w	r2, r1, r2
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1ad      	bne.n	800276e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002816:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8110 	beq.w	8002a48 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d079      	beq.n	800292c <HAL_RCC_OscConfig+0x760>
 8002838:	2301      	movs	r3, #1
 800283a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800284a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	4bab      	ldr	r3, [pc, #684]	; (8002b04 <HAL_RCC_OscConfig+0x938>)
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	461a      	mov	r2, r3
 800285e:	2301      	movs	r3, #1
 8002860:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002862:	f7fe f80f 	bl	8000884 <HAL_GetTick>
 8002866:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286a:	e00a      	b.n	8002882 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800286c:	f7fe f80a 	bl	8000884 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d902      	bls.n	8002882 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	f000 bcdb 	b.w	8003238 <HAL_RCC_OscConfig+0x106c>
 8002882:	2302      	movs	r3, #2
 8002884:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002898:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800289c:	2202      	movs	r2, #2
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	fa93 f2a3 	rbit	r2, r3
 80028ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028c0:	2202      	movs	r2, #2
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	fa93 f2a3 	rbit	r2, r3
 80028d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028dc:	4b88      	ldr	r3, [pc, #544]	; (8002b00 <HAL_RCC_OscConfig+0x934>)
 80028de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028e8:	2102      	movs	r1, #2
 80028ea:	6019      	str	r1, [r3, #0]
 80028ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	fa93 f1a3 	rbit	r1, r3
 80028fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002902:	6019      	str	r1, [r3, #0]
  return result;
 8002904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002908:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002918:	b2db      	uxtb	r3, r3
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	2101      	movs	r1, #1
 8002920:	fa01 f303 	lsl.w	r3, r1, r3
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0a0      	beq.n	800286c <HAL_RCC_OscConfig+0x6a0>
 800292a:	e08d      	b.n	8002a48 <HAL_RCC_OscConfig+0x87c>
 800292c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002930:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002934:	2201      	movs	r2, #1
 8002936:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	fa93 f2a3 	rbit	r2, r3
 8002946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800294e:	601a      	str	r2, [r3, #0]
  return result;
 8002950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002954:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002958:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	4b68      	ldr	r3, [pc, #416]	; (8002b04 <HAL_RCC_OscConfig+0x938>)
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	461a      	mov	r2, r3
 800296a:	2300      	movs	r3, #0
 800296c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296e:	f7fd ff89 	bl	8000884 <HAL_GetTick>
 8002972:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002976:	e00a      	b.n	800298e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002978:	f7fd ff84 	bl	8000884 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d902      	bls.n	800298e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	f000 bc55 	b.w	8003238 <HAL_RCC_OscConfig+0x106c>
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002996:	2202      	movs	r2, #2
 8002998:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	fa93 f2a3 	rbit	r2, r3
 80029a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029ba:	2202      	movs	r2, #2
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	fa93 f2a3 	rbit	r2, r3
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80029de:	2202      	movs	r2, #2
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	fa93 f2a3 	rbit	r2, r3
 80029f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fa:	4b41      	ldr	r3, [pc, #260]	; (8002b00 <HAL_RCC_OscConfig+0x934>)
 80029fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a02:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a06:	2102      	movs	r1, #2
 8002a08:	6019      	str	r1, [r3, #0]
 8002a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	fa93 f1a3 	rbit	r1, r3
 8002a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a20:	6019      	str	r1, [r3, #0]
  return result;
 8002a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a26:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d197      	bne.n	8002978 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 81a1 	beq.w	8002da0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a64:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <HAL_RCC_OscConfig+0x934>)
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d116      	bne.n	8002a9e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a70:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <HAL_RCC_OscConfig+0x934>)
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	4a22      	ldr	r2, [pc, #136]	; (8002b00 <HAL_RCC_OscConfig+0x934>)
 8002a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	61d3      	str	r3, [r2, #28]
 8002a7c:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <HAL_RCC_OscConfig+0x934>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a88:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a92:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a96:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <HAL_RCC_OscConfig+0x93c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d11a      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aaa:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <HAL_RCC_OscConfig+0x93c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a16      	ldr	r2, [pc, #88]	; (8002b08 <HAL_RCC_OscConfig+0x93c>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab6:	f7fd fee5 	bl	8000884 <HAL_GetTick>
 8002aba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abe:	e009      	b.n	8002ad4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac0:	f7fd fee0 	bl	8000884 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b64      	cmp	r3, #100	; 0x64
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e3b1      	b.n	8003238 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <HAL_RCC_OscConfig+0x93c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0ef      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d10d      	bne.n	8002b0c <HAL_RCC_OscConfig+0x940>
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <HAL_RCC_OscConfig+0x934>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4a02      	ldr	r2, [pc, #8]	; (8002b00 <HAL_RCC_OscConfig+0x934>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6213      	str	r3, [r2, #32]
 8002afc:	e03c      	b.n	8002b78 <HAL_RCC_OscConfig+0x9ac>
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000
 8002b04:	10908120 	.word	0x10908120
 8002b08:	40007000 	.word	0x40007000
 8002b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10c      	bne.n	8002b36 <HAL_RCC_OscConfig+0x96a>
 8002b1c:	4bc1      	ldr	r3, [pc, #772]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4ac0      	ldr	r2, [pc, #768]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002b22:	f023 0301 	bic.w	r3, r3, #1
 8002b26:	6213      	str	r3, [r2, #32]
 8002b28:	4bbe      	ldr	r3, [pc, #760]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4abd      	ldr	r2, [pc, #756]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002b2e:	f023 0304 	bic.w	r3, r3, #4
 8002b32:	6213      	str	r3, [r2, #32]
 8002b34:	e020      	b.n	8002b78 <HAL_RCC_OscConfig+0x9ac>
 8002b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b05      	cmp	r3, #5
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x994>
 8002b46:	4bb7      	ldr	r3, [pc, #732]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	4ab6      	ldr	r2, [pc, #728]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002b4c:	f043 0304 	orr.w	r3, r3, #4
 8002b50:	6213      	str	r3, [r2, #32]
 8002b52:	4bb4      	ldr	r3, [pc, #720]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	4ab3      	ldr	r2, [pc, #716]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6213      	str	r3, [r2, #32]
 8002b5e:	e00b      	b.n	8002b78 <HAL_RCC_OscConfig+0x9ac>
 8002b60:	4bb0      	ldr	r3, [pc, #704]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4aaf      	ldr	r2, [pc, #700]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002b66:	f023 0301 	bic.w	r3, r3, #1
 8002b6a:	6213      	str	r3, [r2, #32]
 8002b6c:	4bad      	ldr	r3, [pc, #692]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4aac      	ldr	r2, [pc, #688]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002b72:	f023 0304 	bic.w	r3, r3, #4
 8002b76:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 8081 	beq.w	8002c8c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8a:	f7fd fe7b 	bl	8000884 <HAL_GetTick>
 8002b8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b92:	e00b      	b.n	8002bac <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b94:	f7fd fe76 	bl	8000884 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e345      	b.n	8003238 <HAL_RCC_OscConfig+0x106c>
 8002bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	fa93 f2a3 	rbit	r2, r3
 8002bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002bd8:	2202      	movs	r2, #2
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	fa93 f2a3 	rbit	r2, r3
 8002bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002bf2:	601a      	str	r2, [r3, #0]
  return result;
 8002bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002bfc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f043 0302 	orr.w	r3, r3, #2
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d102      	bne.n	8002c18 <HAL_RCC_OscConfig+0xa4c>
 8002c12:	4b84      	ldr	r3, [pc, #528]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	e013      	b.n	8002c40 <HAL_RCC_OscConfig+0xa74>
 8002c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c20:	2202      	movs	r2, #2
 8002c22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c28:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	fa93 f2a3 	rbit	r2, r3
 8002c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c36:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	4b79      	ldr	r3, [pc, #484]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c44:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c48:	2102      	movs	r1, #2
 8002c4a:	6011      	str	r1, [r2, #0]
 8002c4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c50:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	fa92 f1a2 	rbit	r1, r2
 8002c5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c5e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c62:	6011      	str	r1, [r2, #0]
  return result;
 8002c64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c68:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	fab2 f282 	clz	r2, r2
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	f002 021f 	and.w	r2, r2, #31
 8002c7e:	2101      	movs	r1, #1
 8002c80:	fa01 f202 	lsl.w	r2, r1, r2
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d084      	beq.n	8002b94 <HAL_RCC_OscConfig+0x9c8>
 8002c8a:	e07f      	b.n	8002d8c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8c:	f7fd fdfa 	bl	8000884 <HAL_GetTick>
 8002c90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c94:	e00b      	b.n	8002cae <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c96:	f7fd fdf5 	bl	8000884 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e2c4      	b.n	8003238 <HAL_RCC_OscConfig+0x106c>
 8002cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	fa93 f2a3 	rbit	r2, r3
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002cda:	2202      	movs	r2, #2
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	fa93 f2a3 	rbit	r2, r3
 8002cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002cf4:	601a      	str	r2, [r3, #0]
  return result;
 8002cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002cfe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f043 0302 	orr.w	r3, r3, #2
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d102      	bne.n	8002d1a <HAL_RCC_OscConfig+0xb4e>
 8002d14:	4b43      	ldr	r3, [pc, #268]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	e013      	b.n	8002d42 <HAL_RCC_OscConfig+0xb76>
 8002d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d22:	2202      	movs	r2, #2
 8002d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	fa93 f2a3 	rbit	r2, r3
 8002d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d38:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	4b39      	ldr	r3, [pc, #228]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d46:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d4a:	2102      	movs	r1, #2
 8002d4c:	6011      	str	r1, [r2, #0]
 8002d4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d52:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	fa92 f1a2 	rbit	r1, r2
 8002d5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d60:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d64:	6011      	str	r1, [r2, #0]
  return result;
 8002d66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d6a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	fab2 f282 	clz	r2, r2
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	f002 021f 	and.w	r2, r2, #31
 8002d80:	2101      	movs	r1, #1
 8002d82:	fa01 f202 	lsl.w	r2, r1, r2
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d184      	bne.n	8002c96 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d8c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d94:	4b23      	ldr	r3, [pc, #140]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	4a22      	ldr	r2, [pc, #136]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 8242 	beq.w	8003236 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db2:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <HAL_RCC_OscConfig+0xc58>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	f000 8213 	beq.w	80031e6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	f040 8162 	bne.w	8003096 <HAL_RCC_OscConfig+0xeca>
 8002dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002dda:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	fa93 f2a3 	rbit	r2, r3
 8002dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002df6:	601a      	str	r2, [r3, #0]
  return result;
 8002df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e00:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	461a      	mov	r2, r3
 8002e14:	2300      	movs	r3, #0
 8002e16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7fd fd34 	bl	8000884 <HAL_GetTick>
 8002e1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e20:	e00c      	b.n	8002e3c <HAL_RCC_OscConfig+0xc70>
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e28:	f7fd fd2c 	bl	8000884 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e1fd      	b.n	8003238 <HAL_RCC_OscConfig+0x106c>
 8002e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e40:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	fa93 f2a3 	rbit	r2, r3
 8002e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e60:	601a      	str	r2, [r3, #0]
  return result;
 8002e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e66:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6c:	fab3 f383 	clz	r3, r3
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d102      	bne.n	8002e86 <HAL_RCC_OscConfig+0xcba>
 8002e80:	4bb0      	ldr	r3, [pc, #704]	; (8003144 <HAL_RCC_OscConfig+0xf78>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	e027      	b.n	8002ed6 <HAL_RCC_OscConfig+0xd0a>
 8002e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e98:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	fa93 f2a3 	rbit	r2, r3
 8002ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002eb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	fa93 f2a3 	rbit	r2, r3
 8002ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ecc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	4b9c      	ldr	r3, [pc, #624]	; (8003144 <HAL_RCC_OscConfig+0xf78>)
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eda:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002ede:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ee2:	6011      	str	r1, [r2, #0]
 8002ee4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ee8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002eec:	6812      	ldr	r2, [r2, #0]
 8002eee:	fa92 f1a2 	rbit	r1, r2
 8002ef2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ef6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002efa:	6011      	str	r1, [r2, #0]
  return result;
 8002efc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f00:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	fab2 f282 	clz	r2, r2
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	f042 0220 	orr.w	r2, r2, #32
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	f002 021f 	and.w	r2, r2, #31
 8002f16:	2101      	movs	r1, #1
 8002f18:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d182      	bne.n	8002e28 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f22:	4b88      	ldr	r3, [pc, #544]	; (8003144 <HAL_RCC_OscConfig+0xf78>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	430b      	orrs	r3, r1
 8002f44:	497f      	ldr	r1, [pc, #508]	; (8003144 <HAL_RCC_OscConfig+0xf78>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	fa93 f2a3 	rbit	r2, r3
 8002f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f6e:	601a      	str	r2, [r3, #0]
  return result;
 8002f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f74:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f78:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f7a:	fab3 f383 	clz	r3, r3
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fd fc78 	bl	8000884 <HAL_GetTick>
 8002f94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f98:	e009      	b.n	8002fae <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9a:	f7fd fc73 	bl	8000884 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e144      	b.n	8003238 <HAL_RCC_OscConfig+0x106c>
 8002fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002fb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	fa93 f2a3 	rbit	r2, r3
 8002fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fce:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002fd2:	601a      	str	r2, [r3, #0]
  return result;
 8002fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002fdc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	095b      	lsrs	r3, r3, #5
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d102      	bne.n	8002ff8 <HAL_RCC_OscConfig+0xe2c>
 8002ff2:	4b54      	ldr	r3, [pc, #336]	; (8003144 <HAL_RCC_OscConfig+0xf78>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	e027      	b.n	8003048 <HAL_RCC_OscConfig+0xe7c>
 8002ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003000:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003004:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	fa93 f2a3 	rbit	r2, r3
 8003014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003018:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003022:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003026:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003030:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	fa93 f2a3 	rbit	r2, r3
 800303a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	4b3f      	ldr	r3, [pc, #252]	; (8003144 <HAL_RCC_OscConfig+0xf78>)
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800304c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003050:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003054:	6011      	str	r1, [r2, #0]
 8003056:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800305a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	fa92 f1a2 	rbit	r1, r2
 8003064:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003068:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800306c:	6011      	str	r1, [r2, #0]
  return result;
 800306e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003072:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	fab2 f282 	clz	r2, r2
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	f042 0220 	orr.w	r2, r2, #32
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	f002 021f 	and.w	r2, r2, #31
 8003088:	2101      	movs	r1, #1
 800308a:	fa01 f202 	lsl.w	r2, r1, r2
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d082      	beq.n	8002f9a <HAL_RCC_OscConfig+0xdce>
 8003094:	e0cf      	b.n	8003236 <HAL_RCC_OscConfig+0x106a>
 8003096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800309e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	fa93 f2a3 	rbit	r2, r3
 80030b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80030ba:	601a      	str	r2, [r3, #0]
  return result;
 80030bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80030c4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	461a      	mov	r2, r3
 80030d8:	2300      	movs	r3, #0
 80030da:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7fd fbd2 	bl	8000884 <HAL_GetTick>
 80030e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e4:	e009      	b.n	80030fa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e6:	f7fd fbcd 	bl	8000884 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e09e      	b.n	8003238 <HAL_RCC_OscConfig+0x106c>
 80030fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003102:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	fa93 f2a3 	rbit	r2, r3
 8003116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800311e:	601a      	str	r2, [r3, #0]
  return result;
 8003120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003124:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003128:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800312a:	fab3 f383 	clz	r3, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d104      	bne.n	8003148 <HAL_RCC_OscConfig+0xf7c>
 800313e:	4b01      	ldr	r3, [pc, #4]	; (8003144 <HAL_RCC_OscConfig+0xf78>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	e029      	b.n	8003198 <HAL_RCC_OscConfig+0xfcc>
 8003144:	40021000 	.word	0x40021000
 8003148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003150:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	fa93 f2a3 	rbit	r2, r3
 8003164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003168:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003172:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003176:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003180:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	fa93 f2a3 	rbit	r2, r3
 800318a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	4b2b      	ldr	r3, [pc, #172]	; (8003244 <HAL_RCC_OscConfig+0x1078>)
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800319c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80031a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031a4:	6011      	str	r1, [r2, #0]
 80031a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031aa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	fa92 f1a2 	rbit	r1, r2
 80031b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031b8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80031bc:	6011      	str	r1, [r2, #0]
  return result;
 80031be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031c2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	fab2 f282 	clz	r2, r2
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	f042 0220 	orr.w	r2, r2, #32
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	f002 021f 	and.w	r2, r2, #31
 80031d8:	2101      	movs	r1, #1
 80031da:	fa01 f202 	lsl.w	r2, r1, r2
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d180      	bne.n	80030e6 <HAL_RCC_OscConfig+0xf1a>
 80031e4:	e027      	b.n	8003236 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e01e      	b.n	8003238 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031fa:	4b12      	ldr	r3, [pc, #72]	; (8003244 <HAL_RCC_OscConfig+0x1078>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003202:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003206:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800320a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	429a      	cmp	r2, r3
 8003218:	d10b      	bne.n	8003232 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800321a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800321e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003226:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800322e:	429a      	cmp	r2, r3
 8003230:	d001      	beq.n	8003236 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000

08003248 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b09e      	sub	sp, #120	; 0x78
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e162      	b.n	8003526 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003260:	4b90      	ldr	r3, [pc, #576]	; (80034a4 <HAL_RCC_ClockConfig+0x25c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d910      	bls.n	8003290 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b8d      	ldr	r3, [pc, #564]	; (80034a4 <HAL_RCC_ClockConfig+0x25c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 0207 	bic.w	r2, r3, #7
 8003276:	498b      	ldr	r1, [pc, #556]	; (80034a4 <HAL_RCC_ClockConfig+0x25c>)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	4313      	orrs	r3, r2
 800327c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b89      	ldr	r3, [pc, #548]	; (80034a4 <HAL_RCC_ClockConfig+0x25c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e14a      	b.n	8003526 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329c:	4b82      	ldr	r3, [pc, #520]	; (80034a8 <HAL_RCC_ClockConfig+0x260>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	497f      	ldr	r1, [pc, #508]	; (80034a8 <HAL_RCC_ClockConfig+0x260>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 80dc 	beq.w	8003474 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d13c      	bne.n	800333e <HAL_RCC_ClockConfig+0xf6>
 80032c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032c8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d102      	bne.n	80032ee <HAL_RCC_ClockConfig+0xa6>
 80032e8:	4b6f      	ldr	r3, [pc, #444]	; (80034a8 <HAL_RCC_ClockConfig+0x260>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	e00f      	b.n	800330e <HAL_RCC_ClockConfig+0xc6>
 80032ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	667b      	str	r3, [r7, #100]	; 0x64
 80032fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003300:	663b      	str	r3, [r7, #96]	; 0x60
 8003302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800330a:	4b67      	ldr	r3, [pc, #412]	; (80034a8 <HAL_RCC_ClockConfig+0x260>)
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003312:	65ba      	str	r2, [r7, #88]	; 0x58
 8003314:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003316:	fa92 f2a2 	rbit	r2, r2
 800331a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800331c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800331e:	fab2 f282 	clz	r2, r2
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	f042 0220 	orr.w	r2, r2, #32
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	f002 021f 	and.w	r2, r2, #31
 800332e:	2101      	movs	r1, #1
 8003330:	fa01 f202 	lsl.w	r2, r1, r2
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d17b      	bne.n	8003432 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e0f3      	b.n	8003526 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d13c      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x178>
 8003346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800334a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003356:	fab3 f383 	clz	r3, r3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	095b      	lsrs	r3, r3, #5
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d102      	bne.n	8003370 <HAL_RCC_ClockConfig+0x128>
 800336a:	4b4f      	ldr	r3, [pc, #316]	; (80034a8 <HAL_RCC_ClockConfig+0x260>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	e00f      	b.n	8003390 <HAL_RCC_ClockConfig+0x148>
 8003370:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003374:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	647b      	str	r3, [r7, #68]	; 0x44
 800337e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003382:	643b      	str	r3, [r7, #64]	; 0x40
 8003384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800338c:	4b46      	ldr	r3, [pc, #280]	; (80034a8 <HAL_RCC_ClockConfig+0x260>)
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003394:	63ba      	str	r2, [r7, #56]	; 0x38
 8003396:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003398:	fa92 f2a2 	rbit	r2, r2
 800339c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800339e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033a0:	fab2 f282 	clz	r2, r2
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	f042 0220 	orr.w	r2, r2, #32
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	f002 021f 	and.w	r2, r2, #31
 80033b0:	2101      	movs	r1, #1
 80033b2:	fa01 f202 	lsl.w	r2, r1, r2
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d13a      	bne.n	8003432 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0b2      	b.n	8003526 <HAL_RCC_ClockConfig+0x2de>
 80033c0:	2302      	movs	r3, #2
 80033c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ce:	fab3 f383 	clz	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d102      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x1a0>
 80033e2:	4b31      	ldr	r3, [pc, #196]	; (80034a8 <HAL_RCC_ClockConfig+0x260>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	e00d      	b.n	8003404 <HAL_RCC_ClockConfig+0x1bc>
 80033e8:	2302      	movs	r3, #2
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
 80033f4:	2302      	movs	r3, #2
 80033f6:	623b      	str	r3, [r7, #32]
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	fa93 f3a3 	rbit	r3, r3
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	4b29      	ldr	r3, [pc, #164]	; (80034a8 <HAL_RCC_ClockConfig+0x260>)
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	2202      	movs	r2, #2
 8003406:	61ba      	str	r2, [r7, #24]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	fa92 f2a2 	rbit	r2, r2
 800340e:	617a      	str	r2, [r7, #20]
  return result;
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	fab2 f282 	clz	r2, r2
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	f042 0220 	orr.w	r2, r2, #32
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	f002 021f 	and.w	r2, r2, #31
 8003422:	2101      	movs	r1, #1
 8003424:	fa01 f202 	lsl.w	r2, r1, r2
 8003428:	4013      	ands	r3, r2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e079      	b.n	8003526 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003432:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <HAL_RCC_ClockConfig+0x260>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f023 0203 	bic.w	r2, r3, #3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	491a      	ldr	r1, [pc, #104]	; (80034a8 <HAL_RCC_ClockConfig+0x260>)
 8003440:	4313      	orrs	r3, r2
 8003442:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003444:	f7fd fa1e 	bl	8000884 <HAL_GetTick>
 8003448:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	e00a      	b.n	8003462 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800344c:	f7fd fa1a 	bl	8000884 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f241 3288 	movw	r2, #5000	; 0x1388
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e061      	b.n	8003526 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003462:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <HAL_RCC_ClockConfig+0x260>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 020c 	and.w	r2, r3, #12
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	429a      	cmp	r2, r3
 8003472:	d1eb      	bne.n	800344c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_RCC_ClockConfig+0x25c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d214      	bcs.n	80034ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <HAL_RCC_ClockConfig+0x25c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 0207 	bic.w	r2, r3, #7
 800348a:	4906      	ldr	r1, [pc, #24]	; (80034a4 <HAL_RCC_ClockConfig+0x25c>)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003492:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <HAL_RCC_ClockConfig+0x25c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d005      	beq.n	80034ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e040      	b.n	8003526 <HAL_RCC_ClockConfig+0x2de>
 80034a4:	40022000 	.word	0x40022000
 80034a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b8:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_RCC_ClockConfig+0x2e8>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	491a      	ldr	r1, [pc, #104]	; (8003530 <HAL_RCC_ClockConfig+0x2e8>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d009      	beq.n	80034ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034d6:	4b16      	ldr	r3, [pc, #88]	; (8003530 <HAL_RCC_ClockConfig+0x2e8>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4912      	ldr	r1, [pc, #72]	; (8003530 <HAL_RCC_ClockConfig+0x2e8>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034ea:	f000 f829 	bl	8003540 <HAL_RCC_GetSysClockFreq>
 80034ee:	4601      	mov	r1, r0
 80034f0:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <HAL_RCC_ClockConfig+0x2e8>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f8:	22f0      	movs	r2, #240	; 0xf0
 80034fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	fa92 f2a2 	rbit	r2, r2
 8003502:	60fa      	str	r2, [r7, #12]
  return result;
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	fab2 f282 	clz	r2, r2
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	40d3      	lsrs	r3, r2
 800350e:	4a09      	ldr	r2, [pc, #36]	; (8003534 <HAL_RCC_ClockConfig+0x2ec>)
 8003510:	5cd3      	ldrb	r3, [r2, r3]
 8003512:	fa21 f303 	lsr.w	r3, r1, r3
 8003516:	4a08      	ldr	r2, [pc, #32]	; (8003538 <HAL_RCC_ClockConfig+0x2f0>)
 8003518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800351a:	4b08      	ldr	r3, [pc, #32]	; (800353c <HAL_RCC_ClockConfig+0x2f4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fd f96c 	bl	80007fc <HAL_InitTick>
  
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3778      	adds	r7, #120	; 0x78
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	080039e4 	.word	0x080039e4
 8003538:	20000000 	.word	0x20000000
 800353c:	20000004 	.word	0x20000004

08003540 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003540:	b480      	push	{r7}
 8003542:	b08b      	sub	sp, #44	; 0x2c
 8003544:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	2300      	movs	r3, #0
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800355a:	4b29      	ldr	r3, [pc, #164]	; (8003600 <HAL_RCC_GetSysClockFreq+0xc0>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b04      	cmp	r3, #4
 8003568:	d002      	beq.n	8003570 <HAL_RCC_GetSysClockFreq+0x30>
 800356a:	2b08      	cmp	r3, #8
 800356c:	d003      	beq.n	8003576 <HAL_RCC_GetSysClockFreq+0x36>
 800356e:	e03c      	b.n	80035ea <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003570:	4b24      	ldr	r3, [pc, #144]	; (8003604 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003572:	623b      	str	r3, [r7, #32]
      break;
 8003574:	e03c      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800357c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003580:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	fa92 f2a2 	rbit	r2, r2
 8003588:	607a      	str	r2, [r7, #4]
  return result;
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	fab2 f282 	clz	r2, r2
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	40d3      	lsrs	r3, r2
 8003594:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003596:	5cd3      	ldrb	r3, [r2, r3]
 8003598:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800359a:	4b19      	ldr	r3, [pc, #100]	; (8003600 <HAL_RCC_GetSysClockFreq+0xc0>)
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	220f      	movs	r2, #15
 80035a4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	fa92 f2a2 	rbit	r2, r2
 80035ac:	60fa      	str	r2, [r7, #12]
  return result;
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	fab2 f282 	clz	r2, r2
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	40d3      	lsrs	r3, r2
 80035b8:	4a14      	ldr	r2, [pc, #80]	; (800360c <HAL_RCC_GetSysClockFreq+0xcc>)
 80035ba:	5cd3      	ldrb	r3, [r2, r3]
 80035bc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035c8:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
 80035d8:	e004      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	4a0c      	ldr	r2, [pc, #48]	; (8003610 <HAL_RCC_GetSysClockFreq+0xd0>)
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	623b      	str	r3, [r7, #32]
      break;
 80035e8:	e002      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035ec:	623b      	str	r3, [r7, #32]
      break;
 80035ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035f0:	6a3b      	ldr	r3, [r7, #32]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	372c      	adds	r7, #44	; 0x2c
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000
 8003604:	007a1200 	.word	0x007a1200
 8003608:	080039f4 	.word	0x080039f4
 800360c:	08003a04 	.word	0x08003a04
 8003610:	003d0900 	.word	0x003d0900

08003614 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b092      	sub	sp, #72	; 0x48
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003624:	2300      	movs	r3, #0
 8003626:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 80d4 	beq.w	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003638:	4b4e      	ldr	r3, [pc, #312]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10e      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003644:	4b4b      	ldr	r3, [pc, #300]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	4a4a      	ldr	r2, [pc, #296]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364e:	61d3      	str	r3, [r2, #28]
 8003650:	4b48      	ldr	r3, [pc, #288]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800365c:	2301      	movs	r3, #1
 800365e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003662:	4b45      	ldr	r3, [pc, #276]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d118      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800366e:	4b42      	ldr	r3, [pc, #264]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a41      	ldr	r2, [pc, #260]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003678:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367a:	f7fd f903 	bl	8000884 <HAL_GetTick>
 800367e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003680:	e008      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003682:	f7fd f8ff 	bl	8000884 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b64      	cmp	r3, #100	; 0x64
 800368e:	d901      	bls.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e169      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003694:	4b38      	ldr	r3, [pc, #224]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036a0:	4b34      	ldr	r3, [pc, #208]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8084 	beq.w	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036bc:	429a      	cmp	r2, r3
 80036be:	d07c      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036c0:	4b2c      	ldr	r3, [pc, #176]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	4b26      	ldr	r3, [pc, #152]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	461a      	mov	r2, r3
 80036ea:	2301      	movs	r3, #1
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	4b1d      	ldr	r3, [pc, #116]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	461a      	mov	r2, r3
 800370e:	2300      	movs	r3, #0
 8003710:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003712:	4a18      	ldr	r2, [pc, #96]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003716:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d04b      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003722:	f7fd f8af 	bl	8000884 <HAL_GetTick>
 8003726:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003728:	e00a      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372a:	f7fd f8ab 	bl	8000884 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f241 3288 	movw	r2, #5000	; 0x1388
 8003738:	4293      	cmp	r3, r2
 800373a:	d901      	bls.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e113      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003740:	2302      	movs	r3, #2
 8003742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
 800374c:	2302      	movs	r3, #2
 800374e:	623b      	str	r3, [r7, #32]
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	61fb      	str	r3, [r7, #28]
  return result;
 8003758:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f043 0302 	orr.w	r3, r3, #2
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d108      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800376e:	4b01      	ldr	r3, [pc, #4]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	e00d      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003774:	40021000 	.word	0x40021000
 8003778:	40007000 	.word	0x40007000
 800377c:	10908100 	.word	0x10908100
 8003780:	2302      	movs	r3, #2
 8003782:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	fa93 f3a3 	rbit	r3, r3
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	4b78      	ldr	r3, [pc, #480]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	2202      	movs	r2, #2
 8003792:	613a      	str	r2, [r7, #16]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	fa92 f2a2 	rbit	r2, r2
 800379a:	60fa      	str	r2, [r7, #12]
  return result;
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	fab2 f282 	clz	r2, r2
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	f002 021f 	and.w	r2, r2, #31
 80037ae:	2101      	movs	r1, #1
 80037b0:	fa01 f202 	lsl.w	r2, r1, r2
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0b7      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037ba:	4b6d      	ldr	r3, [pc, #436]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	496a      	ldr	r1, [pc, #424]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d105      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d4:	4b66      	ldr	r3, [pc, #408]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	4a65      	ldr	r2, [pc, #404]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ec:	4b60      	ldr	r3, [pc, #384]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	f023 0203 	bic.w	r2, r3, #3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	495d      	ldr	r1, [pc, #372]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d008      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800380a:	4b59      	ldr	r3, [pc, #356]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	4956      	ldr	r1, [pc, #344]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003818:	4313      	orrs	r3, r2
 800381a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003828:	4b51      	ldr	r3, [pc, #324]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	494e      	ldr	r1, [pc, #312]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003836:	4313      	orrs	r3, r2
 8003838:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003846:	4b4a      	ldr	r3, [pc, #296]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	f023 0210 	bic.w	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	4947      	ldr	r1, [pc, #284]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003854:	4313      	orrs	r3, r2
 8003856:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003864:	4b42      	ldr	r3, [pc, #264]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003870:	493f      	ldr	r1, [pc, #252]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003872:	4313      	orrs	r3, r2
 8003874:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d008      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003882:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	f023 0220 	bic.w	r2, r3, #32
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4938      	ldr	r1, [pc, #224]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003890:	4313      	orrs	r3, r2
 8003892:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038a0:	4b33      	ldr	r3, [pc, #204]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	4930      	ldr	r1, [pc, #192]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038be:	4b2c      	ldr	r3, [pc, #176]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	4929      	ldr	r1, [pc, #164]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038dc:	4b24      	ldr	r3, [pc, #144]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	4921      	ldr	r1, [pc, #132]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	491a      	ldr	r1, [pc, #104]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003908:	4313      	orrs	r3, r2
 800390a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003918:	4b15      	ldr	r3, [pc, #84]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	4912      	ldr	r1, [pc, #72]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003926:	4313      	orrs	r3, r2
 8003928:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d008      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	490b      	ldr	r1, [pc, #44]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003944:	4313      	orrs	r3, r2
 8003946:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003960:	4903      	ldr	r1, [pc, #12]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003962:	4313      	orrs	r3, r2
 8003964:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3748      	adds	r7, #72	; 0x48
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40021000 	.word	0x40021000

08003974 <__libc_init_array>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	4d0d      	ldr	r5, [pc, #52]	; (80039ac <__libc_init_array+0x38>)
 8003978:	4c0d      	ldr	r4, [pc, #52]	; (80039b0 <__libc_init_array+0x3c>)
 800397a:	1b64      	subs	r4, r4, r5
 800397c:	10a4      	asrs	r4, r4, #2
 800397e:	2600      	movs	r6, #0
 8003980:	42a6      	cmp	r6, r4
 8003982:	d109      	bne.n	8003998 <__libc_init_array+0x24>
 8003984:	4d0b      	ldr	r5, [pc, #44]	; (80039b4 <__libc_init_array+0x40>)
 8003986:	4c0c      	ldr	r4, [pc, #48]	; (80039b8 <__libc_init_array+0x44>)
 8003988:	f000 f820 	bl	80039cc <_init>
 800398c:	1b64      	subs	r4, r4, r5
 800398e:	10a4      	asrs	r4, r4, #2
 8003990:	2600      	movs	r6, #0
 8003992:	42a6      	cmp	r6, r4
 8003994:	d105      	bne.n	80039a2 <__libc_init_array+0x2e>
 8003996:	bd70      	pop	{r4, r5, r6, pc}
 8003998:	f855 3b04 	ldr.w	r3, [r5], #4
 800399c:	4798      	blx	r3
 800399e:	3601      	adds	r6, #1
 80039a0:	e7ee      	b.n	8003980 <__libc_init_array+0xc>
 80039a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a6:	4798      	blx	r3
 80039a8:	3601      	adds	r6, #1
 80039aa:	e7f2      	b.n	8003992 <__libc_init_array+0x1e>
 80039ac:	08003a14 	.word	0x08003a14
 80039b0:	08003a14 	.word	0x08003a14
 80039b4:	08003a14 	.word	0x08003a14
 80039b8:	08003a18 	.word	0x08003a18

080039bc <memset>:
 80039bc:	4402      	add	r2, r0
 80039be:	4603      	mov	r3, r0
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d100      	bne.n	80039c6 <memset+0xa>
 80039c4:	4770      	bx	lr
 80039c6:	f803 1b01 	strb.w	r1, [r3], #1
 80039ca:	e7f9      	b.n	80039c0 <memset+0x4>

080039cc <_init>:
 80039cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ce:	bf00      	nop
 80039d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d2:	bc08      	pop	{r3}
 80039d4:	469e      	mov	lr, r3
 80039d6:	4770      	bx	lr

080039d8 <_fini>:
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039da:	bf00      	nop
 80039dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039de:	bc08      	pop	{r3}
 80039e0:	469e      	mov	lr, r3
 80039e2:	4770      	bx	lr
