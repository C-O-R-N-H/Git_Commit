
escape_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006030  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080061b8  080061b8  000161b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006314  08006314  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08006314  08006314  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006314  08006314  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006314  08006314  00016314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006318  08006318  00016318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800631c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
 10 .bss          000004e4  200000b0  200000b0  000200b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000594  20000594  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ea7  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000303f  00000000  00000000  00035f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  00038fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001118  00000000  00000000  0003a290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f9c1  00000000  00000000  0003b3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e7b  00000000  00000000  0005ad69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b99eb  00000000  00000000  00073be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d5cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f7c  00000000  00000000  0012d620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b0 	.word	0x200000b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080061a0 	.word	0x080061a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b4 	.word	0x200000b4
 80001c4:	080061a0 	.word	0x080061a0

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	; (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	; (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <enable_clocks>:
#include "board.h"
#include "ptu_definitions.h"
#include "ptu_i2c.h"

// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 800025c:	4b05      	ldr	r3, [pc, #20]	; (8000274 <enable_clocks+0x1c>)
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	4a04      	ldr	r2, [pc, #16]	; (8000274 <enable_clocks+0x1c>)
 8000262:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000266:	6153      	str	r3, [r2, #20]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40021000 	.word	0x40021000

08000278 <initialise_board>:

// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 800027e:	4b06      	ldr	r3, [pc, #24]	; (8000298 <initialise_board+0x20>)
 8000280:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f245 5255 	movw	r2, #21845	; 0x5555
 8000288:	801a      	strh	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	48001002 	.word	0x48001002

0800029c <enable_interrupts_button>:

void enable_interrupts_button() {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002a0:	b672      	cpsid	i
}
 80002a2:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Enable the system configuration controller (SYSCFG in RCC)
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002a4:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <enable_interrupts_button+0x48>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <enable_interrupts_button+0x48>)
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	6193      	str	r3, [r2, #24]

	// External Interrupts details on large manual page 294)
	// PA0 is on interrupt EXTI0 large manual - page 250
	// EXTI0 in  SYSCFG_EXTICR1 needs to be 0x00 (SYSCFG_EXTICR1_EXTI0_PA)
	SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 80002b0:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <enable_interrupts_button+0x4c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]

	//  Select EXTI0 interrupt on rising edge
	EXTI->RTSR |= EXTI_RTSR_TR0; // rising edge of EXTI line 0 (includes PA0)
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <enable_interrupts_button+0x50>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	4a0c      	ldr	r2, [pc, #48]	; (80002ec <enable_interrupts_button+0x50>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6093      	str	r3, [r2, #8]

	// set the interrupt from EXTI line 0 as 'not masked' - as in, enable it.
	EXTI->IMR |= EXTI_IMR_MR0;
 80002c2:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <enable_interrupts_button+0x50>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a09      	ldr	r2, [pc, #36]	; (80002ec <enable_interrupts_button+0x50>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6013      	str	r3, [r2, #0]

	// Tell the NVIC module that EXTI0 interrupts should be handled
	NVIC_SetPriority(EXTI0_IRQn, 3);  // Set Priority
 80002ce:	2103      	movs	r1, #3
 80002d0:	2006      	movs	r0, #6
 80002d2:	f7ff ff97 	bl	8000204 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 80002d6:	2006      	movs	r0, #6
 80002d8:	f7ff ff76 	bl	80001c8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80002dc:	b662      	cpsie	i
}
 80002de:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40021000 	.word	0x40021000
 80002e8:	40010000 	.word	0x40010000
 80002ec:	40010400 	.word	0x40010400

080002f0 <enter_challenge_1>:
#include "led.h"
#include "data_handler.h"
#include "serial.h"
#include "stm32f303xc.h"

void enter_challenge_1(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	set_led(0b1);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f000 f93f 	bl	8000578 <set_led>
	extern int current_game_state;
	while(1){
		if (current_game_state == 2){
 80002fa:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <enter_challenge_1+0x78>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b02      	cmp	r3, #2
 8000300:	d106      	bne.n	8000310 <enter_challenge_1+0x20>
			SerialOutputString("!", &USART1_PORT);
 8000302:	491a      	ldr	r1, [pc, #104]	; (800036c <enter_challenge_1+0x7c>)
 8000304:	481a      	ldr	r0, [pc, #104]	; (8000370 <enter_challenge_1+0x80>)
 8000306:	f000 feaa 	bl	800105e <SerialOutputString>
			enter_challenge_2();
 800030a:	f000 f833 	bl	8000374 <enter_challenge_2>
 800030e:	e7f4      	b.n	80002fa <enter_challenge_1+0xa>
		}
		else if (current_game_state == 3){
 8000310:	4b15      	ldr	r3, [pc, #84]	; (8000368 <enter_challenge_1+0x78>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b03      	cmp	r3, #3
 8000316:	d106      	bne.n	8000326 <enter_challenge_1+0x36>
			SerialOutputString("!", &USART1_PORT);
 8000318:	4914      	ldr	r1, [pc, #80]	; (800036c <enter_challenge_1+0x7c>)
 800031a:	4815      	ldr	r0, [pc, #84]	; (8000370 <enter_challenge_1+0x80>)
 800031c:	f000 fe9f 	bl	800105e <SerialOutputString>
			enter_challenge_3();
 8000320:	f000 f86a 	bl	80003f8 <enter_challenge_3>
 8000324:	e7e9      	b.n	80002fa <enter_challenge_1+0xa>
		}
		else if (current_game_state == 4){
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <enter_challenge_1+0x78>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2b04      	cmp	r3, #4
 800032c:	d106      	bne.n	800033c <enter_challenge_1+0x4c>
			SerialOutputString("!", &USART1_PORT);
 800032e:	490f      	ldr	r1, [pc, #60]	; (800036c <enter_challenge_1+0x7c>)
 8000330:	480f      	ldr	r0, [pc, #60]	; (8000370 <enter_challenge_1+0x80>)
 8000332:	f000 fe94 	bl	800105e <SerialOutputString>
			enter_challenge_4();
 8000336:	f000 f8a1 	bl	800047c <enter_challenge_4>
 800033a:	e7de      	b.n	80002fa <enter_challenge_1+0xa>
		}
		else if (current_game_state == 5){
 800033c:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <enter_challenge_1+0x78>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b05      	cmp	r3, #5
 8000342:	d106      	bne.n	8000352 <enter_challenge_1+0x62>
			SerialOutputString("!", &USART1_PORT);
 8000344:	4909      	ldr	r1, [pc, #36]	; (800036c <enter_challenge_1+0x7c>)
 8000346:	480a      	ldr	r0, [pc, #40]	; (8000370 <enter_challenge_1+0x80>)
 8000348:	f000 fe89 	bl	800105e <SerialOutputString>
			enter_login();
 800034c:	f000 f926 	bl	800059c <enter_login>
 8000350:	e7d3      	b.n	80002fa <enter_challenge_1+0xa>
		}
		else if (current_game_state == 0){
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <enter_challenge_1+0x78>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1cf      	bne.n	80002fa <enter_challenge_1+0xa>
			SerialOutputString("!", &USART1_PORT);
 800035a:	4904      	ldr	r1, [pc, #16]	; (800036c <enter_challenge_1+0x7c>)
 800035c:	4804      	ldr	r0, [pc, #16]	; (8000370 <enter_challenge_1+0x80>)
 800035e:	f000 fe7e 	bl	800105e <SerialOutputString>
			enter_waiting();
 8000362:	f001 f915 	bl	8001590 <enter_waiting>
		if (current_game_state == 2){
 8000366:	e7c8      	b.n	80002fa <enter_challenge_1+0xa>
 8000368:	20000510 	.word	0x20000510
 800036c:	20000000 	.word	0x20000000
 8000370:	080061b8 	.word	0x080061b8

08000374 <enter_challenge_2>:
#include "led.h"
#include "serial.h"
#include "data_handler.h"
#include "stm32f303xc.h"

void enter_challenge_2(){
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	set_led(0b11);
 8000378:	2003      	movs	r0, #3
 800037a:	f000 f8fd 	bl	8000578 <set_led>
	extern int current_game_state;
	while(1){
		if (current_game_state == 1){
 800037e:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <enter_challenge_2+0x78>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2b01      	cmp	r3, #1
 8000384:	d106      	bne.n	8000394 <enter_challenge_2+0x20>
			SerialOutputString("!", &USART1_PORT);
 8000386:	491a      	ldr	r1, [pc, #104]	; (80003f0 <enter_challenge_2+0x7c>)
 8000388:	481a      	ldr	r0, [pc, #104]	; (80003f4 <enter_challenge_2+0x80>)
 800038a:	f000 fe68 	bl	800105e <SerialOutputString>
			enter_challenge_1();
 800038e:	f7ff ffaf 	bl	80002f0 <enter_challenge_1>
 8000392:	e7f4      	b.n	800037e <enter_challenge_2+0xa>
		}
		else if (current_game_state == 3){
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <enter_challenge_2+0x78>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b03      	cmp	r3, #3
 800039a:	d106      	bne.n	80003aa <enter_challenge_2+0x36>
			SerialOutputString("!", &USART1_PORT);
 800039c:	4914      	ldr	r1, [pc, #80]	; (80003f0 <enter_challenge_2+0x7c>)
 800039e:	4815      	ldr	r0, [pc, #84]	; (80003f4 <enter_challenge_2+0x80>)
 80003a0:	f000 fe5d 	bl	800105e <SerialOutputString>
			enter_challenge_3();
 80003a4:	f000 f828 	bl	80003f8 <enter_challenge_3>
 80003a8:	e7e9      	b.n	800037e <enter_challenge_2+0xa>
		}
		else if (current_game_state == 4){
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <enter_challenge_2+0x78>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b04      	cmp	r3, #4
 80003b0:	d106      	bne.n	80003c0 <enter_challenge_2+0x4c>
			SerialOutputString("!", &USART1_PORT);
 80003b2:	490f      	ldr	r1, [pc, #60]	; (80003f0 <enter_challenge_2+0x7c>)
 80003b4:	480f      	ldr	r0, [pc, #60]	; (80003f4 <enter_challenge_2+0x80>)
 80003b6:	f000 fe52 	bl	800105e <SerialOutputString>
			enter_challenge_4();
 80003ba:	f000 f85f 	bl	800047c <enter_challenge_4>
 80003be:	e7de      	b.n	800037e <enter_challenge_2+0xa>
		}
		else if (current_game_state == 5){
 80003c0:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <enter_challenge_2+0x78>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b05      	cmp	r3, #5
 80003c6:	d106      	bne.n	80003d6 <enter_challenge_2+0x62>
			SerialOutputString("!", &USART1_PORT);
 80003c8:	4909      	ldr	r1, [pc, #36]	; (80003f0 <enter_challenge_2+0x7c>)
 80003ca:	480a      	ldr	r0, [pc, #40]	; (80003f4 <enter_challenge_2+0x80>)
 80003cc:	f000 fe47 	bl	800105e <SerialOutputString>
			enter_login();
 80003d0:	f000 f8e4 	bl	800059c <enter_login>
 80003d4:	e7d3      	b.n	800037e <enter_challenge_2+0xa>
		}
		else if (current_game_state == 0){
 80003d6:	4b05      	ldr	r3, [pc, #20]	; (80003ec <enter_challenge_2+0x78>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d1cf      	bne.n	800037e <enter_challenge_2+0xa>
			SerialOutputString("!", &USART1_PORT);
 80003de:	4904      	ldr	r1, [pc, #16]	; (80003f0 <enter_challenge_2+0x7c>)
 80003e0:	4804      	ldr	r0, [pc, #16]	; (80003f4 <enter_challenge_2+0x80>)
 80003e2:	f000 fe3c 	bl	800105e <SerialOutputString>
			enter_waiting();
 80003e6:	f001 f8d3 	bl	8001590 <enter_waiting>
		if (current_game_state == 1){
 80003ea:	e7c8      	b.n	800037e <enter_challenge_2+0xa>
 80003ec:	20000510 	.word	0x20000510
 80003f0:	20000000 	.word	0x20000000
 80003f4:	080061bc 	.word	0x080061bc

080003f8 <enter_challenge_3>:
#include "serial.h"
#include "led.h"
#include "data_handler.h"
#include "stm32f303xc.h"

void enter_challenge_3(){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	set_led(0b111);
 80003fc:	2007      	movs	r0, #7
 80003fe:	f000 f8bb 	bl	8000578 <set_led>
	extern int current_game_state;
	while(1){
		if (current_game_state == 1){
 8000402:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <enter_challenge_3+0x78>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d106      	bne.n	8000418 <enter_challenge_3+0x20>
			SerialOutputString("!", &USART1_PORT);
 800040a:	491a      	ldr	r1, [pc, #104]	; (8000474 <enter_challenge_3+0x7c>)
 800040c:	481a      	ldr	r0, [pc, #104]	; (8000478 <enter_challenge_3+0x80>)
 800040e:	f000 fe26 	bl	800105e <SerialOutputString>
			enter_challenge_1();
 8000412:	f7ff ff6d 	bl	80002f0 <enter_challenge_1>
 8000416:	e7f4      	b.n	8000402 <enter_challenge_3+0xa>
		}
		else if (current_game_state == 2){
 8000418:	4b15      	ldr	r3, [pc, #84]	; (8000470 <enter_challenge_3+0x78>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b02      	cmp	r3, #2
 800041e:	d106      	bne.n	800042e <enter_challenge_3+0x36>
			SerialOutputString("!", &USART1_PORT);
 8000420:	4914      	ldr	r1, [pc, #80]	; (8000474 <enter_challenge_3+0x7c>)
 8000422:	4815      	ldr	r0, [pc, #84]	; (8000478 <enter_challenge_3+0x80>)
 8000424:	f000 fe1b 	bl	800105e <SerialOutputString>
			enter_challenge_2();
 8000428:	f7ff ffa4 	bl	8000374 <enter_challenge_2>
 800042c:	e7e9      	b.n	8000402 <enter_challenge_3+0xa>
		}
		else if (current_game_state == 4){
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <enter_challenge_3+0x78>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2b04      	cmp	r3, #4
 8000434:	d106      	bne.n	8000444 <enter_challenge_3+0x4c>
			SerialOutputString("!", &USART1_PORT);
 8000436:	490f      	ldr	r1, [pc, #60]	; (8000474 <enter_challenge_3+0x7c>)
 8000438:	480f      	ldr	r0, [pc, #60]	; (8000478 <enter_challenge_3+0x80>)
 800043a:	f000 fe10 	bl	800105e <SerialOutputString>
			enter_challenge_4();
 800043e:	f000 f81d 	bl	800047c <enter_challenge_4>
 8000442:	e7de      	b.n	8000402 <enter_challenge_3+0xa>
		}
		else if (current_game_state == 5){
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <enter_challenge_3+0x78>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b05      	cmp	r3, #5
 800044a:	d106      	bne.n	800045a <enter_challenge_3+0x62>
			SerialOutputString("!", &USART1_PORT);
 800044c:	4909      	ldr	r1, [pc, #36]	; (8000474 <enter_challenge_3+0x7c>)
 800044e:	480a      	ldr	r0, [pc, #40]	; (8000478 <enter_challenge_3+0x80>)
 8000450:	f000 fe05 	bl	800105e <SerialOutputString>
			enter_login();
 8000454:	f000 f8a2 	bl	800059c <enter_login>
 8000458:	e7d3      	b.n	8000402 <enter_challenge_3+0xa>
		}
		else if (current_game_state == 0){
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <enter_challenge_3+0x78>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d1cf      	bne.n	8000402 <enter_challenge_3+0xa>
			SerialOutputString("!", &USART1_PORT);
 8000462:	4904      	ldr	r1, [pc, #16]	; (8000474 <enter_challenge_3+0x7c>)
 8000464:	4804      	ldr	r0, [pc, #16]	; (8000478 <enter_challenge_3+0x80>)
 8000466:	f000 fdfa 	bl	800105e <SerialOutputString>
			enter_waiting();
 800046a:	f001 f891 	bl	8001590 <enter_waiting>
		if (current_game_state == 1){
 800046e:	e7c8      	b.n	8000402 <enter_challenge_3+0xa>
 8000470:	20000510 	.word	0x20000510
 8000474:	20000000 	.word	0x20000000
 8000478:	080061c0 	.word	0x080061c0

0800047c <enter_challenge_4>:
#include "waiting.h"
#include "serial.h"
#include "data_handler.h"
#include "stm32f303xc.h"

void enter_challenge_4(){
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	set_led(0b1111);
 8000480:	200f      	movs	r0, #15
 8000482:	f000 f879 	bl	8000578 <set_led>
	extern int current_game_state;
	while(1){
		if (current_game_state == 1){
 8000486:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <enter_challenge_4+0x78>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d106      	bne.n	800049c <enter_challenge_4+0x20>
			SerialOutputString("!", &USART1_PORT);
 800048e:	491a      	ldr	r1, [pc, #104]	; (80004f8 <enter_challenge_4+0x7c>)
 8000490:	481a      	ldr	r0, [pc, #104]	; (80004fc <enter_challenge_4+0x80>)
 8000492:	f000 fde4 	bl	800105e <SerialOutputString>
			enter_challenge_1();
 8000496:	f7ff ff2b 	bl	80002f0 <enter_challenge_1>
 800049a:	e7f4      	b.n	8000486 <enter_challenge_4+0xa>
		}
		else if (current_game_state == 3){
 800049c:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <enter_challenge_4+0x78>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	d106      	bne.n	80004b2 <enter_challenge_4+0x36>
			SerialOutputString("!", &USART1_PORT);
 80004a4:	4914      	ldr	r1, [pc, #80]	; (80004f8 <enter_challenge_4+0x7c>)
 80004a6:	4815      	ldr	r0, [pc, #84]	; (80004fc <enter_challenge_4+0x80>)
 80004a8:	f000 fdd9 	bl	800105e <SerialOutputString>
			enter_challenge_3();
 80004ac:	f7ff ffa4 	bl	80003f8 <enter_challenge_3>
 80004b0:	e7e9      	b.n	8000486 <enter_challenge_4+0xa>
		}
		else if (current_game_state == 2){
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <enter_challenge_4+0x78>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2b02      	cmp	r3, #2
 80004b8:	d106      	bne.n	80004c8 <enter_challenge_4+0x4c>
			SerialOutputString("!", &USART1_PORT);
 80004ba:	490f      	ldr	r1, [pc, #60]	; (80004f8 <enter_challenge_4+0x7c>)
 80004bc:	480f      	ldr	r0, [pc, #60]	; (80004fc <enter_challenge_4+0x80>)
 80004be:	f000 fdce 	bl	800105e <SerialOutputString>
			enter_challenge_2();
 80004c2:	f7ff ff57 	bl	8000374 <enter_challenge_2>
 80004c6:	e7de      	b.n	8000486 <enter_challenge_4+0xa>
		}
		else if (current_game_state == 5){
 80004c8:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <enter_challenge_4+0x78>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b05      	cmp	r3, #5
 80004ce:	d106      	bne.n	80004de <enter_challenge_4+0x62>
			SerialOutputString("!", &USART1_PORT);
 80004d0:	4909      	ldr	r1, [pc, #36]	; (80004f8 <enter_challenge_4+0x7c>)
 80004d2:	480a      	ldr	r0, [pc, #40]	; (80004fc <enter_challenge_4+0x80>)
 80004d4:	f000 fdc3 	bl	800105e <SerialOutputString>
			enter_login();
 80004d8:	f000 f860 	bl	800059c <enter_login>
 80004dc:	e7d3      	b.n	8000486 <enter_challenge_4+0xa>
		}
		else if (current_game_state == 0){
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <enter_challenge_4+0x78>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d1cf      	bne.n	8000486 <enter_challenge_4+0xa>
			SerialOutputString("!", &USART1_PORT);
 80004e6:	4904      	ldr	r1, [pc, #16]	; (80004f8 <enter_challenge_4+0x7c>)
 80004e8:	4804      	ldr	r0, [pc, #16]	; (80004fc <enter_challenge_4+0x80>)
 80004ea:	f000 fdb8 	bl	800105e <SerialOutputString>
			enter_waiting();
 80004ee:	f001 f84f 	bl	8001590 <enter_waiting>
		if (current_game_state == 1){
 80004f2:	e7c8      	b.n	8000486 <enter_challenge_4+0xa>
 80004f4:	20000510 	.word	0x20000510
 80004f8:	20000000 	.word	0x20000000
 80004fc:	080061c4 	.word	0x080061c4

08000500 <state_handler>:
#include "login.h"
#include "waiting.h"
#include "stm32f303xc.h"
#include "led.h"

void state_handler(char *state, int *game_state){
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
	int state_int = atoi(state);
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f005 fcb0 	bl	8005e70 <atoi>
 8000510:	60f8      	str	r0, [r7, #12]
	*game_state = state_int;
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	68fa      	ldr	r2, [r7, #12]
 8000516:	601a      	str	r2, [r3, #0]
//	else if(state_int == 02){
//		enter_challenge_2();
//	}

	//set_led(0b10101010);
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <check_state>:

void check_state(int game_state){
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	if (game_state == 1){
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d102      	bne.n	8000534 <check_state+0x14>
		enter_challenge_1();
 800052e:	f7ff fedf 	bl	80002f0 <enter_challenge_1>
		enter_login();
	}
	else if (game_state == 0){
		enter_waiting();
	}
}
 8000532:	e01c      	b.n	800056e <check_state+0x4e>
	else if (game_state == 2){
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b02      	cmp	r3, #2
 8000538:	d102      	bne.n	8000540 <check_state+0x20>
		enter_challenge_2();
 800053a:	f7ff ff1b 	bl	8000374 <enter_challenge_2>
}
 800053e:	e016      	b.n	800056e <check_state+0x4e>
	else if (game_state == 3){
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b03      	cmp	r3, #3
 8000544:	d102      	bne.n	800054c <check_state+0x2c>
		enter_challenge_3();
 8000546:	f7ff ff57 	bl	80003f8 <enter_challenge_3>
}
 800054a:	e010      	b.n	800056e <check_state+0x4e>
	else if (game_state == 4){
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b04      	cmp	r3, #4
 8000550:	d102      	bne.n	8000558 <check_state+0x38>
		enter_challenge_4();
 8000552:	f7ff ff93 	bl	800047c <enter_challenge_4>
}
 8000556:	e00a      	b.n	800056e <check_state+0x4e>
	else if (game_state == 5){
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2b05      	cmp	r3, #5
 800055c:	d102      	bne.n	8000564 <check_state+0x44>
		enter_login();
 800055e:	f000 f81d 	bl	800059c <enter_login>
}
 8000562:	e004      	b.n	800056e <check_state+0x4e>
	else if (game_state == 0){
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d101      	bne.n	800056e <check_state+0x4e>
		enter_waiting();
 800056a:	f001 f811 	bl	8001590 <enter_waiting>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <set_led>:
#include "led.h"

#include "stm32f303xc.h"

void set_led(int set){
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <set_led+0x20>)
 8000582:	60fb      	str	r3, [r7, #12]
	*led_register = set;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	b2da      	uxtb	r2, r3
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	701a      	strb	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	48001015 	.word	0x48001015

0800059c <enter_login>:
#include "led.h"
#include "waiting.h"
#include "data_handler.h"
#include "stm32f303xc.h"

void enter_login(){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	set_led(0b1100110011);
 80005a0:	f240 3033 	movw	r0, #819	; 0x333
 80005a4:	f7ff ffe8 	bl	8000578 <set_led>
	extern int current_game_state;
	while(1){
		if (current_game_state == 1){
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <enter_login+0x54>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d102      	bne.n	80005b6 <enter_login+0x1a>
			enter_challenge_1();
 80005b0:	f7ff fe9e 	bl	80002f0 <enter_challenge_1>
 80005b4:	e7f8      	b.n	80005a8 <enter_login+0xc>
		}
		else if (current_game_state == 2){
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <enter_login+0x54>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d102      	bne.n	80005c4 <enter_login+0x28>
			enter_challenge_2();
 80005be:	f7ff fed9 	bl	8000374 <enter_challenge_2>
 80005c2:	e7f1      	b.n	80005a8 <enter_login+0xc>
		}
		else if (current_game_state == 3){
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <enter_login+0x54>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b03      	cmp	r3, #3
 80005ca:	d102      	bne.n	80005d2 <enter_login+0x36>
			enter_challenge_3();
 80005cc:	f7ff ff14 	bl	80003f8 <enter_challenge_3>
 80005d0:	e7ea      	b.n	80005a8 <enter_login+0xc>
		}
		else if (current_game_state == 4){
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <enter_login+0x54>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b04      	cmp	r3, #4
 80005d8:	d102      	bne.n	80005e0 <enter_login+0x44>
			enter_challenge_4();
 80005da:	f7ff ff4f 	bl	800047c <enter_challenge_4>
 80005de:	e7e3      	b.n	80005a8 <enter_login+0xc>
		}
		else if (current_game_state == 0){
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <enter_login+0x54>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1df      	bne.n	80005a8 <enter_login+0xc>
			enter_waiting();
 80005e8:	f000 ffd2 	bl	8001590 <enter_waiting>
		if (current_game_state == 1){
 80005ec:	e7dc      	b.n	80005a8 <enter_login+0xc>
 80005ee:	bf00      	nop
 80005f0:	20000510 	.word	0x20000510

080005f4 <HAL_TIM_IC_CaptureCallback>:
int input_counter = 0;



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	; 0x30
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	uint8_t buffer[32];
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a17      	ldr	r2, [pc, #92]	; (8000660 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d127      	bne.n	8000656 <HAL_TIM_IC_CaptureCallback+0x62>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	7f1b      	ldrb	r3, [r3, #28]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d123      	bne.n	8000656 <HAL_TIM_IC_CaptureCallback+0x62>
	{
		uint16_t IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800060e:	2100      	movs	r1, #0
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f004 fda3 	bl	800515c <HAL_TIM_ReadCapturedValue>
 8000616:	4603      	mov	r3, r0
 8000618:	85fb      	strh	r3, [r7, #46]	; 0x2e

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1)
 800061a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000622:	f001 fb1f 	bl	8001c64 <HAL_GPIO_ReadPin>
 8000626:	4603      	mov	r3, r0
 8000628:	2b01      	cmp	r3, #1
 800062a:	d103      	bne.n	8000634 <HAL_TIM_IC_CaptureCallback+0x40>
			rise_time = IC_Val1;
 800062c:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <HAL_TIM_IC_CaptureCallback+0x70>)
 800062e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000630:	8013      	strh	r3, [r2, #0]
 8000632:	e006      	b.n	8000642 <HAL_TIM_IC_CaptureCallback+0x4e>
		else
			last_period = IC_Val1 - rise_time;
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	b29a      	uxth	r2, r3
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000640:	801a      	strh	r2, [r3, #0]

		diff = IC_Val1 - last_capture;
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <HAL_TIM_IC_CaptureCallback+0x78>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	b29a      	uxth	r2, r3
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800064e:	801a      	strh	r2, [r3, #0]
		last_capture = IC_Val1;
 8000650:	4a06      	ldr	r2, [pc, #24]	; (800066c <HAL_TIM_IC_CaptureCallback+0x78>)
 8000652:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000654:	8013      	strh	r3, [r2, #0]
	}
}
 8000656:	bf00      	nop
 8000658:	3730      	adds	r7, #48	; 0x30
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40012c00 	.word	0x40012c00
 8000664:	2000050c 	.word	0x2000050c
 8000668:	2000050e 	.word	0x2000050e
 800066c:	20000508 	.word	0x20000508
 8000670:	2000050a 	.word	0x2000050a

08000674 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b098      	sub	sp, #96	; 0x60
 8000678:	af04      	add	r7, sp, #16

	// look at the size difference between these structs,
	//  they are because the 32 bit microcontroller
	//  packs the data so the divisions are in groups
	//  of 4bytes (4bytes=32bit)
	uint8_t size_1 = sizeof(struct_1);
 800067a:	2314      	movs	r3, #20
 800067c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t size_2 = sizeof(struct_2);
 8000680:	230c      	movs	r3, #12
 8000682:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e


	//uint8_t string_to_send[64] = "This is a string !\r\n";

	enable_clocks();
 8000686:	f7ff fde7 	bl	8000258 <enable_clocks>
	initialise_board();
 800068a:	f7ff fdf5 	bl	8000278 <initialise_board>

	LedRegister *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800068e:	4b2f      	ldr	r3, [pc, #188]	; (800074c <main+0xd8>)
 8000690:	64bb      	str	r3, [r7, #72]	; 0x48

	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000692:	2200      	movs	r2, #0
 8000694:	492e      	ldr	r1, [pc, #184]	; (8000750 <main+0xdc>)
 8000696:	2004      	movs	r0, #4
 8000698:	f000 fc3c 	bl	8000f14 <SerialInitialise>

	HAL_StatusTypeDef return_value = 0x00;
 800069c:	2300      	movs	r3, #0
 800069e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	volatile uint16_t vertical_PWM = 1000;
 80006a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	volatile uint16_t horizontal_PWM = 1000;
 80006aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006b2:	f000 ffc1 	bl	8001638 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006b6:	f000 f855 	bl	8000764 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006ba:	f000 fa33 	bl	8000b24 <MX_GPIO_Init>
	MX_I2C1_Init();
 80006be:	f000 f8b5 	bl	800082c <MX_I2C1_Init>
	MX_SPI1_Init();
 80006c2:	f000 f8f3 	bl	80008ac <MX_SPI1_Init>
	MX_USB_PCD_Init();
 80006c6:	f000 fa0b 	bl	8000ae0 <MX_USB_PCD_Init>
	MX_TIM2_Init();
 80006ca:	f000 f9a3 	bl	8000a14 <MX_TIM2_Init>
	MX_TIM1_Init();
 80006ce:	f000 f92b 	bl	8000928 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80006d2:	2100      	movs	r1, #0
 80006d4:	481f      	ldr	r0, [pc, #124]	; (8000754 <main+0xe0>)
 80006d6:	f003 ff03 	bl	80044e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80006da:	2104      	movs	r1, #4
 80006dc:	481d      	ldr	r0, [pc, #116]	; (8000754 <main+0xe0>)
 80006de:	f003 feff 	bl	80044e0 <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80006e2:	2100      	movs	r1, #0
 80006e4:	481c      	ldr	r0, [pc, #112]	; (8000758 <main+0xe4>)
 80006e6:	f004 f85d 	bl	80047a4 <HAL_TIM_IC_Start_IT>

	// TIM 2 is setup with a prescaler that makes 1 count = 1 microsecond
	// Even with HAL, you can still set the values yourself
	TIM2->ARR = 20000; // 20000 = 20ms, which is the desired clock period for servos
 80006ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006ee:	f644 6220 	movw	r2, #20000	; 0x4e20
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // this makes the timing not change until the next pulse is finished
 80006f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000702:	6013      	str	r3, [r2, #0]

	// note: for PWM if you continually change the clock period
	// you can get unexpected results. To remove this, set ARPE so that the
	// ARR settings are not activated until the next cycle.

	initialise_ptu_i2c(&hi2c1);
 8000704:	4815      	ldr	r0, [pc, #84]	; (800075c <main+0xe8>)
 8000706:	f000 fb0b 	bl	8000d20 <initialise_ptu_i2c>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	// reset lidar board
	uint8_t reset_value = 0x00;
 800070a:	2300      	movs	r3, #0
 800070c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8000710:	230a      	movs	r3, #10
 8000712:	9302      	str	r3, [sp, #8]
 8000714:	2301      	movs	r3, #1
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	f107 0341 	add.w	r3, r7, #65	; 0x41
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2301      	movs	r3, #1
 8000720:	2200      	movs	r2, #0
 8000722:	21c4      	movs	r1, #196	; 0xc4
 8000724:	480d      	ldr	r0, [pc, #52]	; (800075c <main+0xe8>)
 8000726:	f001 fb5d 	bl	8001de4 <HAL_I2C_Mem_Write>
 800072a:	4603      	mov	r3, r0
 800072c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f



	// delay for initialisation of the lidar
	HAL_Delay(100);
 8000730:	2064      	movs	r0, #100	; 0x64
 8000732:	f000 ffe7 	bl	8001704 <HAL_Delay>
	enable_interrupts_RX();
 8000736:	f000 fc61 	bl	8000ffc <enable_interrupts_RX>
	enable_interrupts_button();
 800073a:	f7ff fdaf 	bl	800029c <enable_interrupts_button>
	while (1)
	{

		while(1){
			check_state(current_game_state);
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <main+0xec>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff feec 	bl	8000520 <check_state>
 8000748:	e7f9      	b.n	800073e <main+0xca>
 800074a:	bf00      	nop
 800074c:	48001015 	.word	0x48001015
 8000750:	20000000 	.word	0x20000000
 8000754:	200001d0 	.word	0x200001d0
 8000758:	20000184 	.word	0x20000184
 800075c:	200000cc 	.word	0x200000cc
 8000760:	20000510 	.word	0x20000510

08000764 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b09e      	sub	sp, #120	; 0x78
 8000768:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800076e:	2228      	movs	r2, #40	; 0x28
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f005 fbb2 	bl	8005edc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000788:	463b      	mov	r3, r7
 800078a:	223c      	movs	r2, #60	; 0x3c
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f005 fba4 	bl	8005edc <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000794:	2303      	movs	r3, #3
 8000796:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000798:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800079c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a2:	2301      	movs	r3, #1
 80007a4:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a6:	2310      	movs	r3, #16
 80007a8:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007aa:	2302      	movs	r3, #2
 80007ac:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b2:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80007b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80007b8:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007be:	4618      	mov	r0, r3
 80007c0:	f002 f960 	bl	8002a84 <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x6a>
	{
		Error_Handler();
 80007ca:	f000 faa3 	bl	8000d14 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	63fb      	str	r3, [r7, #60]	; 0x3c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2302      	movs	r3, #2
 80007d4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007e8:	2101      	movs	r1, #1
 80007ea:	4618      	mov	r0, r3
 80007ec:	f003 f988 	bl	8003b00 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x96>
	{
		Error_Handler();
 80007f6:	f000 fa8d 	bl	8000d14 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <SystemClock_Config+0xc4>)
 80007fc:	603b      	str	r3, [r7, #0]
			|RCC_PERIPHCLK_TIM1;
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000802:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000806:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000808:	2300      	movs	r3, #0
 800080a:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	4618      	mov	r0, r3
 8000810:	f003 fb5c 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xba>
	{
		Error_Handler();
 800081a:	f000 fa7b 	bl	8000d14 <Error_Handler>
	}
}
 800081e:	bf00      	nop
 8000820:	3778      	adds	r7, #120	; 0x78
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	00021020 	.word	0x00021020

0800082c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000830:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <MX_I2C1_Init+0x74>)
 8000832:	4a1c      	ldr	r2, [pc, #112]	; (80008a4 <MX_I2C1_Init+0x78>)
 8000834:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_I2C1_Init+0x74>)
 8000838:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <MX_I2C1_Init+0x7c>)
 800083a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_I2C1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_I2C1_Init+0x74>)
 8000844:	2201      	movs	r2, #1
 8000846:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_I2C1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_I2C1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_I2C1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_I2C1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_I2C1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000866:	480e      	ldr	r0, [pc, #56]	; (80008a0 <MX_I2C1_Init+0x74>)
 8000868:	f001 fa2c 	bl	8001cc4 <HAL_I2C_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8000872:	f000 fa4f 	bl	8000d14 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000876:	2100      	movs	r1, #0
 8000878:	4809      	ldr	r0, [pc, #36]	; (80008a0 <MX_I2C1_Init+0x74>)
 800087a:	f001 ff99 	bl	80027b0 <HAL_I2CEx_ConfigAnalogFilter>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8000884:	f000 fa46 	bl	8000d14 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000888:	2100      	movs	r1, #0
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_I2C1_Init+0x74>)
 800088c:	f001 ffdb 	bl	8002846 <HAL_I2CEx_ConfigDigitalFilter>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8000896:	f000 fa3d 	bl	8000d14 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000cc 	.word	0x200000cc
 80008a4:	40005400 	.word	0x40005400
 80008a8:	2000090e 	.word	0x2000090e

080008ac <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <MX_SPI1_Init+0x74>)
 80008b2:	4a1c      	ldr	r2, [pc, #112]	; (8000924 <MX_SPI1_Init+0x78>)
 80008b4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_SPI1_Init+0x74>)
 80008b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008bc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <MX_SPI1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008c4:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_SPI1_Init+0x74>)
 80008c6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008ca:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_SPI1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_SPI1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_SPI1_Init+0x74>)
 80008da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008de:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_SPI1_Init+0x74>)
 80008e2:	2208      	movs	r2, #8
 80008e4:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_SPI1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_SPI1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_SPI1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_SPI1_Init+0x74>)
 80008fa:	2207      	movs	r2, #7
 80008fc:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_SPI1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_SPI1_Init+0x74>)
 8000906:	2208      	movs	r2, #8
 8000908:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_SPI1_Init+0x74>)
 800090c:	f003 fc8e 	bl	800422c <HAL_SPI_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8000916:	f000 f9fd 	bl	8000d14 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000120 	.word	0x20000120
 8000924:	40013000 	.word	0x40013000

08000928 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	; 0x30
 800092c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000954:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <MX_TIM1_Init+0xe4>)
 8000956:	4a2e      	ldr	r2, [pc, #184]	; (8000a10 <MX_TIM1_Init+0xe8>)
 8000958:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 47;
 800095a:	4b2c      	ldr	r3, [pc, #176]	; (8000a0c <MX_TIM1_Init+0xe4>)
 800095c:	222f      	movs	r2, #47	; 0x2f
 800095e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <MX_TIM1_Init+0xe4>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000966:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <MX_TIM1_Init+0xe4>)
 8000968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800096c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096e:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <MX_TIM1_Init+0xe4>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <MX_TIM1_Init+0xe4>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097a:	4b24      	ldr	r3, [pc, #144]	; (8000a0c <MX_TIM1_Init+0xe4>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000980:	4822      	ldr	r0, [pc, #136]	; (8000a0c <MX_TIM1_Init+0xe4>)
 8000982:	f003 fcfe 	bl	8004382 <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM1_Init+0x68>
	{
		Error_Handler();
 800098c:	f000 f9c2 	bl	8000d14 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000994:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000996:	f107 0320 	add.w	r3, r7, #32
 800099a:	4619      	mov	r1, r3
 800099c:	481b      	ldr	r0, [pc, #108]	; (8000a0c <MX_TIM1_Init+0xe4>)
 800099e:	f004 fb13 	bl	8004fc8 <HAL_TIM_ConfigClockSource>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM1_Init+0x84>
	{
		Error_Handler();
 80009a8:	f000 f9b4 	bl	8000d14 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80009ac:	4817      	ldr	r0, [pc, #92]	; (8000a0c <MX_TIM1_Init+0xe4>)
 80009ae:	f003 fe97 	bl	80046e0 <HAL_TIM_IC_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM1_Init+0x94>
	{
		Error_Handler();
 80009b8:	f000 f9ac 	bl	8000d14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	480f      	ldr	r0, [pc, #60]	; (8000a0c <MX_TIM1_Init+0xe4>)
 80009d0:	f005 f974 	bl	8005cbc <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM1_Init+0xb6>
	{
		Error_Handler();
 80009da:	f000 f99b 	bl	8000d14 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80009de:	230a      	movs	r3, #10
 80009e0:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009e2:	2301      	movs	r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_TIM1_Init+0xe4>)
 80009f6:	f004 f936 	bl	8004c66 <HAL_TIM_IC_ConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM1_Init+0xdc>
	{
		Error_Handler();
 8000a00:	f000 f988 	bl	8000d14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	3730      	adds	r7, #48	; 0x30
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000184 	.word	0x20000184
 8000a10:	40012c00 	.word	0x40012c00

08000a14 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000a26:	463b      	mov	r3, r7
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
 8000a34:	615a      	str	r2, [r3, #20]
 8000a36:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000a38:	4b28      	ldr	r3, [pc, #160]	; (8000adc <MX_TIM2_Init+0xc8>)
 8000a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a3e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 47;
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <MX_TIM2_Init+0xc8>)
 8000a42:	222f      	movs	r2, #47	; 0x2f
 8000a44:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <MX_TIM2_Init+0xc8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 20000;
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <MX_TIM2_Init+0xc8>)
 8000a4e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000a52:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a54:	4b21      	ldr	r3, [pc, #132]	; (8000adc <MX_TIM2_Init+0xc8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a5a:	4b20      	ldr	r3, [pc, #128]	; (8000adc <MX_TIM2_Init+0xc8>)
 8000a5c:	2280      	movs	r2, #128	; 0x80
 8000a5e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a60:	481e      	ldr	r0, [pc, #120]	; (8000adc <MX_TIM2_Init+0xc8>)
 8000a62:	f003 fce5 	bl	8004430 <HAL_TIM_PWM_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8000a6c:	f000 f952 	bl	8000d14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4817      	ldr	r0, [pc, #92]	; (8000adc <MX_TIM2_Init+0xc8>)
 8000a80:	f005 f91c 	bl	8005cbc <HAL_TIMEx_MasterConfigSynchronization>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 8000a8a:	f000 f943 	bl	8000d14 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a8e:	2360      	movs	r3, #96	; 0x60
 8000a90:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 2000;
 8000a92:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a96:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480d      	ldr	r0, [pc, #52]	; (8000adc <MX_TIM2_Init+0xc8>)
 8000aa8:	f004 f97a 	bl	8004da0 <HAL_TIM_PWM_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM2_Init+0xa2>
	{
		Error_Handler();
 8000ab2:	f000 f92f 	bl	8000d14 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2204      	movs	r2, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	4807      	ldr	r0, [pc, #28]	; (8000adc <MX_TIM2_Init+0xc8>)
 8000abe:	f004 f96f 	bl	8004da0 <HAL_TIM_PWM_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM2_Init+0xb8>
	{
		Error_Handler();
 8000ac8:	f000 f924 	bl	8000d14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <MX_TIM2_Init+0xc8>)
 8000ace:	f000 fc5f 	bl	8001390 <HAL_TIM_MspPostInit>

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	; 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200001d0 	.word	0x200001d0

08000ae0 <MX_USB_PCD_Init>:
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <MX_USB_PCD_Init+0x3c>)
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <MX_USB_PCD_Init+0x40>)
 8000ae8:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_USB_PCD_Init+0x3c>)
 8000aec:	2208      	movs	r2, #8
 8000aee:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <MX_USB_PCD_Init+0x3c>)
 8000af2:	2202      	movs	r2, #2
 8000af4:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_USB_PCD_Init+0x3c>)
 8000af8:	2202      	movs	r2, #2
 8000afa:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <MX_USB_PCD_Init+0x3c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_USB_PCD_Init+0x3c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_USB_PCD_Init+0x3c>)
 8000b0a:	f001 fee8 	bl	80028de <HAL_PCD_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_USB_PCD_Init+0x38>
	{
		Error_Handler();
 8000b14:	f000 f8fe 	bl	8000d14 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000021c 	.word	0x2000021c
 8000b20:	40005c00 	.word	0x40005c00

08000b24 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000b3a:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <MX_GPIO_Init+0xf4>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	4a36      	ldr	r2, [pc, #216]	; (8000c18 <MX_GPIO_Init+0xf4>)
 8000b40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b44:	6153      	str	r3, [r2, #20]
 8000b46:	4b34      	ldr	r3, [pc, #208]	; (8000c18 <MX_GPIO_Init+0xf4>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	4b31      	ldr	r3, [pc, #196]	; (8000c18 <MX_GPIO_Init+0xf4>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	4a30      	ldr	r2, [pc, #192]	; (8000c18 <MX_GPIO_Init+0xf4>)
 8000b58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b5c:	6153      	str	r3, [r2, #20]
 8000b5e:	4b2e      	ldr	r3, [pc, #184]	; (8000c18 <MX_GPIO_Init+0xf4>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6a:	4b2b      	ldr	r3, [pc, #172]	; (8000c18 <MX_GPIO_Init+0xf4>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	4a2a      	ldr	r2, [pc, #168]	; (8000c18 <MX_GPIO_Init+0xf4>)
 8000b70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b74:	6153      	str	r3, [r2, #20]
 8000b76:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <MX_GPIO_Init+0xf4>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <MX_GPIO_Init+0xf4>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	4a24      	ldr	r2, [pc, #144]	; (8000c18 <MX_GPIO_Init+0xf4>)
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8c:	6153      	str	r3, [r2, #20]
 8000b8e:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_GPIO_Init+0xf4>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_GPIO_Init+0xf4>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	4a1e      	ldr	r2, [pc, #120]	; (8000c18 <MX_GPIO_Init+0xf4>)
 8000ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba4:	6153      	str	r3, [r2, #20]
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_GPIO_Init+0xf4>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000bb8:	4818      	ldr	r0, [pc, #96]	; (8000c1c <MX_GPIO_Init+0xf8>)
 8000bba:	f001 f86b 	bl	8001c94 <HAL_GPIO_WritePin>
			|LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
			|LD6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000bbe:	2337      	movs	r3, #55	; 0x37
 8000bc0:	617b      	str	r3, [r7, #20]
			|MEMS_INT2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bc2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bc6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4812      	ldr	r0, [pc, #72]	; (8000c1c <MX_GPIO_Init+0xf8>)
 8000bd4:	f000 fecc 	bl	8001970 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000bd8:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000bdc:	617b      	str	r3, [r7, #20]
			|LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
			|LD6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480a      	ldr	r0, [pc, #40]	; (8000c1c <MX_GPIO_Init+0xf8>)
 8000bf2:	f000 febd 	bl	8001970 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0c:	f000 feb0 	bl	8001970 <HAL_GPIO_Init>

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	48001000 	.word	0x48001000

08000c20 <USART1_IRQHandler>:

/* USER CODE BEGIN 4 */
void USART1_IRQHandler(){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0

	char single_inp;
	int test = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]

	test = SerialReceiveChar(&USART1_PORT, &single_inp);
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4826      	ldr	r0, [pc, #152]	; (8000cc8 <USART1_IRQHandler+0xa8>)
 8000c30:	f000 fa39 	bl	80010a6 <SerialReceiveChar>
 8000c34:	4603      	mov	r3, r0
 8000c36:	60fb      	str	r3, [r7, #12]
	if (test == 1){
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d109      	bne.n	8000c52 <USART1_IRQHandler+0x32>
		input_buffer[input_counter] = single_inp;
 8000c3e:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <USART1_IRQHandler+0xac>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	79f9      	ldrb	r1, [r7, #7]
 8000c44:	4a22      	ldr	r2, [pc, #136]	; (8000cd0 <USART1_IRQHandler+0xb0>)
 8000c46:	54d1      	strb	r1, [r2, r3]
		input_counter ++;
 8000c48:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <USART1_IRQHandler+0xac>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <USART1_IRQHandler+0xac>)
 8000c50:	6013      	str	r3, [r2, #0]
		//set_led(0b0101);
		//SerialOutputChar(single_inp, &USART1_PORT);
	}
	if (single_inp == 33){ //check for end of string character
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b21      	cmp	r3, #33	; 0x21
 8000c56:	d134      	bne.n	8000cc2 <USART1_IRQHandler+0xa2>
		if (strncmp(input_buffer, "AA55", 4) == 0){ //check for sentinal char
 8000c58:	2204      	movs	r2, #4
 8000c5a:	491e      	ldr	r1, [pc, #120]	; (8000cd4 <USART1_IRQHandler+0xb4>)
 8000c5c:	481c      	ldr	r0, [pc, #112]	; (8000cd0 <USART1_IRQHandler+0xb0>)
 8000c5e:	f005 f9f1 	bl	8006044 <strncmp>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d121      	bne.n	8000cac <USART1_IRQHandler+0x8c>
			if (input_buffer[4] == 49){ //if msgtype is 1
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <USART1_IRQHandler+0xb0>)
 8000c6a:	791b      	ldrb	r3, [r3, #4]
 8000c6c:	2b31      	cmp	r3, #49	; 0x31
 8000c6e:	d11d      	bne.n	8000cac <USART1_IRQHandler+0x8c>
				char *data = malloc(4);
 8000c70:	2004      	movs	r0, #4
 8000c72:	f005 f92b 	bl	8005ecc <malloc>
 8000c76:	4603      	mov	r3, r0
 8000c78:	60bb      	str	r3, [r7, #8]
				strcpy(data, input_buffer + 5);
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <USART1_IRQHandler+0xb8>)
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	68b8      	ldr	r0, [r7, #8]
 8000c80:	f005 f9d8 	bl	8006034 <strcpy>
				data[2] = 0;
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	3302      	adds	r3, #2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]

				//SerialOutputString(data, &USART1_PORT);
				empty_buffer(input_buffer, BUFFER);
 8000c8c:	2164      	movs	r1, #100	; 0x64
 8000c8e:	4810      	ldr	r0, [pc, #64]	; (8000cd0 <USART1_IRQHandler+0xb0>)
 8000c90:	f000 fa48 	bl	8001124 <empty_buffer>
				input_counter = 0;
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <USART1_IRQHandler+0xac>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
				test = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
				single_inp = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	71fb      	strb	r3, [r7, #7]

				state_handler(data, &current_game_state);
 8000ca2:	490e      	ldr	r1, [pc, #56]	; (8000cdc <USART1_IRQHandler+0xbc>)
 8000ca4:	68b8      	ldr	r0, [r7, #8]
 8000ca6:	f7ff fc2b 	bl	8000500 <state_handler>
 8000caa:	e00a      	b.n	8000cc2 <USART1_IRQHandler+0xa2>
			//set_led(0b100010); //error
		}
		//SerialOutputString(input_buffer, &USART1_PORT);


		empty_buffer(input_buffer, BUFFER);
 8000cac:	2164      	movs	r1, #100	; 0x64
 8000cae:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <USART1_IRQHandler+0xb0>)
 8000cb0:	f000 fa38 	bl	8001124 <empty_buffer>
		input_counter = 0;
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <USART1_IRQHandler+0xac>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
		test = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
		single_inp = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	71fb      	strb	r3, [r7, #7]


	}

}
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000578 	.word	0x20000578
 8000cd0:	20000514 	.word	0x20000514
 8000cd4:	080061c8 	.word	0x080061c8
 8000cd8:	20000519 	.word	0x20000519
 8000cdc:	20000510 	.word	0x20000510

08000ce0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	//set_led(0b11111111);

	uint8_t *str_to_send = "AA5521!";
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <EXTI0_IRQHandler+0x28>)
 8000ce8:	607b      	str	r3, [r7, #4]
	SerialOutputString(str_to_send, &USART1_PORT);
 8000cea:	4908      	ldr	r1, [pc, #32]	; (8000d0c <EXTI0_IRQHandler+0x2c>)
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 f9b6 	bl	800105e <SerialOutputString>


	// reset the interrupt (so it doesn't keep firing until the next trigger)
	EXTI->PR |= EXTI_PR_PR0;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <EXTI0_IRQHandler+0x30>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <EXTI0_IRQHandler+0x30>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6153      	str	r3, [r2, #20]
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	080061d0 	.word	0x080061d0
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	40010400 	.word	0x40010400

08000d14 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <initialise_ptu_i2c>:

#include "ptu_definitions.h"

ACCELEROMETER_CFG_STRUCT accelerometer_cfg = {ADXL345_POWER_CTL, 0x08, ADXL345_DATA_FORMAT, 0x08};

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b0d2      	sub	sp, #328	; 0x148
 8000d24:	af04      	add	r7, sp, #16
 8000d26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d2a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000d2e:	6018      	str	r0, [r3, #0]

	  /* USER CODE BEGIN 1 */
		uint8_t i2cBuf[2];
		uint8_t accdata[6];
		uint16_t x,y,z;
		uint8_t reg1a = 0x00;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
		uint8_t reg2a = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
		uint8_t reg4a = 0x00;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

	  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135

	  HAL_StatusTypeDef return_value = 0x00;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
	  //CTRL_REG2_A
	  i2cBuf[0]=0x21;
	  i2cBuf[1]=0x38;
	  HAL_I2C_Master_Transmit(&hi2c1, gyro_wr, i2cBuf, 2, 10);
	*/
	  uint8_t reg_1 = 0b00001111;
 8000d54:	230f      	movs	r3, #15
 8000d56:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
	  // Enable x, y, z and turn off power down:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG1, 1, &reg_1, 1, 10);
 8000d5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d5e:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8000d62:	230a      	movs	r3, #10
 8000d64:	9302      	str	r3, [sp, #8]
 8000d66:	2301      	movs	r3, #1
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	f207 1319 	addw	r3, r7, #281	; 0x119
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	2301      	movs	r3, #1
 8000d72:	2220      	movs	r2, #32
 8000d74:	21d2      	movs	r1, #210	; 0xd2
 8000d76:	6800      	ldr	r0, [r0, #0]
 8000d78:	f001 f834 	bl	8001de4 <HAL_I2C_Mem_Write>


	  uint8_t reg_2 = 0b00000000;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	  // If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG2, 1, &reg_2, 1, 10);
 8000d82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d86:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8000d8a:	230a      	movs	r3, #10
 8000d8c:	9302      	str	r3, [sp, #8]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	9301      	str	r3, [sp, #4]
 8000d92:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2301      	movs	r3, #1
 8000d9a:	2221      	movs	r2, #33	; 0x21
 8000d9c:	21d2      	movs	r1, #210	; 0xd2
 8000d9e:	6800      	ldr	r0, [r0, #0]
 8000da0:	f001 f820 	bl	8001de4 <HAL_I2C_Mem_Write>


	  // Configure CTRL_REG3 to generate data ready interrupt on INT2
	  // No interrupts used on INT1, if you'd like to configure INT1
	  // or INT2 otherwise, consult the datasheet:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG3, 1, &reg_2, 1, 10);
 8000da4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000da8:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8000dac:	230a      	movs	r3, #10
 8000dae:	9302      	str	r3, [sp, #8]
 8000db0:	2301      	movs	r3, #1
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	2301      	movs	r3, #1
 8000dbc:	2222      	movs	r2, #34	; 0x22
 8000dbe:	21d2      	movs	r1, #210	; 0xd2
 8000dc0:	6800      	ldr	r0, [r0, #0]
 8000dc2:	f001 f80f 	bl	8001de4 <HAL_I2C_Mem_Write>




	  //trying to read from the same registers where we wrote in
	  HAL_I2C_Mem_Read(i2c,gyro_rd,0x20,1,&reg1a,1,10);
 8000dc6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000dca:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8000dce:	230a      	movs	r3, #10
 8000dd0:	9302      	str	r3, [sp, #8]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	9301      	str	r3, [sp, #4]
 8000dd6:	f207 131b 	addw	r3, r7, #283	; 0x11b
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2301      	movs	r3, #1
 8000dde:	2220      	movs	r2, #32
 8000de0:	21d3      	movs	r1, #211	; 0xd3
 8000de2:	6800      	ldr	r0, [r0, #0]
 8000de4:	f001 f912 	bl	800200c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(i2c,gyro_rd,0x21,1,&reg2a,1,10);
 8000de8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000dec:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8000df0:	230a      	movs	r3, #10
 8000df2:	9302      	str	r3, [sp, #8]
 8000df4:	2301      	movs	r3, #1
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	f507 738d 	add.w	r3, r7, #282	; 0x11a
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2301      	movs	r3, #1
 8000e00:	2221      	movs	r2, #33	; 0x21
 8000e02:	21d3      	movs	r1, #211	; 0xd3
 8000e04:	6800      	ldr	r0, [r0, #0]
 8000e06:	f001 f901 	bl	800200c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1,ACC_I2C_ADDRESS_READ,0x23,1,&reg4a,1,10);

	*/

	//uint8_t status = 0x00;
	uint8_t ready = 0x00;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
	uint8_t return_status = 0x00;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132

	uint8_t val_1[2];
	uint16_t* val_1p = &val_1[0];
 8000e16:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000e1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	val_1p = 0x00;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint8_t text_buffer[255];

	uint16_t val_2 = 0x00;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
	uint16_t val_3 = 0x00;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128

	uint8_t Text[] = "Hello\r\n";
 8000e30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000e38:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <initialise_ptu_i2c+0x160>)
 8000e3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e3e:	e883 0003 	stmia.w	r3, {r0, r1}
//	BSP_LED_Toggle(LED_GREEN);
	//BSP_GYRO_Init();
	//BSP_ACCELERO_Init();

	// reset lidar board
	uint8_t reset_value = 0x00;
 8000e42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e46:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8000e4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e52:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8000e56:	230a      	movs	r3, #10
 8000e58:	9302      	str	r3, [sp, #8]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	f107 030b 	add.w	r3, r7, #11
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	2200      	movs	r2, #0
 8000e68:	21c4      	movs	r1, #196	; 0xc4
 8000e6a:	6800      	ldr	r0, [r0, #0]
 8000e6c:	f000 ffba 	bl	8001de4 <HAL_I2C_Mem_Write>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
	//return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &lidar_value, 1, 100);




}
 8000e76:	bf00      	nop
 8000e78:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	080061d8 	.word	0x080061d8

08000e84 <__NVIC_EnableIRQ>:
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db0b      	blt.n	8000eae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 021f 	and.w	r2, r3, #31
 8000e9c:	4907      	ldr	r1, [pc, #28]	; (8000ebc <__NVIC_EnableIRQ+0x38>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000f14:	b480      	push	{r7}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	63da      	str	r2, [r3, #60]	; 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000f26:	4b34      	ldr	r3, [pc, #208]	; (8000ff8 <SerialInitialise+0xe4>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a33      	ldr	r2, [pc, #204]	; (8000ff8 <SerialInitialise+0xe4>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f30:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000f32:	4b31      	ldr	r3, [pc, #196]	; (8000ff8 <SerialInitialise+0xe4>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4a30      	ldr	r2, [pc, #192]	; (8000ff8 <SerialInitialise+0xe4>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	6a1b      	ldr	r3, [r3, #32]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d106      	bne.n	8000f54 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000f46:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <SerialInitialise+0xe4>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a2b      	ldr	r2, [pc, #172]	; (8000ff8 <SerialInitialise+0xe4>)
 8000f4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f50:	6153      	str	r3, [r2, #20]
		break;
 8000f52:	e000      	b.n	8000f56 <SerialInitialise+0x42>
	default:
		break;
 8000f54:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000f5e:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f68:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	69d9      	ldr	r1, [r3, #28]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	d821      	bhi.n	8000fda <SerialInitialise+0xc6>
 8000f96:	a201      	add	r2, pc, #4	; (adr r2, 8000f9c <SerialInitialise+0x88>)
 8000f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9c:	08000fb1 	.word	0x08000fb1
 8000fa0:	08000fb9 	.word	0x08000fb9
 8000fa4:	08000fc1 	.word	0x08000fc1
 8000fa8:	08000fc9 	.word	0x08000fc9
 8000fac:	08000fd1 	.word	0x08000fd1
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	2246      	movs	r2, #70	; 0x46
 8000fb4:	801a      	strh	r2, [r3, #0]
		break;
 8000fb6:	e010      	b.n	8000fda <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	2246      	movs	r2, #70	; 0x46
 8000fbc:	801a      	strh	r2, [r3, #0]
		break;
 8000fbe:	e00c      	b.n	8000fda <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2246      	movs	r2, #70	; 0x46
 8000fc4:	801a      	strh	r2, [r3, #0]
		break;
 8000fc6:	e008      	b.n	8000fda <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	2246      	movs	r2, #70	; 0x46
 8000fcc:	801a      	strh	r2, [r3, #0]
		break;
 8000fce:	e004      	b.n	8000fda <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8000fd6:	801a      	strh	r2, [r3, #0]
		break;
 8000fd8:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f042 020d 	orr.w	r2, r2, #13
 8000fe8:	601a      	str	r2, [r3, #0]
}
 8000fea:	bf00      	nop
 8000fec:	371c      	adds	r7, #28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000

08000ffc <enable_interrupts_RX>:

void enable_interrupts_RX()
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
}
 8001002:	bf00      	nop
	__disable_irq();

	// Generate an interrupt upon receiving data
	USART1->CR1 |= USART_CR1_RXNEIE_Msk;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <enable_interrupts_RX+0x2c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <enable_interrupts_RX+0x2c>)
 800100a:	f043 0320 	orr.w	r3, r3, #32
 800100e:	6013      	str	r3, [r2, #0]

	// Set priority and enable interrupts
	NVIC_SetPriority(USART1_IRQn, 2);
 8001010:	2102      	movs	r1, #2
 8001012:	2025      	movs	r0, #37	; 0x25
 8001014:	f7ff ff54 	bl	8000ec0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8001018:	2025      	movs	r0, #37	; 0x25
 800101a:	f7ff ff33 	bl	8000e84 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800101e:	b662      	cpsie	i
}
 8001020:	bf00      	nop

	__enable_irq();
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40013800 	.word	0x40013800

0800102c <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8001038:	bf00      	nop
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f8      	beq.n	800103a <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	79fa      	ldrb	r2, [r7, #7]
 800104e:	b292      	uxth	r2, r2
 8001050:	801a      	strh	r2, [r3, #0]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 800106c:	e00b      	b.n	8001086 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	6839      	ldr	r1, [r7, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ffd9 	bl	800102c <SerialOutputChar>
		counter++;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3301      	adds	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
		pt++;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3301      	adds	r3, #1
 8001084:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1ef      	bne.n	800106e <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	4798      	blx	r3
}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <SerialReceiveChar>:


// returns 1 if valid char, 0 if timeout
uint8_t SerialReceiveChar(SerialPort *serial_port, uint8_t *received_char)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
	uint8_t latest_character = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	737b      	strb	r3, [r7, #13]

	uint16_t timeout = 0xffff;
 80010b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b8:	81fb      	strh	r3, [r7, #14]
  while (1) {
	  timeout--;
 80010ba:	89fb      	ldrh	r3, [r7, #14]
 80010bc:	3b01      	subs	r3, #1
 80010be:	81fb      	strh	r3, [r7, #14]
	  if (timeout == 0)
 80010c0:	89fb      	ldrh	r3, [r7, #14]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <SerialReceiveChar+0x24>
		  return 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e026      	b.n	8001118 <SerialReceiveChar+0x72>

	if (*(serial_port->StatusRegister) & USART_ISR_ORE || *(serial_port->StatusRegister) & USART_ISR_FE) {
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d106      	bne.n	80010e6 <SerialReceiveChar+0x40>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d007      	beq.n	80010f6 <SerialReceiveChar+0x50>
		*(serial_port->FlagClearRegister) |= USART_ICR_ORECF | USART_ICR_FECF;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f042 020a 	orr.w	r2, r2, #10
 80010f4:	601a      	str	r2, [r3, #0]
	}

	if (*(serial_port->StatusRegister) & USART_ISR_RXNE) { // Wait for RXNE flag to be set
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0320 	and.w	r3, r3, #32
 8001100:	2b00      	cmp	r3, #0
 8001102:	d100      	bne.n	8001106 <SerialReceiveChar+0x60>
	  timeout--;
 8001104:	e7d9      	b.n	80010ba <SerialReceiveChar+0x14>
		break;
 8001106:	bf00      	nop
	}
  }
  *received_char = *(serial_port->DataInputRegister);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	b29b      	uxth	r3, r3
 8001110:	b2da      	uxtb	r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	701a      	strb	r2, [r3, #0]
  return 1;
 8001116:	2301      	movs	r3, #1
}
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <empty_buffer>:

  return index;

}

void empty_buffer(char *array, int size){
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++){
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	e007      	b.n	8001144 <empty_buffer+0x20>
		array[i] = 0;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3301      	adds	r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	dbf3      	blt.n	8001134 <empty_buffer+0x10>
	}
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_MspInit+0x44>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <HAL_MspInit+0x44>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6193      	str	r3, [r2, #24]
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_MspInit+0x44>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_MspInit+0x44>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <HAL_MspInit+0x44>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	61d3      	str	r3, [r2, #28]
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_MspInit+0x44>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001192:	2007      	movs	r0, #7
 8001194:	f000 fbaa 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000

080011a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a17      	ldr	r2, [pc, #92]	; (8001220 <HAL_I2C_MspInit+0x7c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d127      	bne.n	8001216 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_I2C_MspInit+0x80>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	4a16      	ldr	r2, [pc, #88]	; (8001224 <HAL_I2C_MspInit+0x80>)
 80011cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d0:	6153      	str	r3, [r2, #20]
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_I2C_MspInit+0x80>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80011de:	23c0      	movs	r3, #192	; 0xc0
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e2:	2312      	movs	r3, #18
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011ee:	2304      	movs	r3, #4
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	480b      	ldr	r0, [pc, #44]	; (8001228 <HAL_I2C_MspInit+0x84>)
 80011fa:	f000 fbb9 	bl	8001970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_I2C_MspInit+0x80>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_I2C_MspInit+0x80>)
 8001204:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001208:	61d3      	str	r3, [r2, #28]
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_I2C_MspInit+0x80>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	; 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40005400 	.word	0x40005400
 8001224:	40021000 	.word	0x40021000
 8001228:	48000400 	.word	0x48000400

0800122c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <HAL_SPI_MspInit+0x7c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d128      	bne.n	80012a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_SPI_MspInit+0x80>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	4a16      	ldr	r2, [pc, #88]	; (80012ac <HAL_SPI_MspInit+0x80>)
 8001254:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001258:	6193      	str	r3, [r2, #24]
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <HAL_SPI_MspInit+0x80>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_SPI_MspInit+0x80>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <HAL_SPI_MspInit+0x80>)
 800126c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_SPI_MspInit+0x80>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800127e:	23e0      	movs	r3, #224	; 0xe0
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800128e:	2305      	movs	r3, #5
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129c:	f000 fb68 	bl	8001970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40013000 	.word	0x40013000
 80012ac:	40021000 	.word	0x40021000

080012b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a1c      	ldr	r2, [pc, #112]	; (8001340 <HAL_TIM_Base_MspInit+0x90>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d131      	bne.n	8001336 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <HAL_TIM_Base_MspInit+0x94>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	4a1b      	ldr	r2, [pc, #108]	; (8001344 <HAL_TIM_Base_MspInit+0x94>)
 80012d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012dc:	6193      	str	r3, [r2, #24]
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_TIM_Base_MspInit+0x94>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_TIM_Base_MspInit+0x94>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	4a15      	ldr	r2, [pc, #84]	; (8001344 <HAL_TIM_Base_MspInit+0x94>)
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	6153      	str	r3, [r2, #20]
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_TIM_Base_MspInit+0x94>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001314:	2306      	movs	r3, #6
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001322:	f000 fb25 	bl	8001970 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	201b      	movs	r0, #27
 800132c:	f000 fae9 	bl	8001902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001330:	201b      	movs	r0, #27
 8001332:	f000 fb02 	bl	800193a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40012c00 	.word	0x40012c00
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001358:	d113      	bne.n	8001382 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_TIM_PWM_MspInit+0x44>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <HAL_TIM_PWM_MspInit+0x44>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	61d3      	str	r3, [r2, #28]
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_TIM_PWM_MspInit+0x44>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	201c      	movs	r0, #28
 8001378:	f000 fac3 	bl	8001902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800137c:	201c      	movs	r0, #28
 800137e:	f000 fadc 	bl	800193a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b0:	d11d      	bne.n	80013ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_TIM_MspPostInit+0x68>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <HAL_TIM_MspPostInit+0x68>)
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013bc:	6153      	str	r3, [r2, #20]
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_TIM_MspPostInit+0x68>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80013ca:	f248 0302 	movw	r3, #32770	; 0x8002
 80013ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013dc:	2301      	movs	r3, #1
 80013de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4619      	mov	r1, r3
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ea:	f000 fac1 	bl	8001970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013ee:	bf00      	nop
 80013f0:	3720      	adds	r7, #32
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a18      	ldr	r2, [pc, #96]	; (800147c <HAL_PCD_MspInit+0x80>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d129      	bne.n	8001472 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_PCD_MspInit+0x84>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	4a17      	ldr	r2, [pc, #92]	; (8001480 <HAL_PCD_MspInit+0x84>)
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	6153      	str	r3, [r2, #20]
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_PCD_MspInit+0x84>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001436:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001448:	230e      	movs	r3, #14
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001456:	f000 fa8b 	bl	8001970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_PCD_MspInit+0x84>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <HAL_PCD_MspInit+0x84>)
 8001460:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001464:	61d3      	str	r3, [r2, #28]
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_PCD_MspInit+0x84>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	; 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40005c00 	.word	0x40005c00
 8001480:	40021000 	.word	0x40021000

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler+0x4>

0800148a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler+0x4>

08001496 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d0:	f000 f8f8 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <TIM1_CC_IRQHandler+0x10>)
 80014de:	f003 faa3 	bl	8004a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000184 	.word	0x20000184

080014ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <TIM2_IRQHandler+0x10>)
 80014f2:	f003 fa99 	bl	8004a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200001d0 	.word	0x200001d0

08001500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <_sbrk+0x5c>)
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <_sbrk+0x60>)
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <_sbrk+0x64>)
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <_sbrk+0x68>)
 8001520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	429a      	cmp	r2, r3
 800152e:	d207      	bcs.n	8001540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001530:	f004 fca2 	bl	8005e78 <__errno>
 8001534:	4603      	mov	r3, r0
 8001536:	220c      	movs	r2, #12
 8001538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800153e:	e009      	b.n	8001554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001546:	4b07      	ldr	r3, [pc, #28]	; (8001564 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <_sbrk+0x64>)
 8001550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	2000a000 	.word	0x2000a000
 8001560:	00000400 	.word	0x00000400
 8001564:	2000057c 	.word	0x2000057c
 8001568:	20000598 	.word	0x20000598

0800156c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <SystemInit+0x20>)
 8001572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <SystemInit+0x20>)
 8001578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800157c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <enter_waiting>:
#include "waiting.h"
#include "led.h"
#include "data_handler.h"
#include "stm32f303xc.h"

void enter_waiting(){
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	set_led(0b11001100);
 8001594:	20cc      	movs	r0, #204	; 0xcc
 8001596:	f7fe ffef 	bl	8000578 <set_led>
	extern int current_game_state;
	while(1){
		if (current_game_state == 1){
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <enter_waiting+0x50>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d102      	bne.n	80015a8 <enter_waiting+0x18>
			enter_challenge_1();
 80015a2:	f7fe fea5 	bl	80002f0 <enter_challenge_1>
 80015a6:	e7f8      	b.n	800159a <enter_waiting+0xa>
		}
		else if (current_game_state == 2){
 80015a8:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <enter_waiting+0x50>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d102      	bne.n	80015b6 <enter_waiting+0x26>
			enter_challenge_2();
 80015b0:	f7fe fee0 	bl	8000374 <enter_challenge_2>
 80015b4:	e7f1      	b.n	800159a <enter_waiting+0xa>
		}
		else if (current_game_state == 3){
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <enter_waiting+0x50>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d102      	bne.n	80015c4 <enter_waiting+0x34>
			enter_challenge_3();
 80015be:	f7fe ff1b 	bl	80003f8 <enter_challenge_3>
 80015c2:	e7ea      	b.n	800159a <enter_waiting+0xa>
		}
		else if (current_game_state == 4){
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <enter_waiting+0x50>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d102      	bne.n	80015d2 <enter_waiting+0x42>
			enter_challenge_4();
 80015cc:	f7fe ff56 	bl	800047c <enter_challenge_4>
 80015d0:	e7e3      	b.n	800159a <enter_waiting+0xa>
		}
		else if (current_game_state == 5){
 80015d2:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <enter_waiting+0x50>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b05      	cmp	r3, #5
 80015d8:	d1df      	bne.n	800159a <enter_waiting+0xa>
			enter_login();
 80015da:	f7fe ffdf 	bl	800059c <enter_login>
		if (current_game_state == 1){
 80015de:	e7dc      	b.n	800159a <enter_waiting+0xa>
 80015e0:	20000510 	.word	0x20000510

080015e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800161c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e8:	f7ff ffc0 	bl	800156c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ee:	490d      	ldr	r1, [pc, #52]	; (8001624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <LoopForever+0xe>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001604:	4c0a      	ldr	r4, [pc, #40]	; (8001630 <LoopForever+0x16>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001612:	f004 fc37 	bl	8005e84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001616:	f7ff f82d 	bl	8000674 <main>

0800161a <LoopForever>:

LoopForever:
    b LoopForever
 800161a:	e7fe      	b.n	800161a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800161c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001628:	0800631c 	.word	0x0800631c
  ldr r2, =_sbss
 800162c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001630:	20000594 	.word	0x20000594

08001634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC1_2_IRQHandler>
	...

08001638 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_Init+0x28>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_Init+0x28>)
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 f94f 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164e:	2000      	movs	r0, #0
 8001650:	f000 f808 	bl	8001664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001654:	f7ff fd82 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40022000 	.word	0x40022000

08001664 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f967 	bl	8001956 <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016a0:	f000 f92f 	bl	8001902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000040 	.word	0x20000040
 80016bc:	20000048 	.word	0x20000048
 80016c0:	20000044 	.word	0x20000044

080016c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000048 	.word	0x20000048
 80016e8:	20000580 	.word	0x20000580

080016ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000580 	.word	0x20000580

08001704 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff ffee 	bl	80016ec <HAL_GetTick>
 8001710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800171c:	d005      	beq.n	800172a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_Delay+0x44>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800172a:	bf00      	nop
 800172c:	f7ff ffde 	bl	80016ec <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8f7      	bhi.n	800172c <HAL_Delay+0x28>
  {
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000048 	.word	0x20000048

0800174c <__NVIC_SetPriorityGrouping>:
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001768:	4013      	ands	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177e:	4a04      	ldr	r2, [pc, #16]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	60d3      	str	r3, [r2, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_GetPriorityGrouping>:
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <__NVIC_GetPriorityGrouping+0x18>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	f003 0307 	and.w	r3, r3, #7
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_EnableIRQ>:
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	db0b      	blt.n	80017da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	f003 021f 	and.w	r2, r3, #31
 80017c8:	4907      	ldr	r1, [pc, #28]	; (80017e8 <__NVIC_EnableIRQ+0x38>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	2001      	movs	r0, #1
 80017d2:	fa00 f202 	lsl.w	r2, r0, r2
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000e100 	.word	0xe000e100

080017ec <__NVIC_SetPriority>:
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db0a      	blt.n	8001816 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	490c      	ldr	r1, [pc, #48]	; (8001838 <__NVIC_SetPriority+0x4c>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	0112      	lsls	r2, r2, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	440b      	add	r3, r1
 8001810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001814:	e00a      	b.n	800182c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <__NVIC_SetPriority+0x50>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3b04      	subs	r3, #4
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	440b      	add	r3, r1
 800182a:	761a      	strb	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000e100 	.word	0xe000e100
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f1c3 0307 	rsb	r3, r3, #7
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf28      	it	cs
 800185e:	2304      	movcs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3304      	adds	r3, #4
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <NVIC_EncodePriority+0x30>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b03      	subs	r3, #3
 800186e:	e000      	b.n	8001872 <NVIC_EncodePriority+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43d9      	mvns	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4313      	orrs	r3, r2
         );
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b8:	d301      	bcc.n	80018be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00f      	b.n	80018de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <SysTick_Config+0x40>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c6:	210f      	movs	r1, #15
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018cc:	f7ff ff8e 	bl	80017ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <SysTick_Config+0x40>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <SysTick_Config+0x40>)
 80018d8:	2207      	movs	r2, #7
 80018da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	e000e010 	.word	0xe000e010

080018ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff29 	bl	800174c <__NVIC_SetPriorityGrouping>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001914:	f7ff ff3e 	bl	8001794 <__NVIC_GetPriorityGrouping>
 8001918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	6978      	ldr	r0, [r7, #20]
 8001920:	f7ff ff8e 	bl	8001840 <NVIC_EncodePriority>
 8001924:	4602      	mov	r2, r0
 8001926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff5d 	bl	80017ec <__NVIC_SetPriority>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff31 	bl	80017b0 <__NVIC_EnableIRQ>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffa2 	bl	80018a8 <SysTick_Config>
 8001964:	4603      	mov	r3, r0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197e:	e154      	b.n	8001c2a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2101      	movs	r1, #1
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 8146 	beq.w	8001c24 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d005      	beq.n	80019b0 <HAL_GPIO_Init+0x40>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d130      	bne.n	8001a12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e6:	2201      	movs	r2, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	091b      	lsrs	r3, r3, #4
 80019fc:	f003 0201 	and.w	r2, r3, #1
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d017      	beq.n	8001a4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2203      	movs	r2, #3
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d123      	bne.n	8001aa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3208      	adds	r2, #8
 8001a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	220f      	movs	r2, #15
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	08da      	lsrs	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3208      	adds	r2, #8
 8001a9c:	6939      	ldr	r1, [r7, #16]
 8001a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0203 	and.w	r2, r3, #3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80a0 	beq.w	8001c24 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae4:	4b58      	ldr	r3, [pc, #352]	; (8001c48 <HAL_GPIO_Init+0x2d8>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a57      	ldr	r2, [pc, #348]	; (8001c48 <HAL_GPIO_Init+0x2d8>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b55      	ldr	r3, [pc, #340]	; (8001c48 <HAL_GPIO_Init+0x2d8>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001afc:	4a53      	ldr	r2, [pc, #332]	; (8001c4c <HAL_GPIO_Init+0x2dc>)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b26:	d019      	beq.n	8001b5c <HAL_GPIO_Init+0x1ec>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a49      	ldr	r2, [pc, #292]	; (8001c50 <HAL_GPIO_Init+0x2e0>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d013      	beq.n	8001b58 <HAL_GPIO_Init+0x1e8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a48      	ldr	r2, [pc, #288]	; (8001c54 <HAL_GPIO_Init+0x2e4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d00d      	beq.n	8001b54 <HAL_GPIO_Init+0x1e4>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a47      	ldr	r2, [pc, #284]	; (8001c58 <HAL_GPIO_Init+0x2e8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d007      	beq.n	8001b50 <HAL_GPIO_Init+0x1e0>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a46      	ldr	r2, [pc, #280]	; (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d101      	bne.n	8001b4c <HAL_GPIO_Init+0x1dc>
 8001b48:	2304      	movs	r3, #4
 8001b4a:	e008      	b.n	8001b5e <HAL_GPIO_Init+0x1ee>
 8001b4c:	2305      	movs	r3, #5
 8001b4e:	e006      	b.n	8001b5e <HAL_GPIO_Init+0x1ee>
 8001b50:	2303      	movs	r3, #3
 8001b52:	e004      	b.n	8001b5e <HAL_GPIO_Init+0x1ee>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e002      	b.n	8001b5e <HAL_GPIO_Init+0x1ee>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <HAL_GPIO_Init+0x1ee>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	f002 0203 	and.w	r2, r2, #3
 8001b64:	0092      	lsls	r2, r2, #2
 8001b66:	4093      	lsls	r3, r2
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b6e:	4937      	ldr	r1, [pc, #220]	; (8001c4c <HAL_GPIO_Init+0x2dc>)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b7c:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ba0:	4a2f      	ldr	r2, [pc, #188]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bca:	4a25      	ldr	r2, [pc, #148]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bd0:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bf4:	4a1a      	ldr	r2, [pc, #104]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c1e:	4a10      	ldr	r2, [pc, #64]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	3301      	adds	r3, #1
 8001c28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f47f aea3 	bne.w	8001980 <HAL_GPIO_Init+0x10>
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	bf00      	nop
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010000 	.word	0x40010000
 8001c50:	48000400 	.word	0x48000400
 8001c54:	48000800 	.word	0x48000800
 8001c58:	48000c00 	.word	0x48000c00
 8001c5c:	48001000 	.word	0x48001000
 8001c60:	40010400 	.word	0x40010400

08001c64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	887b      	ldrh	r3, [r7, #2]
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e001      	b.n	8001c86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	807b      	strh	r3, [r7, #2]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca4:	787b      	ldrb	r3, [r7, #1]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001caa:	887a      	ldrh	r2, [r7, #2]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cb0:	e002      	b.n	8001cb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e081      	b.n	8001dda <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fa5a 	bl	80011a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2224      	movs	r2, #36	; 0x24
 8001cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0201 	bic.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d107      	bne.n	8001d3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	e006      	b.n	8001d4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d104      	bne.n	8001d5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691a      	ldr	r2, [r3, #16]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69d9      	ldr	r1, [r3, #28]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1a      	ldr	r2, [r3, #32]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	4608      	mov	r0, r1
 8001dee:	4611      	mov	r1, r2
 8001df0:	461a      	mov	r2, r3
 8001df2:	4603      	mov	r3, r0
 8001df4:	817b      	strh	r3, [r7, #10]
 8001df6:	460b      	mov	r3, r1
 8001df8:	813b      	strh	r3, [r7, #8]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b20      	cmp	r3, #32
 8001e08:	f040 80f9 	bne.w	8001ffe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_I2C_Mem_Write+0x34>
 8001e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d105      	bne.n	8001e24 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0ed      	b.n	8002000 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_I2C_Mem_Write+0x4e>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e0e6      	b.n	8002000 <HAL_I2C_Mem_Write+0x21c>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e3a:	f7ff fc57 	bl	80016ec <HAL_GetTick>
 8001e3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	2319      	movs	r3, #25
 8001e46:	2201      	movs	r2, #1
 8001e48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 fac3 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0d1      	b.n	8002000 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2221      	movs	r2, #33	; 0x21
 8001e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2240      	movs	r2, #64	; 0x40
 8001e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6a3a      	ldr	r2, [r7, #32]
 8001e76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e84:	88f8      	ldrh	r0, [r7, #6]
 8001e86:	893a      	ldrh	r2, [r7, #8]
 8001e88:	8979      	ldrh	r1, [r7, #10]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	4603      	mov	r3, r0
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 f9d3 	bl	8002240 <I2C_RequestMemoryWrite>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0a9      	b.n	8002000 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	2bff      	cmp	r3, #255	; 0xff
 8001eb4:	d90e      	bls.n	8001ed4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	22ff      	movs	r2, #255	; 0xff
 8001eba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	8979      	ldrh	r1, [r7, #10]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 fc3d 	bl	800274c <I2C_TransferConfig>
 8001ed2:	e00f      	b.n	8001ef4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	8979      	ldrh	r1, [r7, #10]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 fc2c 	bl	800274c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 fabc 	bl	8002476 <I2C_WaitOnTXISFlagUntilTimeout>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e07b      	b.n	8002000 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d034      	beq.n	8001fac <HAL_I2C_Mem_Write+0x1c8>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d130      	bne.n	8001fac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f50:	2200      	movs	r2, #0
 8001f52:	2180      	movs	r1, #128	; 0x80
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 fa3f 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e04d      	b.n	8002000 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2bff      	cmp	r3, #255	; 0xff
 8001f6c:	d90e      	bls.n	8001f8c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	22ff      	movs	r2, #255	; 0xff
 8001f72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	8979      	ldrh	r1, [r7, #10]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 fbe1 	bl	800274c <I2C_TransferConfig>
 8001f8a:	e00f      	b.n	8001fac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	8979      	ldrh	r1, [r7, #10]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 fbd0 	bl	800274c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d19e      	bne.n	8001ef4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 faa2 	bl	8002504 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e01a      	b.n	8002000 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6859      	ldr	r1, [r3, #4]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_I2C_Mem_Write+0x224>)
 8001fde:	400b      	ands	r3, r1
 8001fe0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	e000      	b.n	8002000 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001ffe:	2302      	movs	r3, #2
  }
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	fe00e800 	.word	0xfe00e800

0800200c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	4608      	mov	r0, r1
 8002016:	4611      	mov	r1, r2
 8002018:	461a      	mov	r2, r3
 800201a:	4603      	mov	r3, r0
 800201c:	817b      	strh	r3, [r7, #10]
 800201e:	460b      	mov	r3, r1
 8002020:	813b      	strh	r3, [r7, #8]
 8002022:	4613      	mov	r3, r2
 8002024:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b20      	cmp	r3, #32
 8002030:	f040 80fd 	bne.w	800222e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <HAL_I2C_Mem_Read+0x34>
 800203a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800203c:	2b00      	cmp	r3, #0
 800203e:	d105      	bne.n	800204c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002046:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0f1      	b.n	8002230 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_I2C_Mem_Read+0x4e>
 8002056:	2302      	movs	r3, #2
 8002058:	e0ea      	b.n	8002230 <HAL_I2C_Mem_Read+0x224>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002062:	f7ff fb43 	bl	80016ec <HAL_GetTick>
 8002066:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	2319      	movs	r3, #25
 800206e:	2201      	movs	r2, #1
 8002070:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f9af 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0d5      	b.n	8002230 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2222      	movs	r2, #34	; 0x22
 8002088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2240      	movs	r2, #64	; 0x40
 8002090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a3a      	ldr	r2, [r7, #32]
 800209e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020ac:	88f8      	ldrh	r0, [r7, #6]
 80020ae:	893a      	ldrh	r2, [r7, #8]
 80020b0:	8979      	ldrh	r1, [r7, #10]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	4603      	mov	r3, r0
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 f913 	bl	80022e8 <I2C_RequestMemoryRead>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0ad      	b.n	8002230 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2bff      	cmp	r3, #255	; 0xff
 80020dc:	d90e      	bls.n	80020fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	22ff      	movs	r2, #255	; 0xff
 80020e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	8979      	ldrh	r1, [r7, #10]
 80020ec:	4b52      	ldr	r3, [pc, #328]	; (8002238 <HAL_I2C_Mem_Read+0x22c>)
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 fb29 	bl	800274c <I2C_TransferConfig>
 80020fa:	e00f      	b.n	800211c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210a:	b2da      	uxtb	r2, r3
 800210c:	8979      	ldrh	r1, [r7, #10]
 800210e:	4b4a      	ldr	r3, [pc, #296]	; (8002238 <HAL_I2C_Mem_Read+0x22c>)
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fb18 	bl	800274c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002122:	2200      	movs	r2, #0
 8002124:	2104      	movs	r1, #4
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f956 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e07c      	b.n	8002230 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216c:	b29b      	uxth	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d034      	beq.n	80021dc <HAL_I2C_Mem_Read+0x1d0>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002176:	2b00      	cmp	r3, #0
 8002178:	d130      	bne.n	80021dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002180:	2200      	movs	r2, #0
 8002182:	2180      	movs	r1, #128	; 0x80
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f927 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e04d      	b.n	8002230 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	2bff      	cmp	r3, #255	; 0xff
 800219c:	d90e      	bls.n	80021bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	22ff      	movs	r2, #255	; 0xff
 80021a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	8979      	ldrh	r1, [r7, #10]
 80021ac:	2300      	movs	r3, #0
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 fac9 	bl	800274c <I2C_TransferConfig>
 80021ba:	e00f      	b.n	80021dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	8979      	ldrh	r1, [r7, #10]
 80021ce:	2300      	movs	r3, #0
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 fab8 	bl	800274c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d19a      	bne.n	800211c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f98a 	bl	8002504 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e01a      	b.n	8002230 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2220      	movs	r2, #32
 8002200:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6859      	ldr	r1, [r3, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_I2C_Mem_Read+0x230>)
 800220e:	400b      	ands	r3, r1
 8002210:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2220      	movs	r2, #32
 8002216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800222e:	2302      	movs	r3, #2
  }
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	80002400 	.word	0x80002400
 800223c:	fe00e800 	.word	0xfe00e800

08002240 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af02      	add	r7, sp, #8
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	4608      	mov	r0, r1
 800224a:	4611      	mov	r1, r2
 800224c:	461a      	mov	r2, r3
 800224e:	4603      	mov	r3, r0
 8002250:	817b      	strh	r3, [r7, #10]
 8002252:	460b      	mov	r3, r1
 8002254:	813b      	strh	r3, [r7, #8]
 8002256:	4613      	mov	r3, r2
 8002258:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800225a:	88fb      	ldrh	r3, [r7, #6]
 800225c:	b2da      	uxtb	r2, r3
 800225e:	8979      	ldrh	r1, [r7, #10]
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <I2C_RequestMemoryWrite+0xa4>)
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 fa6f 	bl	800274c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	69b9      	ldr	r1, [r7, #24]
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f8ff 	bl	8002476 <I2C_WaitOnTXISFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e02c      	b.n	80022dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002288:	893b      	ldrh	r3, [r7, #8]
 800228a:	b2da      	uxtb	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	629a      	str	r2, [r3, #40]	; 0x28
 8002292:	e015      	b.n	80022c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002294:	893b      	ldrh	r3, [r7, #8]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	b29b      	uxth	r3, r3
 800229a:	b2da      	uxtb	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	69b9      	ldr	r1, [r7, #24]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f8e5 	bl	8002476 <I2C_WaitOnTXISFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e012      	b.n	80022dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022b6:	893b      	ldrh	r3, [r7, #8]
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	2200      	movs	r2, #0
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f884 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	80002000 	.word	0x80002000

080022e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	4608      	mov	r0, r1
 80022f2:	4611      	mov	r1, r2
 80022f4:	461a      	mov	r2, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	817b      	strh	r3, [r7, #10]
 80022fa:	460b      	mov	r3, r1
 80022fc:	813b      	strh	r3, [r7, #8]
 80022fe:	4613      	mov	r3, r2
 8002300:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	8979      	ldrh	r1, [r7, #10]
 8002308:	4b20      	ldr	r3, [pc, #128]	; (800238c <I2C_RequestMemoryRead+0xa4>)
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	2300      	movs	r3, #0
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 fa1c 	bl	800274c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	69b9      	ldr	r1, [r7, #24]
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 f8ac 	bl	8002476 <I2C_WaitOnTXISFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e02c      	b.n	8002382 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d105      	bne.n	800233a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800232e:	893b      	ldrh	r3, [r7, #8]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	629a      	str	r2, [r3, #40]	; 0x28
 8002338:	e015      	b.n	8002366 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800233a:	893b      	ldrh	r3, [r7, #8]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	b29b      	uxth	r3, r3
 8002340:	b2da      	uxtb	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	69b9      	ldr	r1, [r7, #24]
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f892 	bl	8002476 <I2C_WaitOnTXISFlagUntilTimeout>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e012      	b.n	8002382 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800235c:	893b      	ldrh	r3, [r7, #8]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	2200      	movs	r2, #0
 800236e:	2140      	movs	r1, #64	; 0x40
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f831 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	80002000 	.word	0x80002000

08002390 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d103      	bne.n	80023ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2200      	movs	r2, #0
 80023ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d007      	beq.n	80023cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	619a      	str	r2, [r3, #24]
  }
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	4613      	mov	r3, r2
 80023e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023e8:	e031      	b.n	800244e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023f0:	d02d      	beq.n	800244e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f2:	f7ff f97b 	bl	80016ec <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d302      	bcc.n	8002408 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d122      	bne.n	800244e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699a      	ldr	r2, [r3, #24]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	4013      	ands	r3, r2
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	429a      	cmp	r2, r3
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	429a      	cmp	r2, r3
 8002424:	d113      	bne.n	800244e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f043 0220 	orr.w	r2, r3, #32
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e00f      	b.n	800246e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699a      	ldr	r2, [r3, #24]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4013      	ands	r3, r2
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	429a      	cmp	r2, r3
 800245c:	bf0c      	ite	eq
 800245e:	2301      	moveq	r3, #1
 8002460:	2300      	movne	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	429a      	cmp	r2, r3
 800246a:	d0be      	beq.n	80023ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002482:	e033      	b.n	80024ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f87f 	bl	800258c <I2C_IsErrorOccurred>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e031      	b.n	80024fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800249e:	d025      	beq.n	80024ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a0:	f7ff f924 	bl	80016ec <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d302      	bcc.n	80024b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d11a      	bne.n	80024ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d013      	beq.n	80024ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c8:	f043 0220 	orr.w	r2, r3, #32
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e007      	b.n	80024fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d1c4      	bne.n	8002484 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002510:	e02f      	b.n	8002572 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f838 	bl	800258c <I2C_IsErrorOccurred>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e02d      	b.n	8002582 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002526:	f7ff f8e1 	bl	80016ec <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	429a      	cmp	r2, r3
 8002534:	d302      	bcc.n	800253c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d11a      	bne.n	8002572 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b20      	cmp	r3, #32
 8002548:	d013      	beq.n	8002572 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	f043 0220 	orr.w	r2, r3, #32
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e007      	b.n	8002582 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b20      	cmp	r3, #32
 800257e:	d1c8      	bne.n	8002512 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	; 0x28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d068      	beq.n	800268a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2210      	movs	r2, #16
 80025be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025c0:	e049      	b.n	8002656 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025c8:	d045      	beq.n	8002656 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025ca:	f7ff f88f 	bl	80016ec <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d302      	bcc.n	80025e0 <I2C_IsErrorOccurred+0x54>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d13a      	bne.n	8002656 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002602:	d121      	bne.n	8002648 <I2C_IsErrorOccurred+0xbc>
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800260a:	d01d      	beq.n	8002648 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	2b20      	cmp	r3, #32
 8002610:	d01a      	beq.n	8002648 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002620:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002622:	f7ff f863 	bl	80016ec <HAL_GetTick>
 8002626:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002628:	e00e      	b.n	8002648 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800262a:	f7ff f85f 	bl	80016ec <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b19      	cmp	r3, #25
 8002636:	d907      	bls.n	8002648 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	f043 0320 	orr.w	r3, r3, #32
 800263e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002646:	e006      	b.n	8002656 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	f003 0320 	and.w	r3, r3, #32
 8002652:	2b20      	cmp	r3, #32
 8002654:	d1e9      	bne.n	800262a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b20      	cmp	r3, #32
 8002662:	d003      	beq.n	800266c <I2C_IsErrorOccurred+0xe0>
 8002664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0aa      	beq.n	80025c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800266c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002670:	2b00      	cmp	r3, #0
 8002672:	d103      	bne.n	800267c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2220      	movs	r2, #32
 800267a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00b      	beq.n	80026b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	f043 0308 	orr.w	r3, r3, #8
 80026c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00b      	beq.n	80026f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	f043 0302 	orr.w	r3, r3, #2
 80026e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80026f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01c      	beq.n	800273a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7ff fe45 	bl	8002390 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <I2C_IsErrorOccurred+0x1bc>)
 8002712:	400b      	ands	r3, r1
 8002714:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	431a      	orrs	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800273a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800273e:	4618      	mov	r0, r3
 8002740:	3728      	adds	r7, #40	; 0x28
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	fe00e800 	.word	0xfe00e800

0800274c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	460b      	mov	r3, r1
 8002758:	817b      	strh	r3, [r7, #10]
 800275a:	4613      	mov	r3, r2
 800275c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800275e:	897b      	ldrh	r3, [r7, #10]
 8002760:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002764:	7a7b      	ldrb	r3, [r7, #9]
 8002766:	041b      	lsls	r3, r3, #16
 8002768:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800276c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	4313      	orrs	r3, r2
 8002776:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800277a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	0d5b      	lsrs	r3, r3, #21
 8002786:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <I2C_TransferConfig+0x60>)
 800278c:	430b      	orrs	r3, r1
 800278e:	43db      	mvns	r3, r3
 8002790:	ea02 0103 	and.w	r1, r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	03ff63ff 	.word	0x03ff63ff

080027b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d138      	bne.n	8002838 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e032      	b.n	800283a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2224      	movs	r2, #36	; 0x24
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002802:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	e000      	b.n	800283a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002838:	2302      	movs	r3, #2
  }
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b20      	cmp	r3, #32
 800285a:	d139      	bne.n	80028d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002866:	2302      	movs	r3, #2
 8002868:	e033      	b.n	80028d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2224      	movs	r2, #36	; 0x24
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0201 	bic.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002898:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
  }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e0:	b08b      	sub	sp, #44	; 0x2c
 80028e2:	af06      	add	r7, sp, #24
 80028e4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0c4      	b.n	8002a7a <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d106      	bne.n	800290a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7fe fd79 	bl	80013fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2203      	movs	r2, #3
 800290e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f003 fa6e 	bl	8005df8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	e040      	b.n	80029a4 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	440b      	add	r3, r1
 8002932:	3301      	adds	r3, #1
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	440b      	add	r3, r1
 800295c:	3303      	adds	r3, #3
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002962:	7bfa      	ldrb	r2, [r7, #15]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	440b      	add	r3, r1
 8002970:	3338      	adds	r3, #56	; 0x38
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002976:	7bfa      	ldrb	r2, [r7, #15]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	440b      	add	r3, r1
 8002984:	333c      	adds	r3, #60	; 0x3c
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	440b      	add	r3, r1
 8002998:	3340      	adds	r3, #64	; 0x40
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	3301      	adds	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d3b9      	bcc.n	8002922 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ae:	2300      	movs	r3, #0
 80029b0:	73fb      	strb	r3, [r7, #15]
 80029b2:	e044      	b.n	8002a3e <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	440b      	add	r3, r1
 80029c2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029ca:	7bfa      	ldrb	r2, [r7, #15]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	440b      	add	r3, r1
 80029d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029e0:	7bfa      	ldrb	r2, [r7, #15]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	440b      	add	r3, r1
 80029ee:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029f6:	7bfa      	ldrb	r2, [r7, #15]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	440b      	add	r3, r1
 8002a04:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a0c:	7bfa      	ldrb	r2, [r7, #15]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	440b      	add	r3, r1
 8002a1a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a22:	7bfa      	ldrb	r2, [r7, #15]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	440b      	add	r3, r1
 8002a30:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d3b5      	bcc.n	80029b4 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	687e      	ldr	r6, [r7, #4]
 8002a50:	466d      	mov	r5, sp
 8002a52:	f106 0410 	add.w	r4, r6, #16
 8002a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a5a:	6823      	ldr	r3, [r4, #0]
 8002a5c:	602b      	str	r3, [r5, #0]
 8002a5e:	1d33      	adds	r3, r6, #4
 8002a60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a62:	6838      	ldr	r0, [r7, #0]
 8002a64:	f003 f9e3 	bl	8005e2e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a94:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d102      	bne.n	8002aaa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f001 b823 	b.w	8003af0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 817d 	beq.w	8002dba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ac0:	4bbc      	ldr	r3, [pc, #752]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d00c      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002acc:	4bb9      	ldr	r3, [pc, #740]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d15c      	bne.n	8002b92 <HAL_RCC_OscConfig+0x10e>
 8002ad8:	4bb6      	ldr	r3, [pc, #728]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae4:	d155      	bne.n	8002b92 <HAL_RCC_OscConfig+0x10e>
 8002ae6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002afa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	095b      	lsrs	r3, r3, #5
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d102      	bne.n	8002b18 <HAL_RCC_OscConfig+0x94>
 8002b12:	4ba8      	ldr	r3, [pc, #672]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	e015      	b.n	8002b44 <HAL_RCC_OscConfig+0xc0>
 8002b18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b1c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b30:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b34:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002b38:	fa93 f3a3 	rbit	r3, r3
 8002b3c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002b40:	4b9c      	ldr	r3, [pc, #624]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b48:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002b4c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002b50:	fa92 f2a2 	rbit	r2, r2
 8002b54:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002b58:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002b5c:	fab2 f282 	clz	r2, r2
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	f042 0220 	orr.w	r2, r2, #32
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	f002 021f 	and.w	r2, r2, #31
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 811f 	beq.w	8002db8 <HAL_RCC_OscConfig+0x334>
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 8116 	bne.w	8002db8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f000 bfaf 	b.w	8003af0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x12e>
 8002ba4:	4b83      	ldr	r3, [pc, #524]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a82      	ldr	r2, [pc, #520]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	e036      	b.n	8002c20 <HAL_RCC_OscConfig+0x19c>
 8002bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10c      	bne.n	8002bdc <HAL_RCC_OscConfig+0x158>
 8002bc2:	4b7c      	ldr	r3, [pc, #496]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a7b      	ldr	r2, [pc, #492]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	4b79      	ldr	r3, [pc, #484]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a78      	ldr	r2, [pc, #480]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002bd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e021      	b.n	8002c20 <HAL_RCC_OscConfig+0x19c>
 8002bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCC_OscConfig+0x184>
 8002bee:	4b71      	ldr	r3, [pc, #452]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a70      	ldr	r2, [pc, #448]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b6e      	ldr	r3, [pc, #440]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a6d      	ldr	r2, [pc, #436]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e00b      	b.n	8002c20 <HAL_RCC_OscConfig+0x19c>
 8002c08:	4b6a      	ldr	r3, [pc, #424]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a69      	ldr	r2, [pc, #420]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	4b67      	ldr	r3, [pc, #412]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a66      	ldr	r2, [pc, #408]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c20:	4b64      	ldr	r3, [pc, #400]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	f023 020f 	bic.w	r2, r3, #15
 8002c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	495f      	ldr	r1, [pc, #380]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d059      	beq.n	8002cfe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4a:	f7fe fd4f 	bl	80016ec <HAL_GetTick>
 8002c4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c54:	f7fe fd4a 	bl	80016ec <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b64      	cmp	r3, #100	; 0x64
 8002c62:	d902      	bls.n	8002c6a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	f000 bf43 	b.w	8003af0 <HAL_RCC_OscConfig+0x106c>
 8002c6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c6e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002c7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d102      	bne.n	8002c9c <HAL_RCC_OscConfig+0x218>
 8002c96:	4b47      	ldr	r3, [pc, #284]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	e015      	b.n	8002cc8 <HAL_RCC_OscConfig+0x244>
 8002c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002cb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002cb8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002cc4:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ccc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002cd0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002cd4:	fa92 f2a2 	rbit	r2, r2
 8002cd8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002cdc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ce0:	fab2 f282 	clz	r2, r2
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	f042 0220 	orr.w	r2, r2, #32
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	f002 021f 	and.w	r2, r2, #31
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0ab      	beq.n	8002c54 <HAL_RCC_OscConfig+0x1d0>
 8002cfc:	e05d      	b.n	8002dba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fe fcf5 	bl	80016ec <HAL_GetTick>
 8002d02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d08:	f7fe fcf0 	bl	80016ec <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b64      	cmp	r3, #100	; 0x64
 8002d16:	d902      	bls.n	8002d1e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	f000 bee9 	b.w	8003af0 <HAL_RCC_OscConfig+0x106c>
 8002d1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d22:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002d32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d102      	bne.n	8002d50 <HAL_RCC_OscConfig+0x2cc>
 8002d4a:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	e015      	b.n	8002d7c <HAL_RCC_OscConfig+0x2f8>
 8002d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d54:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002d64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d68:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002d6c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002d78:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <HAL_RCC_OscConfig+0x330>)
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d80:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002d84:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002d88:	fa92 f2a2 	rbit	r2, r2
 8002d8c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002d90:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002d94:	fab2 f282 	clz	r2, r2
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	f042 0220 	orr.w	r2, r2, #32
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	f002 021f 	and.w	r2, r2, #31
 8002da4:	2101      	movs	r1, #1
 8002da6:	fa01 f202 	lsl.w	r2, r1, r2
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ab      	bne.n	8002d08 <HAL_RCC_OscConfig+0x284>
 8002db0:	e003      	b.n	8002dba <HAL_RCC_OscConfig+0x336>
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 817d 	beq.w	80030ca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002dd0:	4ba6      	ldr	r3, [pc, #664]	; (800306c <HAL_RCC_OscConfig+0x5e8>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 030c 	and.w	r3, r3, #12
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00b      	beq.n	8002df4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ddc:	4ba3      	ldr	r3, [pc, #652]	; (800306c <HAL_RCC_OscConfig+0x5e8>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 030c 	and.w	r3, r3, #12
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d172      	bne.n	8002ece <HAL_RCC_OscConfig+0x44a>
 8002de8:	4ba0      	ldr	r3, [pc, #640]	; (800306c <HAL_RCC_OscConfig+0x5e8>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d16c      	bne.n	8002ece <HAL_RCC_OscConfig+0x44a>
 8002df4:	2302      	movs	r3, #2
 8002df6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002e06:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d102      	bne.n	8002e24 <HAL_RCC_OscConfig+0x3a0>
 8002e1e:	4b93      	ldr	r3, [pc, #588]	; (800306c <HAL_RCC_OscConfig+0x5e8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	e013      	b.n	8002e4c <HAL_RCC_OscConfig+0x3c8>
 8002e24:	2302      	movs	r3, #2
 8002e26:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e36:	2302      	movs	r3, #2
 8002e38:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002e48:	4b88      	ldr	r3, [pc, #544]	; (800306c <HAL_RCC_OscConfig+0x5e8>)
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002e52:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002e56:	fa92 f2a2 	rbit	r2, r2
 8002e5a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002e5e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002e62:	fab2 f282 	clz	r2, r2
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	f042 0220 	orr.w	r2, r2, #32
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	f002 021f 	and.w	r2, r2, #31
 8002e72:	2101      	movs	r1, #1
 8002e74:	fa01 f202 	lsl.w	r2, r1, r2
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <HAL_RCC_OscConfig+0x410>
 8002e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d002      	beq.n	8002e94 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f000 be2e 	b.w	8003af0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e94:	4b75      	ldr	r3, [pc, #468]	; (800306c <HAL_RCC_OscConfig+0x5e8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	21f8      	movs	r1, #248	; 0xf8
 8002eaa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002eb2:	fa91 f1a1 	rbit	r1, r1
 8002eb6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002eba:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002ebe:	fab1 f181 	clz	r1, r1
 8002ec2:	b2c9      	uxtb	r1, r1
 8002ec4:	408b      	lsls	r3, r1
 8002ec6:	4969      	ldr	r1, [pc, #420]	; (800306c <HAL_RCC_OscConfig+0x5e8>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ecc:	e0fd      	b.n	80030ca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8088 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x56c>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002eea:	fa93 f3a3 	rbit	r3, r3
 8002eee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002ef2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	461a      	mov	r2, r3
 8002f08:	2301      	movs	r3, #1
 8002f0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe fbee 	bl	80016ec <HAL_GetTick>
 8002f10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f14:	e00a      	b.n	8002f2c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f16:	f7fe fbe9 	bl	80016ec <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d902      	bls.n	8002f2c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	f000 bde2 	b.w	8003af0 <HAL_RCC_OscConfig+0x106c>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002f3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d102      	bne.n	8002f5c <HAL_RCC_OscConfig+0x4d8>
 8002f56:	4b45      	ldr	r3, [pc, #276]	; (800306c <HAL_RCC_OscConfig+0x5e8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	e013      	b.n	8002f84 <HAL_RCC_OscConfig+0x500>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f6e:	2302      	movs	r3, #2
 8002f70:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f74:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002f80:	4b3a      	ldr	r3, [pc, #232]	; (800306c <HAL_RCC_OscConfig+0x5e8>)
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	2202      	movs	r2, #2
 8002f86:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002f8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f8e:	fa92 f2a2 	rbit	r2, r2
 8002f92:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002f96:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002f9a:	fab2 f282 	clz	r2, r2
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	f042 0220 	orr.w	r2, r2, #32
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	f002 021f 	and.w	r2, r2, #31
 8002faa:	2101      	movs	r1, #1
 8002fac:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0af      	beq.n	8002f16 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb6:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_RCC_OscConfig+0x5e8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	21f8      	movs	r1, #248	; 0xf8
 8002fcc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002fd4:	fa91 f1a1 	rbit	r1, r1
 8002fd8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002fdc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002fe0:	fab1 f181 	clz	r1, r1
 8002fe4:	b2c9      	uxtb	r1, r1
 8002fe6:	408b      	lsls	r3, r1
 8002fe8:	4920      	ldr	r1, [pc, #128]	; (800306c <HAL_RCC_OscConfig+0x5e8>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]
 8002fee:	e06c      	b.n	80030ca <HAL_RCC_OscConfig+0x646>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003002:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003006:	fab3 f383 	clz	r3, r3
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003010:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	461a      	mov	r2, r3
 8003018:	2300      	movs	r3, #0
 800301a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fe fb66 	bl	80016ec <HAL_GetTick>
 8003020:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003024:	e00a      	b.n	800303c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003026:	f7fe fb61 	bl	80016ec <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d902      	bls.n	800303c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	f000 bd5a 	b.w	8003af0 <HAL_RCC_OscConfig+0x106c>
 800303c:	2302      	movs	r3, #2
 800303e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800304e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003052:	fab3 f383 	clz	r3, r3
 8003056:	b2db      	uxtb	r3, r3
 8003058:	095b      	lsrs	r3, r3, #5
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b01      	cmp	r3, #1
 8003064:	d104      	bne.n	8003070 <HAL_RCC_OscConfig+0x5ec>
 8003066:	4b01      	ldr	r3, [pc, #4]	; (800306c <HAL_RCC_OscConfig+0x5e8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	e015      	b.n	8003098 <HAL_RCC_OscConfig+0x614>
 800306c:	40021000 	.word	0x40021000
 8003070:	2302      	movs	r3, #2
 8003072:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003082:	2302      	movs	r3, #2
 8003084:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003088:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800308c:	fa93 f3a3 	rbit	r3, r3
 8003090:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003094:	4bc8      	ldr	r3, [pc, #800]	; (80033b8 <HAL_RCC_OscConfig+0x934>)
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	2202      	movs	r2, #2
 800309a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800309e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80030a2:	fa92 f2a2 	rbit	r2, r2
 80030a6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80030aa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80030ae:	fab2 f282 	clz	r2, r2
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	f042 0220 	orr.w	r2, r2, #32
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	f002 021f 	and.w	r2, r2, #31
 80030be:	2101      	movs	r1, #1
 80030c0:	fa01 f202 	lsl.w	r2, r1, r2
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1ad      	bne.n	8003026 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 8110 	beq.w	8003300 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d079      	beq.n	80031e4 <HAL_RCC_OscConfig+0x760>
 80030f0:	2301      	movs	r3, #1
 80030f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	4bab      	ldr	r3, [pc, #684]	; (80033bc <HAL_RCC_OscConfig+0x938>)
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	461a      	mov	r2, r3
 8003116:	2301      	movs	r3, #1
 8003118:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311a:	f7fe fae7 	bl	80016ec <HAL_GetTick>
 800311e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003122:	e00a      	b.n	800313a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003124:	f7fe fae2 	bl	80016ec <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d902      	bls.n	800313a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	f000 bcdb 	b.w	8003af0 <HAL_RCC_OscConfig+0x106c>
 800313a:	2302      	movs	r3, #2
 800313c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800314c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003150:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003154:	2202      	movs	r2, #2
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	fa93 f2a3 	rbit	r2, r3
 8003166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003178:	2202      	movs	r2, #2
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	fa93 f2a3 	rbit	r2, r3
 800318a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003192:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003194:	4b88      	ldr	r3, [pc, #544]	; (80033b8 <HAL_RCC_OscConfig+0x934>)
 8003196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80031a0:	2102      	movs	r1, #2
 80031a2:	6019      	str	r1, [r3, #0]
 80031a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	fa93 f1a3 	rbit	r1, r3
 80031b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031ba:	6019      	str	r1, [r3, #0]
  return result;
 80031bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	fab3 f383 	clz	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	2101      	movs	r1, #1
 80031d8:	fa01 f303 	lsl.w	r3, r1, r3
 80031dc:	4013      	ands	r3, r2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0a0      	beq.n	8003124 <HAL_RCC_OscConfig+0x6a0>
 80031e2:	e08d      	b.n	8003300 <HAL_RCC_OscConfig+0x87c>
 80031e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031ec:	2201      	movs	r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	fa93 f2a3 	rbit	r2, r3
 80031fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003202:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003206:	601a      	str	r2, [r3, #0]
  return result;
 8003208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003210:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003212:	fab3 f383 	clz	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	4b68      	ldr	r3, [pc, #416]	; (80033bc <HAL_RCC_OscConfig+0x938>)
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	461a      	mov	r2, r3
 8003222:	2300      	movs	r3, #0
 8003224:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003226:	f7fe fa61 	bl	80016ec <HAL_GetTick>
 800322a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800322e:	e00a      	b.n	8003246 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003230:	f7fe fa5c 	bl	80016ec <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d902      	bls.n	8003246 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	f000 bc55 	b.w	8003af0 <HAL_RCC_OscConfig+0x106c>
 8003246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800324e:	2202      	movs	r2, #2
 8003250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003256:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	fa93 f2a3 	rbit	r2, r3
 8003260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003264:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003272:	2202      	movs	r2, #2
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	fa93 f2a3 	rbit	r2, r3
 8003284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003288:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003296:	2202      	movs	r2, #2
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	fa93 f2a3 	rbit	r2, r3
 80032a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b2:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <HAL_RCC_OscConfig+0x934>)
 80032b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80032be:	2102      	movs	r1, #2
 80032c0:	6019      	str	r1, [r3, #0]
 80032c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	fa93 f1a3 	rbit	r1, r3
 80032d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032d8:	6019      	str	r1, [r3, #0]
  return result;
 80032da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032de:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	fab3 f383 	clz	r3, r3
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	2101      	movs	r1, #1
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d197      	bne.n	8003230 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003304:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 81a1 	beq.w	8003658 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003316:	2300      	movs	r3, #0
 8003318:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331c:	4b26      	ldr	r3, [pc, #152]	; (80033b8 <HAL_RCC_OscConfig+0x934>)
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d116      	bne.n	8003356 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003328:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <HAL_RCC_OscConfig+0x934>)
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	4a22      	ldr	r2, [pc, #136]	; (80033b8 <HAL_RCC_OscConfig+0x934>)
 800332e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003332:	61d3      	str	r3, [r2, #28]
 8003334:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_RCC_OscConfig+0x934>)
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800333c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003340:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800334e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003350:	2301      	movs	r3, #1
 8003352:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003356:	4b1a      	ldr	r3, [pc, #104]	; (80033c0 <HAL_RCC_OscConfig+0x93c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335e:	2b00      	cmp	r3, #0
 8003360:	d11a      	bne.n	8003398 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003362:	4b17      	ldr	r3, [pc, #92]	; (80033c0 <HAL_RCC_OscConfig+0x93c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a16      	ldr	r2, [pc, #88]	; (80033c0 <HAL_RCC_OscConfig+0x93c>)
 8003368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800336e:	f7fe f9bd 	bl	80016ec <HAL_GetTick>
 8003372:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003376:	e009      	b.n	800338c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003378:	f7fe f9b8 	bl	80016ec <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b64      	cmp	r3, #100	; 0x64
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e3b1      	b.n	8003af0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <HAL_RCC_OscConfig+0x93c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ef      	beq.n	8003378 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d10d      	bne.n	80033c4 <HAL_RCC_OscConfig+0x940>
 80033a8:	4b03      	ldr	r3, [pc, #12]	; (80033b8 <HAL_RCC_OscConfig+0x934>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	4a02      	ldr	r2, [pc, #8]	; (80033b8 <HAL_RCC_OscConfig+0x934>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6213      	str	r3, [r2, #32]
 80033b4:	e03c      	b.n	8003430 <HAL_RCC_OscConfig+0x9ac>
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	10908120 	.word	0x10908120
 80033c0:	40007000 	.word	0x40007000
 80033c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10c      	bne.n	80033ee <HAL_RCC_OscConfig+0x96a>
 80033d4:	4bc1      	ldr	r3, [pc, #772]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	4ac0      	ldr	r2, [pc, #768]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 80033da:	f023 0301 	bic.w	r3, r3, #1
 80033de:	6213      	str	r3, [r2, #32]
 80033e0:	4bbe      	ldr	r3, [pc, #760]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	4abd      	ldr	r2, [pc, #756]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 80033e6:	f023 0304 	bic.w	r3, r3, #4
 80033ea:	6213      	str	r3, [r2, #32]
 80033ec:	e020      	b.n	8003430 <HAL_RCC_OscConfig+0x9ac>
 80033ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	2b05      	cmp	r3, #5
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0x994>
 80033fe:	4bb7      	ldr	r3, [pc, #732]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4ab6      	ldr	r2, [pc, #728]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 8003404:	f043 0304 	orr.w	r3, r3, #4
 8003408:	6213      	str	r3, [r2, #32]
 800340a:	4bb4      	ldr	r3, [pc, #720]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4ab3      	ldr	r2, [pc, #716]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6213      	str	r3, [r2, #32]
 8003416:	e00b      	b.n	8003430 <HAL_RCC_OscConfig+0x9ac>
 8003418:	4bb0      	ldr	r3, [pc, #704]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	4aaf      	ldr	r2, [pc, #700]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 800341e:	f023 0301 	bic.w	r3, r3, #1
 8003422:	6213      	str	r3, [r2, #32]
 8003424:	4bad      	ldr	r3, [pc, #692]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	4aac      	ldr	r2, [pc, #688]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 800342a:	f023 0304 	bic.w	r3, r3, #4
 800342e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003434:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8081 	beq.w	8003544 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003442:	f7fe f953 	bl	80016ec <HAL_GetTick>
 8003446:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344a:	e00b      	b.n	8003464 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800344c:	f7fe f94e 	bl	80016ec <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	; 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e345      	b.n	8003af0 <HAL_RCC_OscConfig+0x106c>
 8003464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003468:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800346c:	2202      	movs	r2, #2
 800346e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003474:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	fa93 f2a3 	rbit	r2, r3
 800347e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003482:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003490:	2202      	movs	r2, #2
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003498:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	fa93 f2a3 	rbit	r2, r3
 80034a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80034aa:	601a      	str	r2, [r3, #0]
  return result;
 80034ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80034b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b6:	fab3 f383 	clz	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f043 0302 	orr.w	r3, r3, #2
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d102      	bne.n	80034d0 <HAL_RCC_OscConfig+0xa4c>
 80034ca:	4b84      	ldr	r3, [pc, #528]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	e013      	b.n	80034f8 <HAL_RCC_OscConfig+0xa74>
 80034d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034d8:	2202      	movs	r2, #2
 80034da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	fa93 f2a3 	rbit	r2, r3
 80034ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	4b79      	ldr	r3, [pc, #484]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003500:	2102      	movs	r1, #2
 8003502:	6011      	str	r1, [r2, #0]
 8003504:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003508:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800350c:	6812      	ldr	r2, [r2, #0]
 800350e:	fa92 f1a2 	rbit	r1, r2
 8003512:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003516:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800351a:	6011      	str	r1, [r2, #0]
  return result;
 800351c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003520:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003524:	6812      	ldr	r2, [r2, #0]
 8003526:	fab2 f282 	clz	r2, r2
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	f002 021f 	and.w	r2, r2, #31
 8003536:	2101      	movs	r1, #1
 8003538:	fa01 f202 	lsl.w	r2, r1, r2
 800353c:	4013      	ands	r3, r2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d084      	beq.n	800344c <HAL_RCC_OscConfig+0x9c8>
 8003542:	e07f      	b.n	8003644 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003544:	f7fe f8d2 	bl	80016ec <HAL_GetTick>
 8003548:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354c:	e00b      	b.n	8003566 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800354e:	f7fe f8cd 	bl	80016ec <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	f241 3288 	movw	r2, #5000	; 0x1388
 800355e:	4293      	cmp	r3, r2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e2c4      	b.n	8003af0 <HAL_RCC_OscConfig+0x106c>
 8003566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800356e:	2202      	movs	r2, #2
 8003570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003576:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	fa93 f2a3 	rbit	r2, r3
 8003580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003584:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003592:	2202      	movs	r2, #2
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	fa93 f2a3 	rbit	r2, r3
 80035a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80035ac:	601a      	str	r2, [r3, #0]
  return result;
 80035ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80035b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f043 0302 	orr.w	r3, r3, #2
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d102      	bne.n	80035d2 <HAL_RCC_OscConfig+0xb4e>
 80035cc:	4b43      	ldr	r3, [pc, #268]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	e013      	b.n	80035fa <HAL_RCC_OscConfig+0xb76>
 80035d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035da:	2202      	movs	r2, #2
 80035dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	fa93 f2a3 	rbit	r2, r3
 80035ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	4b39      	ldr	r3, [pc, #228]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003602:	2102      	movs	r1, #2
 8003604:	6011      	str	r1, [r2, #0]
 8003606:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800360a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	fa92 f1a2 	rbit	r1, r2
 8003614:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003618:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800361c:	6011      	str	r1, [r2, #0]
  return result;
 800361e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003622:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	fab2 f282 	clz	r2, r2
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	f002 021f 	and.w	r2, r2, #31
 8003638:	2101      	movs	r1, #1
 800363a:	fa01 f202 	lsl.w	r2, r1, r2
 800363e:	4013      	ands	r3, r2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d184      	bne.n	800354e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003644:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003648:	2b01      	cmp	r3, #1
 800364a:	d105      	bne.n	8003658 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364c:	4b23      	ldr	r3, [pc, #140]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	4a22      	ldr	r2, [pc, #136]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 8003652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003656:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8242 	beq.w	8003aee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800366a:	4b1c      	ldr	r3, [pc, #112]	; (80036dc <HAL_RCC_OscConfig+0xc58>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b08      	cmp	r3, #8
 8003674:	f000 8213 	beq.w	8003a9e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	2b02      	cmp	r3, #2
 8003686:	f040 8162 	bne.w	800394e <HAL_RCC_OscConfig+0xeca>
 800368a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003692:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	fa93 f2a3 	rbit	r2, r3
 80036a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80036ae:	601a      	str	r2, [r3, #0]
  return result;
 80036b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80036b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ba:	fab3 f383 	clz	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	461a      	mov	r2, r3
 80036cc:	2300      	movs	r3, #0
 80036ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d0:	f7fe f80c 	bl	80016ec <HAL_GetTick>
 80036d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d8:	e00c      	b.n	80036f4 <HAL_RCC_OscConfig+0xc70>
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fe f804 	bl	80016ec <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e1fd      	b.n	8003af0 <HAL_RCC_OscConfig+0x106c>
 80036f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80036fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003706:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	fa93 f2a3 	rbit	r2, r3
 8003710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003714:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003718:	601a      	str	r2, [r3, #0]
  return result;
 800371a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003722:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003724:	fab3 f383 	clz	r3, r3
 8003728:	b2db      	uxtb	r3, r3
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	b2db      	uxtb	r3, r3
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d102      	bne.n	800373e <HAL_RCC_OscConfig+0xcba>
 8003738:	4bb0      	ldr	r3, [pc, #704]	; (80039fc <HAL_RCC_OscConfig+0xf78>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	e027      	b.n	800378e <HAL_RCC_OscConfig+0xd0a>
 800373e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003742:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003746:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800374a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003750:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	fa93 f2a3 	rbit	r2, r3
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003768:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800376c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003776:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	fa93 f2a3 	rbit	r2, r3
 8003780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003784:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	4b9c      	ldr	r3, [pc, #624]	; (80039fc <HAL_RCC_OscConfig+0xf78>)
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003792:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003796:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800379a:	6011      	str	r1, [r2, #0]
 800379c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037a0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	fa92 f1a2 	rbit	r1, r2
 80037aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037ae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80037b2:	6011      	str	r1, [r2, #0]
  return result;
 80037b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037b8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	fab2 f282 	clz	r2, r2
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	f042 0220 	orr.w	r2, r2, #32
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	f002 021f 	and.w	r2, r2, #31
 80037ce:	2101      	movs	r1, #1
 80037d0:	fa01 f202 	lsl.w	r2, r1, r2
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d182      	bne.n	80036e0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037da:	4b88      	ldr	r3, [pc, #544]	; (80039fc <HAL_RCC_OscConfig+0xf78>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80037ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	430b      	orrs	r3, r1
 80037fc:	497f      	ldr	r1, [pc, #508]	; (80039fc <HAL_RCC_OscConfig+0xf78>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	604b      	str	r3, [r1, #4]
 8003802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003806:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800380a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800380e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003814:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	fa93 f2a3 	rbit	r2, r3
 800381e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003822:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003826:	601a      	str	r2, [r3, #0]
  return result;
 8003828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003830:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800383c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	461a      	mov	r2, r3
 8003844:	2301      	movs	r3, #1
 8003846:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fd ff50 	bl	80016ec <HAL_GetTick>
 800384c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003850:	e009      	b.n	8003866 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003852:	f7fd ff4b 	bl	80016ec <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e144      	b.n	8003af0 <HAL_RCC_OscConfig+0x106c>
 8003866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800386e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003872:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003878:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	fa93 f2a3 	rbit	r2, r3
 8003882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003886:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800388a:	601a      	str	r2, [r3, #0]
  return result;
 800388c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003890:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003894:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003896:	fab3 f383 	clz	r3, r3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d102      	bne.n	80038b0 <HAL_RCC_OscConfig+0xe2c>
 80038aa:	4b54      	ldr	r3, [pc, #336]	; (80039fc <HAL_RCC_OscConfig+0xf78>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	e027      	b.n	8003900 <HAL_RCC_OscConfig+0xe7c>
 80038b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80038b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	fa93 f2a3 	rbit	r2, r3
 80038cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038da:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80038de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	fa93 f2a3 	rbit	r2, r3
 80038f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	4b3f      	ldr	r3, [pc, #252]	; (80039fc <HAL_RCC_OscConfig+0xf78>)
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003904:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003908:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800390c:	6011      	str	r1, [r2, #0]
 800390e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003912:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	fa92 f1a2 	rbit	r1, r2
 800391c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003920:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003924:	6011      	str	r1, [r2, #0]
  return result;
 8003926:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800392a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	fab2 f282 	clz	r2, r2
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	f042 0220 	orr.w	r2, r2, #32
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	f002 021f 	and.w	r2, r2, #31
 8003940:	2101      	movs	r1, #1
 8003942:	fa01 f202 	lsl.w	r2, r1, r2
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d082      	beq.n	8003852 <HAL_RCC_OscConfig+0xdce>
 800394c:	e0cf      	b.n	8003aee <HAL_RCC_OscConfig+0x106a>
 800394e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003952:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003956:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800395a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003960:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	fa93 f2a3 	rbit	r2, r3
 800396a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003972:	601a      	str	r2, [r3, #0]
  return result;
 8003974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003978:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800397c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003988:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	461a      	mov	r2, r3
 8003990:	2300      	movs	r3, #0
 8003992:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7fd feaa 	bl	80016ec <HAL_GetTick>
 8003998:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399c:	e009      	b.n	80039b2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399e:	f7fd fea5 	bl	80016ec <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e09e      	b.n	8003af0 <HAL_RCC_OscConfig+0x106c>
 80039b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80039ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	fa93 f2a3 	rbit	r2, r3
 80039ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039d6:	601a      	str	r2, [r3, #0]
  return result;
 80039d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d104      	bne.n	8003a00 <HAL_RCC_OscConfig+0xf7c>
 80039f6:	4b01      	ldr	r3, [pc, #4]	; (80039fc <HAL_RCC_OscConfig+0xf78>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	e029      	b.n	8003a50 <HAL_RCC_OscConfig+0xfcc>
 80039fc:	40021000 	.word	0x40021000
 8003a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a04:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a12:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	fa93 f2a3 	rbit	r2, r3
 8003a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a20:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a38:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	fa93 f2a3 	rbit	r2, r3
 8003a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a46:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <HAL_RCC_OscConfig+0x1078>)
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a54:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003a58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a5c:	6011      	str	r1, [r2, #0]
 8003a5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a62:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	fa92 f1a2 	rbit	r1, r2
 8003a6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a70:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a74:	6011      	str	r1, [r2, #0]
  return result;
 8003a76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a7a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	fab2 f282 	clz	r2, r2
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	f042 0220 	orr.w	r2, r2, #32
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	f002 021f 	and.w	r2, r2, #31
 8003a90:	2101      	movs	r1, #1
 8003a92:	fa01 f202 	lsl.w	r2, r1, r2
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d180      	bne.n	800399e <HAL_RCC_OscConfig+0xf1a>
 8003a9c:	e027      	b.n	8003aee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e01e      	b.n	8003af0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ab2:	4b12      	ldr	r3, [pc, #72]	; (8003afc <HAL_RCC_OscConfig+0x1078>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003aba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003abe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d10b      	bne.n	8003aea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003ad2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ad6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ade:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d001      	beq.n	8003aee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000

08003b00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b09e      	sub	sp, #120	; 0x78
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e162      	b.n	8003dde <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b18:	4b90      	ldr	r3, [pc, #576]	; (8003d5c <HAL_RCC_ClockConfig+0x25c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d910      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b8d      	ldr	r3, [pc, #564]	; (8003d5c <HAL_RCC_ClockConfig+0x25c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 0207 	bic.w	r2, r3, #7
 8003b2e:	498b      	ldr	r1, [pc, #556]	; (8003d5c <HAL_RCC_ClockConfig+0x25c>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b89      	ldr	r3, [pc, #548]	; (8003d5c <HAL_RCC_ClockConfig+0x25c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e14a      	b.n	8003dde <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b54:	4b82      	ldr	r3, [pc, #520]	; (8003d60 <HAL_RCC_ClockConfig+0x260>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	497f      	ldr	r1, [pc, #508]	; (8003d60 <HAL_RCC_ClockConfig+0x260>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80dc 	beq.w	8003d2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d13c      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xf6>
 8003b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b80:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b84:	fa93 f3a3 	rbit	r3, r3
 8003b88:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8c:	fab3 f383 	clz	r3, r3
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d102      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xa6>
 8003ba0:	4b6f      	ldr	r3, [pc, #444]	; (8003d60 <HAL_RCC_ClockConfig+0x260>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	e00f      	b.n	8003bc6 <HAL_RCC_ClockConfig+0xc6>
 8003ba6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003baa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	667b      	str	r3, [r7, #100]	; 0x64
 8003bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bb8:	663b      	str	r3, [r7, #96]	; 0x60
 8003bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bbc:	fa93 f3a3 	rbit	r3, r3
 8003bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bc2:	4b67      	ldr	r3, [pc, #412]	; (8003d60 <HAL_RCC_ClockConfig+0x260>)
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bca:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bce:	fa92 f2a2 	rbit	r2, r2
 8003bd2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003bd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bd6:	fab2 f282 	clz	r2, r2
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	f042 0220 	orr.w	r2, r2, #32
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	f002 021f 	and.w	r2, r2, #31
 8003be6:	2101      	movs	r1, #1
 8003be8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d17b      	bne.n	8003cea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e0f3      	b.n	8003dde <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d13c      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x178>
 8003bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0e:	fab3 f383 	clz	r3, r3
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d102      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x128>
 8003c22:	4b4f      	ldr	r3, [pc, #316]	; (8003d60 <HAL_RCC_ClockConfig+0x260>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	e00f      	b.n	8003c48 <HAL_RCC_ClockConfig+0x148>
 8003c28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c30:	fa93 f3a3 	rbit	r3, r3
 8003c34:	647b      	str	r3, [r7, #68]	; 0x44
 8003c36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c3a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3e:	fa93 f3a3 	rbit	r3, r3
 8003c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c44:	4b46      	ldr	r3, [pc, #280]	; (8003d60 <HAL_RCC_ClockConfig+0x260>)
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c4c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c50:	fa92 f2a2 	rbit	r2, r2
 8003c54:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c58:	fab2 f282 	clz	r2, r2
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	f042 0220 	orr.w	r2, r2, #32
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	f002 021f 	and.w	r2, r2, #31
 8003c68:	2101      	movs	r1, #1
 8003c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d13a      	bne.n	8003cea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0b2      	b.n	8003dde <HAL_RCC_ClockConfig+0x2de>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7e:	fa93 f3a3 	rbit	r3, r3
 8003c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c86:	fab3 f383 	clz	r3, r3
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d102      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x1a0>
 8003c9a:	4b31      	ldr	r3, [pc, #196]	; (8003d60 <HAL_RCC_ClockConfig+0x260>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	e00d      	b.n	8003cbc <HAL_RCC_ClockConfig+0x1bc>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca6:	fa93 f3a3 	rbit	r3, r3
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
 8003cac:	2302      	movs	r3, #2
 8003cae:	623b      	str	r3, [r7, #32]
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	fa93 f3a3 	rbit	r3, r3
 8003cb6:	61fb      	str	r3, [r7, #28]
 8003cb8:	4b29      	ldr	r3, [pc, #164]	; (8003d60 <HAL_RCC_ClockConfig+0x260>)
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	61ba      	str	r2, [r7, #24]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	fa92 f2a2 	rbit	r2, r2
 8003cc6:	617a      	str	r2, [r7, #20]
  return result;
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	fab2 f282 	clz	r2, r2
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	f042 0220 	orr.w	r2, r2, #32
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	f002 021f 	and.w	r2, r2, #31
 8003cda:	2101      	movs	r1, #1
 8003cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e079      	b.n	8003dde <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cea:	4b1d      	ldr	r3, [pc, #116]	; (8003d60 <HAL_RCC_ClockConfig+0x260>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f023 0203 	bic.w	r2, r3, #3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	491a      	ldr	r1, [pc, #104]	; (8003d60 <HAL_RCC_ClockConfig+0x260>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cfc:	f7fd fcf6 	bl	80016ec <HAL_GetTick>
 8003d00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d02:	e00a      	b.n	8003d1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d04:	f7fd fcf2 	bl	80016ec <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e061      	b.n	8003dde <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1a:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <HAL_RCC_ClockConfig+0x260>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 020c 	and.w	r2, r3, #12
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d1eb      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <HAL_RCC_ClockConfig+0x25c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d214      	bcs.n	8003d64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <HAL_RCC_ClockConfig+0x25c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 0207 	bic.w	r2, r3, #7
 8003d42:	4906      	ldr	r1, [pc, #24]	; (8003d5c <HAL_RCC_ClockConfig+0x25c>)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <HAL_RCC_ClockConfig+0x25c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e040      	b.n	8003dde <HAL_RCC_ClockConfig+0x2de>
 8003d5c:	40022000 	.word	0x40022000
 8003d60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d70:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <HAL_RCC_ClockConfig+0x2e8>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	491a      	ldr	r1, [pc, #104]	; (8003de8 <HAL_RCC_ClockConfig+0x2e8>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d8e:	4b16      	ldr	r3, [pc, #88]	; (8003de8 <HAL_RCC_ClockConfig+0x2e8>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4912      	ldr	r1, [pc, #72]	; (8003de8 <HAL_RCC_ClockConfig+0x2e8>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003da2:	f000 f829 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8003da6:	4601      	mov	r1, r0
 8003da8:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <HAL_RCC_ClockConfig+0x2e8>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db0:	22f0      	movs	r2, #240	; 0xf0
 8003db2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	fa92 f2a2 	rbit	r2, r2
 8003dba:	60fa      	str	r2, [r7, #12]
  return result;
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	fab2 f282 	clz	r2, r2
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	40d3      	lsrs	r3, r2
 8003dc6:	4a09      	ldr	r2, [pc, #36]	; (8003dec <HAL_RCC_ClockConfig+0x2ec>)
 8003dc8:	5cd3      	ldrb	r3, [r2, r3]
 8003dca:	fa21 f303 	lsr.w	r3, r1, r3
 8003dce:	4a08      	ldr	r2, [pc, #32]	; (8003df0 <HAL_RCC_ClockConfig+0x2f0>)
 8003dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003dd2:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <HAL_RCC_ClockConfig+0x2f4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fd fc44 	bl	8001664 <HAL_InitTick>
  
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3778      	adds	r7, #120	; 0x78
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40021000 	.word	0x40021000
 8003dec:	080061e0 	.word	0x080061e0
 8003df0:	20000040 	.word	0x20000040
 8003df4:	20000044 	.word	0x20000044

08003df8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b08b      	sub	sp, #44	; 0x2c
 8003dfc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	2300      	movs	r3, #0
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e12:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d002      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x30>
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d003      	beq.n	8003e2e <HAL_RCC_GetSysClockFreq+0x36>
 8003e26:	e03c      	b.n	8003ea2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e28:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e2a:	623b      	str	r3, [r7, #32]
      break;
 8003e2c:	e03c      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	fa92 f2a2 	rbit	r2, r2
 8003e40:	607a      	str	r2, [r7, #4]
  return result;
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	fab2 f282 	clz	r2, r2
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	40d3      	lsrs	r3, r2
 8003e4c:	4a1c      	ldr	r2, [pc, #112]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e4e:	5cd3      	ldrb	r3, [r2, r3]
 8003e50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e52:	4b19      	ldr	r3, [pc, #100]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	220f      	movs	r2, #15
 8003e5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	fa92 f2a2 	rbit	r2, r2
 8003e64:	60fa      	str	r2, [r7, #12]
  return result;
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	fab2 f282 	clz	r2, r2
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	40d3      	lsrs	r3, r2
 8003e70:	4a14      	ldr	r2, [pc, #80]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e72:	5cd3      	ldrb	r3, [r2, r3]
 8003e74:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e80:	4a0e      	ldr	r2, [pc, #56]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e90:	e004      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	4a0c      	ldr	r2, [pc, #48]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	623b      	str	r3, [r7, #32]
      break;
 8003ea0:	e002      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ea4:	623b      	str	r3, [r7, #32]
      break;
 8003ea6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	372c      	adds	r7, #44	; 0x2c
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	007a1200 	.word	0x007a1200
 8003ec0:	080061f0 	.word	0x080061f0
 8003ec4:	08006200 	.word	0x08006200
 8003ec8:	003d0900 	.word	0x003d0900

08003ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b092      	sub	sp, #72	; 0x48
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003edc:	2300      	movs	r3, #0
 8003ede:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 80d4 	beq.w	8004098 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ef0:	4b4e      	ldr	r3, [pc, #312]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10e      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efc:	4b4b      	ldr	r3, [pc, #300]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	4a4a      	ldr	r2, [pc, #296]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f06:	61d3      	str	r3, [r2, #28]
 8003f08:	4b48      	ldr	r3, [pc, #288]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1a:	4b45      	ldr	r3, [pc, #276]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d118      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f26:	4b42      	ldr	r3, [pc, #264]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a41      	ldr	r2, [pc, #260]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f32:	f7fd fbdb 	bl	80016ec <HAL_GetTick>
 8003f36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f38:	e008      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3a:	f7fd fbd7 	bl	80016ec <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b64      	cmp	r3, #100	; 0x64
 8003f46:	d901      	bls.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e169      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4c:	4b38      	ldr	r3, [pc, #224]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f58:	4b34      	ldr	r3, [pc, #208]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8084 	beq.w	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d07c      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f78:	4b2c      	ldr	r3, [pc, #176]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	fa93 f3a3 	rbit	r3, r3
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f92:	fab3 f383 	clz	r3, r3
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4b26      	ldr	r3, [pc, #152]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003faa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fae:	fa93 f3a3 	rbit	r3, r3
 8003fb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb6:	fab3 f383 	clz	r3, r3
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fca:	4a18      	ldr	r2, [pc, #96]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d04b      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fda:	f7fd fb87 	bl	80016ec <HAL_GetTick>
 8003fde:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe0:	e00a      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe2:	f7fd fb83 	bl	80016ec <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e113      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffe:	fa93 f3a3 	rbit	r3, r3
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
 8004004:	2302      	movs	r3, #2
 8004006:	623b      	str	r3, [r7, #32]
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	61fb      	str	r3, [r7, #28]
  return result;
 8004010:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	b2db      	uxtb	r3, r3
 800401c:	f043 0302 	orr.w	r3, r3, #2
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d108      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004026:	4b01      	ldr	r3, [pc, #4]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	e00d      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800402c:	40021000 	.word	0x40021000
 8004030:	40007000 	.word	0x40007000
 8004034:	10908100 	.word	0x10908100
 8004038:	2302      	movs	r3, #2
 800403a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	fa93 f3a3 	rbit	r3, r3
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	4b78      	ldr	r3, [pc, #480]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	2202      	movs	r2, #2
 800404a:	613a      	str	r2, [r7, #16]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	fa92 f2a2 	rbit	r2, r2
 8004052:	60fa      	str	r2, [r7, #12]
  return result;
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	fab2 f282 	clz	r2, r2
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	f002 021f 	and.w	r2, r2, #31
 8004066:	2101      	movs	r1, #1
 8004068:	fa01 f202 	lsl.w	r2, r1, r2
 800406c:	4013      	ands	r3, r2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0b7      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004072:	4b6d      	ldr	r3, [pc, #436]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	496a      	ldr	r1, [pc, #424]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004080:	4313      	orrs	r3, r2
 8004082:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004084:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800408c:	4b66      	ldr	r3, [pc, #408]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	4a65      	ldr	r2, [pc, #404]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004096:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040a4:	4b60      	ldr	r3, [pc, #384]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	f023 0203 	bic.w	r2, r3, #3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	495d      	ldr	r1, [pc, #372]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d008      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040c2:	4b59      	ldr	r3, [pc, #356]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	4956      	ldr	r1, [pc, #344]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040e0:	4b51      	ldr	r3, [pc, #324]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	494e      	ldr	r1, [pc, #312]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d008      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040fe:	4b4a      	ldr	r3, [pc, #296]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	f023 0210 	bic.w	r2, r3, #16
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	4947      	ldr	r1, [pc, #284]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800410c:	4313      	orrs	r3, r2
 800410e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800411c:	4b42      	ldr	r3, [pc, #264]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	493f      	ldr	r1, [pc, #252]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800412a:	4313      	orrs	r3, r2
 800412c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d008      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800413a:	4b3b      	ldr	r3, [pc, #236]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	f023 0220 	bic.w	r2, r3, #32
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	4938      	ldr	r1, [pc, #224]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004148:	4313      	orrs	r3, r2
 800414a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004158:	4b33      	ldr	r3, [pc, #204]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	4930      	ldr	r1, [pc, #192]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004166:	4313      	orrs	r3, r2
 8004168:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004176:	4b2c      	ldr	r3, [pc, #176]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	4929      	ldr	r1, [pc, #164]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004184:	4313      	orrs	r3, r2
 8004186:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004194:	4b24      	ldr	r3, [pc, #144]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	4921      	ldr	r1, [pc, #132]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d008      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041b2:	4b1d      	ldr	r3, [pc, #116]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	491a      	ldr	r1, [pc, #104]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80041d0:	4b15      	ldr	r3, [pc, #84]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	4912      	ldr	r1, [pc, #72]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d008      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80041ee:	4b0e      	ldr	r3, [pc, #56]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	490b      	ldr	r1, [pc, #44]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800420c:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004218:	4903      	ldr	r1, [pc, #12]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800421a:	4313      	orrs	r3, r2
 800421c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3748      	adds	r7, #72	; 0x48
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40021000 	.word	0x40021000

0800422c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e09d      	b.n	800437a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	2b00      	cmp	r3, #0
 8004244:	d108      	bne.n	8004258 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800424e:	d009      	beq.n	8004264 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	61da      	str	r2, [r3, #28]
 8004256:	e005      	b.n	8004264 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fc ffd4 	bl	800122c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800429a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042a4:	d902      	bls.n	80042ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	e002      	b.n	80042b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80042ba:	d007      	beq.n	80042cc <HAL_SPI_Init+0xa0>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042c4:	d002      	beq.n	80042cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430e:	ea42 0103 	orr.w	r1, r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	0c1b      	lsrs	r3, r3, #16
 8004328:	f003 0204 	and.w	r2, r3, #4
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004348:	ea42 0103 	orr.w	r1, r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004368:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e049      	b.n	8004428 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d106      	bne.n	80043ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7fc ff81 	bl	80012b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2202      	movs	r2, #2
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3304      	adds	r3, #4
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f000 ff37 	bl	8005234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e049      	b.n	80044d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fc ff76 	bl	8001348 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f000 fee0 	bl	8005234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d109      	bne.n	8004504 <HAL_TIM_PWM_Start+0x24>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	bf14      	ite	ne
 80044fc:	2301      	movne	r3, #1
 80044fe:	2300      	moveq	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	e03c      	b.n	800457e <HAL_TIM_PWM_Start+0x9e>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b04      	cmp	r3, #4
 8004508:	d109      	bne.n	800451e <HAL_TIM_PWM_Start+0x3e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b01      	cmp	r3, #1
 8004514:	bf14      	ite	ne
 8004516:	2301      	movne	r3, #1
 8004518:	2300      	moveq	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	e02f      	b.n	800457e <HAL_TIM_PWM_Start+0x9e>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d109      	bne.n	8004538 <HAL_TIM_PWM_Start+0x58>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e022      	b.n	800457e <HAL_TIM_PWM_Start+0x9e>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b0c      	cmp	r3, #12
 800453c:	d109      	bne.n	8004552 <HAL_TIM_PWM_Start+0x72>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b01      	cmp	r3, #1
 8004548:	bf14      	ite	ne
 800454a:	2301      	movne	r3, #1
 800454c:	2300      	moveq	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	e015      	b.n	800457e <HAL_TIM_PWM_Start+0x9e>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b10      	cmp	r3, #16
 8004556:	d109      	bne.n	800456c <HAL_TIM_PWM_Start+0x8c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	bf14      	ite	ne
 8004564:	2301      	movne	r3, #1
 8004566:	2300      	moveq	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	e008      	b.n	800457e <HAL_TIM_PWM_Start+0x9e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b01      	cmp	r3, #1
 8004576:	bf14      	ite	ne
 8004578:	2301      	movne	r3, #1
 800457a:	2300      	moveq	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e097      	b.n	80046b6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d104      	bne.n	8004596 <HAL_TIM_PWM_Start+0xb6>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004594:	e023      	b.n	80045de <HAL_TIM_PWM_Start+0xfe>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b04      	cmp	r3, #4
 800459a:	d104      	bne.n	80045a6 <HAL_TIM_PWM_Start+0xc6>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a4:	e01b      	b.n	80045de <HAL_TIM_PWM_Start+0xfe>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d104      	bne.n	80045b6 <HAL_TIM_PWM_Start+0xd6>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045b4:	e013      	b.n	80045de <HAL_TIM_PWM_Start+0xfe>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b0c      	cmp	r3, #12
 80045ba:	d104      	bne.n	80045c6 <HAL_TIM_PWM_Start+0xe6>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045c4:	e00b      	b.n	80045de <HAL_TIM_PWM_Start+0xfe>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b10      	cmp	r3, #16
 80045ca:	d104      	bne.n	80045d6 <HAL_TIM_PWM_Start+0xf6>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d4:	e003      	b.n	80045de <HAL_TIM_PWM_Start+0xfe>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2202      	movs	r2, #2
 80045da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2201      	movs	r2, #1
 80045e4:	6839      	ldr	r1, [r7, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f001 fb42 	bl	8005c70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a33      	ldr	r2, [pc, #204]	; (80046c0 <HAL_TIM_PWM_Start+0x1e0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <HAL_TIM_PWM_Start+0x13e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a32      	ldr	r2, [pc, #200]	; (80046c4 <HAL_TIM_PWM_Start+0x1e4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00e      	beq.n	800461e <HAL_TIM_PWM_Start+0x13e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a30      	ldr	r2, [pc, #192]	; (80046c8 <HAL_TIM_PWM_Start+0x1e8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_TIM_PWM_Start+0x13e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a2f      	ldr	r2, [pc, #188]	; (80046cc <HAL_TIM_PWM_Start+0x1ec>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d004      	beq.n	800461e <HAL_TIM_PWM_Start+0x13e>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a2d      	ldr	r2, [pc, #180]	; (80046d0 <HAL_TIM_PWM_Start+0x1f0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d101      	bne.n	8004622 <HAL_TIM_PWM_Start+0x142>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <HAL_TIM_PWM_Start+0x144>
 8004622:	2300      	movs	r3, #0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d007      	beq.n	8004638 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004636:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a20      	ldr	r2, [pc, #128]	; (80046c0 <HAL_TIM_PWM_Start+0x1e0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d018      	beq.n	8004674 <HAL_TIM_PWM_Start+0x194>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464a:	d013      	beq.n	8004674 <HAL_TIM_PWM_Start+0x194>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a20      	ldr	r2, [pc, #128]	; (80046d4 <HAL_TIM_PWM_Start+0x1f4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00e      	beq.n	8004674 <HAL_TIM_PWM_Start+0x194>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1f      	ldr	r2, [pc, #124]	; (80046d8 <HAL_TIM_PWM_Start+0x1f8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d009      	beq.n	8004674 <HAL_TIM_PWM_Start+0x194>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a17      	ldr	r2, [pc, #92]	; (80046c4 <HAL_TIM_PWM_Start+0x1e4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d004      	beq.n	8004674 <HAL_TIM_PWM_Start+0x194>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a16      	ldr	r2, [pc, #88]	; (80046c8 <HAL_TIM_PWM_Start+0x1e8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d115      	bne.n	80046a0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	4b18      	ldr	r3, [pc, #96]	; (80046dc <HAL_TIM_PWM_Start+0x1fc>)
 800467c:	4013      	ands	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b06      	cmp	r3, #6
 8004684:	d015      	beq.n	80046b2 <HAL_TIM_PWM_Start+0x1d2>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468c:	d011      	beq.n	80046b2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0201 	orr.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469e:	e008      	b.n	80046b2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	e000      	b.n	80046b4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40012c00 	.word	0x40012c00
 80046c4:	40013400 	.word	0x40013400
 80046c8:	40014000 	.word	0x40014000
 80046cc:	40014400 	.word	0x40014400
 80046d0:	40014800 	.word	0x40014800
 80046d4:	40000400 	.word	0x40000400
 80046d8:	40000800 	.word	0x40000800
 80046dc:	00010007 	.word	0x00010007

080046e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e049      	b.n	8004786 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f841 	bl	800478e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f000 fd88 	bl	8005234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d104      	bne.n	80047c2 <HAL_TIM_IC_Start_IT+0x1e>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	e023      	b.n	800480a <HAL_TIM_IC_Start_IT+0x66>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d104      	bne.n	80047d2 <HAL_TIM_IC_Start_IT+0x2e>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	e01b      	b.n	800480a <HAL_TIM_IC_Start_IT+0x66>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d104      	bne.n	80047e2 <HAL_TIM_IC_Start_IT+0x3e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	e013      	b.n	800480a <HAL_TIM_IC_Start_IT+0x66>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b0c      	cmp	r3, #12
 80047e6:	d104      	bne.n	80047f2 <HAL_TIM_IC_Start_IT+0x4e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	e00b      	b.n	800480a <HAL_TIM_IC_Start_IT+0x66>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b10      	cmp	r3, #16
 80047f6:	d104      	bne.n	8004802 <HAL_TIM_IC_Start_IT+0x5e>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	e003      	b.n	800480a <HAL_TIM_IC_Start_IT+0x66>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004808:	b2db      	uxtb	r3, r3
 800480a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d104      	bne.n	800481c <HAL_TIM_IC_Start_IT+0x78>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004818:	b2db      	uxtb	r3, r3
 800481a:	e013      	b.n	8004844 <HAL_TIM_IC_Start_IT+0xa0>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b04      	cmp	r3, #4
 8004820:	d104      	bne.n	800482c <HAL_TIM_IC_Start_IT+0x88>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004828:	b2db      	uxtb	r3, r3
 800482a:	e00b      	b.n	8004844 <HAL_TIM_IC_Start_IT+0xa0>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b08      	cmp	r3, #8
 8004830:	d104      	bne.n	800483c <HAL_TIM_IC_Start_IT+0x98>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004838:	b2db      	uxtb	r3, r3
 800483a:	e003      	b.n	8004844 <HAL_TIM_IC_Start_IT+0xa0>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004842:	b2db      	uxtb	r3, r3
 8004844:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004846:	7bbb      	ldrb	r3, [r7, #14]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d102      	bne.n	8004852 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800484c:	7b7b      	ldrb	r3, [r7, #13]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d001      	beq.n	8004856 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e0d8      	b.n	8004a08 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <HAL_TIM_IC_Start_IT+0xc2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004864:	e023      	b.n	80048ae <HAL_TIM_IC_Start_IT+0x10a>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b04      	cmp	r3, #4
 800486a:	d104      	bne.n	8004876 <HAL_TIM_IC_Start_IT+0xd2>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004874:	e01b      	b.n	80048ae <HAL_TIM_IC_Start_IT+0x10a>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b08      	cmp	r3, #8
 800487a:	d104      	bne.n	8004886 <HAL_TIM_IC_Start_IT+0xe2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004884:	e013      	b.n	80048ae <HAL_TIM_IC_Start_IT+0x10a>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b0c      	cmp	r3, #12
 800488a:	d104      	bne.n	8004896 <HAL_TIM_IC_Start_IT+0xf2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004894:	e00b      	b.n	80048ae <HAL_TIM_IC_Start_IT+0x10a>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b10      	cmp	r3, #16
 800489a:	d104      	bne.n	80048a6 <HAL_TIM_IC_Start_IT+0x102>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048a4:	e003      	b.n	80048ae <HAL_TIM_IC_Start_IT+0x10a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2202      	movs	r2, #2
 80048aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d104      	bne.n	80048be <HAL_TIM_IC_Start_IT+0x11a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048bc:	e013      	b.n	80048e6 <HAL_TIM_IC_Start_IT+0x142>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d104      	bne.n	80048ce <HAL_TIM_IC_Start_IT+0x12a>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048cc:	e00b      	b.n	80048e6 <HAL_TIM_IC_Start_IT+0x142>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d104      	bne.n	80048de <HAL_TIM_IC_Start_IT+0x13a>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048dc:	e003      	b.n	80048e6 <HAL_TIM_IC_Start_IT+0x142>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	d841      	bhi.n	8004970 <HAL_TIM_IC_Start_IT+0x1cc>
 80048ec:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <HAL_TIM_IC_Start_IT+0x150>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004929 	.word	0x08004929
 80048f8:	08004971 	.word	0x08004971
 80048fc:	08004971 	.word	0x08004971
 8004900:	08004971 	.word	0x08004971
 8004904:	0800493b 	.word	0x0800493b
 8004908:	08004971 	.word	0x08004971
 800490c:	08004971 	.word	0x08004971
 8004910:	08004971 	.word	0x08004971
 8004914:	0800494d 	.word	0x0800494d
 8004918:	08004971 	.word	0x08004971
 800491c:	08004971 	.word	0x08004971
 8004920:	08004971 	.word	0x08004971
 8004924:	0800495f 	.word	0x0800495f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0202 	orr.w	r2, r2, #2
 8004936:	60da      	str	r2, [r3, #12]
      break;
 8004938:	e01d      	b.n	8004976 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0204 	orr.w	r2, r2, #4
 8004948:	60da      	str	r2, [r3, #12]
      break;
 800494a:	e014      	b.n	8004976 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0208 	orr.w	r2, r2, #8
 800495a:	60da      	str	r2, [r3, #12]
      break;
 800495c:	e00b      	b.n	8004976 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f042 0210 	orr.w	r2, r2, #16
 800496c:	60da      	str	r2, [r3, #12]
      break;
 800496e:	e002      	b.n	8004976 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
      break;
 8004974:	bf00      	nop
  }

  if (status == HAL_OK)
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d144      	bne.n	8004a06 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2201      	movs	r2, #1
 8004982:	6839      	ldr	r1, [r7, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f001 f973 	bl	8005c70 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a20      	ldr	r2, [pc, #128]	; (8004a10 <HAL_TIM_IC_Start_IT+0x26c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d018      	beq.n	80049c6 <HAL_TIM_IC_Start_IT+0x222>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499c:	d013      	beq.n	80049c6 <HAL_TIM_IC_Start_IT+0x222>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1c      	ldr	r2, [pc, #112]	; (8004a14 <HAL_TIM_IC_Start_IT+0x270>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00e      	beq.n	80049c6 <HAL_TIM_IC_Start_IT+0x222>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1a      	ldr	r2, [pc, #104]	; (8004a18 <HAL_TIM_IC_Start_IT+0x274>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d009      	beq.n	80049c6 <HAL_TIM_IC_Start_IT+0x222>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a19      	ldr	r2, [pc, #100]	; (8004a1c <HAL_TIM_IC_Start_IT+0x278>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d004      	beq.n	80049c6 <HAL_TIM_IC_Start_IT+0x222>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a17      	ldr	r2, [pc, #92]	; (8004a20 <HAL_TIM_IC_Start_IT+0x27c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d115      	bne.n	80049f2 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <HAL_TIM_IC_Start_IT+0x280>)
 80049ce:	4013      	ands	r3, r2
 80049d0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b06      	cmp	r3, #6
 80049d6:	d015      	beq.n	8004a04 <HAL_TIM_IC_Start_IT+0x260>
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049de:	d011      	beq.n	8004a04 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f0:	e008      	b.n	8004a04 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 0201 	orr.w	r2, r2, #1
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	e000      	b.n	8004a06 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a04:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40012c00 	.word	0x40012c00
 8004a14:	40000400 	.word	0x40000400
 8004a18:	40000800 	.word	0x40000800
 8004a1c:	40013400 	.word	0x40013400
 8004a20:	40014000 	.word	0x40014000
 8004a24:	00010007 	.word	0x00010007

08004a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d122      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d11b      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0202 	mvn.w	r2, #2
 8004a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fb fdc2 	bl	80005f4 <HAL_TIM_IC_CaptureCallback>
 8004a70:	e005      	b.n	8004a7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fbc0 	bl	80051f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 fbc7 	bl	800520c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d122      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d11b      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0204 	mvn.w	r2, #4
 8004aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2202      	movs	r2, #2
 8004aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fb fd98 	bl	80005f4 <HAL_TIM_IC_CaptureCallback>
 8004ac4:	e005      	b.n	8004ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fb96 	bl	80051f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fb9d 	bl	800520c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d122      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d11b      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0208 	mvn.w	r2, #8
 8004afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2204      	movs	r2, #4
 8004b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fb fd6e 	bl	80005f4 <HAL_TIM_IC_CaptureCallback>
 8004b18:	e005      	b.n	8004b26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fb6c 	bl	80051f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fb73 	bl	800520c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0310 	and.w	r3, r3, #16
 8004b36:	2b10      	cmp	r3, #16
 8004b38:	d122      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d11b      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0210 	mvn.w	r2, #16
 8004b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2208      	movs	r2, #8
 8004b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fb fd44 	bl	80005f4 <HAL_TIM_IC_CaptureCallback>
 8004b6c:	e005      	b.n	8004b7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fb42 	bl	80051f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fb49 	bl	800520c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d10e      	bne.n	8004bac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d107      	bne.n	8004bac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0201 	mvn.w	r2, #1
 8004ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fb1c 	bl	80051e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb6:	2b80      	cmp	r3, #128	; 0x80
 8004bb8:	d10e      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc4:	2b80      	cmp	r3, #128	; 0x80
 8004bc6:	d107      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f001 f8fc 	bl	8005dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be6:	d10e      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf2:	2b80      	cmp	r3, #128	; 0x80
 8004bf4:	d107      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f001 f8ef 	bl	8005de4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c10:	2b40      	cmp	r3, #64	; 0x40
 8004c12:	d10e      	bne.n	8004c32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1e:	2b40      	cmp	r3, #64	; 0x40
 8004c20:	d107      	bne.n	8004c32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 faf7 	bl	8005220 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	f003 0320 	and.w	r3, r3, #32
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d10e      	bne.n	8004c5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	d107      	bne.n	8004c5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f06f 0220 	mvn.w	r2, #32
 8004c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f001 f8af 	bl	8005dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c5e:	bf00      	nop
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b086      	sub	sp, #24
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e088      	b.n	8004d96 <HAL_TIM_IC_ConfigChannel+0x130>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d11b      	bne.n	8004cca <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	6819      	ldr	r1, [r3, #0]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f000 fe2d 	bl	8005900 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	699a      	ldr	r2, [r3, #24]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 020c 	bic.w	r2, r2, #12
 8004cb4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6999      	ldr	r1, [r3, #24]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	619a      	str	r2, [r3, #24]
 8004cc8:	e060      	b.n	8004d8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d11c      	bne.n	8004d0a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6818      	ldr	r0, [r3, #0]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	6819      	ldr	r1, [r3, #0]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f000 fea5 	bl	8005a2e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004cf2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6999      	ldr	r1, [r3, #24]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	021a      	lsls	r2, r3, #8
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	619a      	str	r2, [r3, #24]
 8004d08:	e040      	b.n	8004d8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d11b      	bne.n	8004d48 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	6819      	ldr	r1, [r3, #0]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f000 fef2 	bl	8005b08 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69da      	ldr	r2, [r3, #28]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 020c 	bic.w	r2, r2, #12
 8004d32:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	69d9      	ldr	r1, [r3, #28]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	61da      	str	r2, [r3, #28]
 8004d46:	e021      	b.n	8004d8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b0c      	cmp	r3, #12
 8004d4c:	d11c      	bne.n	8004d88 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6818      	ldr	r0, [r3, #0]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	6819      	ldr	r1, [r3, #0]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f000 ff0f 	bl	8005b80 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d70:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69d9      	ldr	r1, [r3, #28]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	021a      	lsls	r2, r3, #8
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	61da      	str	r2, [r3, #28]
 8004d86:	e001      	b.n	8004d8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
	...

08004da0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e0ff      	b.n	8004fbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b14      	cmp	r3, #20
 8004dca:	f200 80f0 	bhi.w	8004fae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004dce:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004e29 	.word	0x08004e29
 8004dd8:	08004faf 	.word	0x08004faf
 8004ddc:	08004faf 	.word	0x08004faf
 8004de0:	08004faf 	.word	0x08004faf
 8004de4:	08004e69 	.word	0x08004e69
 8004de8:	08004faf 	.word	0x08004faf
 8004dec:	08004faf 	.word	0x08004faf
 8004df0:	08004faf 	.word	0x08004faf
 8004df4:	08004eab 	.word	0x08004eab
 8004df8:	08004faf 	.word	0x08004faf
 8004dfc:	08004faf 	.word	0x08004faf
 8004e00:	08004faf 	.word	0x08004faf
 8004e04:	08004eeb 	.word	0x08004eeb
 8004e08:	08004faf 	.word	0x08004faf
 8004e0c:	08004faf 	.word	0x08004faf
 8004e10:	08004faf 	.word	0x08004faf
 8004e14:	08004f2d 	.word	0x08004f2d
 8004e18:	08004faf 	.word	0x08004faf
 8004e1c:	08004faf 	.word	0x08004faf
 8004e20:	08004faf 	.word	0x08004faf
 8004e24:	08004f6d 	.word	0x08004f6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68b9      	ldr	r1, [r7, #8]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fa90 	bl	8005354 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0208 	orr.w	r2, r2, #8
 8004e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0204 	bic.w	r2, r2, #4
 8004e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6999      	ldr	r1, [r3, #24]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	691a      	ldr	r2, [r3, #16]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	619a      	str	r2, [r3, #24]
      break;
 8004e66:	e0a5      	b.n	8004fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fb00 	bl	8005474 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6999      	ldr	r1, [r3, #24]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	021a      	lsls	r2, r3, #8
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	619a      	str	r2, [r3, #24]
      break;
 8004ea8:	e084      	b.n	8004fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68b9      	ldr	r1, [r7, #8]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fb69 	bl	8005588 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69da      	ldr	r2, [r3, #28]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f042 0208 	orr.w	r2, r2, #8
 8004ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69da      	ldr	r2, [r3, #28]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0204 	bic.w	r2, r2, #4
 8004ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69d9      	ldr	r1, [r3, #28]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	61da      	str	r2, [r3, #28]
      break;
 8004ee8:	e064      	b.n	8004fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fbd1 	bl	8005698 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69da      	ldr	r2, [r3, #28]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69d9      	ldr	r1, [r3, #28]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	021a      	lsls	r2, r3, #8
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	61da      	str	r2, [r3, #28]
      break;
 8004f2a:	e043      	b.n	8004fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fc1a 	bl	800576c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0208 	orr.w	r2, r2, #8
 8004f46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0204 	bic.w	r2, r2, #4
 8004f56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	691a      	ldr	r2, [r3, #16]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f6a:	e023      	b.n	8004fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 fc5e 	bl	8005834 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	021a      	lsls	r2, r3, #8
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fac:	e002      	b.n	8004fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop

08004fc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_TIM_ConfigClockSource+0x1c>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e0b6      	b.n	8005152 <HAL_TIM_ConfigClockSource+0x18a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005002:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800500e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005020:	d03e      	beq.n	80050a0 <HAL_TIM_ConfigClockSource+0xd8>
 8005022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005026:	f200 8087 	bhi.w	8005138 <HAL_TIM_ConfigClockSource+0x170>
 800502a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502e:	f000 8086 	beq.w	800513e <HAL_TIM_ConfigClockSource+0x176>
 8005032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005036:	d87f      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x170>
 8005038:	2b70      	cmp	r3, #112	; 0x70
 800503a:	d01a      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0xaa>
 800503c:	2b70      	cmp	r3, #112	; 0x70
 800503e:	d87b      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x170>
 8005040:	2b60      	cmp	r3, #96	; 0x60
 8005042:	d050      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x11e>
 8005044:	2b60      	cmp	r3, #96	; 0x60
 8005046:	d877      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x170>
 8005048:	2b50      	cmp	r3, #80	; 0x50
 800504a:	d03c      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0xfe>
 800504c:	2b50      	cmp	r3, #80	; 0x50
 800504e:	d873      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x170>
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d058      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0x13e>
 8005054:	2b40      	cmp	r3, #64	; 0x40
 8005056:	d86f      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x170>
 8005058:	2b30      	cmp	r3, #48	; 0x30
 800505a:	d064      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0x15e>
 800505c:	2b30      	cmp	r3, #48	; 0x30
 800505e:	d86b      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x170>
 8005060:	2b20      	cmp	r3, #32
 8005062:	d060      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0x15e>
 8005064:	2b20      	cmp	r3, #32
 8005066:	d867      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x170>
 8005068:	2b00      	cmp	r3, #0
 800506a:	d05c      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0x15e>
 800506c:	2b10      	cmp	r3, #16
 800506e:	d05a      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0x15e>
 8005070:	e062      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	6899      	ldr	r1, [r3, #8]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f000 fdd5 	bl	8005c30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005094:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	609a      	str	r2, [r3, #8]
      break;
 800509e:	e04f      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6818      	ldr	r0, [r3, #0]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	6899      	ldr	r1, [r3, #8]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f000 fdbe 	bl	8005c30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050c2:	609a      	str	r2, [r3, #8]
      break;
 80050c4:	e03c      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	6859      	ldr	r1, [r3, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	461a      	mov	r2, r3
 80050d4:	f000 fc7c 	bl	80059d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2150      	movs	r1, #80	; 0x50
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fd8b 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 80050e4:	e02c      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	6859      	ldr	r1, [r3, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	461a      	mov	r2, r3
 80050f4:	f000 fcd8 	bl	8005aa8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2160      	movs	r1, #96	; 0x60
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fd7b 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 8005104:	e01c      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	6859      	ldr	r1, [r3, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	461a      	mov	r2, r3
 8005114:	f000 fc5c 	bl	80059d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2140      	movs	r1, #64	; 0x40
 800511e:	4618      	mov	r0, r3
 8005120:	f000 fd6b 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 8005124:	e00c      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4619      	mov	r1, r3
 8005130:	4610      	mov	r0, r2
 8005132:	f000 fd62 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 8005136:	e003      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
      break;
 800513c:	e000      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800513e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005150:	7bfb      	ldrb	r3, [r7, #15]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b0c      	cmp	r3, #12
 800516e:	d831      	bhi.n	80051d4 <HAL_TIM_ReadCapturedValue+0x78>
 8005170:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005176:	bf00      	nop
 8005178:	080051ad 	.word	0x080051ad
 800517c:	080051d5 	.word	0x080051d5
 8005180:	080051d5 	.word	0x080051d5
 8005184:	080051d5 	.word	0x080051d5
 8005188:	080051b7 	.word	0x080051b7
 800518c:	080051d5 	.word	0x080051d5
 8005190:	080051d5 	.word	0x080051d5
 8005194:	080051d5 	.word	0x080051d5
 8005198:	080051c1 	.word	0x080051c1
 800519c:	080051d5 	.word	0x080051d5
 80051a0:	080051d5 	.word	0x080051d5
 80051a4:	080051d5 	.word	0x080051d5
 80051a8:	080051cb 	.word	0x080051cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b2:	60fb      	str	r3, [r7, #12]

      break;
 80051b4:	e00f      	b.n	80051d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	60fb      	str	r3, [r7, #12]

      break;
 80051be:	e00a      	b.n	80051d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c6:	60fb      	str	r3, [r7, #12]

      break;
 80051c8:	e005      	b.n	80051d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	60fb      	str	r3, [r7, #12]

      break;
 80051d2:	e000      	b.n	80051d6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80051d4:	bf00      	nop
  }

  return tmpreg;
 80051d6:	68fb      	ldr	r3, [r7, #12]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a3c      	ldr	r2, [pc, #240]	; (8005338 <TIM_Base_SetConfig+0x104>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00f      	beq.n	800526c <TIM_Base_SetConfig+0x38>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005252:	d00b      	beq.n	800526c <TIM_Base_SetConfig+0x38>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a39      	ldr	r2, [pc, #228]	; (800533c <TIM_Base_SetConfig+0x108>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d007      	beq.n	800526c <TIM_Base_SetConfig+0x38>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a38      	ldr	r2, [pc, #224]	; (8005340 <TIM_Base_SetConfig+0x10c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d003      	beq.n	800526c <TIM_Base_SetConfig+0x38>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a37      	ldr	r2, [pc, #220]	; (8005344 <TIM_Base_SetConfig+0x110>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d108      	bne.n	800527e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a2d      	ldr	r2, [pc, #180]	; (8005338 <TIM_Base_SetConfig+0x104>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d01b      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528c:	d017      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a2a      	ldr	r2, [pc, #168]	; (800533c <TIM_Base_SetConfig+0x108>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a29      	ldr	r2, [pc, #164]	; (8005340 <TIM_Base_SetConfig+0x10c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00f      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a28      	ldr	r2, [pc, #160]	; (8005344 <TIM_Base_SetConfig+0x110>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00b      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a27      	ldr	r2, [pc, #156]	; (8005348 <TIM_Base_SetConfig+0x114>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d007      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a26      	ldr	r2, [pc, #152]	; (800534c <TIM_Base_SetConfig+0x118>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d003      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a25      	ldr	r2, [pc, #148]	; (8005350 <TIM_Base_SetConfig+0x11c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d108      	bne.n	80052d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a10      	ldr	r2, [pc, #64]	; (8005338 <TIM_Base_SetConfig+0x104>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00f      	beq.n	800531c <TIM_Base_SetConfig+0xe8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a11      	ldr	r2, [pc, #68]	; (8005344 <TIM_Base_SetConfig+0x110>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00b      	beq.n	800531c <TIM_Base_SetConfig+0xe8>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a10      	ldr	r2, [pc, #64]	; (8005348 <TIM_Base_SetConfig+0x114>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d007      	beq.n	800531c <TIM_Base_SetConfig+0xe8>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a0f      	ldr	r2, [pc, #60]	; (800534c <TIM_Base_SetConfig+0x118>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <TIM_Base_SetConfig+0xe8>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a0e      	ldr	r2, [pc, #56]	; (8005350 <TIM_Base_SetConfig+0x11c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d103      	bne.n	8005324 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	691a      	ldr	r2, [r3, #16]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	615a      	str	r2, [r3, #20]
}
 800532a:	bf00      	nop
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	40012c00 	.word	0x40012c00
 800533c:	40000400 	.word	0x40000400
 8005340:	40000800 	.word	0x40000800
 8005344:	40013400 	.word	0x40013400
 8005348:	40014000 	.word	0x40014000
 800534c:	40014400 	.word	0x40014400
 8005350:	40014800 	.word	0x40014800

08005354 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	f023 0201 	bic.w	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0303 	bic.w	r3, r3, #3
 800538e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f023 0302 	bic.w	r3, r3, #2
 80053a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a2c      	ldr	r2, [pc, #176]	; (8005460 <TIM_OC1_SetConfig+0x10c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00f      	beq.n	80053d4 <TIM_OC1_SetConfig+0x80>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a2b      	ldr	r2, [pc, #172]	; (8005464 <TIM_OC1_SetConfig+0x110>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00b      	beq.n	80053d4 <TIM_OC1_SetConfig+0x80>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a2a      	ldr	r2, [pc, #168]	; (8005468 <TIM_OC1_SetConfig+0x114>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d007      	beq.n	80053d4 <TIM_OC1_SetConfig+0x80>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a29      	ldr	r2, [pc, #164]	; (800546c <TIM_OC1_SetConfig+0x118>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d003      	beq.n	80053d4 <TIM_OC1_SetConfig+0x80>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a28      	ldr	r2, [pc, #160]	; (8005470 <TIM_OC1_SetConfig+0x11c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d10c      	bne.n	80053ee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f023 0308 	bic.w	r3, r3, #8
 80053da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f023 0304 	bic.w	r3, r3, #4
 80053ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a1b      	ldr	r2, [pc, #108]	; (8005460 <TIM_OC1_SetConfig+0x10c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00f      	beq.n	8005416 <TIM_OC1_SetConfig+0xc2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a1a      	ldr	r2, [pc, #104]	; (8005464 <TIM_OC1_SetConfig+0x110>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00b      	beq.n	8005416 <TIM_OC1_SetConfig+0xc2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a19      	ldr	r2, [pc, #100]	; (8005468 <TIM_OC1_SetConfig+0x114>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d007      	beq.n	8005416 <TIM_OC1_SetConfig+0xc2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a18      	ldr	r2, [pc, #96]	; (800546c <TIM_OC1_SetConfig+0x118>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d003      	beq.n	8005416 <TIM_OC1_SetConfig+0xc2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a17      	ldr	r2, [pc, #92]	; (8005470 <TIM_OC1_SetConfig+0x11c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d111      	bne.n	800543a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800541c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	621a      	str	r2, [r3, #32]
}
 8005454:	bf00      	nop
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40013400 	.word	0x40013400
 8005468:	40014000 	.word	0x40014000
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800

08005474 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	f023 0210 	bic.w	r2, r3, #16
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f023 0320 	bic.w	r3, r3, #32
 80054c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a28      	ldr	r2, [pc, #160]	; (8005574 <TIM_OC2_SetConfig+0x100>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d003      	beq.n	80054e0 <TIM_OC2_SetConfig+0x6c>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a27      	ldr	r2, [pc, #156]	; (8005578 <TIM_OC2_SetConfig+0x104>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d10d      	bne.n	80054fc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a1d      	ldr	r2, [pc, #116]	; (8005574 <TIM_OC2_SetConfig+0x100>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00f      	beq.n	8005524 <TIM_OC2_SetConfig+0xb0>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a1c      	ldr	r2, [pc, #112]	; (8005578 <TIM_OC2_SetConfig+0x104>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00b      	beq.n	8005524 <TIM_OC2_SetConfig+0xb0>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a1b      	ldr	r2, [pc, #108]	; (800557c <TIM_OC2_SetConfig+0x108>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d007      	beq.n	8005524 <TIM_OC2_SetConfig+0xb0>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a1a      	ldr	r2, [pc, #104]	; (8005580 <TIM_OC2_SetConfig+0x10c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <TIM_OC2_SetConfig+0xb0>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a19      	ldr	r2, [pc, #100]	; (8005584 <TIM_OC2_SetConfig+0x110>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d113      	bne.n	800554c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800552a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005532:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40012c00 	.word	0x40012c00
 8005578:	40013400 	.word	0x40013400
 800557c:	40014000 	.word	0x40014000
 8005580:	40014400 	.word	0x40014400
 8005584:	40014800 	.word	0x40014800

08005588 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0303 	bic.w	r3, r3, #3
 80055c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a27      	ldr	r2, [pc, #156]	; (8005684 <TIM_OC3_SetConfig+0xfc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d003      	beq.n	80055f2 <TIM_OC3_SetConfig+0x6a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a26      	ldr	r2, [pc, #152]	; (8005688 <TIM_OC3_SetConfig+0x100>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d10d      	bne.n	800560e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	021b      	lsls	r3, r3, #8
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800560c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a1c      	ldr	r2, [pc, #112]	; (8005684 <TIM_OC3_SetConfig+0xfc>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00f      	beq.n	8005636 <TIM_OC3_SetConfig+0xae>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a1b      	ldr	r2, [pc, #108]	; (8005688 <TIM_OC3_SetConfig+0x100>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00b      	beq.n	8005636 <TIM_OC3_SetConfig+0xae>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a1a      	ldr	r2, [pc, #104]	; (800568c <TIM_OC3_SetConfig+0x104>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d007      	beq.n	8005636 <TIM_OC3_SetConfig+0xae>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a19      	ldr	r2, [pc, #100]	; (8005690 <TIM_OC3_SetConfig+0x108>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d003      	beq.n	8005636 <TIM_OC3_SetConfig+0xae>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a18      	ldr	r2, [pc, #96]	; (8005694 <TIM_OC3_SetConfig+0x10c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d113      	bne.n	800565e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800563c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	4313      	orrs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	621a      	str	r2, [r3, #32]
}
 8005678:	bf00      	nop
 800567a:	371c      	adds	r7, #28
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	40012c00 	.word	0x40012c00
 8005688:	40013400 	.word	0x40013400
 800568c:	40014000 	.word	0x40014000
 8005690:	40014400 	.word	0x40014400
 8005694:	40014800 	.word	0x40014800

08005698 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	021b      	lsls	r3, r3, #8
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4313      	orrs	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	031b      	lsls	r3, r3, #12
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a18      	ldr	r2, [pc, #96]	; (8005758 <TIM_OC4_SetConfig+0xc0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00f      	beq.n	800571c <TIM_OC4_SetConfig+0x84>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a17      	ldr	r2, [pc, #92]	; (800575c <TIM_OC4_SetConfig+0xc4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00b      	beq.n	800571c <TIM_OC4_SetConfig+0x84>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a16      	ldr	r2, [pc, #88]	; (8005760 <TIM_OC4_SetConfig+0xc8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d007      	beq.n	800571c <TIM_OC4_SetConfig+0x84>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a15      	ldr	r2, [pc, #84]	; (8005764 <TIM_OC4_SetConfig+0xcc>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_OC4_SetConfig+0x84>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a14      	ldr	r2, [pc, #80]	; (8005768 <TIM_OC4_SetConfig+0xd0>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d109      	bne.n	8005730 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005722:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	019b      	lsls	r3, r3, #6
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40012c00 	.word	0x40012c00
 800575c:	40013400 	.word	0x40013400
 8005760:	40014000 	.word	0x40014000
 8005764:	40014400 	.word	0x40014400
 8005768:	40014800 	.word	0x40014800

0800576c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800579a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80057b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	041b      	lsls	r3, r3, #16
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a17      	ldr	r2, [pc, #92]	; (8005820 <TIM_OC5_SetConfig+0xb4>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00f      	beq.n	80057e6 <TIM_OC5_SetConfig+0x7a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a16      	ldr	r2, [pc, #88]	; (8005824 <TIM_OC5_SetConfig+0xb8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00b      	beq.n	80057e6 <TIM_OC5_SetConfig+0x7a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a15      	ldr	r2, [pc, #84]	; (8005828 <TIM_OC5_SetConfig+0xbc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d007      	beq.n	80057e6 <TIM_OC5_SetConfig+0x7a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a14      	ldr	r2, [pc, #80]	; (800582c <TIM_OC5_SetConfig+0xc0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d003      	beq.n	80057e6 <TIM_OC5_SetConfig+0x7a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a13      	ldr	r2, [pc, #76]	; (8005830 <TIM_OC5_SetConfig+0xc4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d109      	bne.n	80057fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	621a      	str	r2, [r3, #32]
}
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	40012c00 	.word	0x40012c00
 8005824:	40013400 	.word	0x40013400
 8005828:	40014000 	.word	0x40014000
 800582c:	40014400 	.word	0x40014400
 8005830:	40014800 	.word	0x40014800

08005834 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800587a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	051b      	lsls	r3, r3, #20
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a18      	ldr	r2, [pc, #96]	; (80058ec <TIM_OC6_SetConfig+0xb8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00f      	beq.n	80058b0 <TIM_OC6_SetConfig+0x7c>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a17      	ldr	r2, [pc, #92]	; (80058f0 <TIM_OC6_SetConfig+0xbc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00b      	beq.n	80058b0 <TIM_OC6_SetConfig+0x7c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a16      	ldr	r2, [pc, #88]	; (80058f4 <TIM_OC6_SetConfig+0xc0>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d007      	beq.n	80058b0 <TIM_OC6_SetConfig+0x7c>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <TIM_OC6_SetConfig+0xc4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d003      	beq.n	80058b0 <TIM_OC6_SetConfig+0x7c>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a14      	ldr	r2, [pc, #80]	; (80058fc <TIM_OC6_SetConfig+0xc8>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d109      	bne.n	80058c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	029b      	lsls	r3, r3, #10
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	621a      	str	r2, [r3, #32]
}
 80058de:	bf00      	nop
 80058e0:	371c      	adds	r7, #28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	40012c00 	.word	0x40012c00
 80058f0:	40013400 	.word	0x40013400
 80058f4:	40014000 	.word	0x40014000
 80058f8:	40014400 	.word	0x40014400
 80058fc:	40014800 	.word	0x40014800

08005900 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f023 0201 	bic.w	r2, r3, #1
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4a24      	ldr	r2, [pc, #144]	; (80059bc <TIM_TI1_SetConfig+0xbc>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d013      	beq.n	8005956 <TIM_TI1_SetConfig+0x56>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005934:	d00f      	beq.n	8005956 <TIM_TI1_SetConfig+0x56>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4a21      	ldr	r2, [pc, #132]	; (80059c0 <TIM_TI1_SetConfig+0xc0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00b      	beq.n	8005956 <TIM_TI1_SetConfig+0x56>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4a20      	ldr	r2, [pc, #128]	; (80059c4 <TIM_TI1_SetConfig+0xc4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d007      	beq.n	8005956 <TIM_TI1_SetConfig+0x56>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4a1f      	ldr	r2, [pc, #124]	; (80059c8 <TIM_TI1_SetConfig+0xc8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d003      	beq.n	8005956 <TIM_TI1_SetConfig+0x56>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4a1e      	ldr	r2, [pc, #120]	; (80059cc <TIM_TI1_SetConfig+0xcc>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d101      	bne.n	800595a <TIM_TI1_SetConfig+0x5a>
 8005956:	2301      	movs	r3, #1
 8005958:	e000      	b.n	800595c <TIM_TI1_SetConfig+0x5c>
 800595a:	2300      	movs	r3, #0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d008      	beq.n	8005972 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f023 0303 	bic.w	r3, r3, #3
 8005966:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	e003      	b.n	800597a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f043 0301 	orr.w	r3, r3, #1
 8005978:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005980:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	b2db      	uxtb	r3, r3
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f023 030a 	bic.w	r3, r3, #10
 8005994:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f003 030a 	and.w	r3, r3, #10
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	4313      	orrs	r3, r2
 80059a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	621a      	str	r2, [r3, #32]
}
 80059ae:	bf00      	nop
 80059b0:	371c      	adds	r7, #28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40012c00 	.word	0x40012c00
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40000800 	.word	0x40000800
 80059c8:	40013400 	.word	0x40013400
 80059cc:	40014000 	.word	0x40014000

080059d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	f023 0201 	bic.w	r2, r3, #1
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f023 030a 	bic.w	r3, r3, #10
 8005a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	621a      	str	r2, [r3, #32]
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b087      	sub	sp, #28
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	607a      	str	r2, [r7, #4]
 8005a3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f023 0210 	bic.w	r2, r3, #16
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	031b      	lsls	r3, r3, #12
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	621a      	str	r2, [r3, #32]
}
 8005a9c:	bf00      	nop
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	f023 0210 	bic.w	r2, r3, #16
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ad2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	031b      	lsls	r3, r3, #12
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ae4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	621a      	str	r2, [r3, #32]
}
 8005afc:	bf00      	nop
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f023 0303 	bic.w	r3, r3, #3
 8005b34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	011b      	lsls	r3, r3, #4
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005b58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	621a      	str	r2, [r3, #32]
}
 8005b74:	bf00      	nop
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	031b      	lsls	r3, r3, #12
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005bd2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	031b      	lsls	r3, r3, #12
 8005bd8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	621a      	str	r2, [r3, #32]
}
 8005bee:	bf00      	nop
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	f043 0307 	orr.w	r3, r3, #7
 8005c1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	609a      	str	r2, [r3, #8]
}
 8005c24:	bf00      	nop
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	021a      	lsls	r2, r3, #8
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	609a      	str	r2, [r3, #8]
}
 8005c64:	bf00      	nop
 8005c66:	371c      	adds	r7, #28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f003 031f 	and.w	r3, r3, #31
 8005c82:	2201      	movs	r2, #1
 8005c84:	fa02 f303 	lsl.w	r3, r2, r3
 8005c88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a1a      	ldr	r2, [r3, #32]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	43db      	mvns	r3, r3
 8005c92:	401a      	ands	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a1a      	ldr	r2, [r3, #32]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 031f 	and.w	r3, r3, #31
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	621a      	str	r2, [r3, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
	...

08005cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e063      	b.n	8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a2b      	ldr	r2, [pc, #172]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d004      	beq.n	8005d08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a2a      	ldr	r2, [pc, #168]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d108      	bne.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a1b      	ldr	r2, [pc, #108]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d018      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d46:	d013      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a18      	ldr	r2, [pc, #96]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00e      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a17      	ldr	r2, [pc, #92]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d009      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a12      	ldr	r2, [pc, #72]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d004      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a13      	ldr	r2, [pc, #76]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d10c      	bne.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	40012c00 	.word	0x40012c00
 8005dac:	40013400 	.word	0x40013400
 8005db0:	40000400 	.word	0x40000400
 8005db4:	40000800 	.word	0x40000800
 8005db8:	40014000 	.word	0x40014000

08005dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e00:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005e04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	43db      	mvns	r3, r3
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	4013      	ands	r3, r2
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e2e:	b084      	sub	sp, #16
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	f107 0014 	add.w	r0, r7, #20
 8005e3c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	b004      	add	sp, #16
 8005e6e:	4770      	bx	lr

08005e70 <atoi>:
 8005e70:	220a      	movs	r2, #10
 8005e72:	2100      	movs	r1, #0
 8005e74:	f000 b97c 	b.w	8006170 <strtol>

08005e78 <__errno>:
 8005e78:	4b01      	ldr	r3, [pc, #4]	; (8005e80 <__errno+0x8>)
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	2000004c 	.word	0x2000004c

08005e84 <__libc_init_array>:
 8005e84:	b570      	push	{r4, r5, r6, lr}
 8005e86:	4d0d      	ldr	r5, [pc, #52]	; (8005ebc <__libc_init_array+0x38>)
 8005e88:	4c0d      	ldr	r4, [pc, #52]	; (8005ec0 <__libc_init_array+0x3c>)
 8005e8a:	1b64      	subs	r4, r4, r5
 8005e8c:	10a4      	asrs	r4, r4, #2
 8005e8e:	2600      	movs	r6, #0
 8005e90:	42a6      	cmp	r6, r4
 8005e92:	d109      	bne.n	8005ea8 <__libc_init_array+0x24>
 8005e94:	4d0b      	ldr	r5, [pc, #44]	; (8005ec4 <__libc_init_array+0x40>)
 8005e96:	4c0c      	ldr	r4, [pc, #48]	; (8005ec8 <__libc_init_array+0x44>)
 8005e98:	f000 f982 	bl	80061a0 <_init>
 8005e9c:	1b64      	subs	r4, r4, r5
 8005e9e:	10a4      	asrs	r4, r4, #2
 8005ea0:	2600      	movs	r6, #0
 8005ea2:	42a6      	cmp	r6, r4
 8005ea4:	d105      	bne.n	8005eb2 <__libc_init_array+0x2e>
 8005ea6:	bd70      	pop	{r4, r5, r6, pc}
 8005ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eac:	4798      	blx	r3
 8005eae:	3601      	adds	r6, #1
 8005eb0:	e7ee      	b.n	8005e90 <__libc_init_array+0xc>
 8005eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eb6:	4798      	blx	r3
 8005eb8:	3601      	adds	r6, #1
 8005eba:	e7f2      	b.n	8005ea2 <__libc_init_array+0x1e>
 8005ebc:	08006314 	.word	0x08006314
 8005ec0:	08006314 	.word	0x08006314
 8005ec4:	08006314 	.word	0x08006314
 8005ec8:	08006318 	.word	0x08006318

08005ecc <malloc>:
 8005ecc:	4b02      	ldr	r3, [pc, #8]	; (8005ed8 <malloc+0xc>)
 8005ece:	4601      	mov	r1, r0
 8005ed0:	6818      	ldr	r0, [r3, #0]
 8005ed2:	f000 b82b 	b.w	8005f2c <_malloc_r>
 8005ed6:	bf00      	nop
 8005ed8:	2000004c 	.word	0x2000004c

08005edc <memset>:
 8005edc:	4402      	add	r2, r0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d100      	bne.n	8005ee6 <memset+0xa>
 8005ee4:	4770      	bx	lr
 8005ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eea:	e7f9      	b.n	8005ee0 <memset+0x4>

08005eec <sbrk_aligned>:
 8005eec:	b570      	push	{r4, r5, r6, lr}
 8005eee:	4e0e      	ldr	r6, [pc, #56]	; (8005f28 <sbrk_aligned+0x3c>)
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	6831      	ldr	r1, [r6, #0]
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	b911      	cbnz	r1, 8005efe <sbrk_aligned+0x12>
 8005ef8:	f000 f88c 	bl	8006014 <_sbrk_r>
 8005efc:	6030      	str	r0, [r6, #0]
 8005efe:	4621      	mov	r1, r4
 8005f00:	4628      	mov	r0, r5
 8005f02:	f000 f887 	bl	8006014 <_sbrk_r>
 8005f06:	1c43      	adds	r3, r0, #1
 8005f08:	d00a      	beq.n	8005f20 <sbrk_aligned+0x34>
 8005f0a:	1cc4      	adds	r4, r0, #3
 8005f0c:	f024 0403 	bic.w	r4, r4, #3
 8005f10:	42a0      	cmp	r0, r4
 8005f12:	d007      	beq.n	8005f24 <sbrk_aligned+0x38>
 8005f14:	1a21      	subs	r1, r4, r0
 8005f16:	4628      	mov	r0, r5
 8005f18:	f000 f87c 	bl	8006014 <_sbrk_r>
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d101      	bne.n	8005f24 <sbrk_aligned+0x38>
 8005f20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005f24:	4620      	mov	r0, r4
 8005f26:	bd70      	pop	{r4, r5, r6, pc}
 8005f28:	20000588 	.word	0x20000588

08005f2c <_malloc_r>:
 8005f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f30:	1ccd      	adds	r5, r1, #3
 8005f32:	f025 0503 	bic.w	r5, r5, #3
 8005f36:	3508      	adds	r5, #8
 8005f38:	2d0c      	cmp	r5, #12
 8005f3a:	bf38      	it	cc
 8005f3c:	250c      	movcc	r5, #12
 8005f3e:	2d00      	cmp	r5, #0
 8005f40:	4607      	mov	r7, r0
 8005f42:	db01      	blt.n	8005f48 <_malloc_r+0x1c>
 8005f44:	42a9      	cmp	r1, r5
 8005f46:	d905      	bls.n	8005f54 <_malloc_r+0x28>
 8005f48:	230c      	movs	r3, #12
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	2600      	movs	r6, #0
 8005f4e:	4630      	mov	r0, r6
 8005f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f54:	4e2e      	ldr	r6, [pc, #184]	; (8006010 <_malloc_r+0xe4>)
 8005f56:	f000 f915 	bl	8006184 <__malloc_lock>
 8005f5a:	6833      	ldr	r3, [r6, #0]
 8005f5c:	461c      	mov	r4, r3
 8005f5e:	bb34      	cbnz	r4, 8005fae <_malloc_r+0x82>
 8005f60:	4629      	mov	r1, r5
 8005f62:	4638      	mov	r0, r7
 8005f64:	f7ff ffc2 	bl	8005eec <sbrk_aligned>
 8005f68:	1c43      	adds	r3, r0, #1
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	d14d      	bne.n	800600a <_malloc_r+0xde>
 8005f6e:	6834      	ldr	r4, [r6, #0]
 8005f70:	4626      	mov	r6, r4
 8005f72:	2e00      	cmp	r6, #0
 8005f74:	d140      	bne.n	8005ff8 <_malloc_r+0xcc>
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	4631      	mov	r1, r6
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	eb04 0803 	add.w	r8, r4, r3
 8005f80:	f000 f848 	bl	8006014 <_sbrk_r>
 8005f84:	4580      	cmp	r8, r0
 8005f86:	d13a      	bne.n	8005ffe <_malloc_r+0xd2>
 8005f88:	6821      	ldr	r1, [r4, #0]
 8005f8a:	3503      	adds	r5, #3
 8005f8c:	1a6d      	subs	r5, r5, r1
 8005f8e:	f025 0503 	bic.w	r5, r5, #3
 8005f92:	3508      	adds	r5, #8
 8005f94:	2d0c      	cmp	r5, #12
 8005f96:	bf38      	it	cc
 8005f98:	250c      	movcc	r5, #12
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	f7ff ffa5 	bl	8005eec <sbrk_aligned>
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	d02b      	beq.n	8005ffe <_malloc_r+0xd2>
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	442b      	add	r3, r5
 8005faa:	6023      	str	r3, [r4, #0]
 8005fac:	e00e      	b.n	8005fcc <_malloc_r+0xa0>
 8005fae:	6822      	ldr	r2, [r4, #0]
 8005fb0:	1b52      	subs	r2, r2, r5
 8005fb2:	d41e      	bmi.n	8005ff2 <_malloc_r+0xc6>
 8005fb4:	2a0b      	cmp	r2, #11
 8005fb6:	d916      	bls.n	8005fe6 <_malloc_r+0xba>
 8005fb8:	1961      	adds	r1, r4, r5
 8005fba:	42a3      	cmp	r3, r4
 8005fbc:	6025      	str	r5, [r4, #0]
 8005fbe:	bf18      	it	ne
 8005fc0:	6059      	strne	r1, [r3, #4]
 8005fc2:	6863      	ldr	r3, [r4, #4]
 8005fc4:	bf08      	it	eq
 8005fc6:	6031      	streq	r1, [r6, #0]
 8005fc8:	5162      	str	r2, [r4, r5]
 8005fca:	604b      	str	r3, [r1, #4]
 8005fcc:	4638      	mov	r0, r7
 8005fce:	f104 060b 	add.w	r6, r4, #11
 8005fd2:	f000 f8dd 	bl	8006190 <__malloc_unlock>
 8005fd6:	f026 0607 	bic.w	r6, r6, #7
 8005fda:	1d23      	adds	r3, r4, #4
 8005fdc:	1af2      	subs	r2, r6, r3
 8005fde:	d0b6      	beq.n	8005f4e <_malloc_r+0x22>
 8005fe0:	1b9b      	subs	r3, r3, r6
 8005fe2:	50a3      	str	r3, [r4, r2]
 8005fe4:	e7b3      	b.n	8005f4e <_malloc_r+0x22>
 8005fe6:	6862      	ldr	r2, [r4, #4]
 8005fe8:	42a3      	cmp	r3, r4
 8005fea:	bf0c      	ite	eq
 8005fec:	6032      	streq	r2, [r6, #0]
 8005fee:	605a      	strne	r2, [r3, #4]
 8005ff0:	e7ec      	b.n	8005fcc <_malloc_r+0xa0>
 8005ff2:	4623      	mov	r3, r4
 8005ff4:	6864      	ldr	r4, [r4, #4]
 8005ff6:	e7b2      	b.n	8005f5e <_malloc_r+0x32>
 8005ff8:	4634      	mov	r4, r6
 8005ffa:	6876      	ldr	r6, [r6, #4]
 8005ffc:	e7b9      	b.n	8005f72 <_malloc_r+0x46>
 8005ffe:	230c      	movs	r3, #12
 8006000:	603b      	str	r3, [r7, #0]
 8006002:	4638      	mov	r0, r7
 8006004:	f000 f8c4 	bl	8006190 <__malloc_unlock>
 8006008:	e7a1      	b.n	8005f4e <_malloc_r+0x22>
 800600a:	6025      	str	r5, [r4, #0]
 800600c:	e7de      	b.n	8005fcc <_malloc_r+0xa0>
 800600e:	bf00      	nop
 8006010:	20000584 	.word	0x20000584

08006014 <_sbrk_r>:
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	4d06      	ldr	r5, [pc, #24]	; (8006030 <_sbrk_r+0x1c>)
 8006018:	2300      	movs	r3, #0
 800601a:	4604      	mov	r4, r0
 800601c:	4608      	mov	r0, r1
 800601e:	602b      	str	r3, [r5, #0]
 8006020:	f7fb fa6e 	bl	8001500 <_sbrk>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d102      	bne.n	800602e <_sbrk_r+0x1a>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	b103      	cbz	r3, 800602e <_sbrk_r+0x1a>
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	2000058c 	.word	0x2000058c

08006034 <strcpy>:
 8006034:	4603      	mov	r3, r0
 8006036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800603a:	f803 2b01 	strb.w	r2, [r3], #1
 800603e:	2a00      	cmp	r2, #0
 8006040:	d1f9      	bne.n	8006036 <strcpy+0x2>
 8006042:	4770      	bx	lr

08006044 <strncmp>:
 8006044:	b510      	push	{r4, lr}
 8006046:	b17a      	cbz	r2, 8006068 <strncmp+0x24>
 8006048:	4603      	mov	r3, r0
 800604a:	3901      	subs	r1, #1
 800604c:	1884      	adds	r4, r0, r2
 800604e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006052:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006056:	4290      	cmp	r0, r2
 8006058:	d101      	bne.n	800605e <strncmp+0x1a>
 800605a:	42a3      	cmp	r3, r4
 800605c:	d101      	bne.n	8006062 <strncmp+0x1e>
 800605e:	1a80      	subs	r0, r0, r2
 8006060:	bd10      	pop	{r4, pc}
 8006062:	2800      	cmp	r0, #0
 8006064:	d1f3      	bne.n	800604e <strncmp+0xa>
 8006066:	e7fa      	b.n	800605e <strncmp+0x1a>
 8006068:	4610      	mov	r0, r2
 800606a:	e7f9      	b.n	8006060 <strncmp+0x1c>

0800606c <_strtol_l.constprop.0>:
 800606c:	2b01      	cmp	r3, #1
 800606e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006072:	d001      	beq.n	8006078 <_strtol_l.constprop.0+0xc>
 8006074:	2b24      	cmp	r3, #36	; 0x24
 8006076:	d906      	bls.n	8006086 <_strtol_l.constprop.0+0x1a>
 8006078:	f7ff fefe 	bl	8005e78 <__errno>
 800607c:	2316      	movs	r3, #22
 800607e:	6003      	str	r3, [r0, #0]
 8006080:	2000      	movs	r0, #0
 8006082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006086:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800616c <_strtol_l.constprop.0+0x100>
 800608a:	460d      	mov	r5, r1
 800608c:	462e      	mov	r6, r5
 800608e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006092:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006096:	f017 0708 	ands.w	r7, r7, #8
 800609a:	d1f7      	bne.n	800608c <_strtol_l.constprop.0+0x20>
 800609c:	2c2d      	cmp	r4, #45	; 0x2d
 800609e:	d132      	bne.n	8006106 <_strtol_l.constprop.0+0x9a>
 80060a0:	782c      	ldrb	r4, [r5, #0]
 80060a2:	2701      	movs	r7, #1
 80060a4:	1cb5      	adds	r5, r6, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d05b      	beq.n	8006162 <_strtol_l.constprop.0+0xf6>
 80060aa:	2b10      	cmp	r3, #16
 80060ac:	d109      	bne.n	80060c2 <_strtol_l.constprop.0+0x56>
 80060ae:	2c30      	cmp	r4, #48	; 0x30
 80060b0:	d107      	bne.n	80060c2 <_strtol_l.constprop.0+0x56>
 80060b2:	782c      	ldrb	r4, [r5, #0]
 80060b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80060b8:	2c58      	cmp	r4, #88	; 0x58
 80060ba:	d14d      	bne.n	8006158 <_strtol_l.constprop.0+0xec>
 80060bc:	786c      	ldrb	r4, [r5, #1]
 80060be:	2310      	movs	r3, #16
 80060c0:	3502      	adds	r5, #2
 80060c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80060c6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80060ca:	f04f 0c00 	mov.w	ip, #0
 80060ce:	fbb8 f9f3 	udiv	r9, r8, r3
 80060d2:	4666      	mov	r6, ip
 80060d4:	fb03 8a19 	mls	sl, r3, r9, r8
 80060d8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80060dc:	f1be 0f09 	cmp.w	lr, #9
 80060e0:	d816      	bhi.n	8006110 <_strtol_l.constprop.0+0xa4>
 80060e2:	4674      	mov	r4, lr
 80060e4:	42a3      	cmp	r3, r4
 80060e6:	dd24      	ble.n	8006132 <_strtol_l.constprop.0+0xc6>
 80060e8:	f1bc 0f00 	cmp.w	ip, #0
 80060ec:	db1e      	blt.n	800612c <_strtol_l.constprop.0+0xc0>
 80060ee:	45b1      	cmp	r9, r6
 80060f0:	d31c      	bcc.n	800612c <_strtol_l.constprop.0+0xc0>
 80060f2:	d101      	bne.n	80060f8 <_strtol_l.constprop.0+0x8c>
 80060f4:	45a2      	cmp	sl, r4
 80060f6:	db19      	blt.n	800612c <_strtol_l.constprop.0+0xc0>
 80060f8:	fb06 4603 	mla	r6, r6, r3, r4
 80060fc:	f04f 0c01 	mov.w	ip, #1
 8006100:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006104:	e7e8      	b.n	80060d8 <_strtol_l.constprop.0+0x6c>
 8006106:	2c2b      	cmp	r4, #43	; 0x2b
 8006108:	bf04      	itt	eq
 800610a:	782c      	ldrbeq	r4, [r5, #0]
 800610c:	1cb5      	addeq	r5, r6, #2
 800610e:	e7ca      	b.n	80060a6 <_strtol_l.constprop.0+0x3a>
 8006110:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006114:	f1be 0f19 	cmp.w	lr, #25
 8006118:	d801      	bhi.n	800611e <_strtol_l.constprop.0+0xb2>
 800611a:	3c37      	subs	r4, #55	; 0x37
 800611c:	e7e2      	b.n	80060e4 <_strtol_l.constprop.0+0x78>
 800611e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006122:	f1be 0f19 	cmp.w	lr, #25
 8006126:	d804      	bhi.n	8006132 <_strtol_l.constprop.0+0xc6>
 8006128:	3c57      	subs	r4, #87	; 0x57
 800612a:	e7db      	b.n	80060e4 <_strtol_l.constprop.0+0x78>
 800612c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006130:	e7e6      	b.n	8006100 <_strtol_l.constprop.0+0x94>
 8006132:	f1bc 0f00 	cmp.w	ip, #0
 8006136:	da05      	bge.n	8006144 <_strtol_l.constprop.0+0xd8>
 8006138:	2322      	movs	r3, #34	; 0x22
 800613a:	6003      	str	r3, [r0, #0]
 800613c:	4646      	mov	r6, r8
 800613e:	b942      	cbnz	r2, 8006152 <_strtol_l.constprop.0+0xe6>
 8006140:	4630      	mov	r0, r6
 8006142:	e79e      	b.n	8006082 <_strtol_l.constprop.0+0x16>
 8006144:	b107      	cbz	r7, 8006148 <_strtol_l.constprop.0+0xdc>
 8006146:	4276      	negs	r6, r6
 8006148:	2a00      	cmp	r2, #0
 800614a:	d0f9      	beq.n	8006140 <_strtol_l.constprop.0+0xd4>
 800614c:	f1bc 0f00 	cmp.w	ip, #0
 8006150:	d000      	beq.n	8006154 <_strtol_l.constprop.0+0xe8>
 8006152:	1e69      	subs	r1, r5, #1
 8006154:	6011      	str	r1, [r2, #0]
 8006156:	e7f3      	b.n	8006140 <_strtol_l.constprop.0+0xd4>
 8006158:	2430      	movs	r4, #48	; 0x30
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1b1      	bne.n	80060c2 <_strtol_l.constprop.0+0x56>
 800615e:	2308      	movs	r3, #8
 8006160:	e7af      	b.n	80060c2 <_strtol_l.constprop.0+0x56>
 8006162:	2c30      	cmp	r4, #48	; 0x30
 8006164:	d0a5      	beq.n	80060b2 <_strtol_l.constprop.0+0x46>
 8006166:	230a      	movs	r3, #10
 8006168:	e7ab      	b.n	80060c2 <_strtol_l.constprop.0+0x56>
 800616a:	bf00      	nop
 800616c:	08006211 	.word	0x08006211

08006170 <strtol>:
 8006170:	4613      	mov	r3, r2
 8006172:	460a      	mov	r2, r1
 8006174:	4601      	mov	r1, r0
 8006176:	4802      	ldr	r0, [pc, #8]	; (8006180 <strtol+0x10>)
 8006178:	6800      	ldr	r0, [r0, #0]
 800617a:	f7ff bf77 	b.w	800606c <_strtol_l.constprop.0>
 800617e:	bf00      	nop
 8006180:	2000004c 	.word	0x2000004c

08006184 <__malloc_lock>:
 8006184:	4801      	ldr	r0, [pc, #4]	; (800618c <__malloc_lock+0x8>)
 8006186:	f000 b809 	b.w	800619c <__retarget_lock_acquire_recursive>
 800618a:	bf00      	nop
 800618c:	20000590 	.word	0x20000590

08006190 <__malloc_unlock>:
 8006190:	4801      	ldr	r0, [pc, #4]	; (8006198 <__malloc_unlock+0x8>)
 8006192:	f000 b804 	b.w	800619e <__retarget_lock_release_recursive>
 8006196:	bf00      	nop
 8006198:	20000590 	.word	0x20000590

0800619c <__retarget_lock_acquire_recursive>:
 800619c:	4770      	bx	lr

0800619e <__retarget_lock_release_recursive>:
 800619e:	4770      	bx	lr

080061a0 <_init>:
 80061a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a2:	bf00      	nop
 80061a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a6:	bc08      	pop	{r3}
 80061a8:	469e      	mov	lr, r3
 80061aa:	4770      	bx	lr

080061ac <_fini>:
 80061ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ae:	bf00      	nop
 80061b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b2:	bc08      	pop	{r3}
 80061b4:	469e      	mov	lr, r3
 80061b6:	4770      	bx	lr
